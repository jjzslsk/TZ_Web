<template>
<div>
    <!-- <div class="actions actions-main"> -->
    <div class="actions">
        <!-- <div>
            <span>是否启用自定义流程：</span>
            <c-switch v-model="query.XXXPROP_DUTY_SCHEDULING_CUSTOM"></c-switch>
            <span class="desc">*红色表示在默认流程上添加的流程，或时间的变更</span>
        </div> -->
        <c-button type="add" @click="inputItem({})">新增</c-button>
    </div>
    <div class="block-main">
        <div class="list">
            <page-table ref="table" remote="requestDutySchedulingList" :formatPayload="formatPayload" :row-class-name="rowClassName" :hidePagination="true">
                <el-table-column prop="" label="序号" width="50px"></el-table-column>
                <el-table-column prop="name" label="任务名称" />
                <el-table-column prop="startTime" label="任务开始时间" width="120px" />
                <el-table-column prop="endTime" label="任务结束时间" width="120px" />
                <el-table-column prop="remark" label="任务说明" />
                <el-table-column label="是否提醒" width="80px">
                    <template slot-scope="scope">
                        <c-switch v-model="scope.row.remind" @change="monitorSwitch(scope.row)"></c-switch>
                    </template>
                </el-table-column>
                <el-table-column label="是否为产品" width="100px">
                    <template slot-scope="scope">
                        <c-switch v-model="scope.row.product" @change="monitorSwitch(scope.row)"></c-switch>
                    </template>
                </el-table-column>
                <el-table-column prop="showOrder" label="执行顺序" width="80px" />
                <el-table-column prop="productInfoName" label="关联产品" />
                <!-- <el-table-column label="是否完成" width="80px">
                    <template slot-scope="scope">
                        <c-switch v-model="scope.row.finish"></c-switch>
                    </template>
                </el-table-column> -->
                <el-table-column label="状态" width="80px">
                    <template slot-scope="scope">
                        {{scope.row.finish == '1' ?'√':''}}
                    </template>
                </el-table-column>
                <el-table-column prop label="操作" width="150px">
                    <template slot-scope="scope">
                        <el-button type="text" size="small" @click="inputItem(scope.row)">编辑</el-button>
                        <c-button type="del" @click="onConfirmDelete(scope.row)">
                            <span class="text-danger">删除</span>
                        </c-button>
                    </template>
                </el-table-column>
            </page-table>
        </div>
    </div>
    <dialog-form @success="submitSuccess" title="值班流程配置" :visible.sync="visibleDialogFormItem" :getPayload="()=>formItem" :confirmDisabled="!formItem.name" remote="requestDialogFormDutySchedulingItemInput" v-if="formItem">
        <!-- <template v-slot:default="{ form }"> -->
        <template>
        {{formItem}}
            <el-form-item label="任务来源" label-width="120px">
                <el-select v-model="formItem.source" placeholder="请选择">
                    <el-option label="任务来源" value="0"></el-option>
                    <el-option label="岗位" value="1"></el-option>
                    <el-option label="个人临时派发" value="2"></el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="任务名称" label-width="120px">
                <el-input v-model="formItem.name" autocomplete="off"></el-input>
            </el-form-item>
            <el-form-item label="任务说明" label-width="120px">
                <el-input v-model="formItem.remark" autocomplete="off"></el-input>
            </el-form-item>
            <el-form-item label="执行顺序" label-width="120px">
                <el-input v-model="formItem.showOrder" autocomplete="off"></el-input>
            </el-form-item>
                <!-- <el-date-picker v-model="formItemTimeRange" type="datetimerange" range-separator="至" start-placeholder="开始日期" end-placeholder="结束日期">
                </el-date-picker> -->
            <el-form-item label="起止时间" label-width="120px">
                  <el-time-picker
                    value-format="HH:mm"
                    is-range
                    format="HH:mm"
                    v-model="formItemTimeRange"
                    range-separator="至"
                    start-placeholder="开始时间"
                    end-placeholder="结束时间"
                    placeholder="选择时间范围">
                </el-time-picker>
            </el-form-item>
            <el-form-item label="是否提醒" label-width="120px">
                <c-switch v-model="formItem.remind"></c-switch>
            </el-form-item>
            <el-form-item label="是否为产品" label-width="120px">
                <c-switch v-model="formItem.product"></c-switch>
            </el-form-item>
            <el-form-item label="产品选择" label-width="120px" v-if="formItem.product">
            <el-select v-model="formItem.productInfoId" placeholder="请选择">
              <el-option
                v-for="item in treeDataList"
                :label="item.label"
                :value="item.id"
                :key="item.id"
              ></el-option>
            </el-select>    
                <!-- <el-cascader v-model="formItem.productInfoId" :options="optionsOfCascaderFormInput"></el-cascader> -->
            </el-form-item>
            <el-form-item label="是否完成" label-width="120px">
                <c-switch v-model="formItem.finish"></c-switch>
            </el-form-item>
        </template>
    </dialog-form>
</div>
</template>

<script>
import {
    requestProductClassTreeList,
    requestDutySchedulingListDelItem,
    requestDialogFormDutySchedulingItemInput
} from "@/remote/";
import {
    common,
    witchCommonList,
    withCommonLeftTree
} from '../../mixins/index';
export default {
    mixins: [common, witchCommonList, withCommonLeftTree],
    data() {
        return {
            treeDataList:null,
            periodType:null,
            query: {
                XXXPROP_DUTY_SCHEDULING_CUSTOM: true
            },
            formItemTimeRange: [],
            // checkAll: false,
            optionsOfCascaderFormInput: [{
                value: 'tzsqxt',
                label: '台州市气象台',
                children: [{
                    value: 'sx',
                    label: '首席',
                    children: [{
                        value: 'dqybsh',
                        label: '短期预报稿审核'
                    }]
                }]
            }]
        };
    },
    computed: {
        actionOfListDelItem() {
            return requestDutySchedulingListDelItem;
        },
    },
    watch: {
        'formItem.productInfoId'(val){
            this.treeDataList.forEach(element => {
                if(val == element.id){
                    this.formItem.productInfoName = element.label
                    }
            });
        },
        'query.XXXPROP_DUTY_SCHEDULING_CUSTOM': function() {
            this.query.currentPage = 1;
            this.search();
        },
        formItemTimeRange(val) {
            const {
                formItem
            } = this;
            if(!val.length > 0) return
            formItem.startTime = val && val[0];
            formItem.endTime = val && val[1];
        },
        visibleDialogFormItem(data){
            //初始化弹窗
            this.formItem.remindType == '1' ? this.formItem.remindType = '1' : this.formItem.remindType = '0'
            if(!this.formItem.id) return 
        }
    },
    mounted() {
        this.requestData()
    },
    methods: {
        submitSuccess(res){
            this.onConfirmUpdate()
        },
        monitorSwitch(data){
            if(data){
            console.log("data:",data)
                let param = {
                    ...data,
                    "remind":data.remind == true ? '1':'0',
                    "product":data.product == true ? '1':'0',
            }
                requestDialogFormDutySchedulingItemInput(param).then(res=>{
                        this.onConfirmUpdate()
                })
            }
        },
        requestData(){
            const loginInfo = JSON.parse(localStorage.getItem('loginInfo',))
            this.loginInfo = loginInfo
            this.query.orgId = this.loginInfo.orgId

            requestProductClassTreeList().then(res =>{
                this.treeDataList = [];
                this.treeOfList(res.data.list);
            })
        },
        treeOfList(tree) {
            tree.map(item => {
                this.treeDataList.push(item);
                if (item.children) {
                this.treeOfList(item.children);
                }
            });
        },
        getFormItemByInputItem(item = {}) {
            if(item.startTime&&item.endTime){
                this.formItemTimeRange = [item.startTime, item.endTime];
            }else{
                this.formItemTimeRange = ['20:00','22:00']
            }
            // this.formItemTimeRange = [item.XXXPROP_DUTY_SCHEDULING_2, item.XXXPROP_DUTY_SCHEDULING_3];
            return {
                // "XXXPROP_DUTY_SCHEDULING_X4": null,
                'jobId':'asd123',
                ...item
            };
        },


        rowClassName({
            row,
            rowIndex
        }) {
            if (row.XXXPROP_DUTY_SCHEDULING_IMPRESS) {
                return 'row-impress'
            }
        }
    }
}
</script>

<style scoped>
.actions {
    margin-bottom: 10px;

    .desc {
        font-size: 15px;
        font-weight: 400;
        color: rgba(144, 147, 153, 1);
        line-height: 50px;
        padding-left: 40px;
        padding-right: 20px;
    }
}
.actions-main {
    display: flex;
    align-items: center;
    justify-content: space-between;
}
.block-main {
    display: flex;

    >.list {
        flex: 1;
    }

    .left-tree {
        border: 1px solid #ddd;
        width: 220px;
    }
}

.notition-options {
    margin-left: 52px;
    padding: 20px 25px;
    background: rgba(246, 247, 251, 1);
    border-radius: 4px;
}
</style>
