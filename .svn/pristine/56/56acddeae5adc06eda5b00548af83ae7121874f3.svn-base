<template>
<c-chart class="chartDialogResult" @mounted="onChartMounted"></c-chart>
</template>

<script>
export default {
    props: ['data'],
    computed: {
        infoOfStatic() {
            const {
                data
            } = this;

            const info = data.reduce((p, c) => {
                p[c.publishChannel] = c
                return p
            }, {});
            return info
        }
    },
    methods: {
        transformData({
            key
        }) {
            const {
                infoOfStatic
            } = this;
            const info = infoOfStatic[key];
            let res = [{
                name: '发送成功',
                color: '#71c438',
                // value: this.toPoint(info.sendSuccess)
                value: info.sendSuccess
            }, {
                name: '发送失败',
                color: '#fd5634',
                value: info.sendFail
            }, {
                name: '正在推送',
                color: '#754ffa',
                value: info.pushing
            }, {
                name: '推送成功',
                color: '#2da1f8',
                value: info.pushSuccess
            }, {
                name: '推送失败',
                color: '#f99e1a',
                value: info.pushFail
            }];

            return res;
        },
        getChartOption() {
            // const {
            //     transformData,
            // } = this;
            // const infos = [];
            // this.data.forEach(element => {
            //     let param = {}
            //     param.label = element.channelName,
            //     param.data = transformData({
            //         key: element.publishChannel
            //     })
            //     infos.push(param)
            // });
            // const title = infos.map((e, i) => ({
            //     text: e.label,
            //     bottom: 55,
            //     left: `${i * 25 + 12.5}%`,
            //     textAlign: 'center'
            // }));
            // const data = infos[0].data
            // const color = data.map(e => e.color);
            // const series = infos.map((e, i) => ({
            //     type: 'pie',
            //     clockwise: false,
            //     radius: '50%',
            //     center: ['50%', '40%'],
            //     data: e.data,
            //     animation: false,
            //     label: {
            //         formatter: '{c}'
            //     },
            //     left: `${i * 25}%`,
            //     right: `${100 - (i + 1) * 25}%`,
            //     top: 0,
            //     bottom: 0
            // }));
            // const option = {
            //     color,
            //     title,
            //     legend: {
            //         bottom: 10,
            //         left: 'center',
            //         data: data.map(e => e.name)
            //     },
            //     series
            // };
            let optionObj = {
                xAxis: {
                    type: 'category',
                    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    data: [820, 932, 901, 934, 1290, 1330, 1320],
                    type: 'line',
                    smooth: true
                }]
            }
            return optionObj
        },
        onChartMounted(chart) {
            chart.initOption({
                option: this.getChartOption()
            });
        },
    }
}
</script>

<style lang="css" scoped>
</style>
