<template>
<c-chart class="chartDialogResult" @mounted="onChartMounted"></c-chart>
</template>

<script>
export default {
    props: ['data'],
    computed: {
        infoOfStatic() {
            const {
                data
            } = this;

            const info = data.reduce((p, c) => {
                p[c.publishChannel] = c
                return p
            }, {});
            return info
        }
    },
    mounted(){
        console.log()
    },
    methods: {
        toPoint(percent){
            var str=percent.replace("%","");
            str= str/100;
            return str;
        },
        transformData({
            key
        }) {
            const {
                infoOfStatic
            } = this;
            const info = infoOfStatic[key];
            let res = [{
                name: '发送成功',
                color: 'rgba(64, 158, 255, 1)',
                value: this.toPoint(info.sendSuccess)
            }, {
                name: '发送失败',
                color: 'rgba(245, 108, 108, 1)',
                value: this.toPoint(info.sendFail)
            }, {
                name: '正在推送',
                color: 'rgba(98, 218, 172, 1)',
                value: this.toPoint(info.pushing)
            }, {
                name: '推送成功',
                color: 'rgba(100, 119, 152, 1)',
                value: this.toPoint(info.pushSuccess)
            }, {
                name: '推送失败',
                color: 'rgba(247, 191, 34, 1)',
                value: this.toPoint(info.pushFail)
            }];

            return res;
        },
        getChartOption() {
            const {
                transformData,
            } = this;

            const infos = [];
            this.data.forEach(element => {
                let param = {}
                if(element.publishChannel == 'Email'){
                    param.label = "邮件",
                    param.data = transformData({
                        key: "Email"
                    })
                }
                if(element.publishChannel == 'FAX'){
                    param.label = "传真",
                    param.data = transformData({
                        key: "FAX"
                    })
                }
                if(element.publishChannel == 'FTP'){
                    param.label = "FTP",
                    param.data = transformData({
                        key: "FTP"
                    })
                }
                if(element.publishChannel == 'Sms'){
                    param.label = "短信",
                    param.data = transformData({
                        key: "Sms"
                    })
                }
                infos.push(param)
            });

            const title = infos.map((e, i) => ({
                text: e.label,
                bottom: 55,
                left: `${i * 25 + 12.5}%`,
                textAlign: 'center'
            }));

            const data = infos[0].data
            const color = data.map(e => e.color);

            const series = infos.map((e, i) => ({
                type: 'pie',
                clockwise: false,
                radius: '50%',
                center: ['50%', '40%'],
                data: e.data,
                animation: false,
                label: {
                    formatter: '{c}'
                },
                left: `${i * 25}%`,
                right: `${100 - (i + 1) * 25}%`,
                top: 0,
                bottom: 0
            }));

            const option = {
                color,
                title,
                legend: {
                    // orient: 'vertical',
                    // top: 'middle',
                    bottom: 10,
                    left: 'center',
                    data: data.map(e => e.name)
                },
                series
            };
            console.log('option', option);
            return option
        },
        onChartMounted(chart) {
            chart.initOption({
                option: this.getChartOption()
            });
        },
    }
}
</script>

<style lang="css" scoped>
</style>
