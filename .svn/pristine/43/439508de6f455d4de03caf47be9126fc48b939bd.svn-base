<template>
<div class="duty-process-wrap">
    <!-- <div class="actions actions-main"> -->
    <div class="actions">
        <div>
            <!-- <span>是否启用自定义流程：</span>
            <c-switch v-model="query.XXXPROP_DUTY_POST_CUSTOM"></c-switch> -->
        </div>
        <c-button type="add" @click="inputItem({})">新增</c-button>
    </div>
    <div class="block-main">
        <div class="left-tree">
            <el-tree :data="dataTree" :props="defaultProps" @node-click="handleNodeClick" default-expand-all></el-tree>
            <!-- <c-tree :data='dataTree'></c-tree> -->
            <!-- <c-tree remote="requestTreeChildrenOfAreaNode" :show-checkbox="true" :default-checked-keys="['leaf3']" @click-item="onTreeClickItemAuth"></c-tree> -->
            <!-- <common-left-tree title="机构信息1" :isHeader='false' :data='dataTree'  @click-item="onTreeClickItem"></common-left-tree> -->
        </div>
        <div class="list">
            <page-table ref="table" remote="requestDutyPostList" :formatPayload="formatPayload" :hidePagination="true">
                <el-table-column prop="" label="序号" width="50px" type="index"></el-table-column>
                <el-table-column prop="name" label="任务名称" />
                <el-table-column prop="startTime" label="任务开始时间" width="120px" />
                <el-table-column prop="endTime" label="任务结束时间" width="120px" />
                <el-table-column prop="remark" label="任务说明"/>
                <el-table-column prop="showOrder" label="执行顺序" width="80px" />
                <!-- <el-table-column prop="remind" label="是否提醒" width="80px"/>
                <el-table-column prop="product" label="是否为产品" width="100px"/> -->
                <el-table-column label="是否提醒">
                    <template slot-scope="{row}">
                        {{({'true':'√','false':'X'})[row.remind]}}
                    </template>
                </el-table-column>
                <el-table-column label="是否为产品">
                    <template slot-scope="{row}">
                        {{({'true':'√','false':'X'})[row.product]}}
                    </template>
                </el-table-column>
                <!-- <el-table-column label="是否提醒" width="80px">
                    <template slot-scope="scope">
                        <c-switch v-model="scope.row.remind" @change="monitorSwitch(scope.row)"></c-switch>
                    </template>
                </el-table-column>
                <el-table-column label="是否为产品" width="100px">
                    <template slot-scope="scope">
                        <c-switch v-model="scope.row.product" @change="monitorSwitch(scope.row)"></c-switch>
                    </template>
                </el-table-column> -->
                <el-table-column prop="productInfoName" label="关联产品" />
                <el-table-column prop label="操作" width="150px">
                    <template slot-scope="scope">
                        <el-button type="text" size="small" @click="inputItem(scope.row)">编辑</el-button>
                        <c-button type="del" @click="onConfirmDelete(scope.row)">
                            <span class="text-danger">删除</span>
                        </c-button>
                    </template>
                </el-table-column>
            </page-table>
        </div>
    </div>
    <dialog-form @success="submitSuccess" title="岗位流程配置" :visible.sync="visibleDialogFormItem" :getPayload="()=>formItem" :confirmDisabled="!this.formItem.name||!this.formItem.remark||!this.formItem.jobId||!this.formItem.showOrder||!this.formItemTimeRange" remote="requestDialogFormDutyPostItemInput" v-if="formItem">
        <template>
            <el-popover
            placement="top-start"
            width="400"
            v-model="visible"
            trigger="click">
                <el-tree :data="treeDataList" :props="defaultProps" @node-click="handleNodeClickPop"></el-tree>
            </el-popover>

            <el-form-item label="岗位选择" label-width="120px">
                <el-select v-model="formItem.jobId" placeholder="请选择">
                    <el-option v-for="item in postList" :label="item.name" :value="item.id" :key="item.id"></el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="任务名称" label-width="120px">
                <el-input v-model="formItem.name" autocomplete="off"></el-input>
            </el-form-item>
            <el-form-item label="任务说明" label-width="120px">
                <el-input v-model="formItem.remark" autocomplete="off"></el-input>
            </el-form-item>
            <el-form-item label="施行顺序" label-width="120px">
                <el-input v-model="formItem.showOrder" autocomplete="off"></el-input>
            </el-form-item>
            <el-form-item label="起止时间" label-width="120px">
                  <el-time-picker
                    value-format="HH:mm"
                    is-range
                    format="HH:mm"
                    v-model="formItemTimeRange"
                    range-separator="至"
                    start-placeholder="开始时间"
                    end-placeholder="结束时间"
                    placeholder="选择时间范围">
                </el-time-picker>
            </el-form-item>
            <el-form-item label="是否提醒" label-width="120px">
                <c-switch v-model="formItem.remind"></c-switch>
            </el-form-item>
            <div class="notition-options" v-if="formItem.remind">
                <div>
                    <el-radio-group v-model="formItem.XXXPROP_DUTY_POST_X3">
                        <el-radio-button label="XXXLABEL_DUTY_POST_month">月</el-radio-button>
                        <el-radio-button label="XXXLABEL_DUTY_POST_day">日</el-radio-button>
                        <el-radio-button label="XXXLABEL_DUTY_POST_week">周</el-radio-button>
                    </el-radio-group>
                    <!-- <span v-if="formItem.XXXPROP_DUTY_POST_X3=='XXXLABEL_DUTY_POST_day'">时间类型：</span>
                    <el-radio-group v-model="formItem.remindType" v-if="formItem.XXXPROP_DUTY_POST_X3=='XXXLABEL_DUTY_POST_day'">
                        <el-radio label="1">阳历</el-radio>
                        <el-radio label="0">阴历</el-radio>
                    </el-radio-group> -->
                    <span>时间类型：</span>
                    <el-radio-group v-model="formItem.remindType">
                        <el-radio label="1">阳历</el-radio>
                        <el-radio label="0">阴历</el-radio>
                    </el-radio-group>
                </div>
                <div>
                    <!-- {{checkedItems}} -->
                    <el-checkbox :indeterminate="isIndeterminate" v-model="checkAll" @change="handleCheckAllChange">全选</el-checkbox>
                    <div style="margin: 15px 0;"></div>
                    <el-checkbox-group v-model="checkedItems">
                        <el-checkbox v-for="(item,index) in checkItemOptions" :label="item.value" :key="index">{{item.name}}</el-checkbox>
                    </el-checkbox-group>
                </div>
            </div>
            <el-form-item label="是否为产品" label-width="120px">
                <c-switch v-model="formItem.product"></c-switch>
            </el-form-item>

            <el-form-item label="产品选择" label-width="120px" v-if="formItem.product">
               <el-input v-model="formItem.productInfoName" @click.native="inputEvent" autocomplete="off"></el-input>
            </el-form-item>
        </template>
    </dialog-form>
</div>
</template>

<script>
import {
    requestDutyPostListDelItem,
    requestPostList,
    requestTreeChildrenOfDutyPostNode,
    requestProductInfoTpyeTreeList,
    requestDialogFormDutyPostItemInput,
    requestDutyPostList
} from "@/remote/";
import {
    mapActions,mapGetters
} from 'vuex'
import {
    common,
    witchCommonList,
    withCommonLeftTree
} from '../../mixins/index';
export default {
    mixins: [common, witchCommonList, withCommonLeftTree],
    data() {
        return {
            visible: false,
            formItem:{
                XXXPROP_DUTY_POST_X3:'',
                remindDay:[],
                remindMonth:[],
                remindWeek:[],
            },
            MonthData:[
            {name:'一月',value:'1'},
            {name:'二月',value:'2'},
            {name:'三月',value:'3'},
            {name:'四月',value:'4'},
            {name:'五月',value:'5'},
            {name:'六月',value:'6'},
            {name:'七月',value:'7'},
            {name:'八月',value:'8'},
            {name:'九月',value:'9'},
            {name:'十月',value:'10'},
            {name:'十一月',value:'11'},
            {name:'十二月',value:'12'},
            ],
            WeekData:[
            {name:'一',value:'1'},
            {name:'二',value:'2'},
            {name:'三',value:'3'},
            {name:'四',value:'4'},
            {name:'五',value:'5'},
            ],
            DayData:[
            {name:'1',value:'1'},
            {name:'2',value:'2'},
            {name:'3',value:'3'},
            {name:'4',value:'4'},
            {name:'5',value:'5'},
            {name:'6',value:'6'},
            {name:'7',value:'7'},
            {name:'8',value:'8'},
            {name:'9',value:'9'},
            {name:'10',value:'10'},
            {name:'11',value:'11'},
            {name:'12',value:'12'},
            {name:'13',value:'13'},
            {name:'14',value:'14'},
            {name:'15',value:'15'},
            {name:'16',value:'16'},
            {name:'17',value:'17'},
            {name:'18',value:'18'},
            {name:'19',value:'19'},
            {name:'20',value:'20'},
            {name:'21',value:'21'},
            {name:'22',value:'22'},
            {name:'23',value:'23'},
            {name:'24',value:'24'},
            {name:'25',value:'25'},
            {name:'26',value:'26'},
            {name:'27',value:'27'},
            {name:'28',value:'28'},
            {name:'29',value:'29'},
            {name:'30',value:'30'},
            {name:'31',value:'31'},
            ],
            treeDataList:null,
            periodType:null,
            postList:null,
            dataTree: null,
            defaultProps: {
                children: 'children',
                label: 'label'
                },
            query: {
                XXXPROP_DUTY_POST_CUSTOM: true
            },
            formItemTimeRange: [],
            checkAll: null,
            checkedItems: [], //已勾选
            dateArr:{
                XXXLABEL_DUTY_POST_month:(new Array(12)).fill('').map((e, i) => ({
                    name: `${i+1}月`,
                    value: `${i+1}`
                })),
                XXXLABEL_DUTY_POST_day:(new Array(31)).fill('').map((e, i) => ({
                    name: `${i+1}`,
                    value: `${i+1}`
                })),
                XXXLABEL_DUTY_POST_week:(new Array(7)).fill('').map((e, i) => ({
                    name: `${i+1}`,
                    value: `${i+1}`
                })),
            }
        };
    },
    
    computed: {
        ...mapGetters(['accountOrgId']),
        actionOfListDelItem() {
            return requestDutyPostListDelItem;
        },
        checkItemOptions() {
            return this.formItem ? ({
                // 'XXXLABEL_DUTY_POST_month': (new Array(12)).fill('').map((e, i) => ({
                //     name: `${i+1}月`,
                //     value: `${i+1}`
                // })),
                // 'XXXLABEL_DUTY_POST_day': (new Array(31)).fill('').map((e, i) => ({
                //     name: `${i+1}`,
                //     value: `${i+1}`
                // })),
                // 'XXXLABEL_DUTY_POST_week': (new Array(7)).fill('').map((e, i) => ({
                //     name: `${i+1}`,
                //     value: `${i+1}`
                // })),
                'XXXLABEL_DUTY_POST_month': this.MonthData,
                'XXXLABEL_DUTY_POST_week': this.WeekData,
                'XXXLABEL_DUTY_POST_day': this.DayData
            })[this.formItem.XXXPROP_DUTY_POST_X3] : []

            // return this.formItem ? (this.dateArr)[this.formItem.XXXPROP_DUTY_POST_X3] : []
        },
        checkedCount() {
            const checkedItems = this.checkedItems || [];
            const checkedCount = checkedItems.length;
            return checkedCount;
        },

        //indeterminate 是否全选状态效果
        isIndeterminate() {
            const {
                checkedCount,
                checkItemOptions = []
            } = this;
            return checkedCount > 0 && checkedCount < checkItemOptions.length
        },

        //checkAll 是否全选状态  true 或者 false
        checkAll() {
            const {
                checkedCount,
                checkItemOptions = []
            } = this;
            return checkedCount == checkItemOptions.length
        }
    },
    watch: {
        'formItem.product'(val){
            if(!val){
                this.formItem.productInfoName = null
                this.formItem.productInfoId = null
            }
        },
        'query.XXXPROP_DUTY_POST_CUSTOM': function() {
            this.query.currentPage = 1;
            this.search();
        },
        formItemTimeRange(val) {
            const {
                formItem
            } = this;
            if(!val.length > 0) return
            formItem.startTime = val && val[0];
            formItem.endTime = val && val[1];
        },
        checkItemOptions() {
            // this.checkedItems = [];
        },
        'formItem.XXXPROP_DUTY_POST_X3': function(val) {
            console.log('1formItem.XXXPROP_DUTY_POST_X3::',val)
            const {
                    formItem,
                } = this;
            this.periodType = val
            // if(this.formItem.id){
            //     if (val == 'XXXLABEL_DUTY_POST_day') {
            //     this.checkedItems = this.formItem.remindDay? this.formItem.remindDay : null 
            // }
            // if (val == 'XXXLABEL_DUTY_POST_month') {
            //     this.checkedItems = this.formItem.remindMonth? this.formItem.remindMonth : null 
            // }
            // if (val == 'XXXLABEL_DUTY_POST_week') {
            //     this.checkedItems = this.formItem.remindWeek? this.formItem.remindWeek : null 
            // }
            // }

            if(this.formItem.id){
                this.checkedItems = []
                if (val == 'XXXLABEL_DUTY_POST_day') {
                    if(this.formItem.remindDay){
                            this.formItem.remindDay.forEach(i=>{
                            this.checkedItems.push(i)
                        })
                    }
                }else
                if (val == 'XXXLABEL_DUTY_POST_month') {
                    if(this.formItem.remindMonth){
                            this.formItem.remindMonth.forEach(i=>{
                            this.checkedItems.push(i)
                        })
                    }
                }else
                if (val == 'XXXLABEL_DUTY_POST_week') {
                    if(this.formItem.remindWeek){
                            this.formItem.remindWeek.forEach(i=>{
                            this.checkedItems.push(i)
                        })
                    }
                }
            }

            if(!this.formItem.id && this.formItem.remind){
                this.checkedItems = []
                if (val == 'XXXLABEL_DUTY_POST_day') {
                    if(this.formItem.remindDay){
                            this.formItem.remindDay.forEach(i=>{
                            this.checkedItems.push(i)
                        })
                    }
                }else
                if (val == 'XXXLABEL_DUTY_POST_month') {
                    if(this.formItem.remindMonth){
                            this.formItem.remindMonth.forEach(i=>{
                            this.checkedItems.push(i)
                        })
                    }
                }else
                if (val == 'XXXLABEL_DUTY_POST_week') {
                    if(this.formItem.remindWeek){
                            this.formItem.remindWeek.forEach(i=>{
                            this.checkedItems.push(i)
                        })
                    }
                }
            }
        },
        checkedItems(val){
            console.log('2checkedItems::',val)


            console.log('3checkedItems::',this.formItem.XXXPROP_DUTY_POST_X3)
            if(val.length !==  null && this.formItem.XXXPROP_DUTY_POST_X3 == 'XXXLABEL_DUTY_POST_day'){
                this.formItem.remindDay = val
            }


            const {
                formItem
            } = this;
            if(val.length !==  null && this.periodType == 'XXXLABEL_DUTY_POST_day' ){
                // if(val.length ==  null || val.length == 0)return
                formItem.remindDay = val
            }
            if(val.length !==  null && this.periodType == 'XXXLABEL_DUTY_POST_month'){
                formItem.remindMonth = val
            }
            if(val.length !==  null && this.periodType == 'XXXLABEL_DUTY_POST_week'){
                formItem.remindWeek = val
            }
        },
        visibleDialogFormItem(data){
            //初始化弹窗
            console.log('4visibleDialogFormItem::',this.periodType)
            // if(!this.formItem.id) {this.checkedItems=[]} 
            if(this.formItem.id && this.periodType == 'XXXLABEL_DUTY_POST_day'){
                // this.checkedItems = ['1','2']
            }
            // if(this.formItem.id && this.periodType == 'XXXLABEL_DUTY_POST_month'){
            //     this.checkedItems = this.formItem.remindMonth? this.formItem.remindMonth : null 
            // }
            // if(this.formItem.id && this.periodType == 'XXXLABEL_DUTY_POST_week'){
            //     this.checkedItems = this.formItem.remindWeek? this.formItem.remindWeek : null 
            // }

            if(!data){
                this.checkedItems = []
                this.formItem.remindDay = null
                this.formItem.remindMonth = null
                this.formItem.remindWeek = null
                this.periodType = ''

                this.visible = false
            }

        }
    },
    mounted() {
        this.requestData()
    },
    methods: {
        onConfirmDisabled(){
            // let state = true
            // if(!this.formItem.name||!this.formItem.remark||!this.formItem.jobId||!this.formItem.showOrder||!this.formItemTimeRange){
            //     state = false
            // }else
            // if(this.formItem.product && !this.formItem.productInfoId){
            //     state = true
            // }
            // return state
        },
        submitSuccess(res){
            this.onConfirmUpdate()
        },
        monitorSwitch(data){
            if(data){
                let param = {
                    ...data,
                    "remind":data.remind == true ? '1':'0',
                    "product":data.product == true ? '1':'0',
            }
                requestDialogFormDutyPostItemInput(param).then(res=>{
                        this.onConfirmUpdate()
                })
            }
        },
        formatPayloadLeft(payload){
            return {
                ...payload
            }
        },
        handleNodeClick(data) {
            console.log(data);
            this.lastItemClicked = data;
            this.$router.replace({
                query: {
                    id: data.id
                }
            })
        },
        inputEvent(){
            this.visible = !this.visible
        },
        handleNodeClickPop(data) {
                console.log(data)
            if(data.treeType == 'product'){
                this.formItem.productInfoId = data.id
                this.formItem.productInfoName = data.label
                this.visible = !this.visible
            }
            // else{this.$message.warning('请选择正确的产品');}
        },
        requestData(){
            const loginInfo = JSON.parse(localStorage.getItem('loginInfo',))
            this.loginInfo = loginInfo
            this.query.orgId = this.loginInfo.orgId

            requestPostList({orgId:loginInfo.orgId,pageIndex:'1',pageSize:'20'}).then(res =>{
                this.postList = res.data.list
            })
            requestTreeChildrenOfDutyPostNode({orgId:this.query.orgId}).then(res =>{
                this.dataTree = [
                    {label: '岗位',children: []},
                 ]
                this.dataTree[0].children = res.data.list
                this.dataTree[0].children.map(element => {
                    element.children = []
                    element.label = element.name
                    element.value = element.id
                });
            })

            requestProductInfoTpyeTreeList().then(res =>{
                this.treeDataList = res.data.list;

            })
        },
        treeOfList(tree) {
            tree.map(item => {
                this.treeDataList.push(item);
                if (item.children) {
                this.treeOfList(item.children);
                }
            });
        },
        getFormItemByInputItem(item = {}) {
            console.log('item:',item)
            const {
                checkedItems,
            } = this;
            const lastKeyItemClicked = checkedItems && checkedItems.id;
            if(item.startTime&&item.endTime){
                this.formItemTimeRange = [item.startTime, item.endTime];
            }else{
                this.formItemTimeRange = ['20:00','22:00']
            }
            
            if(!item.id){
                this.formItem.XXXPROP_DUTY_POST_X3=='XXXLABEL_DUTY_POST_day'
                this.periodType == 'XXXLABEL_DUTY_POST_day'
            }

            return item.id ? {//编辑
                // "XXXPROP_DUTY_POST_8": lastKeyItemClicked,
                ...item,
                remindType:item.remindType.toString(),
                "XXXPROP_DUTY_POST_X3": 'XXXLABEL_DUTY_POST_day',
            }:{//新建
                // ...item,
                // "XXXPROP_DUTY_POST_8": lastKeyItemClicked,
                "XXXPROP_DUTY_POST_X3": 'XXXLABEL_DUTY_POST_day',
                "remindType": '1',
            }
        },
        //全选事件
        handleCheckAllChange(val) {
            const {
                checkItemOptions
            } = this;
            this.checkedItems = val ? checkItemOptions.map(e => e.value) : [];
            // this.isIndeterminate = false;
        },
        handleCheckedItemChange(value) {
            let checkedCount = value.length;
            this.checkAll = checkedCount === this.cities.length;
            this.isIndeterminate = checkedCount > 0 && checkedCount < this.cities.length;
        }
    }
}
</script>

<style lang="postcss" scoped>
.actions{
    margin-bottom: 10px;
}
.actions-main {
    display: flex;
    align-items: center;
    justify-content: space-between;
}
.block-main{
    display: flex;

    >.list{
        flex: 1;
    }
    .left-tree{
        border: 1px solid #ddd;
        width: 220px;
    }
}
.notition-options{
    margin-left: 52px;
    padding: 20px 25px;
    background:rgba(246,247,251,1);
    border-radius:4px;
}
</style>
<style>
.duty-process-wrap .el-popover{
    height: 600px !important;
    overflow: auto;
}
</style>
