<template>
  <div class="product-made-home product-made-make">
    <!-- {{productMade}} -->
    <!-- {{productTabList}} -->
    <!-- {{treeDataList}} -->
    <div class="wrap-box">
      <div class="left-box">
        <el-tabs v-model="navTab" slot="border-card" type="border-card" class="product-tab-tree">
          <el-tab-pane label="产品导航" name="产品导航">
            <common-left-tree
              @success="submitSuccess"
              :isHeader="false"
              title="111产品导航"
              :data="treeData"
              @click-item="onTreeClickItem"
              :defaultExpandAll="false"
              :searchText="searchText"
            >
              <div slot="head-search" class="head-search">
                <el-input placeholder="请输入内容" prefix-icon="el-icon-search" v-model="searchText"></el-input>
              </div>
              <!-- <div slot="append" class="">
              <div>
              <span class="title">分类操作：</span><common-left-tree-actions @success="submitSuccess" :lastItemClicked="lastItemClicked" @append="onTreeAppend" @edit="onTreeEdit" @delete="onTreeDelete('requestProductClassTreeDel')"></common-left-tree-actions>
              </div>
              <div>
              <span class="title">产品操作：</span><common-left-tree-actions @success="submitSuccess" :lastItemClicked="lastItemClicked" @append="onTreeAppendMinor" @edit="onTreeEditMinor" @delete="onTreeDeleteMinor('requestProductClassTreeDelMinor')"></common-left-tree-actions>
              </div>
              </div>-->
            </common-left-tree>
          </el-tab-pane>
          <el-tab-pane label="制作流程" name="制作流程">
            <el-radio-group
              class="button-tab"
              v-model="optionsValue"
              size="mini"
              style="margin-bottom: 20px;"
            >
              <el-radio-button
                v-for="item in optionsType"
                :key="item.id"
                :label="item"
              >{{item.name}}</el-radio-button>
            </el-radio-group>
            <el-timeline v-if="activities.length > 0">
              <el-timeline-item
                v-for="(activity, index) in activities"
                style='cursor:pointer'
                :key="index"
                :icon="activity.icon"
                :type="activity.type"
                :color="activity.color"
                :size="activity.size"
                :timestamp="activity.timestamp"
                @click.native="timelineClick(activity)"
              >
              {{activity.content}}
              <div class="timeline-event" @click.stop="timelineEvent(activity)"></div>
              <el-popover
                v-if="activityItem.id == activity.id"
                placement="top"
                width="60"
                v-model="visible">
                <p>确定完成吗？</p>
                <div style="text-align: right; margin: 0">
                  <el-button size="mini" type="text" @click.stop="visible = false">取消</el-button>
                  <el-button type="primary" size="mini" @click.stop='popoverClick(activity.id)'>确定</el-button>
                </div>
              </el-popover>
              </el-timeline-item>
            </el-timeline>
            <div class="text" v-else>
              暂无记录
            </div>
          </el-tab-pane>
        </el-tabs>
        <div class="direction-icon-l" v-if='!isDirection' @click="directionLeft()">
          <i class="el-icon-arrow-right"></i>
        </div>
      </div>
      <!-- <div class="left-box">
        <div class="top-title">
          <div class="text">产品导航</div>
        </div>
        <div class="content-box">
            <el-input placeholder="请输入内容" prefix-icon="el-icon-search" v-model="searchText"></el-input>
            <div class="tree-box">
              <el-tree ref="tree" :data="treeData" @node-click="handleNodeClick" default-expand-all :filter-node-method="filterNode"></el-tree>
            </div>
        </div>
        <div class="tool-box">
          <div class="line-interval"></div>
          <div class="classify-tool">
            <span class="title">分类操作</span>
            <div class="icon-box">
            </div>
          </div>
          <div class="classify-tool product-tool">
            <span class="title">产品操作</span>
            <div class="icon-box">
              <i class="iconfont bianji"></i>
              <i class="iconfont shanchu"></i>
            </div>
          </div>
        </div>
      </div>-->

      <!-- 提示语编辑弹窗 -->
      <dialog-form
        @success="submitSuccess"
        title="提示语编辑"
        :visible.sync="visibleDialogAlert"
        :getPayload="()=>formItem"
        :confirmDisabled="true"
        remote="requestDialogFormAreaItemInput"
        v-if="formAlert"
      >
        <template>
          <div class="consult">
            <el-row :gutter="10">
              <el-col :span="6">
                <div class="consult-left">
                  <div class="top">
                    <div class="select-all">编辑区域</div>
                  </div>
                  <div class="tree">
                    <el-input
                      type="textarea"
                      :rows="20"
                      placeholder="请输入内容"
                      v-model="alertTextarea"
                    ></el-input>
                  </div>
                </div>
              </el-col>
              <el-col :span="18">
                <div class="consult-right">
                  <div class="top">
                    <div class="select-all">历史修改记录</div>
                  </div>
                  <div class="consult-list">
                    <template>
                      <el-table :data="alertList" style="width: 100%">
                        <el-table-column prop="timestamp" label="时间" width="180"></el-table-column>
                        <el-table-column prop="name" label="修改人" width="180"></el-table-column>
                        <el-table-column prop="content" label="内容"></el-table-column>
                      </el-table>
                    </template>
                  </div>
                </div>
              </el-col>
            </el-row>
          </div>
        </template>
      </dialog-form>


      <!-- 产品保存发布弹窗 -->
      <dialog-form
        @success="submitSuccess"
        title="发布产品"
        :visible.sync="visibleDialogConsult"
        :getPayload="()=>function3()"
        :confirmDisabled="false"
        v-if="formConsult"
      >
        <template>
          <el-tabs v-model="tabsListValue1" type="card" @tab-click>
            <el-tab-pane
              :key="item.id"
              v-for="(item, index) in tabsList1"
              :label="item.name"
              :name="item.channel"
            >
              <div class="consult">
                <el-row :gutter="10">
                  <el-col :span="18">
                    <div class="consult-right">
                      <div class="top">
                        <div class="select-all">发布内容</div>
                      </div>
                      <!-- {{formConsult}} -->
                      <div class="consult-list">
                        <!-- <el-input type="textarea" :rows="20" placeholder="请输入内容" v-model="formConsult['content'+item.channel]"></el-input> -->
                        <el-input
                          type="textarea"
                          :rows="20"
                          placeholder="请输入内容"
                          v-model="contentTabRoot[item.channel]"
                        ></el-input>
                        <!-- <template>
                          <el-table :data="tableData" style="width: 100%">
                            <el-table-column prop="name" label="素材名称" width="180"></el-table-column>
                            <el-table-column prop="material" label="素材编号" width="180"></el-table-column>
                            <el-table-column prop="type" label="素材类型"></el-table-column>
                            <el-table-column prop="num" label="显示顺序" width="100"></el-table-column>
                            <el-table-column fixed="right" label="操作" width="100">
                              <template slot-scope="scope">
                                <i class="el-icon-bottom"></i>
                                <i class="el-icon-top"></i>
                                <i class="el-icon-delete"></i>
                              </template>
                            </el-table-column>
                          </el-table>
                        </template>-->
                      </div>
                    </div>
                  </el-col>
                  <el-col :span="6">
                    <div class="consult-left">
                      <div class="top">
                        <div class="select-all">服务客户</div>
                      </div>
                      <div class="tree product-made-home-tree">
                        <el-tree
                          :data="item.children"
                          show-checkbox
                          node-key="id"
                          ref="treeUser"
                          highlight-current
                          :props="defaultProps"
                        ></el-tree>
                      </div>
                    </div>
                  </el-col>
                </el-row>
              </div>
            </el-tab-pane>
          </el-tabs>
        </template>
      </dialog-form>



      <!-- 中间路由 -->
      <div class="center-box" v-if='isDirection'>
        <div class="direction-icon-r" @click="directionRight()">
         <i class="el-icon-arrow-left"></i>
        </div>
        <div class="top-title no-border">
          <div class="text">{{topTitle || '参考资料'}}</div>
          <!-- <el-button type="primary" size="small" @click="saveModule()">保存模板</el-button> -->
        </div>
        <!-- <div v-if="isIframe" class="iframe-content-box">
          <page-office :url="docPath" id="products"></page-office>
        </div>
        <div v-else class="content-box">
          <div class="weather-forecast-box"> 
            <div class="forecast-title">天气预报</div>
            <div class="line-thick"></div>
            <div class="line-thin"></div>
            <div class="forecast-text">
              <div v-for="(item,index) in forecastList" :key="index" class="item-list">{{item.text}}</div>
            </div>
          </div>
        </div>-->
        <template>
          <el-tabs router v-model="tabsListValue" type="card" @tab-click="handleClick">
            <el-tab-pane
              router
              v-for="(item, index) in tabsList"
              :key="index"
              :label="item.title"
              :item="item"
            >
            <router-view v-if="isRouterAlive" v-on:dialogEmit="dialogEmit" @emitPhraes='clickPhraes' :viewData='lastItemClicked'></router-view>
            </el-tab-pane>
          </el-tabs>
        </template>
      </div>


      <!-- 右侧 多个-->
      <div class="right-box" :class="isDirection? '':'content-box-max'">
        <div class="top-title">
          <div class="text">产品制作</div>
        </div>
        <template v-if="productTabList">
          <el-tabs v-model="productTabProductInfoId" @tab-click="handleTabClick" :type="productTabList? 'border-card':''" :class="isDirection? '':'el-tabs--border-card-max'">
            <el-tab-pane :label="item.name" :name="item.productInfoId" v-for="(item,index) in productTabList" :key="index">
              <div class="content-box" v-if="productTabList">
                <el-form ref="form" label-width="90px" size="small">
                         <div class="item-input">
                        <el-form-item label="制作时次">
                          <el-tag class="date-num" size="small" v-for="(makeItem,makeIndex) in item.makeTimes" :key="makeIndex" v-bind:class="{ 'activeThree1': makeItem.makeMode == 1? true:false,'activeThree2': makeItem.makeMode == 2? true:false,'activeThree3': makeItem.makeMode == 3? true:false,'activeThree4': makeItem.makeTime == productTabList[index].makeTime ? true:false, }" @click="channelDate(makeItem,item,index)">{{makeItem.makeTime}}</el-tag>
                        </el-form-item>
                      </div>
                      <div class="item-input">
                        <!-- <el-form-item label="制作期号">
                          <el-input
                            type="number"
                            v-model="productTabList[index].issue"
                            @click.native="handleInput"
                            placeholder="请输入期号"
                          ></el-input>
                        </el-form-item> -->

                      </div>
                  <el-row>
                    <el-col :span="10">
                        <el-form-item label="产品名称">
                          <el-input
                            v-model="productTabList[index].fileName"
                            @click.native="handleInput"
                            placeholder="请输入名称"
                          ></el-input>
                        </el-form-item>
                    </el-col>
                      <el-col :span="1">
                        &nbsp;
                      </el-col>
                      <el-row :span="13">
                          <!-- <el-checkbox class="select-time" v-model="productTabList[index].reserve" size="small" label="预约发布" border></el-checkbox>
                          <el-time-select
                            class="select-time"
                            style="width:100px;"
                            size="small"
                            :disabled="productTabList[index].reserve? false:true"
                            v-model="productTabList[index].reserveTime"
                            :picker-options="{start: '08:30',step: '00:15',end: '18:30'}"
                            placeholder="时间"
                          ></el-time-select> -->
                      <el-button type="success" size="small" @click="onSave(productTabList[index],index,function(){})">保存</el-button>
                      <el-button type="primary" size="small" @click="onConsult(productTabList[index],index,'fast')">快速发布</el-button>
                      <el-button type="primary" size="small" @click="onConsult(productTabList[index],index,'')">发布</el-button>
                      </el-row>
                  </el-row>
                  <div v-if="isIframe" class="iframe-content-box">
                    <page-office :url="docPath" id="products"></page-office>
                  </div>
                  <div v-else class="form-txt">
                    <el-input
                      id="mytextareas"
                      type="textarea"
                      @click.native="handleInput"
                      :rows="28"
                      placeholder="请输入内容"
                      v-model="productTabList[index].content"
                      show-word-limit
                      maxlength="个字符"
                    ></el-input>
                  </div>
                </el-form>
              </div>
            </el-tab-pane>
          </el-tabs>
        </template>
        
        <!-- //单个产品编辑 -->
        <div class="content-box" v-if="!productTabList">
          <el-form ref="form" label-width="90px" size="small">
                <div class="item-input">
                  <el-form-item label="制作时次">
                    <el-tag class="date-num" size="small" v-for="(makeItem,index) in makeTimes" :key="index" v-bind:class="{ 'activeThree1': makeItem.makeMode == 1? true:false,'activeThree2': makeItem.makeMode == 2? true:false,'activeThree3': makeItem.makeMode == 3? true:false,'activeThree4': makeItem.makeTime == productMade.makeTime ? true:false, }" @click="channelDate(makeItem,false,false)">{{makeItem.makeTime}}</el-tag>
                  </el-form-item>
                </div>
                <div class="item-input">
                  <!-- <el-form-item label="制作期号">
                    <el-input
                      type="number"
                      v-model="productMade.issue"
                      @click.native="handleInput"
                      placeholder="请输入期号"
                    ></el-input>
                  </el-form-item> -->
            <el-row>
                <el-col :span="10">
                  <el-form-item label="产品名称">
                    <el-input
                      v-model="productMade.fileName"
                      @click.native="handleInput"
                      placeholder="请输入名称"
                    ></el-input>
                  </el-form-item>
                </el-col>
                <el-col :span="1">
                  &nbsp;
                </el-col>

                <el-col :span="13">
                  <el-button type="success" size="small" @click="onSave(productMade,false,function(){})">保存</el-button>
                  <el-button type="primary" size="small" @click="onConsult(productMade,false,'fast')">快速发布</el-button>
                  <el-button type="primary" size="small" @click="onConsult(productMade,false,'')">发布</el-button>
                </el-col>
            </el-row>
                </div>
            <el-row>
                    <!-- <el-checkbox class="select-time" v-model="productMade.reserve" size="small" label="预约发布" border></el-checkbox>
                    <el-time-select
                      class="select-time"
                      style="width:100px;"
                      size="small"
                      :disabled="productMade.reserve? false:true"
                      v-model="productMade.reserveTime"
                      :picker-options="{start: '08:30',step: '00:15',end: '18:30'}"
                      placeholder="时间"
                    ></el-time-select> -->
                
                <!-- </el-row> -->
            </el-row>
            <div v-if="isIframe" class="iframe-content-box">
              <page-office :url="docPath" id="products"></page-office>
            </div>
            <div v-else class="form-txt">
              <div class="text-editor" v-if="inputs">
                <el-row>
                  <el-col :span="8">
                    <el-input
                      ref="formTxt"
                      id="mytextarea"
                      :focus="focusEvent()"
                      type="textarea"
                      @click.native="handleInput"
                      :rows="28"
                      placeholder="请输入内容"
                      v-model="productMade.content"
                      show-word-limit
                      maxlength="个字符"
                      @blur="onInputBlur"
                    ></el-input>
                  </el-col>
                  <el-col :span="8">
                    <el-input
                      ref="formTxt"
                      id="mytextarea"
                      :focus="focusEvent()"
                      type="textarea"
                      @click.native="handleInput"
                      :rows="28"
                      v-model="tvText"
                      :disabled="true"
                      show-word-limit
                    ></el-input>
                  </el-col>
                  <el-col :span="8">
                    <el-input
                      ref="formTxt"
                      id="mytextarea"
                      :focus="focusEvent()"
                      type="textarea"
                      @click.native="handleInput"
                      :rows="28"
                      v-model="cityData"
                      :disabled="true"
                      show-word-limit
                    ></el-input>
                  </el-col>
                </el-row>
              </div>
              <div class="text-editor" v-else>
                  <el-input
                  ref="formTxt"
                  id="mytextarea"
                  :focus="focusEvent()"
                  type="textarea"
                  @click.native="handleInput"
                  :rows="28"
                  placeholder="请输入内容"
                  v-model="productMade.content"
                  show-word-limit
                  maxlength="个字符"
                ></el-input>
              </div>
            </div>
          </el-form>
        </div>
      </div>


    </div>
  </div>
</template>

<script>
import {
  requestProductClassTreeDel,
  requestProductClassTreeList,
  requestProductReferenceTabsList,
  requestProductInfoIds,
  requestProducInfos,
  requestProducInfo,
  requestProducTreleaseSave,
  requestProductUserList,
  requestProductInfoTpyeTreeList,
  requestProducTreleaseDoPublish,
  requestProducDoQuickPublish,
  requestIntegratedHoneOption,
  requestProductTaskList,
  requestProductCityData,
  requestProductTvTextByCode,
  requestProductDoFinish
} from "@/remote/";
import PageOffice from "@/components/page-office/";
import {
  common,
  witchCommonList,
  withCommonLeftTree
} from "../../mixins/index";
import { mapActions, mapGetters } from "vuex";
export default {
  mixins: [common, witchCommonList, withCommonLeftTree],
  components: {
    PageOffice
  },
  data() {
    return {
      activityItem:{
        productInfoId:null,
        name:null
      },
      visible: false,
      cityData:null,
      tvText:null,
      inputs:false,
      isRouterAlive:true,
      saveProducId:null,
      navTab:'产品导航',
      routeObj:{},
      optionsTypeValue:null,
      // makeTimeData:null,//点击时段选中
      makeTimes:null,
      productTabList:null,
      productTabProductInfoId:null,
      isDirection:true,//展开
      valueDate: new Date(),
      optionsType: [],
      optionsValue: null,
      paramInfo: null,
      contentState: false,
      contentTabRoot: {},
      formConsult: {},
      loginInfo: null,
      alertTextarea: `
-6～-4：严重冰冻；-5～-3：冰冻或严重冰冻；-4～-2：冰冻；-3～-1和-2～0：薄冰；-1～1和0～2：薄冰/霜冻；1～3：霜；2～4和3～5：局部霜或暗霜。
冷空气消息：11月至次年4月48小时内影响，平均/最低温度48h降6-8℃。
强冷空气消息：48小时内降温幅度≥8℃，且过程最低气温≤8℃。
降温报告：降温幅度≥8℃以上，且过程最低气温≤5℃。
低温报告：日最低气温≤0℃（山区≤-3℃）。
寒潮警报：24小时内降温幅度≥8℃，或48小时内降温幅度≥10℃，且过程最低气温≤5℃
`,
      alertList: [
        {
          content:
            "6～-4：严重冰冻；-5～-3：冰冻或严重冰冻；-4～-2：冰冻；-3～-1和-2～0：薄冰；-1～1和0～2：薄冰/霜冻；1～3：霜；2～4和3～5：局部霜或暗霜。 冷空气消息：11月至次年4月48......",
          timestamp: "2018-04-12 20:46",
          name: "韦春花",
          id: "1"
        },
        {
          content:
            "6～-4：严重冰冻；-5～-3：冰冻或严重冰冻；-4～-2：冰冻；-3～-1和-2～0：薄冰；-1～1和0～2：薄冰/霜冻；1～3：霜；2～4和3～5：局部霜或暗霜。 冷空气消息：11月至次年4月48......",
          timestamp: "2018-04-12 20:46",
          name: "春花",
          id: "2"
        }
      ],
      productMade: {},
      activities: [
        {
          content: "短时临近预报修改",
          timestamp: "2018-04-12 20:46",
          size: "large",
          type: "primary",
          icon: "el-icon-check",
          color: "#409EFF"
        },
        {
          content: "周边城市预报",
          timestamp: "2018-04-03 20:46",
          color: "#67C241",
          icon: "el-icon-bell"
        },
        {
          content: "周边城市报文",
          timestamp: "2018-04-03 20:46",
          size: "large"
        },
        {
          content: "城市预报气象网",
          timestamp: "2018-04-03 20:46"
        },
        {
          content: "周边城市报文",
          timestamp: "2018-04-03 20:46",
          size: "large"
        },
        {
          content: "城市预报气象网",
          timestamp: "2018-04-03 20:46"
        },
        {
          content: "周边城市报文",
          timestamp: "2018-04-03 20:46",
          size: "large"
        },
        {
          content: "查看智能网格预报业务平台",
          timestamp: "2018-04-03 20:46"
        }
      ],
      defaultProps: {
        children: "children",
        label: "name"
      },
      tabTree: [],
      menuData: [],
      userOrgId: null,
      visibleDialogFormItemClassify: false,
      visibleDialogFormItemProduct: false,
      formItem: null,
      radioType: "word",
      checkList: ["值班记录", "每日预报产品"],
      isIframe: false,
      topTitle: "",
      docPath: "", // 文档的地址
      searchText: "",
      tabsListValue1: "邮件",
      tabsListValue: "1",
      tabsList: [],
      tabsList1: [],
      treeData: [],
      forecastList: [
        {
          text: "Weather_Content"
        },
        {
          text: "明天早晨最低气温：TaiZhou_MinTemp"
        },
        {
          text: "明天白天最高气温：TaiZhou_Max"
        },
        {
          text: "Weather_Content"
        },
        {
          text: "Weather_Content"
        }
      ],
      treeDataList: []
    };
  },
  computed: {
  classObject: function (data) {
    console.log(data)
    return {
      active: this.isActive && !this.error,
      'text-danger': this.error && this.error.type === 'fatal'
    }
  }
},
  watch: {
    optionsValue(vla) {
      console.log(vla);
      // 发布流程信息
      requestProductTaskList({ userId: this.loginInfo.id, jobId: vla.id }).then(
        res => {
          let finishIcon;
          let finishColor;
          let finishType;
          let finishSize;
          if (!res.data || !Array.isArray(res.data)) {
            return;
          }
          this.activities = res.data;
          this.activities.forEach(i => {
            //状态：0 未完成；1 完成；2 进行中
            if (i.finish == 1) {
              finishIcon = "el-icon-check";
              finishColor = "#409EFF";
              finishType = "primary";
              finishSize = "large";
            } else if (i.finish == 2) {
              finishIcon = "el-icon-bell";
              finishColor = "#67C241";
              finishType = "";
              finishSize = "";
            } else if (i.finish == 0) {
              finishIcon = "el-icon-bell";
              finishColor = "";
              finishType = "";
              finishSize = "large";
            }
            (i.content = i.name),
              (i.timestamp = i.stime + "-" + i.etime),
              (i.size = finishSize),
              (i.type = finishType),
              (i.icon = finishIcon),
              (i.color = finishColor);
          });
          console.log(res);
        }
      );
    },
    treeDataList(val){
      if(this.optionsTypeValue != null){
          this.treeDataList.forEach(item=>{
            if(item.id === this.routeObj.productInfoId){
              console.log(item.label)
              this.lastItemClicked = item
            }
          })
          requestProducInfo({
          productInfoId: this.lastItemClicked.id,
          isReload: false
          }).then(res => {
            if(typeof(res.data)=="object"){
              this.productTabList = null;
              this.productMade = null;
              this.productMade = {
                ...res.data,
              }
              this.makeTimes = res.data.makeTimes
              // this.makeTimes.forEach(i=>{
              //   if(i.makeMode == 2){
                  // this.productMade.makeTime = i.makeTime
                // }
              // })
              this.productMade.makeTime = res.data.makeTime
              console.log(this.productMade);
            }
          });

      }
    },
    searchText(val) {
      this.$refs.tree.filter(val);
    },
    visibleDialogConsult(val) {
      if (!val) {
        this.formConsult = {};
      }
    },
    // "productMade.reserve": function(val) {
    //   if (!val) {
    //     this.productMade.reserveTime = null;
    //   } else {
    //     // this.productMade.reserveTime = this.lastItemClicked.reserveTime
    //   }
    // }
  },
  mounted() {

    this.requestData();

      
      // 从综合管理首页进来
      if(this.$route.query.data){
        this.routeObj=this.$route.query.data
        this.optionsTypeValue=this.$route.query.optionsTypeValue
        this.navTab = '制作流程'
        console.log('routeObj:',this.routeObj)
        // console.log('optionsTypeValue:',this.optionsTypeValue)
      }

    this.$router.replace({ name: "product-make-images" });
    requestIntegratedHoneOption({
      orgId: this.loginInfo.orgId,
      isUse: "1"
    }).then(res => {
      this.optionsType = res.data.list;
      this.optionsValue =this.optionsType[0]

      if(!this.optionsTypeValue) return
      this.optionsType.forEach(item=>{
          if(item.id == this.optionsTypeValue.id){
            this.optionsValue = item
          }
        })
      console.log('optionsValue:',this.optionsValue)
    });

    

    // 发布流程信息
    // requestProductTaskList({userId:this.loginInfo.id,name1:this.optionsValue,dutyMonth:this.paramObj.dutyMonth}).then(res => {
    //   let finishIcon
    //   let finishColor
    //   let finishType
    //   let finishSize
    //   if(!res.data || !Array.isArray(res.data) ){return}
    //   this.activities = res.data
    //   this.activities.forEach(i=>{
    //   //状态：0 未完成；1 完成；2 进行中
    //   if(i.finish == 1){
    //     finishIcon = 'el-icon-check'
    //     finishColor = '#409EFF'
    //     finishType = 'primary'
    //     finishSize = 'large'
    //   }else if(i.finish == 2){
    //     finishIcon = 'el-icon-bell'
    //     finishColor = '#67C241'
    //     finishType = ''
    //     finishSize = ''
    //   }else if(i.finish == 0){
    //     finishIcon = 'el-icon-bell'
    //     finishColor = ''
    //     finishType = ''
    //     finishSize = 'large'
    //   }
    //     i.content=i.name,
    //     i.timestamp=i.stime+'-'+i.etime,
    //     i.size=finishSize,
    //     i.type=finishType,
    //     i.icon=finishIcon,
    //     i.color=finishColor
    //   })
    //   console.log(res)
    // })
  },
  methods: {
    addText(myValue){
      function insertAtCursor(myField, myValue) {
 
        //IE 浏览器
        if (document.selection) {
          myField.focus();
          sel = document.selection.createRange();
          sel.text = myValue;
          sel.select();
        }
      
        //FireFox、Chrome等
        else if (myField.selectionStart || myField.selectionStart == '0') {
          var startPos = myField.selectionStart;
          var endPos = myField.selectionEnd;
      
          // 保存滚动条
          var restoreTop = myField.scrollTop;
          myField.value = myField.value.substring(0, startPos) + myValue + myField.value.substring(endPos, myField.value.length);
          
          if (restoreTop > 0) {
            myField.scrollTop = restoreTop;
          }
          
          myField.focus();
          myField.selectionStart = startPos + myValue.length;
          myField.selectionEnd = startPos + myValue.length;
        } else {
          myField.value += myValue;
          myField.focus();
        }
      }

      if(this.productTabProductInfoId != null && this.productTabList.length > 0){
        var myField = document.getElementById("mytextareas");
        insertAtCursor(myField,myValue)
            this.productTabList.forEach((item,index)=>{
              if(item.productInfoId == this.productTabProductInfoId){
                console.log(myField.valuee)
                this.productTabList[index].content = myField.value
              }
            })
      }else{
        var myField = document.getElementById("mytextarea");
        insertAtCursor(myField,myValue)
        this.productMade.content = myField.value
      }

    },
    emitPhraes(){},
    timelineClick(data){
      if(data.productInfoId == null){
          this.$message.warning("非产品，不在系统内制作")
          return
        }
          this.treeDataList.forEach(item=>{
            if(item.id === data.productInfoId){
              this.onTreeClickItem(item)
            }
          })
    },
    timelineEvent(data){
      console.log(data)
      // if(data.productInfoId == null){
      //     this.$message.warning("非产品，不在系统内制作")
      //     return
      //   }
        this.activityItem = data
        this.visible = true
    },
    popoverClick(id){
        this.visible = false
        requestProductDoFinish({id}).then(res=>{
           // 发布流程信息
          requestProductTaskList({ userId: this.loginInfo.id, jobId: this.optionsValue.id }).then(
            res => {
              let finishIcon;
              let finishColor;
              let finishType;
              let finishSize;
              if (!res.data || !Array.isArray(res.data)) {
                return;
              }
              this.activities = res.data;
              this.activities.forEach(i => {
                //状态：0 未完成；1 完成；2 进行中
                if (i.finish == 1) {
                  finishIcon = "el-icon-check";
                  finishColor = "#409EFF";
                  finishType = "primary";
                  finishSize = "large";
                } else if (i.finish == 2) {
                  finishIcon = "el-icon-bell";
                  finishColor = "#67C241";
                  finishType = "";
                  finishSize = "";
                } else if (i.finish == 0) {
                  finishIcon = "el-icon-bell";
                  finishColor = "";
                  finishType = "";
                  finishSize = "large";
                }
                (i.content = i.name),
                  (i.timestamp = i.stime + "-" + i.etime),
                  (i.size = finishSize),
                  (i.type = finishType),
                  (i.icon = finishIcon),
                  (i.color = finishColor);
              });
              console.log(res);
            }
          );
        })
    },
    channelDate(makeItem,tabItem,tabIndex){
      console.log('makeItem',makeItem)
      console.log('tabItem',tabItem)
      console.log('tabIndex',tabIndex)
              if(tabIndex===false){
                console.log('单个')
                requestProducInfo({
                  productInfoId: this.lastItemClicked.id,
                  isReload: false,
                  makeTime:makeItem.makeTime
                  }).then(res => {
                        if(typeof(res.data)=="object"){
                        this.productTabList = null;
                        this.productMade = {};
                        this.productMade = {
                          ...res.data,
                        }
                        // this.productMade.makeTime = res.data.makeTime
                        // res.data.makeTimes.forEach(i=>{
                        //   if(i.makeMode == 2){
                        //     this.productMade.makeTime = i.makeTime
                        //   }
                        // })


                        this.makeTimes = res.data.makeTimes
                      }
                });
              }else{
                console.log('多个')
                requestProducInfo({
                    productInfoId: tabItem.productInfoId,
                    isReload: false,
                    makeTime:makeItem.makeTime
                    }).then(res => {
                          if(typeof(res.data)=="object"){
                          this.productMade = {};
                          this.productTabList.map((item,index)=>{//修改下标为tabIndex的对象
                            tabIndex == index ? (this.productTabList[index].makeTime = res.data.makeTime) : (this.productTabList[index].makeTime = this.productTabList[index].makeTime)
                            // tabIndex == index ? (this.productTabList[index].content = makeItem.content) : (this.productTabList[index].content = this.productTabList[index].content)
                            tabIndex == index ? (this.productTabList[index].content = res.data.content) : (this.productTabList[index].content = this.productTabList[index].content)
                            tabIndex == index ? (this.productTabList[index].fileName = res.data.fileName) : (this.productTabList[index].fileName = this.productTabList[index].fileName)
                            tabIndex == index ? (this.productTabList[index].makeTimes = res.data.makeTimes) : (this.productTabList[index].makeTimes = this.productTabList[index].makeTimes)
                          })
                          // this.makeTimeData = makeItem.makeTime //????????????????????????
                        }
                  });
              }
    },
    directionLeft(){
      this.isDirection = true
    },
    directionRight(){
      this.isDirection = false
    },
    handleClickTab(tab, event) {
      console.log(tab, event);
    },
    //input 失去焦点触发
    onInputBlur(data){
      this.tvText = null
      requestProductTvTextByCode({content:this.productMade.content}).then(res=>{
        this.tvText = res.data
      })
    },
    handleInput(data) {
      console.log(data)
      // if(!this.productMade){
      //     this.$message.error("请选择需要编辑的产品");
      // }
    },
    focusEvent(data){
      // console.log(data)
    },
    function3() {
      // if (
        // !this.lastItemClicked ||
        // !this.productMade.fileName ||
        // !this.productMade.issue ||
      //   !this.productMade.content
      // ) {
      //   this.$message.error("选择产品，并填写完整信息!");
      //   return;
      // }
        this.formConsultData(this.saveProducId);
    },
    formConsultData(id) {
      let param = {
        publishId: id,
        publishUser: this.loginInfo.name,
        channelList: []
      };

      let channels = [];
      this.tabsList1.forEach((i, index) => {
        channels.push({
          channel: i.channel,
          // content:this.formConsult['content'+i.channel],
          content: this.contentTabRoot[i.channel],
          users: this.userArr(i)
        });
      });

      param.channelList = channels;
      this.paramInfo = {
        ...param
      };

      requestProducTreleaseDoPublish(param).then(res => {
        this.visibleDialogConsult = false;
        this.formConsult = null;
        if (res.success) {
          this.$message.success(res.message);
        } else {
          this.$message.error(res.message);
        }
      });

      return param;
    },
    userArr(data) {
      let channelUser = []; //勾选的用户
      this.$refs.treeUser.forEach((i, index) => {
        if (this.$refs.treeUser[index].getCheckedNodes().length > 0) {
          this.$refs.treeUser[index].getCheckedNodes().forEach(element => {
            if (element.type != "type") {
              channelUser.push(element);
            }
          });
        }
      });
      let paramObj = [];
      channelUser.forEach(item => {
        if (item.channel == data.channel) {
          paramObj.push({
            id: item.id,
            name: item.name,
            address: item.address
          });
        }
      });
      return paramObj;
    },
    onSave(item,index,callback) {
      console.log('onSave-item:',item)
      console.log('onSave-lastItemClicked:',item)
      if (
        !this.lastItemClicked ||
        !item.fileName ||
        !item.issue ||
        !item.content
      ) {
        this.$message.error("选择产品，并填写完整信息!");
        return;
      }

      let param = {
        orgId: this.loginInfo.orgId,
        id: item.id,
        productInfoId: index === false? this.lastItemClicked.id:item.productInfoId,
        productInfoName: index === false? this.lastItemClicked.label:item.name,
        issue: item.issue,
        // reserve: item.reserve ? "1" : "0",
        // reserveTime: item.reserveTime, 
        // reserveTime: '0',
        createUser: this.loginInfo.name,
        content: item.content,
        fileName: item.fileName, 
        makeTime: item.makeTime, 
      };
      requestProducTreleaseSave(param).then(res => {
        this.saveProducId = res.data.id
        if(index === false){
          this.productMade = null;
          this.productMade = {
            ...res.data,
            makeTime: item.makeTime
          };
          if (res.success) {
            this.$message.success(res.message);
            this.contentTabRoot = {};
          } else {
            this.$message.error(res.message);
            this.contentTabRoot = {};
          }
        callback(item,index)
        }else{
          this.productTabList[index].channelContent = res.data.channelContent;
          this.productTabList[index].fileName = res.data.fileName;
          this.productTabList[index].id = res.data.id;
          console.log('productTabList[index]:',this.productTabList[index])
          callback(item,index)
          if (res.success) {
            this.$message.success(res.message);
            this.contentTabRoot = {};
          } else {
            this.$message.error(res.message);
            this.contentTabRoot = {};
          }
        }
      });
    },

    onConsult(item,index,fast) {
      let _this = this
      if (
        !this.lastItemClicked ||
        // !item.fileName ||
        // !item.issue ||
        !item.content
      ) {
        this.$message.error("选择产品，并填写完整信息!");
        return;
      }
      this.visibleDialogConsult = fast == 'fast' ? false:true
      if(fast == 'fast'){ 
        //快速发布

        _this.onSave(item,index,function(item,index){
          let param = {
            publishId: index === false ? _this.productMade.id:_this.productTabList[index].id,
            publishUser: _this.loginInfo.name
          };
          requestProducDoQuickPublish(param).then(res=>{
            if (res.success) {
            _this.$message.success(res.message);
            } else {
              _this.$message.error(res.message);
            }
          })
        })

        return
      }
      
        //普通发布
        _this.onSave(item,index,function(item,index){
          console.log('普通发布：item',item)
          console.log('普通发布：index',index)
            requestProductUserList({
                  orgId: _this.loginInfo.orgId,
                  productInfoId: index === false? _this.lastItemClicked.id:item.productInfoId,
                }).then(res => {
                  _this.tabsList1 = res.data;
                  let checkeds = []; //已选中

                  function treeOfLists(tree) {
                    tree.map(item => {
                      if (item.checked == true) {
                        checkeds.push(item.id);
                      }
                      if (item.children) {
                        treeOfLists(item.children);
                      }
                    });
                  }

                  res.data.forEach(i => {
                    if (i.children) {
                      treeOfLists(i.children);
                    }
                  });

                  _this.$nextTick(() => {
                    //默认勾选
                    if (_this.$refs.treeUser) {
                      _this.$refs.treeUser.forEach((i, index) => {
                        _this.$refs.treeUser[index].setCheckedKeys(checkeds);
                      });
                    }
                  });

                  _this.tabsListValue1 = res.data[0].channel;

                  if(index === false){
                    let contentTabRoot = {};
                    _this.productMade.channelContent = JSON.parse(
                      _this.productMade.channelContent
                    );
                    _this.tabsList1.forEach(
                      e =>
                        (contentTabRoot[e.channel] = _this.productMade.channelContent[e.channel])
                    );
                    _this.contentTabRoot = contentTabRoot;
                  }else{
                    let contentTabRoot = {};
                    _this.productTabList[index].channelContent = JSON.parse(
                      _this.productTabList[index].channelContent
                    );
                    _this.tabsList1.forEach(
                      e =>
                        (contentTabRoot[e.channel] = _this.productTabList[index].channelContent[e.channel])
                    );
                    _this.contentTabRoot = contentTabRoot;
                  }
                });

              });

          },
    handleTabClick(tab, event) {
      console.log(tab, event);
      // console.log("id:",tab.$vnode.key)
      // this.$router.replace({ name: tab.$attrs.item.name });
      // requestProducInfo({
      //   productInfoId: this.lastItemClicked.id,
      //   isReload: false
      // }).then(res => {
      //   this.productMade = null;
      //   this.productMade = {
      //     ...res.data,
      //     id: res.data.id
      //   };
      //   console.log(this.productMade);
      // });
    },
    onTreeClickItem(item) {
        this.cityData = null
        this.tvText = null

      
      // this.makeTimeData = null
      this.productTabProductInfoId = null
      console.log("click-tree-item1", item);
      this.isRouterAlive = false;
      this.$nextTick( () => {
        this.isRouterAlive = true;
      })
      
        this.lastItemClicked = item;
      if(item.treeType == 'productType'){
        requestProducInfos({
            productTypeId: this.lastItemClicked.id,
          }).then(res => {
            let tabsList = res.data.list
            let ids = []
            res.data.list.forEach(i=>{
              ids.push(i.id)
            })
            requestProductInfoIds({productInfoIds:ids.toString()}).then(res=>{
              this.productTabList = res.data.list
                res.data.list.forEach((item,index)=>{
                  tabsList.forEach(i=>{
                    if(i.id == item.productInfoId){
                      this.productTabList[index].name = i.name
                    }
                  })
                })
                this.productTabProductInfoId = this.productTabList[0].productInfoId
                this.productTabList.forEach((element,_index)=>{
                    // element.makeTimes.forEach(data=>{
                    //   if(data.makeMode == 2){
                    //     element.makeTime = data.makeTime
                    //   }else{
                    //   }
                    // })
                  })
            })
          });
      }else if(item.treeType == 'product'){
      requestProducInfo({
          productInfoId: this.lastItemClicked.id,
          isReload: false
          }).then(res => {
            if(typeof(res.data)=="object"){
              this.productTabList = null;
              this.productMade = null;
              this.productMade = {
                ...res.data,
              }
              this.makeTimes = res.data.makeTimes
              // this.makeTimes.forEach(i=>{
              //   if(i.makeMode == 2){
              //     this.productMade.makeTime = i.makeTime
              //   }
              // })

              console.log('productMade:',this.productMade);
            }
          });
      }

      if(item.code == 'dstqyb'){
        this.inputs = true
        this.directionRight()
          this.cityData = null
        requestProductCityData().then(res=>{
          this.cityData = res.data.content
        })
      }else{
        this.inputs = false
      }

    },
    dialogEmit(data) {
      console.log(data);
      if (data == "onAlert") {
        this.formAlert = true;
        this.visibleDialogAlert = true;
      }
    },
    clickPhraes(val){
      this.addText(val)
    },
    handleClick(tab, event) {
      console.log(tab, event);
      this.$router.replace({ name: tab.$attrs.item.name });
    },
    //初始化页面数据
    requestData() {
      const loginInfo = JSON.parse(localStorage.getItem("loginInfo"));
      this.loginInfo = loginInfo;
      // requestProductClassTreeList().then(res => {
      //   this.treeData = res.data.list;
      //   this.treeDataList = [];
      //   this.treeOfList(res.data.list);
      // });

      //获取导航树
      requestProductInfoTpyeTreeList({ orgId: this.loginInfo.orgId }).then(
        res => {
          this.treeData = res.data.list;
          this.treeDataList = [];
          this.treeOfList(res.data.list);
        }
      );
      requestProductReferenceTabsList().then(res => {
        this.tabsList = res.data.list;
      });
    },
    submitSuccess(res) {
      this.requestData();
    },
    ...mapActions(["gotAccountInfo", "getAccountInfo", "getMenuInfo"]),
    filterNode(value, data) {
      if (!value) return true;
      return data.label.indexOf(value) !== -1;
    },
    treeOfList(tree) {
      tree.map(item => {
        this.treeDataList.push(item);
        if (item.children) {
          this.treeOfList(item.children);
        }
      });
    },
    saveModule() {},
    handleNodeClick(data) {
      let vm = this;
      console.log(data);
      vm.formItem = data;
      vm.topTitle = "";
      vm.topTitle = data.label;
      if (data.label == "789") {
        vm.isIframe = true;
        // vm.docPath = `http://222.216.5.171:8891/gxims//railway/showWordForecastMonth.action?productId=20200228164618013583871`;
        vm.docPath = `/product/ssd-page-office/openProductWord?productInfoId=P20000`;
      } else {
        vm.isIframe = false;
      }
    },
    getFormItemByInputItemClassify(item = {}) {
      this.getAccountInfo().then(res => {
        //获取当前用户机构id
        if (res.success && res.data) {
          this.formItem.orgId = res.data.orgId;
        }
      });
      const { lastItemClicked } = this;
      const lastKeyItemClicked = lastItemClicked && lastItemClicked.id;
      console.log(lastItemClicked);
      return {
        // "XXXPROP_ORGAN_id": "",
        remark: "123",
        pid: "",
        name: "",
        sort: "",
        orgId: ""
        // "XXXPROP_ORGAN_4": lastItemClicked && (lastItemClicked.XXXPROP_ORGAN_4 || 0) + 1 + "",
        // "XXXPROP_ORGAN_5": lastKeyItemClicked,
        // lastItemClicked,
        // ...item
      };
    },
    getFormItemLeftByInputItem(item) {
      const { lastItemClicked } = this;
      console.log("lastItemClicked:", lastItemClicked);
      console.log("item:", item);
      return item
        ? {
            id: item.id,
            name: item.label,
            sort: item.sort,
            pid: item.parentId,
            orgId: item.userOrgId
          }
        : {
            name: "",
            sort: "",
            pid: lastItemClicked.pid,
            orgId: this.userOrgId
            // remark:"",
          };
    },
    getFormItemLeftByInputItemMinor(item) {
      const { lastItemClicked } = this;
      console.log("lastItemClicked:", lastItemClicked);
      console.log("item:", item);
      return item
        ? {
            name: item.label,
            sort: item.sort,
            pid: item.parentId,
            orgId: this.userOrgId
          }
        : {
            name: "",
            sort: "",
            pid: lastItemClicked.pid,
            orgId: this.userOrgId
          };
    },
    getFormItemByInputItemProduct(item = {}) {
      const { lastItemClicked } = this;
      const lastKeyItemClicked = lastItemClicked && lastItemClicked.id;
      return {
        // "XXXPROP_ORGAN_id": "",
        XXXPROP_ORGAN_1: "",
        XXXPROP_ORGAN_2: "",
        XXXPROP_ORGAN_3: "",
        XXXPROP_ORGAN_4:
          lastItemClicked && (lastItemClicked.XXXPROP_ORGAN_4 || 0) + 1 + "",
        XXXPROP_ORGAN_5: lastKeyItemClicked,
        XXXPROP_ORGAN_6: "",
        lastItemClicked,
        ...item
      };
    }
  }
};
</script>

<style lang='postcss' scoped>
.product-made-home {
  background: #f6f6f6;
  padding: 15px 20px 0 0;
  height: 100%;
  box-sizing: border-box;
  .wrap-box {
    display: flex;
    justify-content: space-between;
    min-height: 100%;
    .left-box {
      width: 280px;
      position: relative;
      background: #fff;
      .direction-icon-l {
        top: 50%;
        right: -14px;
        position: absolute;
        width: 15px;
        height: 60px;
        color: #409eff;
        font-size:26px;
        background: #dae9ff;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .content-box {
        padding: 10px 20px 0;
        .tree-box {
          margin-top: 23px;
        }
      }
      .tool-box {
        padding: 30px 20px;
        position: relative;
        bottom: 0px;
        .line-interval {
          width: 100%;
          height: 1px;
          background: #e4e7ed;
          margin-bottom: 30px;
        }
        .classify-tool {
          display: flex;
          justify-content: space-between;
          height: 35px;
          line-height: 35px;
          .title {
            font-size: 14px;
            font-family: Microsoft YaHei;
            color: rgba(96, 98, 102, 1);
          }
          .icon-box {
            border: 1px solid rgba(235, 238, 245, 1);
            border-radius: 6px;
            width: 165px;
            .iconfont {
              display: inline-block;
              width: 30%;
              text-align: center;
              font-size: 15px;
              border-right: 1px solid #ebeef5;
            }
            .iconfont:last-child {
              border-right: none;
            }
            .tianjia {
              color: #67c241;
            }
            .bianji {
              color: #409eff;
            }
            .shanchu {
              color: #f46d6a;
            }
          }
        }
        .product-tool {
          margin-top: 14px;
        }
      }
    }
    .center-box {
      flex: 1;
      background: #fff;
      margin-left: 18px;
      position: relative;
      .direction-icon-r {
        font-size: 26px;
        right: -22px;
        top: 50%;
        position: absolute;
        width: 15px;
        height: 60px;
        color:#409eff;
        background: #dae9ff;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .content-box {
        padding: 0 30px 33px;
        .weather-forecast-box {
          background: rgba(242, 246, 252, 1);
          border: 1px solid rgba(204, 204, 204, 1);
          border-radius: 4px;
          padding: 0 99px;
          .forecast-title {
            font-size: 24px;
            font-family: Microsoft YaHei;
            color: rgba(64, 158, 255, 1);
            padding: 68px 20px 0px;
            text-align: center;
          }
          .line-thick {
            height: 3px;
            background: rgba(64, 158, 255, 1);
            margin-top: 20px;
          }
          .line-thin {
            height: 1px;
            background: rgba(64, 158, 255, 1);
            margin-top: 4px;
          }
          .forecast-text {
            margin-top: 43px;
            .item-list {
              font-size: 16px;
              font-family: Microsoft YaHei;
              color: rgba(48, 49, 51, 1);
              margin-bottom: 10px;
            }
          }
        }
      }
      .el-tabs {
        padding: 0px 20px 20px 20px;
      }
    }
    .right-box {
      flex: 0.5;
      background: #fff;
      margin-left: 22px;
      .content-box {
        padding: 10px 20px 0 20px;
        min-width: 420px;
        .item-input {
          display: flex;
        }
        .select-time {
          margin-right: 10px;
        }
        .tab {
        }
        .iframe-content-box {
          width: 100%;
          height: 60vh;
          margin: 20px 0;
        }
        .form-txt {
          padding: 20px 0;
        }
      }
      .el-tabs--border-card {
        /* background: #409eff; */
        width: 524px;
      }
      .el-tabs--border-card-max {
        /* background: #409eff; */
        width: 100% !important;
      }
    }
  }
  .top-title {
    padding: 20px;
    border-bottom: 1px solid #e4e7ed;
    display: flex;
    justify-content: space-between;
    .text {
      font-size: 18px;
      font-family: Microsoft YaHei;
      font-weight: 400;
      color: rgba(48, 49, 51, 1);
    }
  }
  .iframe-content-box {
    position: relative;
    display: flex;
    flex-direction: column;
    flex: 1;
    margin-left: 15px;
    height: calc(100%-58px);
  }
  .no-border {
    border-bottom: none;
  }
}

.title {
  font-size: 14px;
  font-family: Microsoft YaHei;
  color: rgba(96, 98, 102, 1);
}
.common-left {
  width: 100% !important;
  margin-right: 0;
}
.common-left .el-card {
  border: 0px solid #ebeef5;
}
.common-left-tree-actions {
  display: inline-block;
  text-align: center;
  padding: 1em 0;
}
.left-box .text {
  margin-top: 15px;
}
.content-box-max {
  width: 100% !important;
  flex: 1 !important;
}
</style>
<style lang='postcss'>
.product-made-make {
  .left-box {
    .el-input__inner {
      border-radius: 16px;
    }
    .product-tab-tree {
      height: calc(100%-2px);
      .is-top {
        /* height: 100%;
        background: red; */
      }
      .el-tree {
        height: 685px;
        overflow-x: hidden;
        overflow-y: auto;
      }
      .el-tree::-webkit-scrollbar {
        display: none;
      }
      .button-tab {
        width: 100%;
        text-align: center;
      }
      .el-timeline {
        overflow: auto;
        padding-top: 4px;
        height: 700px;
      }
      .text {
        text-align: center;
        padding: 20px;
        font-size: 14px;
        font-family: Microsoft YaHei;
        font-weight: 400;
        color: #909399;
        cursor: pointer;
      }
    }
    .el-tabs__content {
      padding: 15px 0;
      .el-radio-button{
        width: 25%;
        .el-radio-button__inner {
          width: 100%;
          border-radius:0;
        }
      }
    }
    .el-timeline-item {
      .el-timeline-item__wrapper {
        .timeline-event{
          width: 25px !important;
          height: 25px !important;
          position: absolute;
          top: 0px;
          left: -5px;
        }
      }
    }
  }
  .date-num {
    font-weight: 600!important;
    margin-right: 3px;
  }
  .activeThree1 {
    color: rgb(0, 233, 31) !important;
  }
  .activeThree2 {
    color: red!important;
  }
  .activeThree3 {
    color: #858585!important;
  }
  .activeThree4 {
    background: #cdcdce!important;
    color: red!important;
  }
}
.consult {
  .consult-left {
    .top {
      background: rgba(246, 247, 251, 1);
      border: 1px solid rgba(228, 231, 237, 1);
      border-radius: 5px 5px 0 0;
      .select-all {
        font-size: 13px;
        padding: 14px;
      }
    }
    .tree {
      border: 1px solid rgba(228, 231, 237, 1);
      border-radius: 0 0 5px 5px;
      padding: 14px;
    }
    .product-made-home-tree {
      height: 400px;
      overflow-x: hidden;
      overflow-y: scroll;
    }
    .product-made-home-tree::-webkit-scrollbar {
      display: none;
    }
  }
  .consult-right {
    .top {
      background: rgba(246, 247, 251, 1);
      border: 1px solid rgba(228, 231, 237, 1);
      border-radius: 5px 5px 0 0;
      .select-all {
        font-size: 13px;
        padding: 14px;
      }
    }
    .consult-list {
      .el-table {
        .el-icon-bottom,
        .el-icon-top {
          color: #409eff;
          padding-right: 6px;
        }
        .el-icon-delete {
          color: #f56c6c;
          padding-right: 6px;
        }
      }
    }
  }

}
  .form-txt {
    .text-editor {
      .el-textarea.is-disabled {
          .el-textarea__inner{
            background: #fff;
            color:#606266;
            cursor: text;
          }
      }
    }
  }

</style>