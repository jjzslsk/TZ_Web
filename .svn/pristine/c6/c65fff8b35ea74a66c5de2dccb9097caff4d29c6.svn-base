<template>
<div class="page-wrapper signal">
    <el-container>
        <el-header>
            <div class="actions">
                <span class="title">预警类型</span>
                <c-select v-model="query.type" options="warningType" placeholder="请选择"></c-select>
                <span class="title">预警等级</span>
                <c-select v-model="query.level" options="warningLevel" placeholder="请选择"></c-select>
                <span class="title">起止时间</span>
                <el-date-picker v-model="query.time" type="datetimerange" format="yyyy-MM-dd HH:mm" value-format="yyyy-MM-dd HH:mm" range-separator="至" start-placeholder="开始日期" end-placeholder="结束日期">
                </el-date-picker>
                <c-button type="search" @click="search()">搜索</c-button>
            </div>
        </el-header>
        <el-main>
            <div class="notes">
                <div class="item">
                    <div class="title should">应发预警提醒</div>
                    <div class="map">
                        <map-block mapMain="Warning" @ready="onMapReadyShould"></map-block>
                    </div>
                </div>
                <div class="item">
                    <div class="title real">实发预警提醒</div>
                    <div class="map">
                        <map-block mapMain="Warning" @ready="onMapReadyReal"></map-block>
                    </div>
                </div>
            </div>
        </el-main>
    </el-container>
</div>
</template>
<script>
import {
    mapFrontMapper
} from '@/common/mapper'
import {
    withCommonSearch
} from '../../mixins/index';
import mapBlock from './components/map-block.vue'
export default {
    mixins: [withCommonSearch],
    components: {
        mapBlock
    },
    data() {
        return {
            // end of data
        }
    },
    computed: {
        ...mapFrontMapper(['weatherWarningType'])
    },
    watch: {
        'query': {
            handler(val) {},
            immediate: true
        }
    },
    methods: {
        onMapReadyShould({
            bundle
        }) {
            this.addWarning({
                bundle,
                list: [{
                    lon: 121,
                    lat: 29,
                    headline: "更新暴雨黄色预警"
                },{
                    lon: 120.83,
                    lat: 28.82,
                    headline: "发布雷电红色预警"
                }]
            });
            bundle.goCenter();
        },
        onMapReadyReal({
            bundle
        }) {
            this.addWarning({
                bundle,
                list: [{
                    lon: 120.86,
                    lat: 28.76,
                    headline: "更新大风蓝色预警"
                }]
            });
            bundle.goCenter();
        },
        addWarning({
            bundle,
            list
        }) {
            const vm = this;
            bundle.addWarning(list
                // .filter(e => e.msgType == '')
                // .slice(start)
                .map(e => {
                    // e.lon = e.Lon;
                    // e.lat = e.Lat;
                    const m = /(?:更新|发布)(.+)(.色)预警/.exec(e.headline);
                    if (m) {
                        e.type = m[1];
                        e.level = m[2];
                    }
                    let imageColor, imageType;
                    switch (e.level) {
                        case '蓝色':
                            imageColor = '4';
                            break;
                        case '黄色':
                            imageColor = '3';
                            break;
                        case '橙色':
                            imageColor = '2';
                            break;
                        case '红色':
                            imageColor = '1';
                            break;
                        default:
                            console.error(`Warning level:(${e.level}) not found`);
                    }
                    e.imageColor = imageColor;
                    imageType = vm.weatherWarningTypeMapper[e.type];
                    if (!imageType) {
                        console.error(`Warning type:(${e.type}) not found`);
                    }
                    e.imageType = imageType;
                    e.from = "warning";
                    return e
                }));
        }
    }
}
</script>
<style scoped>
.notes {
    display: flex;

    .item {
        flex: 1;
        padding-left: 20px;

        .title {
            font-size: 18px;
            font-family: Microsoft YaHei;
            font-weight: bold;
            color: rgba(255, 255, 255, 1);
            text-align: center;
            line-height: 61px;

            &.should {
                background: rgba(103, 194, 58, 1);
            }

            &.real {
                background: rgba(64, 158, 255, 1);
            }
        }

        .map {
            height: calc(100vh - 240px);
            border: 1px solid #ddd;
            /* background: #333; */
        }
    }
}
</style>
