<template>
<div class="warning-made-home" :class="type">
    <div class="wrap-box">
        <div class="left-box">
            <div class="top-title">
                <div class="text" v-if="isWarning">天气警报选择</div>
                <div class="text" v-else>预警信号选择</div>
            </div>
            <div class="left-box-main">
                <div class="types-selector weather-types">
                    <table class="line" cellspacing="0" cellpadding="0" border="0" v-for="(line,indexOfLine) in types" :key="indexOfLine">
                        <tr>
                            <td class="label">
                                {{line.label}}
                            </td>
                            <td>
                                <div class="options item flex wrap">
                                    <template v-for="indexOfItem in min(line.items.length,4)">
                                        <div class="item" v-for="item in [line.items[indexOfItem-1]]" :class="{available:item}" :key="indexOfItem" v-if="isWarning">
                                            <div class="inner" v-if="item" :class="{selected:item.selected}" @click="onClickSelectorItem(item)">
                                                <div class="icon-wrapper">
                                                    <c-iconfont :name="item.icon" type="font" class="icon"></c-iconfont>
                                                </div>
                                                <div class="desc">{{item.desc}}</div>
                                            </div>
                                        </div>
                                        <div class="item" v-for="item in [line.items[indexOfItem-1]]" :class="{available:item}" :key="indexOfItem" v-else>
                                            <div class="inner" v-if="item" :class="{selected:item.selected}" @click="alarmMain = item">
                                                <img-alarm class="pic" :info="item"></img-alarm>
                                            </div>
                                        </div>
                                    </template>
                                </div>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>

            <div class="top-title" v-if="isWarning">
                <div class="text">已发预警信号</div>
            </div>
            <div class="left-box-main" v-if="isWarning">
                <div class="alarms">
                    <alarm-item :info="{imageType:item.imageType,imageColor:item.imageColor}" v-for="(item,index) in alarms" :key="index" :item="item"></alarm-item>
                    <div class="info text-center" v-if="!alarms||!alarms.length">
                        暂无预警
                    </div>
                </div>
            </div>
            <div class="left-box-main" v-else>
                <div class="flex acitons">
                    <c-iconfont class="item" type="font" name="shezhi"></c-iconfont>
                    <c-iconfont class="item" type="font" name="yujingshengjiangji"></c-iconfont>
                    <c-iconfont class="item" type="font" name="yujingjiechu"></c-iconfont>
                </div>
            </div>
        </div>

        <div class="center-box">
            <div class="top-title">
                <div class="text" v-if="isWarning">天气警报制作</div>
                <div class="text" v-else>预警信号发布</div>
            </div>
            <div class="content-box">
                <el-form label-width="80px">
                    <div class="form-item">
                        <div class="item-content">
                            <div class="text-center" v-if="!isWarning">
                                <div class="alarm-show" v-show="alarmMain.imageType">
                                    <img-alarm class="pic" :info="{imageType:alarmMain.imageType,imageColor:alarmMain.imageColor}"></img-alarm>
                                    <c-iconfont class="help" type="font" name="yiwen"></c-iconfont>
                                </div>
                            </div>
                            <el-row>
                                <el-col :span="8">
                                    <el-form-item label="发布单位">
                                        <c-select v-model="form.XXX_PROP_WARNING_ORGANIZE" options="organiseType" placeholder="请选择" @label-selected="label=>form.XXX_PROP_WARNING_ORGANIZE_NAME = label"></c-select>
                                    </el-form-item>
                                </el-col>
                                <el-col :span="10">
                                    <el-form-item label="发布时间">
                                        <el-date-picker v-model="form.publishTime" type="datetime" format="yyyy-MM-dd HH:mm" value-format="yyyy-MM-dd HH:mm">
                                        </el-date-picker>
                                    </el-form-item>
                                </el-col>
                                <el-col :span="6">
                                    <el-form-item label="期号">
                                        <el-input v-model="form.issue"></el-input>
                                    </el-form-item>
                                </el-col>
                            </el-row>
                            <el-form-item label="警报类型" v-if="isWarning">
                                <el-input v-model="form.XXX_PROP_WARNING_TYPE"></el-input>
                            </el-form-item>
                            <el-form-item label="警报内容" v-if="isWarning">
                                <el-input v-model="form.alarmContent" type="textarea" :autosize="{ minRows: 6, maxRows: 6}"></el-input>
                            </el-form-item>
                            <el-form-item label="已发警报" v-if="isWarning">
                                <el-input v-model="form.warningContent" type="textarea" :autosize="{ minRows: 3, maxRows: 3}"></el-input>
                            </el-form-item>
                            <el-form-item label="预警标题" v-if="!isWarning">
                                <el-input v-model="form.XXX_PROP_ALARM_TITLE"></el-input>
                            </el-form-item>
                            <el-form-item label="预警内容" v-if="!isWarning">
                                <el-input v-model="form.XXX_PROP_ALARM_CONTENT" type="textarea" :autosize="{ minRows: 3, maxRows: 3}"></el-input>
                            </el-form-item>
                            <el-form-item label="防御指南" v-if="!isWarning">
                                <el-input v-model="form.XXX_PROP_ALARM_GRID" type="textarea" :autosize="{ minRows: 2, maxRows: 2}"></el-input>
                            </el-form-item>
                            <el-form-item label="影响范围" v-if="!isWarning">
                                <div class="checkbox-box">
                                    <el-checkbox v-model="item.selected" :label="item.label" border v-for="(item,index) in areas" :key="index"></el-checkbox>
                                </div>
                            </el-form-item>
                            <el-form-item label="发布渠道">
                                <div class="checkbox-box">
                                    <el-checkbox v-model="channel.selected" :label="channel.label" border v-for="(channel,index) in channels" :key="index"></el-checkbox>
                                </div>
                            </el-form-item>
                            <el-form-item label="区县提醒">
                                <el-col :span="4">
                                    <el-switch v-model="form.XXX_PROP_WARNING_AREA_REMIND" active-text="是" inactive-text="否"></el-switch>
                                </el-col>
                                <el-col :span="18"></el-col>
                            </el-form-item>
                            <el-divider></el-divider>
                        </div>
                        <div class="item-content">
                            <div class="footer">
                                <el-button type="success" @click="preview()">预览</el-button>
                                <el-button type="primary" @click="publish()">发布</el-button>
                            </div>
                        </div>
                    </div>
                </el-form>
            </div>
        </div>
        <div class="right-box">
            <div class="top-title">
                <div class="text" v-if="isWarning">天气警报发布单</div>
                <div class="text" v-else>预警信号发布单</div>
                <div class="actions">
                    <div class="action float-left">
                        <c-iconfont type="font" name="lishitongleifabu"></c-iconfont>
                        历史同类发布
                    </div>
                    <div class="action float-left">
                        <c-iconfont type="font" name="dayin"></c-iconfont>
                        打印
                    </div>
                    <div class="clearfix"></div>
                </div>
            </div>
            <div class="content-box">
                <red-head :type="type" :data="dataReadHead" v-if="dataReadHead"></red-head>
                <no-data type="big" v-else>
                    请点击左侧预览按钮
                </no-data>
            </div>
        </div>
    </div>
    <dialog-form @success="submitSuccess" title="发布产品" :visible.sync="visibleDialog" :getPayload="formatPayloadSend" :confirmDisabled="false" remote="requestDialogFormWeatherSend" v-if="formDialog">
        <template>
            <el-tabs v-model="tabsListValue1" type="card" @tab-click>
                <el-tab-pane :key="item.key" v-for="(item, index) in channels" :label="item.label" :name="item.key" v-if="item.selected">
                    <div class="consult">
                        <el-row :gutter="10">
                            <el-col :span="18">
                                <div class="consult-right">
                                    <div class="top">
                                        <div class="select-all">发布内容</div>
                                    </div>
                                    <div class="consult-list">
                                        <!-- <content-weather :data="dataReadHeadSync" v-if="isWarning"></content-weather>
                                        <content-alarm :data="dataReadHeadSync" v-else></content-alarm> -->
                                        <el-input v-model="contentTabRoot[item.key]" type="textarea" :autosize="{ minRows: 3, maxRows: 20}"></el-input>
                                    </div>
                                </div>
                            </el-col>
                            <el-col :span="6">
                                <div class="consult-left">
                                    <div class="top">
                                        <div class="select-all">服务用户</div>
                                    </div>
                                    <div class="tree">
                                        <el-tree :data="tabTree" show-checkbox default-expand-all node-key="id" ref="tree" highlight-current :props="defaultProps"></el-tree>
                                    </div>
                                </div>
                            </el-col>
                        </el-row>
                    </div>
                </el-tab-pane>
            </el-tabs>
        </template>
    </dialog-form>
</div>
</template>

<script>
// import moment from 'moment'
import {
    mapGetters
} from 'vuex'
import {
    requestGetAlarms,
    requestMakeDialogTabTreeList,
    requestSelectorList
} from '@/common/remote/'
import {
    mapFrontMapper
} from '@/common/mapper'
import {
    mapFrontOptions
} from '@/common/options'
import {
    transformAlarmsInfo
} from "@/common/tools/"
import {
    transformDate
} from "@/common/filter"
import AlarmItem from '../../components/alarm-item/index.vue'
import redHead from '../../components/red-head.vue'
import contentWeather from '../../components/content-weather.vue'
import contentAlarm from '../../components/content-alarm.vue'
const generateTypesOfWarning = () => [{
    "label": "台风",
    "items": [{
        "icon": "taifengxiaoxi",
        "desc": "台风消息",
        "selected": false
    }, {
        "icon": "taifengjingbao",
        "desc": "台风警报",
        "selected": false
    }, {
        "icon": "taifengjinjijingbao",
        "desc": "台风紧急警报",
        "selected": false
    }]
}, {
    "label": "降水类",
    "items": [{
        "icon": "baoyu",
        "desc": "暴雨警报",
        "selected": false
    }, {
        "icon": "daoxue",
        "desc": "大雪警报",
        "selected": false
    }, {
        "icon": "baoxue",
        "desc": "暴雪警报",
        "selected": false
    }]
}, {
    "label": "气温类",
    "items": [{
        "icon": "lengkongqi",
        "desc": "冷空气消息",
        "selected": false
    }, {
        "icon": "qianglengkongqi",
        "desc": "强冷空气消息",
        "selected": false
    }, {
        "icon": "hanchao1",
        "desc": "寒潮警报",
        "selected": false
    }, {
        "icon": "jiangwenbaogao",
        "desc": "降温报告",
        "selected": false
    }, {
        "icon": "yanhanjingbao",
        "desc": "严寒警报",
        "selected": false
    }, {
        "icon": "gaowenbaogao",
        "desc": "高温报告",
        "selected": false
    }, {
        "icon": "kurejingbao",
        "desc": "酷热警报",
        "selected": false
    }, {
        "icon": "diwenbaogao01",
        "desc": "低温报告",
        "selected": false
    }]
}, {
    "label": "雾霾类",
    "items": [{
        "icon": "nongwujingbao",
        "desc": "浓雾警报",
        "selected": false
    }, {
        "icon": "mai",
        "desc": "霾警报",
        "selected": false
    }]
}, {
    "label": "其他类",
    "items": [{
        "icon": "dafengjingbao",
        "desc": "大风警报",
        "selected": false
    }, {
        "icon": "leibaojingbao",
        "desc": "雷暴警报",
        "selected": false
    }]
}];
export default {
    components: {
        AlarmItem,
        redHead,
        contentWeather,
        contentAlarm,
    },
    data() {
        return {
            form: {
                publishTime: new Date(),
                XXX_PROP_WARNING_TYPE: "",
                alarmContent: "",
                warningContent: "",
                XXX_PROP_WARNING_ORGANIZE_NAME: ""
            },
            alarmMain: {
                imageType: null,
                imageColor: null
            },
            // types: null,
            typesOfAlarm: null,
            typesOfWarning: null,
            alarms: [],
            channels: [{
                "label": "传真",
                "key": "FAX",
                "selected": false
            }, {
                "label": "邮件",
                "key": "EMAIL",
                "selected": false
            }, {
                "label": "FTP",
                "key": "FTP",
                "selected": false
            }, {
                "label": "短信",
                "key": "BSMS",
                "selected": false
            }, {
                "label": "微博",
                "key": "WEIBO",
                "selected": false
            }, {
                "label": "微信",
                "key": "WeChat",
                "selected": false
            }],
            areas: null,
            visibleDialog: false,
            formDialog: {},
            // tabsList1: [{
            //         name: "邮件",
            //         id: "01",
            //         title: "邮件"
            //     },
            //     {
            //         name: "传真",
            //         id: "02",
            //         title: "传真"
            //     },
            //     {
            //         name: "大喇叭",
            //         id: "03",
            //         title: "大喇叭"
            //     },
            //     {
            //         name: "微博",
            //         id: "04",
            //         title: "微博"
            //     }
            // ],
            tabsListValue1: "FAX",
            defaultProps: {
                children: "children",
                label: "label"
            },
            tabTree: [],
            dataReadHead: null,
            contentTabRoot: {}
            // end of data
        };
    },
    computed: {
        types() {
            const {
                isWarning,
                typesOfAlarm,
                typesOfWarning
            } = this;
            return isWarning ? typesOfWarning : typesOfAlarm;
        },
        warningTypesLeft() {
            const val = this.types;
            if (!val) {
                return ""
            }
            return val.map(e => e.items.filter(e => e.selected).map(e => e.desc).join("和")).filter(e => e).join("和")
        },
        dataReadHeadSync() {
            const {
                form,
                alarmMain,
                isWarning
            } = this;
            const common = {
                XXXPROP_RED_HEAD_PUB_TIME: form.publishTime,
                // // NOTE: 当前用户信息
                XXXPROP_RED_HEAD_USER: this.accountName
            }
            if (isWarning) {
                return {
                    ...common,
                    XXXPROP_RED_HEAD_NO: form.issue,
                    XXXPROP_RED_HEAD_TYPE: form.XXX_PROP_WARNING_TYPE,
                    XXXPROP_RED_HEAD_CONTENT: form.alarmContent,
                    XXXPROP_RED_HEAD_ALL_READY: form.warningContent,
                    XXXPROP_RED_HEAD_SEND_TIME: form.publishTime
                }
            } else {
                return {
                    ...common,
                    XXXPROP_RED_HEAD_NO: form.issue,
                    XXXPROP_RED_HEAD_ORGANIZE: form.XXX_PROP_WARNING_ORGANIZE_NAME,
                    XXXPROP_RED_HEAD_TITLE: form.XXX_PROP_ALARM_TITLE,
                    XXXPROP_RED_HEAD_CONTENT: form.XXX_PROP_ALARM_CONTENT,
                    XXXPROP_TRACE_ALARM_TYPE: alarmMain.imageType,
                    XXXPROP_TRACE_ALARM_LEVEL: alarmMain.imageColor,
                    XXXPROP_RED_HEAD_GUID: form.XXX_PROP_ALARM_GRID
                }
            }
        },
        type() {
            return this.$route.params.type
        },
        isWarning() {
            return this.type == 'warning'
        },
        channelsSelected() {
            return this.channels.filter(e => e.selected);
        },
        ...mapGetters(['accountName', 'accountOrgId']),
        ...mapFrontMapper(['weatherWarningType']),
        ...mapFrontOptions(['areas'])
    },
    watch: {
        // types: {
        //     handler(
        //         val
        //     ) {
        //         if (val) {
        //             this.form.XXX_PROP_WARNING_TYPE = val.map(e => e.items.filter(e => e.selected).map(e => e.desc).join("和")).filter(e => e).join("和")
        //         }
        //     },
        //     deep: true
        // }
        warningTypesLeft(val, old) {
            if (val != old) {
                this.form.XXX_PROP_WARNING_TYPE = val
            }
        }
    },
    mounted() {
        requestGetAlarms().then(res => {
            this.alarms = res.data.list.map(e => ({
                ...transformAlarmsInfo({
                    type: e.XXXPROP_ALARMS_TYPE,
                    level: e.XXXPROP_ALARMS_LEVEL
                }),
                content: e.XXXPROP_ALARMS_CONTENT,
                time: e.XXXPROP_ALARMS_TIME,
                ...e
            }))
        })
        requestMakeDialogTabTreeList().then(res => {
            this.tabTree = res.data.list;
        });

        // this.typesOfWarning = generateTypesOfWarning();
        requestSelectorList().then(res => {
            this.typesOfWarning = res.data.list;
        });

        this.areas = JSON.parse(JSON.stringify(this.areasOptions));

        const ents = Object.entries(this.weatherWarningTypeMapper);
        const typesOfAlarm = [
            ...ents.slice(0, 2),
            ...ents.slice(3, 5),
            ...ents.slice(6, 7),
            ...ents.slice(8, 10),
            ...ents.slice(11, 14),
        ].map(([label, code]) => ({
            label,
            "items": ([1, 2, 3, 4]).map(e => ({
                imageType: code,
                imageColor: e
            }))
        }));
        this.typesOfAlarm = typesOfAlarm;
    },
    beforeRouteUpdate(to, from, next) {
        this.dataReadHead = null;
        // Object.keys(this.form).forEach(e => this.form[e] = undefined)
        // Object.keys(this.alarmMain).forEach(e => this.alarmMain[e] = undefined)
        next()
    },
    methods: {
        onClickSelectorItem(item) {
            item.selected = !item.selected
            if (item.selected) {
                if (this.form.alarmContent == null) {
                    this.form.alarmContent = ''
                }
                this.form.alarmContent += item.remark;
            }
        },
        handleClick(tab, event) {
            console.log(tab, event);
        },
        min(val, min) {
            return val < min ? min : val
        },
        submitSuccess() {

        },
        preview() {
            this.dataReadHead = this.dataReadHeadSync;
        },
        publish() {
            const {
                channelsSelected,
                dataReadHeadSync
            } = this;
            const [first] = channelsSelected;
            if (!first) {
                this.$message.warning("请选择发布渠道")
                return
            }
            const contentTabRoot = {};
            const dataInner = dataReadHeadSync;
            channelsSelected.forEach(e => contentTabRoot[e.key] =
`台州电视台、广播电台：
\t台州市气象台${transformDate(dataInner.XXXPROP_RED_HEAD_PUB_TIME,"YYYY年MM月DD日HH时mm分")}发布${dataInner.XXXPROP_RED_HEAD_TYPE}，请在收到此通知单后15分钟内在电视节目中播出${dataInner.XXXPROP_RED_HEAD_TYPE}，并滚动播出以下内容：

    ${dataInner.XXXPROP_RED_HEAD_CONTENT}${dataInner.XXXPROP_RED_HEAD_ALL_READY}


台州气象台
制 作 人：${dataInner.XXXPROP_RED_HEAD_USER}
签 发 人：翁之梅
发送时间：${transformDate(dataInner.XXXPROP_RED_HEAD_SEND_TIME,"YYYY年MM月DD日HH时mm分")}`);
            this.contentTabRoot = contentTabRoot;
            this.tabsListValue1 = first.key;
            this.visibleDialog = true
        },
        formatPayloadSend() {
            const {
                form,
                contentTabRoot
            } = this;
            const typesSelected = this.types.reduce((p, c) => {
                p.push(...c.items);
                return p;
            }, []).filter(e => e.selected);
            return {
                alarmCode: typesSelected.map(e => e.icon).join(","),
                alarmName: typesSelected.map(e => e.desc).join(","),
                publishOrg: this.accountOrgId,
                publishUser: this.accountName,
                makeUser: this.accountName,
                status: 1,
                publish: 0,
                finish: 0,
                map: contentTabRoot,
                ...form
            }
        }
        // end of methods
    }
};
</script>

<style scoped>
.warning-made-home {
    background: #f6f6f6;
    padding: 15px 20px 0 15px;
    height: 100%;
    box-sizing: border-box;

    .wrap-box {
        display: flex;
        justify-content: space-between;

        .left-box {
            width: 420px;
            position: relative;
            background: #fff;

            .left-box-main .alarms {
                height: calc(100vh - 852px);
                min-height: 100px;
                overflow: auto;
            }

            .content-box {
                padding: 10px 20px 0;

                .tree-box {
                    margin-top: 23px;
                }
            }

            .warning-tool {
                margin-top: 14px;
            }
        }
    }

    .center-box {
        flex: 1;
        background: #fff;
        margin-left: 18px;

        .content-box {
            padding: 0 30px 33px;

            .item-title {
                padding: 20px 0;
                font-size: 16px;
            }

            .item-content {
                padding: 20px 20px;
                font-size: 14px;

                .checkbox-box {
                    .el-checkbox {
                        margin: 5px 5px !important;
                    }
                }

                .footer {
                    display: flex;
                    justify-content: center;
                    align-items: center;
                }
            }
        }
    }

    .right-box {
        /* flex: 0.5; */
        width: 620px;
        background: #fff;
        margin-left: 22px;

        .content-box {
            padding: 10px 20px 0 20px;
        }
    }
}

.top-title {
    padding: 20px;
    border-bottom: 1px solid rgba(228, 231, 237, 1);
    display: flex;
    justify-content: space-between;

    .text {
        font-size: 18px;
        font-family: Microsoft YaHei;
        font-weight: 400;
        color: rgba(48, 49, 51, 1);
    }

    .actions {
        text-align: right;

        .action,
        .iconfont {
            font-size: 14px;
            font-family: Microsoft YaHei;
            font-weight: 400;
            color: rgba(144, 147, 153, 1);
        }

        .action {
            margin-left: 22px;
        }
    }
}

.no-border {
    border-bottom: none;
}

.title {
    font-size: 14px;
    font-family: Microsoft YaHei;
    color: rgba(96, 98, 102, 1);
}

.consult {
    .top {
        background: rgba(246, 247, 251, 1);
        border: 1px solid rgba(228, 231, 237, 1);
        border-radius: 5px 5px 0 0;

        .select-all {
            font-size: 13px;
            padding: 14px;
        }
    }
}

.acitons {
    padding: 0 60px;

    .item {
        text-align: center;
        font-size: 27px;
        color: rgba(192, 196, 204, 1);
        line-height: 2;
        cursor: pointer;
    }
}

.alarm-show {
    position: relative;
    margin-bottom: 10px;

    .pic {
        height: 80px;
    }

    .help {
        position: absolute;
        top: 0;
        margin-left: 4px;
        font-size: 20px;
        color: rgba(192, 196, 204, 1);
        cursor: pointer;
    }
}
</style>
<style>
.warning-made-home {
    .left-box {
        .el-input__inner {
            border-radius: 16px;
        }
    }

    .red-head {
        &.warning {
            .head .title-big {
                padding-top: 10px;
            }
        }

        &.alarm {
            .head .title-big {
                padding-top: 10px;
            }
        }
    }
}
</style>
