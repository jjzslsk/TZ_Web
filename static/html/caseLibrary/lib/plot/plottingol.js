var POL = (function () {
  'use strict';

  /**
   * @module ol/obj
   */


  /**
   * Polyfill for Object.assign().  Assigns enumerable and own properties from
   * one or more source objects to a target object.
   * See https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign.
   *
   * @param {!Object} target The target object.
   * @param {...Object} var_sources The source object(s).
   * @return {!Object} The modified target object.
   */
  const assign = (typeof Object.assign === 'function') ? Object.assign : function(target, var_sources) {
    if (target === undefined || target === null) {
      throw new TypeError('Cannot convert undefined or null to object');
    }

    const output = Object(target);
    for (let i = 1, ii = arguments.length; i < ii; ++i) {
      const source = arguments[i];
      if (source !== undefined && source !== null) {
        for (const key in source) {
          if (source.hasOwnProperty(key)) {
            output[key] = source[key];
          }
        }
      }
    }
    return output;
  };


  /**
   * Removes all properties from an object.
   * @param {Object} object The object to clear.
   */
  function clear(object) {
    for (const property in object) {
      delete object[property];
    }
  }


  /**
   * Polyfill for Object.values().  Get an array of property values from an object.
   * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values
   *
   * @param {!Object<K,V>} object The object from which to get the values.
   * @return {!Array<V>} The property values.
   * @template K,V
   */
  const getValues = (typeof Object.values === 'function') ? Object.values : function(object) {
    const values = [];
    for (const property in object) {
      values.push(object[property]);
    }
    return values;
  };


  /**
   * Determine if an object has any properties.
   * @param {Object} object The object to check.
   * @return {boolean} The object is empty.
   */
  function isEmpty(object) {
    let property;
    for (property in object) {
      return false;
    }
    return !property;
  }

  /**
   * @module ol/events
   */


  /**
   * Key to use with {@link module:ol/Observable~Observable#unByKey}.
   * @typedef {Object} EventsKey
   * @property {Object} [bindTo]
   * @property {ListenerFunction} [boundListener]
   * @property {boolean} callOnce
   * @property {number} [deleteIndex]
   * @property {ListenerFunction} listener
   * @property {import("./events/Target.js").EventTargetLike} target
   * @property {string} type
   * @api
   */


  /**
   * Listener function. This function is called with an event object as argument.
   * When the function returns `false`, event propagation will stop.
   *
   * @typedef {function((Event|import("./events/Event.js").default)): (void|boolean)} ListenerFunction
   * @api
   */


  /**
   * @param {EventsKey} listenerObj Listener object.
   * @return {ListenerFunction} Bound listener.
   */
  function bindListener(listenerObj) {
    const boundListener = function(evt) {
      const listener = listenerObj.listener;
      const bindTo = listenerObj.bindTo || listenerObj.target;
      if (listenerObj.callOnce) {
        unlistenByKey(listenerObj);
      }
      return listener.call(bindTo, evt);
    };
    listenerObj.boundListener = boundListener;
    return boundListener;
  }


  /**
   * Finds the matching {@link module:ol/events~EventsKey} in the given listener
   * array.
   *
   * @param {!Array<!EventsKey>} listeners Array of listeners.
   * @param {!Function} listener The listener function.
   * @param {Object=} opt_this The `this` value inside the listener.
   * @param {boolean=} opt_setDeleteIndex Set the deleteIndex on the matching
   *     listener, for {@link module:ol/events~unlistenByKey}.
   * @return {EventsKey|undefined} The matching listener object.
   */
  function findListener(listeners, listener, opt_this, opt_setDeleteIndex) {
    let listenerObj;
    for (let i = 0, ii = listeners.length; i < ii; ++i) {
      listenerObj = listeners[i];
      if (listenerObj.listener === listener &&
          listenerObj.bindTo === opt_this) {
        if (opt_setDeleteIndex) {
          listenerObj.deleteIndex = i;
        }
        return listenerObj;
      }
    }
    return undefined;
  }


  /**
   * @param {import("./events/Target.js").EventTargetLike} target Target.
   * @param {string} type Type.
   * @return {Array<EventsKey>|undefined} Listeners.
   */
  function getListeners(target, type) {
    const listenerMap = getListenerMap(target);
    return listenerMap ? listenerMap[type] : undefined;
  }


  /**
   * Get the lookup of listeners.
   * @param {Object} target Target.
   * @param {boolean=} opt_create If a map should be created if it doesn't exist.
   * @return {!Object<string, Array<EventsKey>>} Map of
   *     listeners by event type.
   */
  function getListenerMap(target, opt_create) {
    let listenerMap = target.ol_lm;
    if (!listenerMap && opt_create) {
      listenerMap = target.ol_lm = {};
    }
    return listenerMap;
  }


  /**
   * Remove the listener map from a target.
   * @param {Object} target Target.
   */
  function removeListenerMap(target) {
    delete target.ol_lm;
  }


  /**
   * Clean up all listener objects of the given type.  All properties on the
   * listener objects will be removed, and if no listeners remain in the listener
   * map, it will be removed from the target.
   * @param {import("./events/Target.js").EventTargetLike} target Target.
   * @param {string} type Type.
   */
  function removeListeners(target, type) {
    const listeners = getListeners(target, type);
    if (listeners) {
      for (let i = 0, ii = listeners.length; i < ii; ++i) {
        /** @type {import("./events/Target.js").default} */ (target).
          removeEventListener(type, listeners[i].boundListener);
        clear(listeners[i]);
      }
      listeners.length = 0;
      const listenerMap = getListenerMap(target);
      if (listenerMap) {
        delete listenerMap[type];
        if (Object.keys(listenerMap).length === 0) {
          removeListenerMap(target);
        }
      }
    }
  }


  /**
   * Registers an event listener on an event target. Inspired by
   * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
   *
   * This function efficiently binds a `listener` to a `this` object, and returns
   * a key for use with {@link module:ol/events~unlistenByKey}.
   *
   * @param {import("./events/Target.js").EventTargetLike} target Event target.
   * @param {string} type Event type.
   * @param {ListenerFunction} listener Listener.
   * @param {Object=} opt_this Object referenced by the `this` keyword in the
   *     listener. Default is the `target`.
   * @param {boolean=} opt_once If true, add the listener as one-off listener.
   * @return {EventsKey} Unique key for the listener.
   */
  function listen(target, type, listener, opt_this, opt_once) {
    const listenerMap = getListenerMap(target, true);
    let listeners = listenerMap[type];
    if (!listeners) {
      listeners = listenerMap[type] = [];
    }
    let listenerObj = findListener(listeners, listener, opt_this, false);
    if (listenerObj) {
      if (!opt_once) {
        // Turn one-off listener into a permanent one.
        listenerObj.callOnce = false;
      }
    } else {
      listenerObj = {
        bindTo: opt_this,
        callOnce: !!opt_once,
        listener: listener,
        target: target,
        type: type
      };
      /** @type {import("./events/Target.js").default} */ (target).
        addEventListener(type, bindListener(listenerObj));
      listeners.push(listenerObj);
    }

    return listenerObj;
  }


  /**
   * Registers a one-off event listener on an event target. Inspired by
   * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
   *
   * This function efficiently binds a `listener` as self-unregistering listener
   * to a `this` object, and returns a key for use with
   * {@link module:ol/events~unlistenByKey} in case the listener needs to be
   * unregistered before it is called.
   *
   * When {@link module:ol/events~listen} is called with the same arguments after this
   * function, the self-unregistering listener will be turned into a permanent
   * listener.
   *
   * @param {import("./events/Target.js").EventTargetLike} target Event target.
   * @param {string} type Event type.
   * @param {ListenerFunction} listener Listener.
   * @param {Object=} opt_this Object referenced by the `this` keyword in the
   *     listener. Default is the `target`.
   * @return {EventsKey} Key for unlistenByKey.
   */
  function listenOnce(target, type, listener, opt_this) {
    return listen(target, type, listener, opt_this, true);
  }


  /**
   * Unregisters an event listener on an event target. Inspired by
   * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
   *
   * To return a listener, this function needs to be called with the exact same
   * arguments that were used for a previous {@link module:ol/events~listen} call.
   *
   * @param {import("./events/Target.js").EventTargetLike} target Event target.
   * @param {string} type Event type.
   * @param {ListenerFunction} listener Listener.
   * @param {Object=} opt_this Object referenced by the `this` keyword in the
   *     listener. Default is the `target`.
   */
  function unlisten(target, type, listener, opt_this) {
    const listeners = getListeners(target, type);
    if (listeners) {
      const listenerObj = findListener(listeners, listener, opt_this, true);
      if (listenerObj) {
        unlistenByKey(listenerObj);
      }
    }
  }


  /**
   * Unregisters event listeners on an event target. Inspired by
   * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
   *
   * The argument passed to this function is the key returned from
   * {@link module:ol/events~listen} or {@link module:ol/events~listenOnce}.
   *
   * @param {EventsKey} key The key.
   */
  function unlistenByKey(key) {
    if (key && key.target) {
      /** @type {import("./events/Target.js").default} */ (key.target).
        removeEventListener(key.type, key.boundListener);
      const listeners = getListeners(key.target, key.type);
      if (listeners) {
        const i = 'deleteIndex' in key ? key.deleteIndex : listeners.indexOf(key);
        if (i !== -1) {
          listeners.splice(i, 1);
        }
        if (listeners.length === 0) {
          removeListeners(key.target, key.type);
        }
      }
      clear(key);
    }
  }


  /**
   * Unregisters all event listeners on an event target. Inspired by
   * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
   *
   * @param {import("./events/Target.js").EventTargetLike} target Target.
   */
  function unlistenAll(target) {
    const listenerMap = getListenerMap(target);
    if (listenerMap) {
      for (const type in listenerMap) {
        removeListeners(target, type);
      }
    }
  }

  var events = /*#__PURE__*/Object.freeze({
    __proto__: null,
    bindListener: bindListener,
    findListener: findListener,
    getListeners: getListeners,
    listen: listen,
    listenOnce: listenOnce,
    unlisten: unlisten,
    unlistenByKey: unlistenByKey,
    unlistenAll: unlistenAll
  });

  /**
   * @module ol/Disposable
   */

  /**
   * @classdesc
   * Objects that need to clean up after themselves.
   */
  class Disposable {

    constructor() {
      /**
       * The object has already been disposed.
       * @type {boolean}
       * @private
       */
      this.disposed_ = false;
    }

    /**
     * Clean up.
     */
    dispose() {
      if (!this.disposed_) {
        this.disposed_ = true;
        this.disposeInternal();
      }
    }

    /**
     * Extension point for disposable objects.
     * @protected
     */
    disposeInternal() {}
  }

  /**
   * @module ol/functions
   */

  /**
   * Always returns true.
   * @returns {boolean} true.
   */
  function TRUE() {
    return true;
  }

  /**
   * Always returns false.
   * @returns {boolean} false.
   */
  function FALSE() {
    return false;
  }

  /**
   * A reusable function, used e.g. as a default for callbacks.
   *
   * @return {void} Nothing.
   */
  function VOID() {}

  /**
   * @module ol/events/Event
   */

  /**
   * @classdesc
   * Stripped down implementation of the W3C DOM Level 2 Event interface.
   * See https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface.
   *
   * This implementation only provides `type` and `target` properties, and
   * `stopPropagation` and `preventDefault` methods. It is meant as base class
   * for higher level events defined in the library, and works with
   * {@link module:ol/events/Target~Target}.
   */
  class Event {

    /**
     * @param {string} type Type.
     */
    constructor(type) {

      /**
       * @type {boolean}
       */
      this.propagationStopped;

      /**
       * The event type.
       * @type {string}
       * @api
       */
      this.type = type;

      /**
       * The event target.
       * @type {Object}
       * @api
       */
      this.target = null;
    }

    /**
     * Stop event propagation.
     * @api
     */
    preventDefault() {
      this.propagationStopped = true;
    }

    /**
     * Stop event propagation.
     * @api
     */
    stopPropagation() {
      this.propagationStopped = true;
    }

  }


  /**
   * @param {Event|import("./Event.js").default} evt Event
   */
  function stopPropagation(evt) {
    evt.stopPropagation();
  }

  /**
   * @module ol/events/Target
   */


  /**
   * @typedef {EventTarget|Target} EventTargetLike
   */


  /**
   * @classdesc
   * A simplified implementation of the W3C DOM Level 2 EventTarget interface.
   * See https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget.
   *
   * There are two important simplifications compared to the specification:
   *
   * 1. The handling of `useCapture` in `addEventListener` and
   *    `removeEventListener`. There is no real capture model.
   * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.
   *    There is no event target hierarchy. When a listener calls
   *    `stopPropagation` or `preventDefault` on an event object, it means that no
   *    more listeners after this one will be called. Same as when the listener
   *    returns false.
   */
  class Target extends Disposable {
    constructor() {

      super();

      /**
       * @private
       * @type {!Object<string, number>}
       */
      this.pendingRemovals_ = {};

      /**
       * @private
       * @type {!Object<string, number>}
       */
      this.dispatching_ = {};

      /**
       * @private
       * @type {!Object<string, Array<import("../events.js").ListenerFunction>>}
       */
      this.listeners_ = {};

    }

    /**
     * @param {string} type Type.
     * @param {import("../events.js").ListenerFunction} listener Listener.
     */
    addEventListener(type, listener) {
      let listeners = this.listeners_[type];
      if (!listeners) {
        listeners = this.listeners_[type] = [];
      }
      if (listeners.indexOf(listener) === -1) {
        listeners.push(listener);
      }
    }

    /**
     * Dispatches an event and calls all listeners listening for events
     * of this type. The event parameter can either be a string or an
     * Object with a `type` property.
     *
     * @param {{type: string,
     *     target: (EventTargetLike|undefined),
     *     propagationStopped: (boolean|undefined)}|
     *     import("./Event.js").default|string} event Event object.
     * @return {boolean|undefined} `false` if anyone called preventDefault on the
     *     event object or if any of the listeners returned false.
     * @api
     */
    dispatchEvent(event) {
      const evt = typeof event === 'string' ? new Event(event) : event;
      const type = evt.type;
      evt.target = this;
      const listeners = this.listeners_[type];
      let propagate;
      if (listeners) {
        if (!(type in this.dispatching_)) {
          this.dispatching_[type] = 0;
          this.pendingRemovals_[type] = 0;
        }
        ++this.dispatching_[type];
        for (let i = 0, ii = listeners.length; i < ii; ++i) {
          if (listeners[i].call(this, evt) === false || evt.propagationStopped) {
            propagate = false;
            break;
          }
        }
        --this.dispatching_[type];
        if (this.dispatching_[type] === 0) {
          let pendingRemovals = this.pendingRemovals_[type];
          delete this.pendingRemovals_[type];
          while (pendingRemovals--) {
            this.removeEventListener(type, VOID);
          }
          delete this.dispatching_[type];
        }
        return propagate;
      }
    }

    /**
     * @inheritDoc
     */
    disposeInternal() {
      unlistenAll(this);
    }

    /**
     * Get the listeners for a specified event type. Listeners are returned in the
     * order that they will be called in.
     *
     * @param {string} type Type.
     * @return {Array<import("../events.js").ListenerFunction>} Listeners.
     */
    getListeners(type) {
      return this.listeners_[type];
    }

    /**
     * @param {string=} opt_type Type. If not provided,
     *     `true` will be returned if this event target has any listeners.
     * @return {boolean} Has listeners.
     */
    hasListener(opt_type) {
      return opt_type ?
        opt_type in this.listeners_ :
        Object.keys(this.listeners_).length > 0;
    }

    /**
     * @param {string} type Type.
     * @param {import("../events.js").ListenerFunction} listener Listener.
     */
    removeEventListener(type, listener) {
      const listeners = this.listeners_[type];
      if (listeners) {
        const index = listeners.indexOf(listener);
        if (type in this.pendingRemovals_) {
          // make listener a no-op, and remove later in #dispatchEvent()
          listeners[index] = VOID;
          ++this.pendingRemovals_[type];
        } else {
          listeners.splice(index, 1);
          if (listeners.length === 0) {
            delete this.listeners_[type];
          }
        }
      }
    }
  }

  /**
   * @module ol/events/EventType
   */

  /**
   * @enum {string}
   * @const
   */
  var EventType = {
    /**
     * Generic change event. Triggered when the revision counter is increased.
     * @event module:ol/events/Event~Event#change
     * @api
     */
    CHANGE: 'change',

    /**
     * Generic error event. Triggered when an error occurs.
     * @event module:ol/events/Event~Event#error
     * @api
     */
    ERROR: 'error',

    CLEAR: 'clear',
    CONTEXTMENU: 'contextmenu',
    CLICK: 'click',
    DBLCLICK: 'dblclick',
    DRAGENTER: 'dragenter',
    DRAGOVER: 'dragover',
    DROP: 'drop',
    KEYDOWN: 'keydown',
    KEYPRESS: 'keypress',
    LOAD: 'load',
    MOUSEDOWN: 'mousedown',
    MOUSEMOVE: 'mousemove',
    MOUSEOUT: 'mouseout',
    MOUSEUP: 'mouseup',
    MOUSEWHEEL: 'mousewheel',
    MSPOINTERDOWN: 'MSPointerDown',
    RESIZE: 'resize',
    TOUCHSTART: 'touchstart',
    TOUCHMOVE: 'touchmove',
    TOUCHEND: 'touchend',
    WHEEL: 'wheel'
  };

  /**
   * @module ol/Observable
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * An event target providing convenient methods for listener registration
   * and unregistration. A generic `change` event is always available through
   * {@link module:ol/Observable~Observable#changed}.
   *
   * @fires import("./events/Event.js").Event
   * @api
   */
  class Observable extends Target {
    constructor() {

      super();

      /**
       * @private
       * @type {number}
       */
      this.revision_ = 0;

    }

    /**
     * Increases the revision counter and dispatches a 'change' event.
     * @api
     */
    changed() {
      ++this.revision_;
      this.dispatchEvent(EventType.CHANGE);
    }

    /**
     * Get the version number for this object.  Each time the object is modified,
     * its version number will be incremented.
     * @return {number} Revision.
     * @api
     */
    getRevision() {
      return this.revision_;
    }

    /**
     * Listen for a certain type of event.
     * @param {string|Array<string>} type The event type or array of event types.
     * @param {function(?): ?} listener The listener function.
     * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Unique key for the listener. If
     *     called with an array of event types as the first argument, the return
     *     will be an array of keys.
     * @api
     */
    on(type, listener) {
      if (Array.isArray(type)) {
        const len = type.length;
        const keys = new Array(len);
        for (let i = 0; i < len; ++i) {
          keys[i] = listen(this, type[i], listener);
        }
        return keys;
      } else {
        return listen(this, /** @type {string} */ (type), listener);
      }
    }

    /**
     * Listen once for a certain type of event.
     * @param {string|Array<string>} type The event type or array of event types.
     * @param {function(?): ?} listener The listener function.
     * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Unique key for the listener. If
     *     called with an array of event types as the first argument, the return
     *     will be an array of keys.
     * @api
     */
    once(type, listener) {
      if (Array.isArray(type)) {
        const len = type.length;
        const keys = new Array(len);
        for (let i = 0; i < len; ++i) {
          keys[i] = listenOnce(this, type[i], listener);
        }
        return keys;
      } else {
        return listenOnce(this, /** @type {string} */ (type), listener);
      }
    }

    /**
     * Unlisten for a certain type of event.
     * @param {string|Array<string>} type The event type or array of event types.
     * @param {function(?): ?} listener The listener function.
     * @api
     */
    un(type, listener) {
      if (Array.isArray(type)) {
        for (let i = 0, ii = type.length; i < ii; ++i) {
          unlisten(this, type[i], listener);
        }
        return;
      } else {
        unlisten(this, /** @type {string} */ (type), listener);
      }
    }
  }

  /**
   * @module ol/util
   */

  /**
   * @return {?} Any return.
   */
  function abstract() {
    return /** @type {?} */ ((function() {
      throw new Error('Unimplemented abstract method.');
    })());
  }

  /**
   * Counter for getUid.
   * @type {number}
   * @private
   */
  let uidCounter_ = 0;

  /**
   * Gets a unique ID for an object. This mutates the object so that further calls
   * with the same object as a parameter returns the same value. Unique IDs are generated
   * as a strictly increasing sequence. Adapted from goog.getUid.
   *
   * @param {Object} obj The object to get the unique ID for.
   * @return {string} The unique ID for the object.
   * @api
   */
  function getUid(obj) {
    return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));
  }

  /**
   * OpenLayers version.
   * @type {string}
   */
  const VERSION = 'latest';

  /**
   * @module ol/AssertionError
   */

  /**
   * Error object thrown when an assertion failed. This is an ECMA-262 Error,
   * extended with a `code` property.
   * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error.
   */
  class AssertionError extends Error {

    /**
     * @param {number} code Error code.
     */
    constructor(code) {
      const path =  VERSION ;
      const message = 'Assertion failed. See https://openlayers.org/en/' + path +
      '/doc/errors/#' + code + ' for details.';

      super(message);

      /**
       * Error code. The meaning of the code can be found on
       * https://openlayers.org/en/latest/doc/errors/ (replace `latest` with
       * the version found in the OpenLayers script's header comment if a version
       * other than the latest is used).
       * @type {number}
       * @api
       */
      this.code = code;

      /**
       * @type {string}
       */
      this.name = 'AssertionError';

      // Re-assign message, see https://github.com/Rich-Harris/buble/issues/40
      this.message = message;
    }

  }

  /**
   * @module ol/asserts
   */

  /**
   * @param {*} assertion Assertion we expected to be truthy.
   * @param {number} errorCode Error code.
   */
  function assert(assertion, errorCode) {
    if (!assertion) {
      throw new AssertionError(errorCode);
    }
  }

  /**
   * @module ol/ObjectEventType
   */

  /**
   * @enum {string}
   */
  var ObjectEventType = {
    /**
     * Triggered when a property is changed.
     * @event module:ol/Object.ObjectEvent#propertychange
     * @api
     */
    PROPERTYCHANGE: 'propertychange'
  };

  /**
   * @module ol/Object
   */


  /**
   * @classdesc
   * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.
   */
  class ObjectEvent extends Event {

    /**
     * @param {string} type The event type.
     * @param {string} key The property name.
     * @param {*} oldValue The old value for `key`.
     */
    constructor(type, key, oldValue) {
      super(type);

      /**
       * The name of the property whose value is changing.
       * @type {string}
       * @api
       */
      this.key = key;

      /**
       * The old value. To get the new value use `e.target.get(e.key)` where
       * `e` is the event object.
       * @type {*}
       * @api
       */
      this.oldValue = oldValue;

    }

  }


  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Most non-trivial classes inherit from this.
   *
   * This extends {@link module:ol/Observable} with observable
   * properties, where each property is observable as well as the object as a
   * whole.
   *
   * Classes that inherit from this have pre-defined properties, to which you can
   * add your owns. The pre-defined properties are listed in this documentation as
   * 'Observable Properties', and have their own accessors; for example,
   * {@link module:ol/Map~Map} has a `target` property, accessed with
   * `getTarget()` and changed with `setTarget()`. Not all properties are however
   * settable. There are also general-purpose accessors `get()` and `set()`. For
   * example, `get('target')` is equivalent to `getTarget()`.
   *
   * The `set` accessors trigger a change event, and you can monitor this by
   * registering a listener. For example, {@link module:ol/View~View} has a
   * `center` property, so `view.on('change:center', function(evt) {...});` would
   * call the function whenever the value of the center property changes. Within
   * the function, `evt.target` would be the view, so `evt.target.getCenter()`
   * would return the new center.
   *
   * You can add your own observable properties with
   * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.
   * You can listen for changes on that property value with
   * `object.on('change:prop', listener)`. You can get a list of all
   * properties with {@link module:ol/Object~BaseObject#getProperties}.
   *
   * Note that the observable properties are separate from standard JS properties.
   * You can, for example, give your map object a title with
   * `map.title='New title'` and with `map.set('title', 'Another title')`. The
   * first will be a `hasOwnProperty`; the second will appear in
   * `getProperties()`. Only the second is observable.
   *
   * Properties can be deleted by using the unset method. E.g.
   * object.unset('foo').
   *
   * @fires ObjectEvent
   * @api
   */
  class BaseObject extends Observable {

    /**
     * @param {Object<string, *>=} opt_values An object with key-value pairs.
     */
    constructor(opt_values) {
      super();

      // Call {@link module:ol/util~getUid} to ensure that the order of objects' ids is
      // the same as the order in which they were created.  This also helps to
      // ensure that object properties are always added in the same order, which
      // helps many JavaScript engines generate faster code.
      getUid(this);

      /**
       * @private
       * @type {!Object<string, *>}
       */
      this.values_ = {};

      if (opt_values !== undefined) {
        this.setProperties(opt_values);
      }
    }

    /**
     * Gets a value.
     * @param {string} key Key name.
     * @return {*} Value.
     * @api
     */
    get(key) {
      let value;
      if (this.values_.hasOwnProperty(key)) {
        value = this.values_[key];
      }
      return value;
    }

    /**
     * Get a list of object property names.
     * @return {Array<string>} List of property names.
     * @api
     */
    getKeys() {
      return Object.keys(this.values_);
    }

    /**
     * Get an object of all property names and values.
     * @return {Object<string, *>} Object.
     * @api
     */
    getProperties() {
      return assign({}, this.values_);
    }

    /**
     * @param {string} key Key name.
     * @param {*} oldValue Old value.
     */
    notify(key, oldValue) {
      let eventType;
      eventType = getChangeEventType(key);
      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));
      eventType = ObjectEventType.PROPERTYCHANGE;
      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));
    }

    /**
     * Sets a value.
     * @param {string} key Key name.
     * @param {*} value Value.
     * @param {boolean=} opt_silent Update without triggering an event.
     * @api
     */
    set(key, value, opt_silent) {
      if (opt_silent) {
        this.values_[key] = value;
      } else {
        const oldValue = this.values_[key];
        this.values_[key] = value;
        if (oldValue !== value) {
          this.notify(key, oldValue);
        }
      }
    }

    /**
     * Sets a collection of key-value pairs.  Note that this changes any existing
     * properties and adds new ones (it does not remove any existing properties).
     * @param {Object<string, *>} values Values.
     * @param {boolean=} opt_silent Update without triggering an event.
     * @api
     */
    setProperties(values, opt_silent) {
      for (const key in values) {
        this.set(key, values[key], opt_silent);
      }
    }

    /**
     * Unsets a property.
     * @param {string} key Key name.
     * @param {boolean=} opt_silent Unset without triggering an event.
     * @api
     */
    unset(key, opt_silent) {
      if (key in this.values_) {
        const oldValue = this.values_[key];
        delete this.values_[key];
        if (!opt_silent) {
          this.notify(key, oldValue);
        }
      }
    }
  }


  /**
   * @type {Object<string, string>}
   */
  const changeEventTypeCache = {};


  /**
   * @param {string} key Key name.
   * @return {string} Change name.
   */
  function getChangeEventType(key) {
    return changeEventTypeCache.hasOwnProperty(key) ?
      changeEventTypeCache[key] :
      (changeEventTypeCache[key] = 'change:' + key);
  }

  /**
   * @module ol/Feature
   */

  /**
   * @typedef {typeof Feature|typeof import("./render/Feature.js").default} FeatureClass
   */

  /**
   * @typedef {Feature|import("./render/Feature.js").default} FeatureLike
   */

  /**
   * @classdesc
   * A vector object for geographic features with a geometry and other
   * attribute properties, similar to the features in vector file formats like
   * GeoJSON.
   *
   * Features can be styled individually with `setStyle`; otherwise they use the
   * style of their vector layer.
   *
   * Note that attribute properties are set as {@link module:ol/Object} properties on
   * the feature object, so they are observable, and have get/set accessors.
   *
   * Typically, a feature has a single geometry property. You can set the
   * geometry using the `setGeometry` method and get it with `getGeometry`.
   * It is possible to store more than one geometry on a feature using attribute
   * properties. By default, the geometry used for rendering is identified by
   * the property name `geometry`. If you want to use another geometry property
   * for rendering, use the `setGeometryName` method to change the attribute
   * property associated with the geometry for the feature.  For example:
   *
   * ```js
   *
   * import Feature from 'ol/Feature';
   * import Polygon from 'ol/geom/Polygon';
   * import Point from 'ol/geom/Point';
   *
   * var feature = new Feature({
   *   geometry: new Polygon(polyCoords),
   *   labelPoint: new Point(labelCoords),
   *   name: 'My Polygon'
   * });
   *
   * // get the polygon geometry
   * var poly = feature.getGeometry();
   *
   * // Render the feature as a point using the coordinates from labelPoint
   * feature.setGeometryName('labelPoint');
   *
   * // get the point geometry
   * var point = feature.getGeometry();
   * ```
   *
   * @api
   * @template {import("./geom/Geometry.js").default} Geometry
   */
  class Feature extends BaseObject {
    /**
     * @param {Geometry|Object<string, *>=} opt_geometryOrProperties
     *     You may pass a Geometry object directly, or an object literal containing
     *     properties. If you pass an object literal, you may include a Geometry
     *     associated with a `geometry` key.
     */
    constructor(opt_geometryOrProperties) {

      super();

      /**
       * @private
       * @type {number|string|undefined}
       */
      this.id_ = undefined;

      /**
       * @type {string}
       * @private
       */
      this.geometryName_ = 'geometry';

      /**
       * User provided style.
       * @private
       * @type {import("./style/Style.js").StyleLike}
       */
      this.style_ = null;

      /**
       * @private
       * @type {import("./style/Style.js").StyleFunction|undefined}
       */
      this.styleFunction_ = undefined;

      /**
       * @private
       * @type {?import("./events.js").EventsKey}
       */
      this.geometryChangeKey_ = null;

      listen(
        this, getChangeEventType(this.geometryName_),
        this.handleGeometryChanged_, this);

      if (opt_geometryOrProperties) {
        if (typeof /** @type {?} */ (opt_geometryOrProperties).getSimplifiedGeometry === 'function') {
          const geometry = /** @type {Geometry} */ (opt_geometryOrProperties);
          this.setGeometry(geometry);
        } else {
          /** @type {Object<string, *>} */
          const properties = opt_geometryOrProperties;
          this.setProperties(properties);
        }
      }
    }

    /**
     * Clone this feature. If the original feature has a geometry it
     * is also cloned. The feature id is not set in the clone.
     * @return {Feature} The clone.
     * @api
     */
    clone() {
      const clone = new Feature(this.getProperties());
      clone.setGeometryName(this.getGeometryName());
      const geometry = this.getGeometry();
      if (geometry) {
        clone.setGeometry(geometry.clone());
      }
      const style = this.getStyle();
      if (style) {
        clone.setStyle(style);
      }
      return clone;
    }

    /**
     * Get the feature's default geometry.  A feature may have any number of named
     * geometries.  The "default" geometry (the one that is rendered by default) is
     * set when calling {@link module:ol/Feature~Feature#setGeometry}.
     * @return {Geometry|undefined} The default geometry for the feature.
     * @api
     * @observable
     */
    getGeometry() {
      return (
        /** @type {Geometry|undefined} */ (this.get(this.geometryName_))
      );
    }

    /**
     * Get the feature identifier.  This is a stable identifier for the feature and
     * is either set when reading data from a remote source or set explicitly by
     * calling {@link module:ol/Feature~Feature#setId}.
     * @return {number|string|undefined} Id.
     * @api
     */
    getId() {
      return this.id_;
    }

    /**
     * Get the name of the feature's default geometry.  By default, the default
     * geometry is named `geometry`.
     * @return {string} Get the property name associated with the default geometry
     *     for this feature.
     * @api
     */
    getGeometryName() {
      return this.geometryName_;
    }

    /**
     * Get the feature's style. Will return what was provided to the
     * {@link module:ol/Feature~Feature#setStyle} method.
     * @return {import("./style/Style.js").StyleLike} The feature style.
     * @api
     */
    getStyle() {
      return this.style_;
    }

    /**
     * Get the feature's style function.
     * @return {import("./style/Style.js").StyleFunction|undefined} Return a function
     * representing the current style of this feature.
     * @api
     */
    getStyleFunction() {
      return this.styleFunction_;
    }

    /**
     * @private
     */
    handleGeometryChange_() {
      this.changed();
    }

    /**
     * @private
     */
    handleGeometryChanged_() {
      if (this.geometryChangeKey_) {
        unlistenByKey(this.geometryChangeKey_);
        this.geometryChangeKey_ = null;
      }
      const geometry = this.getGeometry();
      if (geometry) {
        this.geometryChangeKey_ = listen(geometry,
          EventType.CHANGE, this.handleGeometryChange_, this);
      }
      this.changed();
    }

    /**
     * Set the default geometry for the feature.  This will update the property
     * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.
     * @param {Geometry|undefined} geometry The new geometry.
     * @api
     * @observable
     */
    setGeometry(geometry) {
      this.set(this.geometryName_, geometry);
    }

    /**
     * Set the style for the feature.  This can be a single style object, an array
     * of styles, or a function that takes a resolution and returns an array of
     * styles. If it is `null` the feature has no style (a `null` style).
     * @param {import("./style/Style.js").StyleLike} style Style for this feature.
     * @api
     * @fires module:ol/events/Event~Event#event:change
     */
    setStyle(style) {
      this.style_ = style;
      this.styleFunction_ = !style ? undefined : createStyleFunction(style);
      this.changed();
    }

    /**
     * Set the feature id.  The feature id is considered stable and may be used when
     * requesting features or comparing identifiers returned from a remote source.
     * The feature id can be used with the
     * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.
     * @param {number|string|undefined} id The feature id.
     * @api
     * @fires module:ol/events/Event~Event#event:change
     */
    setId(id) {
      this.id_ = id;
      this.changed();
    }

    /**
     * Set the property name to be used when getting the feature's default geometry.
     * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with
     * this name will be returned.
     * @param {string} name The property name of the default geometry.
     * @api
     */
    setGeometryName(name) {
      unlisten(
        this, getChangeEventType(this.geometryName_),
        this.handleGeometryChanged_, this);
      this.geometryName_ = name;
      listen(
        this, getChangeEventType(this.geometryName_),
        this.handleGeometryChanged_, this);
      this.handleGeometryChanged_();
    }
  }


  /**
   * Convert the provided object into a feature style function.  Functions passed
   * through unchanged.  Arrays of Style or single style objects wrapped
   * in a new feature style function.
   * @param {!import("./style/Style.js").StyleFunction|!Array<import("./style/Style.js").default>|!import("./style/Style.js").default} obj
   *     A feature style function, a single style, or an array of styles.
   * @return {import("./style/Style.js").StyleFunction} A style function.
   */
  function createStyleFunction(obj) {
    if (typeof obj === 'function') {
      return obj;
    } else {
      /**
       * @type {Array<import("./style/Style.js").default>}
       */
      let styles;
      if (Array.isArray(obj)) {
        styles = obj;
      } else {
        assert(typeof /** @type {?} */ (obj).getZIndex === 'function',
          41); // Expected an `import("./style/Style.js").Style` or an array of `import("./style/Style.js").Style`
        const style = /** @type {import("./style/Style.js").default} */ (obj);
        styles = [style];
      }
      return function() {
        return styles;
      };
    }
  }

  /**
   * @module ol/MapEventType
   */

  /**
   * @enum {string}
   */
  var MapEventType = {

    /**
     * Triggered after a map frame is rendered.
     * @event module:ol/MapEvent~MapEvent#postrender
     * @api
     */
    POSTRENDER: 'postrender',

    /**
     * Triggered when the map starts moving.
     * @event module:ol/MapEvent~MapEvent#movestart
     * @api
     */
    MOVESTART: 'movestart',

    /**
     * Triggered after the map is moved.
     * @event module:ol/MapEvent~MapEvent#moveend
     * @api
     */
    MOVEEND: 'moveend'

  };

  /**
   * @module ol/OverlayPositioning
   */

  /**
   * Overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,
   * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,
   * `'top-center'`, `'top-right'`
   * @enum {string}
   */
  var OverlayPositioning = {
    BOTTOM_LEFT: 'bottom-left',
    BOTTOM_CENTER: 'bottom-center',
    BOTTOM_RIGHT: 'bottom-right',
    CENTER_LEFT: 'center-left',
    CENTER_CENTER: 'center-center',
    CENTER_RIGHT: 'center-right',
    TOP_LEFT: 'top-left',
    TOP_CENTER: 'top-center',
    TOP_RIGHT: 'top-right'
  };

  /**
   * @module ol/css
   */


  /**
   * The CSS class for hidden feature.
   *
   * @const
   * @type {string}
   */
  const CLASS_HIDDEN = 'ol-hidden';


  /**
   * The CSS class that we'll give the DOM elements to have them selectable.
   *
   * @const
   * @type {string}
   */
  const CLASS_SELECTABLE = 'ol-selectable';


  /**
   * The CSS class that we'll give the DOM elements to have them unselectable.
   *
   * @const
   * @type {string}
   */
  const CLASS_UNSELECTABLE = 'ol-unselectable';


  /**
   * The CSS class for unsupported feature.
   *
   * @const
   * @type {string}
   */
  const CLASS_UNSUPPORTED = 'ol-unsupported';


  /**
   * The CSS class for controls.
   *
   * @const
   * @type {string}
   */
  const CLASS_CONTROL = 'ol-control';


  /**
   * The CSS class that we'll give the DOM elements that are collapsed, i.e.
   * to those elements which usually can be expanded.
   *
   * @const
   * @type {string}
   */
  const CLASS_COLLAPSED = 'ol-collapsed';


  /**
   * Get the list of font families from a font spec.  Note that this doesn't work
   * for font families that have commas in them.
   * @param {string} The CSS font property.
   * @return {Object<string>} The font families (or null if the input spec is invalid).
   */
  const getFontFamilies = (function() {
    let style;
    const cache = {};
    return function(font) {
      if (!style) {
        style = document.createElement('div').style;
      }
      if (!(font in cache)) {
        style.font = font;
        const family = style.fontFamily;
        style.font = '';
        if (!family) {
          return null;
        }
        cache[font] = family.split(/,\s?/);
      }
      return cache[font];
    };
  })();

  /**
   * @module ol/dom
   */


  /**
   * Create an html canvas element and returns its 2d context.
   * @param {number=} opt_width Canvas width.
   * @param {number=} opt_height Canvas height.
   * @return {CanvasRenderingContext2D} The context.
   */
  function createCanvasContext2D(opt_width, opt_height) {
    const canvas = document.createElement('canvas');
    if (opt_width) {
      canvas.width = opt_width;
    }
    if (opt_height) {
      canvas.height = opt_height;
    }
    return canvas.getContext('2d');
  }


  /**
   * Get the current computed width for the given element including margin,
   * padding and border.
   * Equivalent to jQuery's `$(el).outerWidth(true)`.
   * @param {!HTMLElement} element Element.
   * @return {number} The width.
   */
  function outerWidth(element) {
    let width = element.offsetWidth;
    const style = getComputedStyle(element);
    width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);

    return width;
  }


  /**
   * Get the current computed height for the given element including margin,
   * padding and border.
   * Equivalent to jQuery's `$(el).outerHeight(true)`.
   * @param {!HTMLElement} element Element.
   * @return {number} The height.
   */
  function outerHeight(element) {
    let height = element.offsetHeight;
    const style = getComputedStyle(element);
    height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);

    return height;
  }

  /**
   * @param {Node} newNode Node to replace old node
   * @param {Node} oldNode The node to be replaced
   */
  function replaceNode(newNode, oldNode) {
    const parent = oldNode.parentNode;
    if (parent) {
      parent.replaceChild(newNode, oldNode);
    }
  }

  /**
   * @param {Node} node The node to remove.
   * @returns {Node} The node that was removed or null.
   */
  function removeNode(node) {
    return node && node.parentNode ? node.parentNode.removeChild(node) : null;
  }

  /**
   * @param {Node} node The node to remove the children from.
   */
  function removeChildren(node) {
    while (node.lastChild) {
      node.removeChild(node.lastChild);
    }
  }

  /**
   * Transform the children of a parent node so they match the
   * provided list of children.  This function aims to efficiently
   * remove, add, and reorder child nodes while maintaining a simple
   * implementation (it is not guaranteed to minimize DOM operations).
   * @param {Node} node The parent node whose children need reworking.
   * @param {Array<Node>} children The desired children.
   */
  function replaceChildren(node, children) {
    const oldChildren = node.childNodes;

    for (let i = 0; true; ++i) {
      const oldChild = oldChildren[i];
      const newChild = children[i];

      // check if our work is done
      if (!oldChild && !newChild) {
        break;
      }

      // check if children match
      if (oldChild === newChild) {
        continue;
      }

      // check if a new child needs to be added
      if (!oldChild) {
        node.appendChild(newChild);
        continue;
      }

      // check if an old child needs to be removed
      if (!newChild) {
        node.removeChild(oldChild);
        --i;
        continue;
      }

      // reorder
      node.insertBefore(newChild, oldChild);
    }
  }

  /**
   * @module ol/extent/Corner
   */

  /**
   * Extent corner.
   * @enum {string}
   */
  var Corner = {
    BOTTOM_LEFT: 'bottom-left',
    BOTTOM_RIGHT: 'bottom-right',
    TOP_LEFT: 'top-left',
    TOP_RIGHT: 'top-right'
  };

  /**
   * @module ol/extent/Relationship
   */

  /**
   * Relationship to an extent.
   * @enum {number}
   */
  var Relationship = {
    UNKNOWN: 0,
    INTERSECTING: 1,
    ABOVE: 2,
    RIGHT: 4,
    BELOW: 8,
    LEFT: 16
  };

  /**
   * @module ol/extent
   */


  /**
   * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.
   * @typedef {Array<number>} Extent
   * @api
   */

  /**
   * Build an extent that includes all given coordinates.
   *
   * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
   * @return {Extent} Bounding extent.
   * @api
   */
  function boundingExtent(coordinates) {
    const extent = createEmpty();
    for (let i = 0, ii = coordinates.length; i < ii; ++i) {
      extendCoordinate(extent, coordinates[i]);
    }
    return extent;
  }


  /**
   * @param {Array<number>} xs Xs.
   * @param {Array<number>} ys Ys.
   * @param {Extent=} opt_extent Destination extent.
   * @private
   * @return {Extent} Extent.
   */
  function _boundingExtentXYs(xs, ys, opt_extent) {
    const minX = Math.min.apply(null, xs);
    const minY = Math.min.apply(null, ys);
    const maxX = Math.max.apply(null, xs);
    const maxY = Math.max.apply(null, ys);
    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);
  }


  /**
   * Return extent increased by the provided value.
   * @param {Extent} extent Extent.
   * @param {number} value The amount by which the extent should be buffered.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} Extent.
   * @api
   */
  function buffer(extent, value, opt_extent) {
    if (opt_extent) {
      opt_extent[0] = extent[0] - value;
      opt_extent[1] = extent[1] - value;
      opt_extent[2] = extent[2] + value;
      opt_extent[3] = extent[3] + value;
      return opt_extent;
    } else {
      return [
        extent[0] - value,
        extent[1] - value,
        extent[2] + value,
        extent[3] + value
      ];
    }
  }


  /**
   * Creates a clone of an extent.
   *
   * @param {Extent} extent Extent to clone.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} The clone.
   */
  function clone(extent, opt_extent) {
    if (opt_extent) {
      opt_extent[0] = extent[0];
      opt_extent[1] = extent[1];
      opt_extent[2] = extent[2];
      opt_extent[3] = extent[3];
      return opt_extent;
    } else {
      return extent.slice();
    }
  }


  /**
   * @param {Extent} extent Extent.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {number} Closest squared distance.
   */
  function closestSquaredDistanceXY(extent, x, y) {
    let dx, dy;
    if (x < extent[0]) {
      dx = extent[0] - x;
    } else if (extent[2] < x) {
      dx = x - extent[2];
    } else {
      dx = 0;
    }
    if (y < extent[1]) {
      dy = extent[1] - y;
    } else if (extent[3] < y) {
      dy = y - extent[3];
    } else {
      dy = 0;
    }
    return dx * dx + dy * dy;
  }


  /**
   * Check if the passed coordinate is contained or on the edge of the extent.
   *
   * @param {Extent} extent Extent.
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   * @return {boolean} The coordinate is contained in the extent.
   * @api
   */
  function containsCoordinate(extent, coordinate) {
    return containsXY(extent, coordinate[0], coordinate[1]);
  }


  /**
   * Check if one extent contains another.
   *
   * An extent is deemed contained if it lies completely within the other extent,
   * including if they share one or more edges.
   *
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent 2.
   * @return {boolean} The second extent is contained by or on the edge of the
   *     first.
   * @api
   */
  function containsExtent(extent1, extent2) {
    return extent1[0] <= extent2[0] && extent2[2] <= extent1[2] &&
        extent1[1] <= extent2[1] && extent2[3] <= extent1[3];
  }


  /**
   * Check if the passed coordinate is contained or on the edge of the extent.
   *
   * @param {Extent} extent Extent.
   * @param {number} x X coordinate.
   * @param {number} y Y coordinate.
   * @return {boolean} The x, y values are contained in the extent.
   * @api
   */
  function containsXY(extent, x, y) {
    return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];
  }


  /**
   * Get the relationship between a coordinate and extent.
   * @param {Extent} extent The extent.
   * @param {import("./coordinate.js").Coordinate} coordinate The coordinate.
   * @return {Relationship} The relationship (bitwise compare with
   *     import("./extent/Relationship.js").Relationship).
   */
  function coordinateRelationship(extent, coordinate) {
    const minX = extent[0];
    const minY = extent[1];
    const maxX = extent[2];
    const maxY = extent[3];
    const x = coordinate[0];
    const y = coordinate[1];
    let relationship = Relationship.UNKNOWN;
    if (x < minX) {
      relationship = relationship | Relationship.LEFT;
    } else if (x > maxX) {
      relationship = relationship | Relationship.RIGHT;
    }
    if (y < minY) {
      relationship = relationship | Relationship.BELOW;
    } else if (y > maxY) {
      relationship = relationship | Relationship.ABOVE;
    }
    if (relationship === Relationship.UNKNOWN) {
      relationship = Relationship.INTERSECTING;
    }
    return relationship;
  }


  /**
   * Create an empty extent.
   * @return {Extent} Empty extent.
   * @api
   */
  function createEmpty() {
    return [Infinity, Infinity, -Infinity, -Infinity];
  }


  /**
   * Create a new extent or update the provided extent.
   * @param {number} minX Minimum X.
   * @param {number} minY Minimum Y.
   * @param {number} maxX Maximum X.
   * @param {number} maxY Maximum Y.
   * @param {Extent=} opt_extent Destination extent.
   * @return {Extent} Extent.
   */
  function createOrUpdate(minX, minY, maxX, maxY, opt_extent) {
    if (opt_extent) {
      opt_extent[0] = minX;
      opt_extent[1] = minY;
      opt_extent[2] = maxX;
      opt_extent[3] = maxY;
      return opt_extent;
    } else {
      return [minX, minY, maxX, maxY];
    }
  }


  /**
   * Create a new empty extent or make the provided one empty.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} Extent.
   */
  function createOrUpdateEmpty(opt_extent) {
    return createOrUpdate(
      Infinity, Infinity, -Infinity, -Infinity, opt_extent);
  }


  /**
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} Extent.
   */
  function createOrUpdateFromCoordinate(coordinate, opt_extent) {
    const x = coordinate[0];
    const y = coordinate[1];
    return createOrUpdate(x, y, x, y, opt_extent);
  }


  /**
   * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} Extent.
   */
  function createOrUpdateFromCoordinates(coordinates, opt_extent) {
    const extent = createOrUpdateEmpty(opt_extent);
    return extendCoordinates(extent, coordinates);
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} Extent.
   */
  function createOrUpdateFromFlatCoordinates(flatCoordinates, offset, end, stride, opt_extent) {
    const extent = createOrUpdateEmpty(opt_extent);
    return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);
  }

  /**
   * @param {Array<Array<import("./coordinate.js").Coordinate>>} rings Rings.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} Extent.
   */
  function createOrUpdateFromRings(rings, opt_extent) {
    const extent = createOrUpdateEmpty(opt_extent);
    return extendRings(extent, rings);
  }


  /**
   * Determine if two extents are equivalent.
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent 2.
   * @return {boolean} The two extents are equivalent.
   * @api
   */
  function equals(extent1, extent2) {
    return extent1[0] == extent2[0] && extent1[2] == extent2[2] &&
        extent1[1] == extent2[1] && extent1[3] == extent2[3];
  }


  /**
   * Modify an extent to include another extent.
   * @param {Extent} extent1 The extent to be modified.
   * @param {Extent} extent2 The extent that will be included in the first.
   * @return {Extent} A reference to the first (extended) extent.
   * @api
   */
  function extend(extent1, extent2) {
    if (extent2[0] < extent1[0]) {
      extent1[0] = extent2[0];
    }
    if (extent2[2] > extent1[2]) {
      extent1[2] = extent2[2];
    }
    if (extent2[1] < extent1[1]) {
      extent1[1] = extent2[1];
    }
    if (extent2[3] > extent1[3]) {
      extent1[3] = extent2[3];
    }
    return extent1;
  }


  /**
   * @param {Extent} extent Extent.
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   */
  function extendCoordinate(extent, coordinate) {
    if (coordinate[0] < extent[0]) {
      extent[0] = coordinate[0];
    }
    if (coordinate[0] > extent[2]) {
      extent[2] = coordinate[0];
    }
    if (coordinate[1] < extent[1]) {
      extent[1] = coordinate[1];
    }
    if (coordinate[1] > extent[3]) {
      extent[3] = coordinate[1];
    }
  }


  /**
   * @param {Extent} extent Extent.
   * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
   * @return {Extent} Extent.
   */
  function extendCoordinates(extent, coordinates) {
    for (let i = 0, ii = coordinates.length; i < ii; ++i) {
      extendCoordinate(extent, coordinates[i]);
    }
    return extent;
  }


  /**
   * @param {Extent} extent Extent.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {Extent} Extent.
   */
  function extendFlatCoordinates(extent, flatCoordinates, offset, end, stride) {
    for (; offset < end; offset += stride) {
      extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);
    }
    return extent;
  }


  /**
   * @param {Extent} extent Extent.
   * @param {Array<Array<import("./coordinate.js").Coordinate>>} rings Rings.
   * @return {Extent} Extent.
   */
  function extendRings(extent, rings) {
    for (let i = 0, ii = rings.length; i < ii; ++i) {
      extendCoordinates(extent, rings[i]);
    }
    return extent;
  }


  /**
   * @param {Extent} extent Extent.
   * @param {number} x X.
   * @param {number} y Y.
   */
  function extendXY(extent, x, y) {
    extent[0] = Math.min(extent[0], x);
    extent[1] = Math.min(extent[1], y);
    extent[2] = Math.max(extent[2], x);
    extent[3] = Math.max(extent[3], y);
  }


  /**
   * This function calls `callback` for each corner of the extent. If the
   * callback returns a truthy value the function returns that value
   * immediately. Otherwise the function returns `false`.
   * @param {Extent} extent Extent.
   * @param {function(import("./coordinate.js").Coordinate): S} callback Callback.
   * @return {S|boolean} Value.
   * @template S
   */
  function forEachCorner(extent, callback) {
    let val;
    val = callback(getBottomLeft(extent));
    if (val) {
      return val;
    }
    val = callback(getBottomRight(extent));
    if (val) {
      return val;
    }
    val = callback(getTopRight(extent));
    if (val) {
      return val;
    }
    val = callback(getTopLeft(extent));
    if (val) {
      return val;
    }
    return false;
  }


  /**
   * Get the size of an extent.
   * @param {Extent} extent Extent.
   * @return {number} Area.
   * @api
   */
  function getArea(extent) {
    let area = 0;
    if (!isEmpty$1(extent)) {
      area = getWidth(extent) * getHeight(extent);
    }
    return area;
  }


  /**
   * Get the bottom left coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Bottom left coordinate.
   * @api
   */
  function getBottomLeft(extent) {
    return [extent[0], extent[1]];
  }


  /**
   * Get the bottom right coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Bottom right coordinate.
   * @api
   */
  function getBottomRight(extent) {
    return [extent[2], extent[1]];
  }


  /**
   * Get the center coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Center.
   * @api
   */
  function getCenter(extent) {
    return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];
  }


  /**
   * Get a corner coordinate of an extent.
   * @param {Extent} extent Extent.
   * @param {Corner} corner Corner.
   * @return {import("./coordinate.js").Coordinate} Corner coordinate.
   */
  function getCorner(extent, corner) {
    let coordinate;
    if (corner === Corner.BOTTOM_LEFT) {
      coordinate = getBottomLeft(extent);
    } else if (corner === Corner.BOTTOM_RIGHT) {
      coordinate = getBottomRight(extent);
    } else if (corner === Corner.TOP_LEFT) {
      coordinate = getTopLeft(extent);
    } else if (corner === Corner.TOP_RIGHT) {
      coordinate = getTopRight(extent);
    } else {
      assert(false, 13); // Invalid corner
    }
    return coordinate;
  }


  /**
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent 2.
   * @return {number} Enlarged area.
   */
  function getEnlargedArea(extent1, extent2) {
    const minX = Math.min(extent1[0], extent2[0]);
    const minY = Math.min(extent1[1], extent2[1]);
    const maxX = Math.max(extent1[2], extent2[2]);
    const maxY = Math.max(extent1[3], extent2[3]);
    return (maxX - minX) * (maxY - minY);
  }


  /**
   * @param {import("./coordinate.js").Coordinate} center Center.
   * @param {number} resolution Resolution.
   * @param {number} rotation Rotation.
   * @param {import("./size.js").Size} size Size.
   * @param {Extent=} opt_extent Destination extent.
   * @return {Extent} Extent.
   */
  function getForViewAndSize(center, resolution, rotation, size, opt_extent) {
    const dx = resolution * size[0] / 2;
    const dy = resolution * size[1] / 2;
    const cosRotation = Math.cos(rotation);
    const sinRotation = Math.sin(rotation);
    const xCos = dx * cosRotation;
    const xSin = dx * sinRotation;
    const yCos = dy * cosRotation;
    const ySin = dy * sinRotation;
    const x = center[0];
    const y = center[1];
    const x0 = x - xCos + ySin;
    const x1 = x - xCos - ySin;
    const x2 = x + xCos - ySin;
    const x3 = x + xCos + ySin;
    const y0 = y - xSin - yCos;
    const y1 = y - xSin + yCos;
    const y2 = y + xSin + yCos;
    const y3 = y + xSin - yCos;
    return createOrUpdate(
      Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3),
      Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3),
      opt_extent);
  }


  /**
   * Get the height of an extent.
   * @param {Extent} extent Extent.
   * @return {number} Height.
   * @api
   */
  function getHeight(extent) {
    return extent[3] - extent[1];
  }


  /**
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent 2.
   * @return {number} Intersection area.
   */
  function getIntersectionArea(extent1, extent2) {
    const intersection = getIntersection(extent1, extent2);
    return getArea(intersection);
  }


  /**
   * Get the intersection of two extents.
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent 2.
   * @param {Extent=} opt_extent Optional extent to populate with intersection.
   * @return {Extent} Intersecting extent.
   * @api
   */
  function getIntersection(extent1, extent2, opt_extent) {
    const intersection = opt_extent ? opt_extent : createEmpty();
    if (intersects(extent1, extent2)) {
      if (extent1[0] > extent2[0]) {
        intersection[0] = extent1[0];
      } else {
        intersection[0] = extent2[0];
      }
      if (extent1[1] > extent2[1]) {
        intersection[1] = extent1[1];
      } else {
        intersection[1] = extent2[1];
      }
      if (extent1[2] < extent2[2]) {
        intersection[2] = extent1[2];
      } else {
        intersection[2] = extent2[2];
      }
      if (extent1[3] < extent2[3]) {
        intersection[3] = extent1[3];
      } else {
        intersection[3] = extent2[3];
      }
    } else {
      createOrUpdateEmpty(intersection);
    }
    return intersection;
  }


  /**
   * @param {Extent} extent Extent.
   * @return {number} Margin.
   */
  function getMargin(extent) {
    return getWidth(extent) + getHeight(extent);
  }


  /**
   * Get the size (width, height) of an extent.
   * @param {Extent} extent The extent.
   * @return {import("./size.js").Size} The extent size.
   * @api
   */
  function getSize(extent) {
    return [extent[2] - extent[0], extent[3] - extent[1]];
  }


  /**
   * Get the top left coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Top left coordinate.
   * @api
   */
  function getTopLeft(extent) {
    return [extent[0], extent[3]];
  }


  /**
   * Get the top right coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Top right coordinate.
   * @api
   */
  function getTopRight(extent) {
    return [extent[2], extent[3]];
  }


  /**
   * Get the width of an extent.
   * @param {Extent} extent Extent.
   * @return {number} Width.
   * @api
   */
  function getWidth(extent) {
    return extent[2] - extent[0];
  }


  /**
   * Determine if one extent intersects another.
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent.
   * @return {boolean} The two extents intersect.
   * @api
   */
  function intersects(extent1, extent2) {
    return extent1[0] <= extent2[2] &&
        extent1[2] >= extent2[0] &&
        extent1[1] <= extent2[3] &&
        extent1[3] >= extent2[1];
  }


  /**
   * Determine if an extent is empty.
   * @param {Extent} extent Extent.
   * @return {boolean} Is empty.
   * @api
   */
  function isEmpty$1(extent) {
    return extent[2] < extent[0] || extent[3] < extent[1];
  }


  /**
   * @param {Extent} extent Extent.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} Extent.
   */
  function returnOrUpdate(extent, opt_extent) {
    if (opt_extent) {
      opt_extent[0] = extent[0];
      opt_extent[1] = extent[1];
      opt_extent[2] = extent[2];
      opt_extent[3] = extent[3];
      return opt_extent;
    } else {
      return extent;
    }
  }


  /**
   * @param {Extent} extent Extent.
   * @param {number} value Value.
   */
  function scaleFromCenter(extent, value) {
    const deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);
    const deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);
    extent[0] -= deltaX;
    extent[2] += deltaX;
    extent[1] -= deltaY;
    extent[3] += deltaY;
  }


  /**
   * Determine if the segment between two coordinates intersects (crosses,
   * touches, or is contained by) the provided extent.
   * @param {Extent} extent The extent.
   * @param {import("./coordinate.js").Coordinate} start Segment start coordinate.
   * @param {import("./coordinate.js").Coordinate} end Segment end coordinate.
   * @return {boolean} The segment intersects the extent.
   */
  function intersectsSegment(extent, start, end) {
    let intersects = false;
    const startRel = coordinateRelationship(extent, start);
    const endRel = coordinateRelationship(extent, end);
    if (startRel === Relationship.INTERSECTING ||
        endRel === Relationship.INTERSECTING) {
      intersects = true;
    } else {
      const minX = extent[0];
      const minY = extent[1];
      const maxX = extent[2];
      const maxY = extent[3];
      const startX = start[0];
      const startY = start[1];
      const endX = end[0];
      const endY = end[1];
      const slope = (endY - startY) / (endX - startX);
      let x, y;
      if (!!(endRel & Relationship.ABOVE) &&
          !(startRel & Relationship.ABOVE)) {
        // potentially intersects top
        x = endX - ((endY - maxY) / slope);
        intersects = x >= minX && x <= maxX;
      }
      if (!intersects && !!(endRel & Relationship.RIGHT) &&
          !(startRel & Relationship.RIGHT)) {
        // potentially intersects right
        y = endY - ((endX - maxX) * slope);
        intersects = y >= minY && y <= maxY;
      }
      if (!intersects && !!(endRel & Relationship.BELOW) &&
          !(startRel & Relationship.BELOW)) {
        // potentially intersects bottom
        x = endX - ((endY - minY) / slope);
        intersects = x >= minX && x <= maxX;
      }
      if (!intersects && !!(endRel & Relationship.LEFT) &&
          !(startRel & Relationship.LEFT)) {
        // potentially intersects left
        y = endY - ((endX - minX) * slope);
        intersects = y >= minY && y <= maxY;
      }

    }
    return intersects;
  }


  /**
   * Apply a transform function to the extent.
   * @param {Extent} extent Extent.
   * @param {import("./proj.js").TransformFunction} transformFn Transform function.
   * Called with `[minX, minY, maxX, maxY]` extent coordinates.
   * @param {Extent=} opt_extent Destination extent.
   * @return {Extent} Extent.
   * @api
   */
  function applyTransform(extent, transformFn, opt_extent) {
    const coordinates = [
      extent[0], extent[1],
      extent[0], extent[3],
      extent[2], extent[1],
      extent[2], extent[3]
    ];
    transformFn(coordinates, coordinates, 2);
    const xs = [coordinates[0], coordinates[2], coordinates[4], coordinates[6]];
    const ys = [coordinates[1], coordinates[3], coordinates[5], coordinates[7]];
    return _boundingExtentXYs(xs, ys, opt_extent);
  }

  var extent = /*#__PURE__*/Object.freeze({
    __proto__: null,
    boundingExtent: boundingExtent,
    buffer: buffer,
    clone: clone,
    closestSquaredDistanceXY: closestSquaredDistanceXY,
    containsCoordinate: containsCoordinate,
    containsExtent: containsExtent,
    containsXY: containsXY,
    coordinateRelationship: coordinateRelationship,
    createEmpty: createEmpty,
    createOrUpdate: createOrUpdate,
    createOrUpdateEmpty: createOrUpdateEmpty,
    createOrUpdateFromCoordinate: createOrUpdateFromCoordinate,
    createOrUpdateFromCoordinates: createOrUpdateFromCoordinates,
    createOrUpdateFromFlatCoordinates: createOrUpdateFromFlatCoordinates,
    createOrUpdateFromRings: createOrUpdateFromRings,
    equals: equals,
    extend: extend,
    extendCoordinate: extendCoordinate,
    extendCoordinates: extendCoordinates,
    extendFlatCoordinates: extendFlatCoordinates,
    extendRings: extendRings,
    extendXY: extendXY,
    forEachCorner: forEachCorner,
    getArea: getArea,
    getBottomLeft: getBottomLeft,
    getBottomRight: getBottomRight,
    getCenter: getCenter,
    getCorner: getCorner,
    getEnlargedArea: getEnlargedArea,
    getForViewAndSize: getForViewAndSize,
    getHeight: getHeight,
    getIntersectionArea: getIntersectionArea,
    getIntersection: getIntersection,
    getMargin: getMargin,
    getSize: getSize,
    getTopLeft: getTopLeft,
    getTopRight: getTopRight,
    getWidth: getWidth,
    intersects: intersects,
    isEmpty: isEmpty$1,
    returnOrUpdate: returnOrUpdate,
    scaleFromCenter: scaleFromCenter,
    intersectsSegment: intersectsSegment,
    applyTransform: applyTransform
  });

  /**
   * @module ol/Overlay
   */


  /**
   * @typedef {Object} Options
   * @property {number|string} [id] Set the overlay id. The overlay id can be used
   * with the {@link module:ol/Map~Map#getOverlayById} method.
   * @property {HTMLElement} [element] The overlay element.
   * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning
   * the overlay. The first element in the
   * array is the horizontal offset. A positive value shifts the overlay right.
   * The second element in the array is the vertical offset. A positive value
   * shifts the overlay down.
   * @property {import("./coordinate.js").Coordinate} [position] The overlay position
   * in map projection.
   * @property {OverlayPositioning} [positioning='top-left'] Defines how
   * the overlay is actually positioned with respect to its `position` property.
   * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,
   * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,
   * `'top-center'`, and `'top-right'`.
   * @property {boolean} [stopEvent=true] Whether event propagation to the map
   * viewport should be stopped. If `true` the overlay is placed in the same
   * container as that of the controls (CSS class name
   * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container
   * with CSS class name specified by the `className` property.
   * @property {boolean} [insertFirst=true] Whether the overlay is inserted first
   * in the overlay container, or appended. If the overlay is placed in the same
   * container as that of the controls (see the `stopEvent` option) you will
   * probably set `insertFirst` to `true` so the overlay is displayed below the
   * controls.
   * @property {boolean} [autoPan=false] If set to `true` the map is panned when
   * calling `setPosition`, so that the overlay is entirely visible in the current
   * viewport.
   * @property {PanOptions} [autoPanAnimation] The
   * animation options used to pan the overlay into view. This animation is only
   * used when `autoPan` is enabled. A `duration` and `easing` may be provided to
   * customize the animation.
   * @property {number} [autoPanMargin=20] The margin (in pixels) between the
   * overlay and the borders of the map when autopanning.
   * @property {string} [className='ol-overlay-container ol-selectable'] CSS class
   * name.
   */


  /**
   * @typedef {Object} PanOptions
   * @property {number} [duration=1000] The duration of the animation in
   * milliseconds.
   * @property {function(number):number} [easing] The easing function to use. Can
   * be one from {@link module:ol/easing} or a custom function.
   * Default is {@link module:ol/easing~inAndOut}.
   */


  /**
   * @enum {string}
   * @protected
   */
  const Property = {
    ELEMENT: 'element',
    MAP: 'map',
    OFFSET: 'offset',
    POSITION: 'position',
    POSITIONING: 'positioning'
  };


  /**
   * @classdesc
   * An element to be displayed over the map and attached to a single map
   * location.  Like {@link module:ol/control/Control~Control}, Overlays are
   * visible widgets. Unlike Controls, they are not in a fixed position on the
   * screen, but are tied to a geographical coordinate, so panning the map will
   * move an Overlay but not a Control.
   *
   * Example:
   *
   *     import Overlay from 'ol/Overlay';
   *
   *     var popup = new Overlay({
   *       element: document.getElementById('popup')
   *     });
   *     popup.setPosition(coordinate);
   *     map.addOverlay(popup);
   *
   * @api
   */
  class Overlay extends BaseObject {

    /**
     * @param {Options} options Overlay options.
     */
    constructor(options) {

      super();

      /**
       * @protected
       * @type {Options}
       */
      this.options = options;

      /**
       * @protected
       * @type {number|string|undefined}
       */
      this.id = options.id;

      /**
       * @protected
       * @type {boolean}
       */
      this.insertFirst = options.insertFirst !== undefined ?
        options.insertFirst : true;

      /**
       * @protected
       * @type {boolean}
       */
      this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;

      /**
       * @protected
       * @type {HTMLElement}
       */
      this.element = document.createElement('div');
      this.element.className = options.className !== undefined ?
        options.className : 'ol-overlay-container ' + CLASS_SELECTABLE;
      this.element.style.position = 'absolute';

      /**
       * @protected
       * @type {boolean}
       */
      this.autoPan = options.autoPan !== undefined ? options.autoPan : false;

      /**
       * @protected
       * @type {PanOptions}
       */
      this.autoPanAnimation = options.autoPanAnimation || /** @type {PanOptions} */ ({});

      /**
       * @protected
       * @type {number}
       */
      this.autoPanMargin = options.autoPanMargin !== undefined ?
        options.autoPanMargin : 20;

      /**
       * @protected
       * @type {{bottom_: string,
       *         left_: string,
       *         right_: string,
       *         top_: string,
       *         visible: boolean}}
       */
      this.rendered = {
        bottom_: '',
        left_: '',
        right_: '',
        top_: '',
        visible: true
      };

      /**
       * @protected
       * @type {?import("./events.js").EventsKey}
       */
      this.mapPostrenderListenerKey = null;

      listen(
        this, getChangeEventType(Property.ELEMENT),
        this.handleElementChanged, this);

      listen(
        this, getChangeEventType(Property.MAP),
        this.handleMapChanged, this);

      listen(
        this, getChangeEventType(Property.OFFSET),
        this.handleOffsetChanged, this);

      listen(
        this, getChangeEventType(Property.POSITION),
        this.handlePositionChanged, this);

      listen(
        this, getChangeEventType(Property.POSITIONING),
        this.handlePositioningChanged, this);

      if (options.element !== undefined) {
        this.setElement(options.element);
      }

      this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);

      this.setPositioning(options.positioning !== undefined ?
        /** @type {OverlayPositioning} */ (options.positioning) :
        OverlayPositioning.TOP_LEFT);

      if (options.position !== undefined) {
        this.setPosition(options.position);
      }

    }

    /**
     * Get the DOM element of this overlay.
     * @return {HTMLElement|undefined} The Element containing the overlay.
     * @observable
     * @api
     */
    getElement() {
      return /** @type {HTMLElement|undefined} */ (this.get(Property.ELEMENT));
    }

    /**
     * Get the overlay identifier which is set on constructor.
     * @return {number|string|undefined} Id.
     * @api
     */
    getId() {
      return this.id;
    }

    /**
     * Get the map associated with this overlay.
     * @return {import("./PluggableMap.js").default|undefined} The map that the
     * overlay is part of.
     * @observable
     * @api
     */
    getMap() {
      return (
        /** @type {import("./PluggableMap.js").default|undefined} */ (this.get(Property.MAP))
      );
    }

    /**
     * Get the offset of this overlay.
     * @return {Array<number>} The offset.
     * @observable
     * @api
     */
    getOffset() {
      return /** @type {Array<number>} */ (this.get(Property.OFFSET));
    }

    /**
     * Get the current position of this overlay.
     * @return {import("./coordinate.js").Coordinate|undefined} The spatial point that the overlay is
     *     anchored at.
     * @observable
     * @api
     */
    getPosition() {
      return (
        /** @type {import("./coordinate.js").Coordinate|undefined} */ (this.get(Property.POSITION))
      );
    }

    /**
     * Get the current positioning of this overlay.
     * @return {OverlayPositioning} How the overlay is positioned
     *     relative to its point on the map.
     * @observable
     * @api
     */
    getPositioning() {
      return (
        /** @type {OverlayPositioning} */ (this.get(Property.POSITIONING))
      );
    }

    /**
     * @protected
     */
    handleElementChanged() {
      removeChildren(this.element);
      const element = this.getElement();
      if (element) {
        this.element.appendChild(element);
      }
    }

    /**
     * @protected
     */
    handleMapChanged() {
      if (this.mapPostrenderListenerKey) {
        removeNode(this.element);
        unlistenByKey(this.mapPostrenderListenerKey);
        this.mapPostrenderListenerKey = null;
      }
      const map = this.getMap();
      if (map) {
        this.mapPostrenderListenerKey = listen(map,
          MapEventType.POSTRENDER, this.render, this);
        this.updatePixelPosition();
        const container = this.stopEvent ?
          map.getOverlayContainerStopEvent() : map.getOverlayContainer();
        if (this.insertFirst) {
          container.insertBefore(this.element, container.childNodes[0] || null);
        } else {
          container.appendChild(this.element);
        }
      }
    }

    /**
     * @protected
     */
    render() {
      this.updatePixelPosition();
    }

    /**
     * @protected
     */
    handleOffsetChanged() {
      this.updatePixelPosition();
    }

    /**
     * @protected
     */
    handlePositionChanged() {
      this.updatePixelPosition();
      if (this.get(Property.POSITION) && this.autoPan) {
        this.panIntoView();
      }
    }

    /**
     * @protected
     */
    handlePositioningChanged() {
      this.updatePixelPosition();
    }

    /**
     * Set the DOM element to be associated with this overlay.
     * @param {HTMLElement|undefined} element The Element containing the overlay.
     * @observable
     * @api
     */
    setElement(element) {
      this.set(Property.ELEMENT, element);
    }

    /**
     * Set the map to be associated with this overlay.
     * @param {import("./PluggableMap.js").default|undefined} map The map that the
     * overlay is part of.
     * @observable
     * @api
     */
    setMap(map) {
      this.set(Property.MAP, map);
    }

    /**
     * Set the offset for this overlay.
     * @param {Array<number>} offset Offset.
     * @observable
     * @api
     */
    setOffset(offset) {
      this.set(Property.OFFSET, offset);
    }

    /**
     * Set the position for this overlay. If the position is `undefined` the
     * overlay is hidden.
     * @param {import("./coordinate.js").Coordinate|undefined} position The spatial point that the overlay
     *     is anchored at.
     * @observable
     * @api
     */
    setPosition(position) {
      this.set(Property.POSITION, position);
    }

    /**
     * Pan the map so that the overlay is entirely visible in the current viewport
     * (if necessary).
     * @protected
     */
    panIntoView() {
      const map = this.getMap();

      if (!map || !map.getTargetElement()) {
        return;
      }

      const mapRect = this.getRect(map.getTargetElement(), map.getSize());
      const element = this.getElement();
      const overlayRect = this.getRect(element, [outerWidth(element), outerHeight(element)]);

      const margin = this.autoPanMargin;
      if (!containsExtent(mapRect, overlayRect)) {
        // the overlay is not completely inside the viewport, so pan the map
        const offsetLeft = overlayRect[0] - mapRect[0];
        const offsetRight = mapRect[2] - overlayRect[2];
        const offsetTop = overlayRect[1] - mapRect[1];
        const offsetBottom = mapRect[3] - overlayRect[3];

        const delta = [0, 0];
        if (offsetLeft < 0) {
          // move map to the left
          delta[0] = offsetLeft - margin;
        } else if (offsetRight < 0) {
          // move map to the right
          delta[0] = Math.abs(offsetRight) + margin;
        }
        if (offsetTop < 0) {
          // move map up
          delta[1] = offsetTop - margin;
        } else if (offsetBottom < 0) {
          // move map down
          delta[1] = Math.abs(offsetBottom) + margin;
        }

        if (delta[0] !== 0 || delta[1] !== 0) {
          const center = /** @type {import("./coordinate.js").Coordinate} */ (map.getView().getCenter());
          const centerPx = map.getPixelFromCoordinate(center);
          const newCenterPx = [
            centerPx[0] + delta[0],
            centerPx[1] + delta[1]
          ];

          map.getView().animate({
            center: map.getCoordinateFromPixel(newCenterPx),
            duration: this.autoPanAnimation.duration,
            easing: this.autoPanAnimation.easing
          });
        }
      }
    }

    /**
     * Get the extent of an element relative to the document
     * @param {HTMLElement|undefined} element The element.
     * @param {import("./size.js").Size|undefined} size The size of the element.
     * @return {import("./extent.js").Extent} The extent.
     * @protected
     */
    getRect(element, size) {
      const box = element.getBoundingClientRect();
      const offsetX = box.left + window.pageXOffset;
      const offsetY = box.top + window.pageYOffset;
      return [
        offsetX,
        offsetY,
        offsetX + size[0],
        offsetY + size[1]
      ];
    }

    /**
     * Set the positioning for this overlay.
     * @param {OverlayPositioning} positioning how the overlay is
     *     positioned relative to its point on the map.
     * @observable
     * @api
     */
    setPositioning(positioning) {
      this.set(Property.POSITIONING, positioning);
    }

    /**
     * Modify the visibility of the element.
     * @param {boolean} visible Element visibility.
     * @protected
     */
    setVisible(visible) {
      if (this.rendered.visible !== visible) {
        this.element.style.display = visible ? '' : 'none';
        this.rendered.visible = visible;
      }
    }

    /**
     * Update pixel position.
     * @protected
     */
    updatePixelPosition() {
      const map = this.getMap();
      const position = this.getPosition();
      if (!map || !map.isRendered() || !position) {
        this.setVisible(false);
        return;
      }

      const pixel = map.getPixelFromCoordinate(position);
      const mapSize = map.getSize();
      this.updateRenderedPosition(pixel, mapSize);
    }

    /**
     * @param {import("./pixel.js").Pixel} pixel The pixel location.
     * @param {import("./size.js").Size|undefined} mapSize The map size.
     * @protected
     */
    updateRenderedPosition(pixel, mapSize) {
      const style = this.element.style;
      const offset = this.getOffset();

      const positioning = this.getPositioning();

      this.setVisible(true);

      let offsetX = offset[0];
      let offsetY = offset[1];
      if (positioning == OverlayPositioning.BOTTOM_RIGHT ||
          positioning == OverlayPositioning.CENTER_RIGHT ||
          positioning == OverlayPositioning.TOP_RIGHT) {
        if (this.rendered.left_ !== '') {
          this.rendered.left_ = style.left = '';
        }
        const right = Math.round(mapSize[0] - pixel[0] - offsetX) + 'px';
        if (this.rendered.right_ != right) {
          this.rendered.right_ = style.right = right;
        }
      } else {
        if (this.rendered.right_ !== '') {
          this.rendered.right_ = style.right = '';
        }
        if (positioning == OverlayPositioning.BOTTOM_CENTER ||
            positioning == OverlayPositioning.CENTER_CENTER ||
            positioning == OverlayPositioning.TOP_CENTER) {
          offsetX -= this.element.offsetWidth / 2;
        }
        const left = Math.round(pixel[0] + offsetX) + 'px';
        if (this.rendered.left_ != left) {
          this.rendered.left_ = style.left = left;
        }
      }
      if (positioning == OverlayPositioning.BOTTOM_LEFT ||
          positioning == OverlayPositioning.BOTTOM_CENTER ||
          positioning == OverlayPositioning.BOTTOM_RIGHT) {
        if (this.rendered.top_ !== '') {
          this.rendered.top_ = style.top = '';
        }
        const bottom = Math.round(mapSize[1] - pixel[1] - offsetY) + 'px';
        if (this.rendered.bottom_ != bottom) {
          this.rendered.bottom_ = style.bottom = bottom;
        }
      } else {
        if (this.rendered.bottom_ !== '') {
          this.rendered.bottom_ = style.bottom = '';
        }
        if (positioning == OverlayPositioning.CENTER_LEFT ||
            positioning == OverlayPositioning.CENTER_CENTER ||
            positioning == OverlayPositioning.CENTER_RIGHT) {
          offsetY -= this.element.offsetHeight / 2;
        }
        const top = Math.round(pixel[1] + offsetY) + 'px';
        if (this.rendered.top_ != top) {
          this.rendered.top_ = style.top = top;
        }
      }
    }

    /**
     * returns the options this Overlay has been created with
     * @return {Options} overlay options
     */
    getOptions() {
      return this.options;
    }
  }

  /**
   * @module ol/CollectionEventType
   */

  /**
   * @enum {string}
   */
  var CollectionEventType = {
    /**
     * Triggered when an item is added to the collection.
     * @event module:ol/Collection.CollectionEvent#add
     * @api
     */
    ADD: 'add',
    /**
     * Triggered when an item is removed from the collection.
     * @event module:ol/Collection.CollectionEvent#remove
     * @api
     */
    REMOVE: 'remove'
  };

  /**
   * @module ol/Collection
   */


  /**
   * @enum {string}
   * @private
   */
  const Property$1 = {
    LENGTH: 'length'
  };


  /**
   * @classdesc
   * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this
   * type.
   */
  class CollectionEvent extends Event {

    /**
     * @param {CollectionEventType} type Type.
     * @param {*=} opt_element Element.
     * @param {number} opt_index The index of the added or removed element.
     */
    constructor(type, opt_element, opt_index) {
      super(type);

      /**
       * The element that is added to or removed from the collection.
       * @type {*}
       * @api
       */
      this.element = opt_element;

      /**
       * The index of the added or removed element.
       * @type {number}
       * @api
       */
      this.index = opt_index;
    }

  }


  /**
   * @typedef {Object} Options
   * @property {boolean} [unique=false] Disallow the same item from being added to
   * the collection twice.
   */

  /**
   * @classdesc
   * An expanded version of standard JS Array, adding convenience methods for
   * manipulation. Add and remove changes to the Collection trigger a Collection
   * event. Note that this does not cover changes to the objects _within_ the
   * Collection; they trigger events on the appropriate object, not on the
   * Collection as a whole.
   *
   * @fires CollectionEvent
   *
   * @template T
   * @api
   */
  class Collection extends BaseObject {

    /**
     * @param {Array<T>=} opt_array Array.
     * @param {Options=} opt_options Collection options.
     */
    constructor(opt_array, opt_options) {

      super();

      const options = opt_options || {};

      /**
       * @private
       * @type {boolean}
       */
      this.unique_ = !!options.unique;

      /**
       * @private
       * @type {!Array<T>}
       */
      this.array_ = opt_array ? opt_array : [];

      if (this.unique_) {
        for (let i = 0, ii = this.array_.length; i < ii; ++i) {
          this.assertUnique_(this.array_[i], i);
        }
      }

      this.updateLength_();

    }

    /**
     * Remove all elements from the collection.
     * @api
     */
    clear() {
      while (this.getLength() > 0) {
        this.pop();
      }
    }

    /**
     * Add elements to the collection.  This pushes each item in the provided array
     * to the end of the collection.
     * @param {!Array<T>} arr Array.
     * @return {Collection<T>} This collection.
     * @api
     */
    extend(arr) {
      for (let i = 0, ii = arr.length; i < ii; ++i) {
        this.push(arr[i]);
      }
      return this;
    }

    /**
     * Iterate over each element, calling the provided callback.
     * @param {function(T, number, Array<T>): *} f The function to call
     *     for every element. This function takes 3 arguments (the element, the
     *     index and the array). The return value is ignored.
     * @api
     */
    forEach(f) {
      const array = this.array_;
      for (let i = 0, ii = array.length; i < ii; ++i) {
        f(array[i], i, array);
      }
    }

    /**
     * Get a reference to the underlying Array object. Warning: if the array
     * is mutated, no events will be dispatched by the collection, and the
     * collection's "length" property won't be in sync with the actual length
     * of the array.
     * @return {!Array<T>} Array.
     * @api
     */
    getArray() {
      return this.array_;
    }

    /**
     * Get the element at the provided index.
     * @param {number} index Index.
     * @return {T} Element.
     * @api
     */
    item(index) {
      return this.array_[index];
    }

    /**
     * Get the length of this collection.
     * @return {number} The length of the array.
     * @observable
     * @api
     */
    getLength() {
      return this.get(Property$1.LENGTH);
    }

    /**
     * Insert an element at the provided index.
     * @param {number} index Index.
     * @param {T} elem Element.
     * @api
     */
    insertAt(index, elem) {
      if (this.unique_) {
        this.assertUnique_(elem);
      }
      this.array_.splice(index, 0, elem);
      this.updateLength_();
      this.dispatchEvent(
        new CollectionEvent(CollectionEventType.ADD, elem, index));
    }

    /**
     * Remove the last element of the collection and return it.
     * Return `undefined` if the collection is empty.
     * @return {T|undefined} Element.
     * @api
     */
    pop() {
      return this.removeAt(this.getLength() - 1);
    }

    /**
     * Insert the provided element at the end of the collection.
     * @param {T} elem Element.
     * @return {number} New length of the collection.
     * @api
     */
    push(elem) {
      if (this.unique_) {
        this.assertUnique_(elem);
      }
      const n = this.getLength();
      this.insertAt(n, elem);
      return this.getLength();
    }

    /**
     * Remove the first occurrence of an element from the collection.
     * @param {T} elem Element.
     * @return {T|undefined} The removed element or undefined if none found.
     * @api
     */
    remove(elem) {
      const arr = this.array_;
      for (let i = 0, ii = arr.length; i < ii; ++i) {
        if (arr[i] === elem) {
          return this.removeAt(i);
        }
      }
      return undefined;
    }

    /**
     * Remove the element at the provided index and return it.
     * Return `undefined` if the collection does not contain this index.
     * @param {number} index Index.
     * @return {T|undefined} Value.
     * @api
     */
    removeAt(index) {
      const prev = this.array_[index];
      this.array_.splice(index, 1);
      this.updateLength_();
      this.dispatchEvent(new CollectionEvent(CollectionEventType.REMOVE, prev, index));
      return prev;
    }

    /**
     * Set the element at the provided index.
     * @param {number} index Index.
     * @param {T} elem Element.
     * @api
     */
    setAt(index, elem) {
      const n = this.getLength();
      if (index < n) {
        if (this.unique_) {
          this.assertUnique_(elem, index);
        }
        const prev = this.array_[index];
        this.array_[index] = elem;
        this.dispatchEvent(
          new CollectionEvent(CollectionEventType.REMOVE, prev, index));
        this.dispatchEvent(
          new CollectionEvent(CollectionEventType.ADD, elem, index));
      } else {
        for (let j = n; j < index; ++j) {
          this.insertAt(j, undefined);
        }
        this.insertAt(index, elem);
      }
    }

    /**
     * @private
     */
    updateLength_() {
      this.set(Property$1.LENGTH, this.array_.length);
    }

    /**
     * @private
     * @param {T} elem Element.
     * @param {number=} opt_except Optional index to ignore.
     */
    assertUnique_(elem, opt_except) {
      for (let i = 0, ii = this.array_.length; i < ii; ++i) {
        if (this.array_[i] === elem && i !== opt_except) {
          throw new AssertionError(58);
        }
      }
    }
  }

  /**
   * @module ol/array
   */


  /**
   * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.
   * https://github.com/darkskyapp/binary-search
   *
   * @param {Array<*>} haystack Items to search through.
   * @param {*} needle The item to look for.
   * @param {Function=} opt_comparator Comparator function.
   * @return {number} The index of the item if found, -1 if not.
   */
  function binarySearch(haystack, needle, opt_comparator) {
    let mid, cmp;
    const comparator = opt_comparator || numberSafeCompareFunction;
    let low = 0;
    let high = haystack.length;
    let found = false;

    while (low < high) {
      /* Note that "(low + high) >>> 1" may overflow, and results in a typecast
       * to double (which gives the wrong results). */
      mid = low + (high - low >> 1);
      cmp = +comparator(haystack[mid], needle);

      if (cmp < 0.0) { /* Too low. */
        low = mid + 1;

      } else { /* Key found or too high */
        high = mid;
        found = !cmp;
      }
    }

    /* Key not found. */
    return found ? low : ~low;
  }


  /**
   * Compare function for array sort that is safe for numbers.
   * @param {*} a The first object to be compared.
   * @param {*} b The second object to be compared.
   * @return {number} A negative number, zero, or a positive number as the first
   *     argument is less than, equal to, or greater than the second.
   */
  function numberSafeCompareFunction(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
  }


  /**
   * Whether the array contains the given object.
   * @param {Array<*>} arr The array to test for the presence of the element.
   * @param {*} obj The object for which to test.
   * @return {boolean} The object is in the array.
   */
  function includes(arr, obj) {
    return arr.indexOf(obj) >= 0;
  }


  /**
   * @param {Array<number>} arr Array.
   * @param {number} target Target.
   * @param {number} direction 0 means return the nearest, > 0
   *    means return the largest nearest, < 0 means return the
   *    smallest nearest.
   * @return {number} Index.
   */
  function linearFindNearest(arr, target, direction) {
    const n = arr.length;
    if (arr[0] <= target) {
      return 0;
    } else if (target <= arr[n - 1]) {
      return n - 1;
    } else {
      let i;
      if (direction > 0) {
        for (i = 1; i < n; ++i) {
          if (arr[i] < target) {
            return i - 1;
          }
        }
      } else if (direction < 0) {
        for (i = 1; i < n; ++i) {
          if (arr[i] <= target) {
            return i;
          }
        }
      } else {
        for (i = 1; i < n; ++i) {
          if (arr[i] == target) {
            return i;
          } else if (arr[i] < target) {
            if (arr[i - 1] - target < target - arr[i]) {
              return i - 1;
            } else {
              return i;
            }
          }
        }
      }
      return n - 1;
    }
  }


  /**
   * @param {Array<*>} arr Array.
   * @param {number} begin Begin index.
   * @param {number} end End index.
   */
  function reverseSubArray(arr, begin, end) {
    while (begin < end) {
      const tmp = arr[begin];
      arr[begin] = arr[end];
      arr[end] = tmp;
      ++begin;
      --end;
    }
  }


  /**
   * @param {Array<VALUE>} arr The array to modify.
   * @param {!Array<VALUE>|VALUE} data The elements or arrays of elements to add to arr.
   * @template VALUE
   */
  function extend$1(arr, data) {
    const extension = Array.isArray(data) ? data : [data];
    const length = extension.length;
    for (let i = 0; i < length; i++) {
      arr[arr.length] = extension[i];
    }
  }


  /**
   * @param {Array<VALUE>} arr The array to modify.
   * @param {VALUE} obj The element to remove.
   * @template VALUE
   * @return {boolean} If the element was removed.
   */
  function remove(arr, obj) {
    const i = arr.indexOf(obj);
    const found = i > -1;
    if (found) {
      arr.splice(i, 1);
    }
    return found;
  }


  /**
   * @param {Array|Uint8ClampedArray} arr1 The first array to compare.
   * @param {Array|Uint8ClampedArray} arr2 The second array to compare.
   * @return {boolean} Whether the two arrays are equal.
   */
  function equals$1(arr1, arr2) {
    const len1 = arr1.length;
    if (len1 !== arr2.length) {
      return false;
    }
    for (let i = 0; i < len1; i++) {
      if (arr1[i] !== arr2[i]) {
        return false;
      }
    }
    return true;
  }


  /**
   * @param {Array<*>} arr The array to test.
   * @param {Function=} opt_func Comparison function.
   * @param {boolean=} opt_strict Strictly sorted (default false).
   * @return {boolean} Return index.
   */
  function isSorted(arr, opt_func, opt_strict) {
    const compare = opt_func || numberSafeCompareFunction;
    return arr.every(function(currentVal, index) {
      if (index === 0) {
        return true;
      }
      const res = compare(arr[index - 1], currentVal);
      return !(res > 0 || opt_strict && res === 0);
    });
  }

  /**
   * @module ol/geom/GeometryLayout
   */

  /**
   * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')
   * or measure ('M') coordinate is available. Supported values are `'XY'`,
   * `'XYZ'`, `'XYM'`, `'XYZM'`.
   * @enum {string}
   */
  var GeometryLayout = {
    XY: 'XY',
    XYZ: 'XYZ',
    XYM: 'XYM',
    XYZM: 'XYZM'
  };

  /**
   * @module ol/geom/GeometryType
   */

  /**
   * The geometry type. One of `'Point'`, `'LineString'`, `'LinearRing'`,
   * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,
   * `'GeometryCollection'`, `'Circle'`.
   * @enum {string}
   */
  var GeometryType = {
    POINT: 'Point',
    LINE_STRING: 'LineString',
    LINEAR_RING: 'LinearRing',
    POLYGON: 'Polygon',
    MULTI_POINT: 'MultiPoint',
    MULTI_LINE_STRING: 'MultiLineString',
    MULTI_POLYGON: 'MultiPolygon',
    GEOMETRY_COLLECTION: 'GeometryCollection',
    CIRCLE: 'Circle'
  };

  /**
   * @module ol/geom/flat/transform
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {import("../../transform.js").Transform} transform Transform.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Transformed coordinates.
   */
  function transform2D(flatCoordinates, offset, end, stride, transform, opt_dest) {
    const dest = opt_dest ? opt_dest : [];
    let i = 0;
    for (let j = offset; j < end; j += stride) {
      const x = flatCoordinates[j];
      const y = flatCoordinates[j + 1];
      dest[i++] = transform[0] * x + transform[2] * y + transform[4];
      dest[i++] = transform[1] * x + transform[3] * y + transform[5];
    }
    if (opt_dest && dest.length != i) {
      dest.length = i;
    }
    return dest;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} angle Angle.
   * @param {Array<number>} anchor Rotation anchor point.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Transformed coordinates.
   */
  function rotate(flatCoordinates, offset, end, stride, angle, anchor, opt_dest) {
    const dest = opt_dest ? opt_dest : [];
    const cos = Math.cos(angle);
    const sin = Math.sin(angle);
    const anchorX = anchor[0];
    const anchorY = anchor[1];
    let i = 0;
    for (let j = offset; j < end; j += stride) {
      const deltaX = flatCoordinates[j] - anchorX;
      const deltaY = flatCoordinates[j + 1] - anchorY;
      dest[i++] = anchorX + deltaX * cos - deltaY * sin;
      dest[i++] = anchorY + deltaX * sin + deltaY * cos;
      for (let k = j + 2; k < j + stride; ++k) {
        dest[i++] = flatCoordinates[k];
      }
    }
    if (opt_dest && dest.length != i) {
      dest.length = i;
    }
    return dest;
  }


  /**
   * Scale the coordinates.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} sx Scale factor in the x-direction.
   * @param {number} sy Scale factor in the y-direction.
   * @param {Array<number>} anchor Scale anchor point.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Transformed coordinates.
   */
  function scale(flatCoordinates, offset, end, stride, sx, sy, anchor, opt_dest) {
    const dest = opt_dest ? opt_dest : [];
    const anchorX = anchor[0];
    const anchorY = anchor[1];
    let i = 0;
    for (let j = offset; j < end; j += stride) {
      const deltaX = flatCoordinates[j] - anchorX;
      const deltaY = flatCoordinates[j + 1] - anchorY;
      dest[i++] = anchorX + sx * deltaX;
      dest[i++] = anchorY + sy * deltaY;
      for (let k = j + 2; k < j + stride; ++k) {
        dest[i++] = flatCoordinates[k];
      }
    }
    if (opt_dest && dest.length != i) {
      dest.length = i;
    }
    return dest;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} deltaX Delta X.
   * @param {number} deltaY Delta Y.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Transformed coordinates.
   */
  function translate(flatCoordinates, offset, end, stride, deltaX, deltaY, opt_dest) {
    const dest = opt_dest ? opt_dest : [];
    let i = 0;
    for (let j = offset; j < end; j += stride) {
      dest[i++] = flatCoordinates[j] + deltaX;
      dest[i++] = flatCoordinates[j + 1] + deltaY;
      for (let k = j + 2; k < j + stride; ++k) {
        dest[i++] = flatCoordinates[k];
      }
    }
    if (opt_dest && dest.length != i) {
      dest.length = i;
    }
    return dest;
  }

  /**
   * @module ol/math
   */

  /**
   * Takes a number and clamps it to within the provided bounds.
   * @param {number} value The input number.
   * @param {number} min The minimum value to return.
   * @param {number} max The maximum value to return.
   * @return {number} The input number if it is within bounds, or the nearest
   *     number within the bounds.
   */
  function clamp(value, min, max) {
    return Math.min(Math.max(value, min), max);
  }


  /**
   * Return the hyperbolic cosine of a given number. The method will use the
   * native `Math.cosh` function if it is available, otherwise the hyperbolic
   * cosine will be calculated via the reference implementation of the Mozilla
   * developer network.
   *
   * @param {number} x X.
   * @return {number} Hyperbolic cosine of x.
   */
  const cosh = (function() {
    // Wrapped in a iife, to save the overhead of checking for the native
    // implementation on every invocation.
    let cosh;
    if ('cosh' in Math) {
      // The environment supports the native Math.cosh function, use it…
      cosh = Math.cosh;
    } else {
      // … else, use the reference implementation of MDN:
      cosh = function(x) {
        const y = /** @type {Math} */ (Math).exp(x);
        return (y + 1 / y) / 2;
      };
    }
    return cosh;
  }());


  /**
   * Returns the square of the closest distance between the point (x, y) and the
   * line segment (x1, y1) to (x2, y2).
   * @param {number} x X.
   * @param {number} y Y.
   * @param {number} x1 X1.
   * @param {number} y1 Y1.
   * @param {number} x2 X2.
   * @param {number} y2 Y2.
   * @return {number} Squared distance.
   */
  function squaredSegmentDistance(x, y, x1, y1, x2, y2) {
    const dx = x2 - x1;
    const dy = y2 - y1;
    if (dx !== 0 || dy !== 0) {
      const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
      if (t > 1) {
        x1 = x2;
        y1 = y2;
      } else if (t > 0) {
        x1 += dx * t;
        y1 += dy * t;
      }
    }
    return squaredDistance(x, y, x1, y1);
  }


  /**
   * Returns the square of the distance between the points (x1, y1) and (x2, y2).
   * @param {number} x1 X1.
   * @param {number} y1 Y1.
   * @param {number} x2 X2.
   * @param {number} y2 Y2.
   * @return {number} Squared distance.
   */
  function squaredDistance(x1, y1, x2, y2) {
    const dx = x2 - x1;
    const dy = y2 - y1;
    return dx * dx + dy * dy;
  }


  /**
   * Solves system of linear equations using Gaussian elimination method.
   *
   * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)
   *                                     in row-major order.
   * @return {Array<number>} The resulting vector.
   */
  function solveLinearSystem(mat) {
    const n = mat.length;

    for (let i = 0; i < n; i++) {
      // Find max in the i-th column (ignoring i - 1 first rows)
      let maxRow = i;
      let maxEl = Math.abs(mat[i][i]);
      for (let r = i + 1; r < n; r++) {
        const absValue = Math.abs(mat[r][i]);
        if (absValue > maxEl) {
          maxEl = absValue;
          maxRow = r;
        }
      }

      if (maxEl === 0) {
        return null; // matrix is singular
      }

      // Swap max row with i-th (current) row
      const tmp = mat[maxRow];
      mat[maxRow] = mat[i];
      mat[i] = tmp;

      // Subtract the i-th row to make all the remaining rows 0 in the i-th column
      for (let j = i + 1; j < n; j++) {
        const coef = -mat[j][i] / mat[i][i];
        for (let k = i; k < n + 1; k++) {
          if (i == k) {
            mat[j][k] = 0;
          } else {
            mat[j][k] += coef * mat[i][k];
          }
        }
      }
    }

    // Solve Ax=b for upper triangular matrix A (mat)
    const x = new Array(n);
    for (let l = n - 1; l >= 0; l--) {
      x[l] = mat[l][n] / mat[l][l];
      for (let m = l - 1; m >= 0; m--) {
        mat[m][n] -= mat[m][l] * x[l];
      }
    }
    return x;
  }


  /**
   * Converts radians to to degrees.
   *
   * @param {number} angleInRadians Angle in radians.
   * @return {number} Angle in degrees.
   */
  function toDegrees(angleInRadians) {
    return angleInRadians * 180 / Math.PI;
  }


  /**
   * Converts degrees to radians.
   *
   * @param {number} angleInDegrees Angle in degrees.
   * @return {number} Angle in radians.
   */
  function toRadians(angleInDegrees) {
    return angleInDegrees * Math.PI / 180;
  }

  /**
   * Returns the modulo of a / b, depending on the sign of b.
   *
   * @param {number} a Dividend.
   * @param {number} b Divisor.
   * @return {number} Modulo.
   */
  function modulo(a, b) {
    const r = a % b;
    return r * b < 0 ? r + b : r;
  }

  /**
   * Calculates the linearly interpolated value of x between a and b.
   *
   * @param {number} a Number
   * @param {number} b Number
   * @param {number} x Value to be interpolated.
   * @return {number} Interpolated value.
   */
  function lerp(a, b, x) {
    return a + x * (b - a);
  }

  /**
   * @license
   * Latitude/longitude spherical geodesy formulae taken from
   * http://www.movable-type.co.uk/scripts/latlong.html
   * Licensed under CC-BY-3.0.
   */


  /**
   * Object literal with options for the {@link getLength} or {@link getArea}
   * functions.
   * @typedef {Object} SphereMetricOptions
   * @property {import("./proj.js").ProjectionLike} [projection='EPSG:3857']
   * Projection of the  geometry.  By default, the geometry is assumed to be in
   * Web Mercator.
   * @property {number} [radius=6371008.8] Sphere radius.  By default, the
   * [mean Earth radius](https://en.wikipedia.org/wiki/Earth_radius#Mean_radius)
   * for the WGS84 ellipsoid is used.
   */


  /**
   * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.
   * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius
   * @type {number}
   */
  const DEFAULT_RADIUS = 6371008.8;


  /**
   * Get the great circle distance (in meters) between two geographic coordinates.
   * @param {Array} c1 Starting coordinate.
   * @param {Array} c2 Ending coordinate.
   * @param {number=} opt_radius The sphere radius to use.  Defaults to the Earth's
   *     mean radius using the WGS84 ellipsoid.
   * @return {number} The great circle distance between the points (in meters).
   * @api
   */
  function getDistance(c1, c2, opt_radius) {
    const radius = opt_radius || DEFAULT_RADIUS;
    const lat1 = toRadians(c1[1]);
    const lat2 = toRadians(c2[1]);
    const deltaLatBy2 = (lat2 - lat1) / 2;
    const deltaLonBy2 = toRadians(c2[0] - c1[0]) / 2;
    const a = Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) +
        Math.sin(deltaLonBy2) * Math.sin(deltaLonBy2) *
        Math.cos(lat1) * Math.cos(lat2);
    return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  }


  /**
   * Returns the coordinate at the given distance and bearing from `c1`.
   *
   * @param {import("./coordinate.js").Coordinate} c1 The origin point (`[lon, lat]` in degrees).
   * @param {number} distance The great-circle distance between the origin
   *     point and the target point.
   * @param {number} bearing The bearing (in radians).
   * @param {number=} opt_radius The sphere radius to use.  Defaults to the Earth's
   *     mean radius using the WGS84 ellipsoid.
   * @return {import("./coordinate.js").Coordinate} The target point.
   */
  function offset(c1, distance, bearing, opt_radius) {
    const radius = opt_radius || DEFAULT_RADIUS;
    const lat1 = toRadians(c1[1]);
    const lon1 = toRadians(c1[0]);
    const dByR = distance / radius;
    const lat = Math.asin(
      Math.sin(lat1) * Math.cos(dByR) +
        Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing));
    const lon = lon1 + Math.atan2(
      Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1),
      Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat));
    return [toDegrees(lon), toDegrees(lat)];
  }

  /**
   * @module ol/proj/Units
   */

  /**
   * Projection units: `'degrees'`, `'ft'`, `'m'`, `'pixels'`, `'tile-pixels'` or
   * `'us-ft'`.
   * @enum {string}
   */
  const Units = {
    DEGREES: 'degrees',
    FEET: 'ft',
    METERS: 'm',
    PIXELS: 'pixels',
    TILE_PIXELS: 'tile-pixels',
    USFEET: 'us-ft'
  };


  /**
   * Meters per unit lookup table.
   * @const
   * @type {Object<Units, number>}
   * @api
   */
  const METERS_PER_UNIT = {};
  // use the radius of the Normal sphere
  METERS_PER_UNIT[Units.DEGREES] = 2 * Math.PI * 6370997 / 360;
  METERS_PER_UNIT[Units.FEET] = 0.3048;
  METERS_PER_UNIT[Units.METERS] = 1;
  METERS_PER_UNIT[Units.USFEET] = 1200 / 3937;

  /**
   * @module ol/proj/Projection
   */


  /**
   * @typedef {Object} Options
   * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.
   * @property {import("./Units.js").default|string} [units] Units. Required unless a
   * proj4 projection is defined for `code`.
   * @property {import("../extent.js").Extent} [extent] The validity extent for the SRS.
   * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.
   * @property {boolean} [global=false] Whether the projection is valid for the whole globe.
   * @property {number} [metersPerUnit] The meters per unit for the SRS.
   * If not provided, the `units` are used to get the meters per unit from the {@link module:ol/proj/Units~METERS_PER_UNIT}
   * lookup table.
   * @property {import("../extent.js").Extent} [worldExtent] The world extent for the SRS.
   * @property {function(number, import("../coordinate.js").Coordinate):number} [getPointResolution]
   * Function to determine resolution at a point. The function is called with a
   * `{number}` view resolution and an `{import("../coordinate.js").Coordinate}` as arguments, and returns
   * the `{number}` resolution in projection units at the passed coordinate. If this is `undefined`,
   * the default {@link module:ol/proj#getPointResolution} function will be used.
   */


  /**
   * @classdesc
   * Projection definition class. One of these is created for each projection
   * supported in the application and stored in the {@link module:ol/proj} namespace.
   * You can use these in applications, but this is not required, as API params
   * and options use {@link module:ol/proj~ProjectionLike} which means the simple string
   * code will suffice.
   *
   * You can use {@link module:ol/proj~get} to retrieve the object for a particular
   * projection.
   *
   * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together
   * with the following aliases:
   * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,
   *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,
   *     http://www.opengis.net/gml/srs/epsg.xml#4326,
   *     urn:x-ogc:def:crs:EPSG:4326
   * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,
   *     urn:ogc:def:crs:EPSG:6.18:3:3857,
   *     http://www.opengis.net/gml/srs/epsg.xml#3857
   *
   * If you use [proj4js](https://github.com/proj4js/proj4js), aliases can
   * be added using `proj4.defs()`. After all required projection definitions are
   * added, call the {@link module:ol/proj/proj4~register} function.
   *
   * @api
   */
  class Projection {

    /**
     * @param {Options} options Projection options.
     */
    constructor(options) {
      /**
       * @private
       * @type {string}
       */
      this.code_ = options.code;

      /**
       * Units of projected coordinates. When set to `TILE_PIXELS`, a
       * `this.extent_` and `this.worldExtent_` must be configured properly for each
       * tile.
       * @private
       * @type {import("./Units.js").default}
       */
      this.units_ = /** @type {import("./Units.js").default} */ (options.units);

      /**
       * Validity extent of the projection in projected coordinates. For projections
       * with `TILE_PIXELS` units, this is the extent of the tile in
       * tile pixel space.
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.extent_ = options.extent !== undefined ? options.extent : null;

      /**
       * Extent of the world in EPSG:4326. For projections with
       * `TILE_PIXELS` units, this is the extent of the tile in
       * projected coordinate space.
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.worldExtent_ = options.worldExtent !== undefined ?
        options.worldExtent : null;

      /**
       * @private
       * @type {string}
       */
      this.axisOrientation_ = options.axisOrientation !== undefined ?
        options.axisOrientation : 'enu';

      /**
       * @private
       * @type {boolean}
       */
      this.global_ = options.global !== undefined ? options.global : false;

      /**
       * @private
       * @type {boolean}
       */
      this.canWrapX_ = !!(this.global_ && this.extent_);

      /**
       * @private
       * @type {function(number, import("../coordinate.js").Coordinate):number|undefined}
       */
      this.getPointResolutionFunc_ = options.getPointResolution;

      /**
       * @private
       * @type {import("../tilegrid/TileGrid.js").default}
       */
      this.defaultTileGrid_ = null;

      /**
       * @private
       * @type {number|undefined}
       */
      this.metersPerUnit_ = options.metersPerUnit;
    }

    /**
     * @return {boolean} The projection is suitable for wrapping the x-axis
     */
    canWrapX() {
      return this.canWrapX_;
    }

    /**
     * Get the code for this projection, e.g. 'EPSG:4326'.
     * @return {string} Code.
     * @api
     */
    getCode() {
      return this.code_;
    }

    /**
     * Get the validity extent for this projection.
     * @return {import("../extent.js").Extent} Extent.
     * @api
     */
    getExtent() {
      return this.extent_;
    }

    /**
     * Get the units of this projection.
     * @return {import("./Units.js").default} Units.
     * @api
     */
    getUnits() {
      return this.units_;
    }

    /**
     * Get the amount of meters per unit of this projection.  If the projection is
     * not configured with `metersPerUnit` or a units identifier, the return is
     * `undefined`.
     * @return {number|undefined} Meters.
     * @api
     */
    getMetersPerUnit() {
      return this.metersPerUnit_ || METERS_PER_UNIT[this.units_];
    }

    /**
     * Get the world extent for this projection.
     * @return {import("../extent.js").Extent} Extent.
     * @api
     */
    getWorldExtent() {
      return this.worldExtent_;
    }

    /**
     * Get the axis orientation of this projection.
     * Example values are:
     * enu - the default easting, northing, elevation.
     * neu - northing, easting, up - useful for "lat/long" geographic coordinates,
     *     or south orientated transverse mercator.
     * wnu - westing, northing, up - some planetary coordinate systems have
     *     "west positive" coordinate systems
     * @return {string} Axis orientation.
     * @api
     */
    getAxisOrientation() {
      return this.axisOrientation_;
    }

    /**
     * Is this projection a global projection which spans the whole world?
     * @return {boolean} Whether the projection is global.
     * @api
     */
    isGlobal() {
      return this.global_;
    }

    /**
     * Set if the projection is a global projection which spans the whole world
     * @param {boolean} global Whether the projection is global.
     * @api
     */
    setGlobal(global) {
      this.global_ = global;
      this.canWrapX_ = !!(global && this.extent_);
    }

    /**
     * @return {import("../tilegrid/TileGrid.js").default} The default tile grid.
     */
    getDefaultTileGrid() {
      return this.defaultTileGrid_;
    }

    /**
     * @param {import("../tilegrid/TileGrid.js").default} tileGrid The default tile grid.
     */
    setDefaultTileGrid(tileGrid) {
      this.defaultTileGrid_ = tileGrid;
    }

    /**
     * Set the validity extent for this projection.
     * @param {import("../extent.js").Extent} extent Extent.
     * @api
     */
    setExtent(extent) {
      this.extent_ = extent;
      this.canWrapX_ = !!(this.global_ && extent);
    }

    /**
     * Set the world extent for this projection.
     * @param {import("../extent.js").Extent} worldExtent World extent
     *     [minlon, minlat, maxlon, maxlat].
     * @api
     */
    setWorldExtent(worldExtent) {
      this.worldExtent_ = worldExtent;
    }

    /**
     * Set the getPointResolution function (see {@link module:ol/proj~getPointResolution}
     * for this projection.
     * @param {function(number, import("../coordinate.js").Coordinate):number} func Function
     * @api
     */
    setGetPointResolution(func) {
      this.getPointResolutionFunc_ = func;
    }

    /**
     * Get the custom point resolution function for this projection (if set).
     * @return {function(number, import("../coordinate.js").Coordinate):number|undefined} The custom point
     * resolution function (if set).
     */
    getPointResolutionFunc() {
      return this.getPointResolutionFunc_;
    }
  }

  /**
   * @module ol/proj/epsg3857
   */


  /**
   * Radius of WGS84 sphere
   *
   * @const
   * @type {number}
   */
  const RADIUS = 6378137;


  /**
   * @const
   * @type {number}
   */
  const HALF_SIZE = Math.PI * RADIUS;


  /**
   * @const
   * @type {import("../extent.js").Extent}
   */
  const EXTENT = [
    -HALF_SIZE, -HALF_SIZE,
    HALF_SIZE, HALF_SIZE
  ];


  /**
   * @const
   * @type {import("../extent.js").Extent}
   */
  const WORLD_EXTENT = [-180, -85, 180, 85];


  /**
   * @classdesc
   * Projection object for web/spherical Mercator (EPSG:3857).
   */
  class EPSG3857Projection extends Projection {

    /**
     * @param {string} code Code.
     */
    constructor(code) {
      super({
        code: code,
        units: Units.METERS,
        extent: EXTENT,
        global: true,
        worldExtent: WORLD_EXTENT,
        getPointResolution: function(resolution, point) {
          return resolution / cosh(point[1] / RADIUS);
        }
      });

    }

  }


  /**
   * Projections equal to EPSG:3857.
   *
   * @const
   * @type {Array<import("./Projection.js").default>}
   */
  const PROJECTIONS = [
    new EPSG3857Projection('EPSG:3857'),
    new EPSG3857Projection('EPSG:102100'),
    new EPSG3857Projection('EPSG:102113'),
    new EPSG3857Projection('EPSG:900913'),
    new EPSG3857Projection('urn:ogc:def:crs:EPSG:6.18:3:3857'),
    new EPSG3857Projection('urn:ogc:def:crs:EPSG::3857'),
    new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857')
  ];


  /**
   * Transformation from EPSG:4326 to EPSG:3857.
   *
   * @param {Array<number>} input Input array of coordinate values.
   * @param {Array<number>=} opt_output Output array of coordinate values.
   * @param {number=} opt_dimension Dimension (default is `2`).
   * @return {Array<number>} Output array of coordinate values.
   */
  function fromEPSG4326(input, opt_output, opt_dimension) {
    const length = input.length;
    const dimension = opt_dimension > 1 ? opt_dimension : 2;
    let output = opt_output;
    if (output === undefined) {
      if (dimension > 2) {
        // preserve values beyond second dimension
        output = input.slice();
      } else {
        output = new Array(length);
      }
    }
    const halfSize = HALF_SIZE;
    for (let i = 0; i < length; i += dimension) {
      output[i] = halfSize * input[i] / 180;
      let y = RADIUS *
          Math.log(Math.tan(Math.PI * (+input[i + 1] + 90) / 360));
      if (y > halfSize) {
        y = halfSize;
      } else if (y < -halfSize) {
        y = -halfSize;
      }
      output[i + 1] = y;
    }
    return output;
  }


  /**
   * Transformation from EPSG:3857 to EPSG:4326.
   *
   * @param {Array<number>} input Input array of coordinate values.
   * @param {Array<number>=} opt_output Output array of coordinate values.
   * @param {number=} opt_dimension Dimension (default is `2`).
   * @return {Array<number>} Output array of coordinate values.
   */
  function toEPSG4326(input, opt_output, opt_dimension) {
    const length = input.length;
    const dimension = opt_dimension > 1 ? opt_dimension : 2;
    let output = opt_output;
    if (output === undefined) {
      if (dimension > 2) {
        // preserve values beyond second dimension
        output = input.slice();
      } else {
        output = new Array(length);
      }
    }
    for (let i = 0; i < length; i += dimension) {
      output[i] = 180 * input[i] / HALF_SIZE;
      output[i + 1] = 360 * Math.atan(
        Math.exp(input[i + 1] / RADIUS)) / Math.PI - 90;
    }
    return output;
  }

  /**
   * @module ol/proj/epsg4326
   */


  /**
   * Semi-major radius of the WGS84 ellipsoid.
   *
   * @const
   * @type {number}
   */
  const RADIUS$1 = 6378137;


  /**
   * Extent of the EPSG:4326 projection which is the whole world.
   *
   * @const
   * @type {import("../extent.js").Extent}
   */
  const EXTENT$1 = [-180, -90, 180, 90];


  /**
   * @const
   * @type {number}
   */
  const METERS_PER_UNIT$1 = Math.PI * RADIUS$1 / 180;


  /**
   * @classdesc
   * Projection object for WGS84 geographic coordinates (EPSG:4326).
   *
   * Note that OpenLayers does not strictly comply with the EPSG definition.
   * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).
   * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.
   */
  class EPSG4326Projection extends Projection {

    /**
     * @param {string} code Code.
     * @param {string=} opt_axisOrientation Axis orientation.
     */
    constructor(code, opt_axisOrientation) {
      super({
        code: code,
        units: Units.DEGREES,
        extent: EXTENT$1,
        axisOrientation: opt_axisOrientation,
        global: true,
        metersPerUnit: METERS_PER_UNIT$1,
        worldExtent: EXTENT$1
      });

    }

  }


  /**
   * Projections equal to EPSG:4326.
   *
   * @const
   * @type {Array<import("./Projection.js").default>}
   */
  const PROJECTIONS$1 = [
    new EPSG4326Projection('CRS:84'),
    new EPSG4326Projection('EPSG:4326', 'neu'),
    new EPSG4326Projection('urn:ogc:def:crs:EPSG::4326', 'neu'),
    new EPSG4326Projection('urn:ogc:def:crs:EPSG:6.6:4326', 'neu'),
    new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'),
    new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'),
    new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),
    new EPSG4326Projection('urn:x-ogc:def:crs:EPSG:4326', 'neu')
  ];

  /**
   * @module ol/proj/transforms
   */


  /**
   * @private
   * @type {!Object<string, Object<string, import("../proj.js").TransformFunction>>}
   */
  let transforms = {};


  /**
   * Clear the transform cache.
   */
  function clear$1() {
    transforms = {};
  }


  /**
   * Registers a conversion function to convert coordinates from the source
   * projection to the destination projection.
   *
   * @param {import("./Projection.js").default} source Source.
   * @param {import("./Projection.js").default} destination Destination.
   * @param {import("../proj.js").TransformFunction} transformFn Transform.
   */
  function add(source, destination, transformFn) {
    const sourceCode = source.getCode();
    const destinationCode = destination.getCode();
    if (!(sourceCode in transforms)) {
      transforms[sourceCode] = {};
    }
    transforms[sourceCode][destinationCode] = transformFn;
  }


  /**
   * Get a transform given a source code and a destination code.
   * @param {string} sourceCode The code for the source projection.
   * @param {string} destinationCode The code for the destination projection.
   * @return {import("../proj.js").TransformFunction|undefined} The transform function (if found).
   */
  function get(sourceCode, destinationCode) {
    let transform;
    if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {
      transform = transforms[sourceCode][destinationCode];
    }
    return transform;
  }

  /**
   * @module ol/proj/projections
   */


  /**
   * @type {Object<string, import("./Projection.js").default>}
   */
  let cache = {};


  /**
   * Clear the projections cache.
   */
  function clear$2() {
    cache = {};
  }


  /**
   * Get a cached projection by code.
   * @param {string} code The code for the projection.
   * @return {import("./Projection.js").default} The projection (if cached).
   */
  function get$1(code) {
    return cache[code] || null;
  }


  /**
   * Add a projection to the cache.
   * @param {string} code The projection code.
   * @param {import("./Projection.js").default} projection The projection to cache.
   */
  function add$1(code, projection) {
    cache[code] = projection;
  }

  /**
   * @module ol/proj
   */

  /**
   * @param {Array<number>} input Input coordinate array.
   * @param {Array<number>=} opt_output Output array of coordinate values.
   * @param {number=} opt_dimension Dimension.
   * @return {Array<number>} Output coordinate array (new array, same coordinate
   *     values).
   */
  function cloneTransform(input, opt_output, opt_dimension) {
    let output;
    if (opt_output !== undefined) {
      for (let i = 0, ii = input.length; i < ii; ++i) {
        opt_output[i] = input[i];
      }
      output = opt_output;
    } else {
      output = input.slice();
    }
    return output;
  }


  /**
   * @param {Array<number>} input Input coordinate array.
   * @param {Array<number>=} opt_output Output array of coordinate values.
   * @param {number=} opt_dimension Dimension.
   * @return {Array<number>} Input coordinate array (same array as input).
   */
  function identityTransform(input, opt_output, opt_dimension) {
    if (opt_output !== undefined && input !== opt_output) {
      for (let i = 0, ii = input.length; i < ii; ++i) {
        opt_output[i] = input[i];
      }
      input = opt_output;
    }
    return input;
  }


  /**
   * Add a Projection object to the list of supported projections that can be
   * looked up by their code.
   *
   * @param {Projection} projection Projection instance.
   * @api
   */
  function addProjection(projection) {
    add$1(projection.getCode(), projection);
    add(projection, projection, cloneTransform);
  }


  /**
   * @param {Array<Projection>} projections Projections.
   */
  function addProjections(projections) {
    projections.forEach(addProjection);
  }


  /**
   * Fetches a Projection object for the code specified.
   *
   * @param {ProjectionLike} projectionLike Either a code string which is
   *     a combination of authority and identifier such as "EPSG:4326", or an
   *     existing projection object, or undefined.
   * @return {Projection} Projection object, or null if not in list.
   * @api
   */
  function get$2(projectionLike) {
    return typeof projectionLike === 'string' ?
      get$1(/** @type {string} */ (projectionLike)) :
      (/** @type {Projection} */ (projectionLike) || null);
  }


  /**
   * Get the resolution of the point in degrees or distance units.
   * For projections with degrees as the unit this will simply return the
   * provided resolution. For other projections the point resolution is
   * by default estimated by transforming the 'point' pixel to EPSG:4326,
   * measuring its width and height on the normal sphere,
   * and taking the average of the width and height.
   * A custom function can be provided for a specific projection, either
   * by setting the `getPointResolution` option in the
   * {@link module:ol/proj/Projection~Projection} constructor or by using
   * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing
   * projection object.
   * @param {ProjectionLike} projection The projection.
   * @param {number} resolution Nominal resolution in projection units.
   * @param {import("./coordinate.js").Coordinate} point Point to find adjusted resolution at.
   * @param {Units=} opt_units Units to get the point resolution in.
   * Default is the projection's units.
   * @return {number} Point resolution.
   * @api
   */
  function getPointResolution(projection, resolution, point, opt_units) {
    projection = get$2(projection);
    let pointResolution;
    const getter = projection.getPointResolutionFunc();
    if (getter) {
      pointResolution = getter(resolution, point);
      if (opt_units && opt_units !== projection.getUnits()) {
        const metersPerUnit = projection.getMetersPerUnit();
        if (metersPerUnit) {
          pointResolution = pointResolution * metersPerUnit / METERS_PER_UNIT[opt_units];
        }
      }
    } else {
      const units = projection.getUnits();
      if (units == Units.DEGREES && !opt_units || opt_units == Units.DEGREES) {
        pointResolution = resolution;
      } else {
        // Estimate point resolution by transforming the center pixel to EPSG:4326,
        // measuring its width and height on the normal sphere, and taking the
        // average of the width and height.
        const toEPSG4326 = getTransformFromProjections(projection, get$2('EPSG:4326'));
        let vertices = [
          point[0] - resolution / 2, point[1],
          point[0] + resolution / 2, point[1],
          point[0], point[1] - resolution / 2,
          point[0], point[1] + resolution / 2
        ];
        vertices = toEPSG4326(vertices, vertices, 2);
        const width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));
        const height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));
        pointResolution = (width + height) / 2;
        const metersPerUnit = opt_units ?
          METERS_PER_UNIT[opt_units] :
          projection.getMetersPerUnit();
        if (metersPerUnit !== undefined) {
          pointResolution /= metersPerUnit;
        }
      }
    }
    return pointResolution;
  }


  /**
   * Registers transformation functions that don't alter coordinates. Those allow
   * to transform between projections with equal meaning.
   *
   * @param {Array<Projection>} projections Projections.
   * @api
   */
  function addEquivalentProjections(projections) {
    addProjections(projections);
    projections.forEach(function(source) {
      projections.forEach(function(destination) {
        if (source !== destination) {
          add(source, destination, cloneTransform);
        }
      });
    });
  }


  /**
   * Registers transformation functions to convert coordinates in any projection
   * in projection1 to any projection in projection2.
   *
   * @param {Array<Projection>} projections1 Projections with equal
   *     meaning.
   * @param {Array<Projection>} projections2 Projections with equal
   *     meaning.
   * @param {TransformFunction} forwardTransform Transformation from any
   *   projection in projection1 to any projection in projection2.
   * @param {TransformFunction} inverseTransform Transform from any projection
   *   in projection2 to any projection in projection1..
   */
  function addEquivalentTransforms(projections1, projections2, forwardTransform, inverseTransform) {
    projections1.forEach(function(projection1) {
      projections2.forEach(function(projection2) {
        add(projection1, projection2, forwardTransform);
        add(projection2, projection1, inverseTransform);
      });
    });
  }


  /**
   * Clear all cached projections and transforms.
   */
  function clearAllProjections() {
    clear$2();
    clear$1();
  }


  /**
   * @param {Projection|string|undefined} projection Projection.
   * @param {string} defaultCode Default code.
   * @return {Projection} Projection.
   */
  function createProjection(projection, defaultCode) {
    if (!projection) {
      return get$2(defaultCode);
    } else if (typeof projection === 'string') {
      return get$2(projection);
    } else {
      return (
        /** @type {Projection} */ (projection)
      );
    }
  }


  /**
   * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform
   * function.
   * @param {function(import("./coordinate.js").Coordinate): import("./coordinate.js").Coordinate} coordTransform Coordinate
   *     transform.
   * @return {TransformFunction} Transform function.
   */
  function createTransformFromCoordinateTransform(coordTransform) {
    return (
      /**
       * @param {Array<number>} input Input.
       * @param {Array<number>=} opt_output Output.
       * @param {number=} opt_dimension Dimension.
       * @return {Array<number>} Output.
       */
      function(input, opt_output, opt_dimension) {
        const length = input.length;
        const dimension = opt_dimension !== undefined ? opt_dimension : 2;
        const output = opt_output !== undefined ? opt_output : new Array(length);
        for (let i = 0; i < length; i += dimension) {
          const point = coordTransform([input[i], input[i + 1]]);
          output[i] = point[0];
          output[i + 1] = point[1];
          for (let j = dimension - 1; j >= 2; --j) {
            output[i + j] = input[i + j];
          }
        }
        return output;
      });
  }


  /**
   * Registers coordinate transform functions to convert coordinates between the
   * source projection and the destination projection.
   * The forward and inverse functions convert coordinate pairs; this function
   * converts these into the functions used internally which also handle
   * extents and coordinate arrays.
   *
   * @param {ProjectionLike} source Source projection.
   * @param {ProjectionLike} destination Destination projection.
   * @param {function(import("./coordinate.js").Coordinate): import("./coordinate.js").Coordinate} forward The forward transform
   *     function (that is, from the source projection to the destination
   *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns
   *     the transformed {@link module:ol/coordinate~Coordinate}.
   * @param {function(import("./coordinate.js").Coordinate): import("./coordinate.js").Coordinate} inverse The inverse transform
   *     function (that is, from the destination projection to the source
   *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns
   *     the transformed {@link module:ol/coordinate~Coordinate}.
   * @api
   */
  function addCoordinateTransforms(source, destination, forward, inverse) {
    const sourceProj = get$2(source);
    const destProj = get$2(destination);
    add(sourceProj, destProj, createTransformFromCoordinateTransform(forward));
    add(destProj, sourceProj, createTransformFromCoordinateTransform(inverse));
  }


  /**
   * Transforms a coordinate from longitude/latitude to a different projection.
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate as longitude and latitude, i.e.
   *     an array with longitude as 1st and latitude as 2nd element.
   * @param {ProjectionLike=} opt_projection Target projection. The
   *     default is Web Mercator, i.e. 'EPSG:3857'.
   * @return {import("./coordinate.js").Coordinate} Coordinate projected to the target projection.
   * @api
   */
  function fromLonLat(coordinate, opt_projection) {
    return transform(coordinate, 'EPSG:4326',
      opt_projection !== undefined ? opt_projection : 'EPSG:3857');
  }


  /**
   * Transforms a coordinate to longitude/latitude.
   * @param {import("./coordinate.js").Coordinate} coordinate Projected coordinate.
   * @param {ProjectionLike=} opt_projection Projection of the coordinate.
   *     The default is Web Mercator, i.e. 'EPSG:3857'.
   * @return {import("./coordinate.js").Coordinate} Coordinate as longitude and latitude, i.e. an array
   *     with longitude as 1st and latitude as 2nd element.
   * @api
   */
  function toLonLat(coordinate, opt_projection) {
    const lonLat = transform(coordinate,
      opt_projection !== undefined ? opt_projection : 'EPSG:3857', 'EPSG:4326');
    const lon = lonLat[0];
    if (lon < -180 || lon > 180) {
      lonLat[0] = modulo(lon + 180, 360) - 180;
    }
    return lonLat;
  }


  /**
   * Checks if two projections are the same, that is every coordinate in one
   * projection does represent the same geographic point as the same coordinate in
   * the other projection.
   *
   * @param {Projection} projection1 Projection 1.
   * @param {Projection} projection2 Projection 2.
   * @return {boolean} Equivalent.
   * @api
   */
  function equivalent(projection1, projection2) {
    if (projection1 === projection2) {
      return true;
    }
    const equalUnits = projection1.getUnits() === projection2.getUnits();
    if (projection1.getCode() === projection2.getCode()) {
      return equalUnits;
    } else {
      const transformFunc = getTransformFromProjections(projection1, projection2);
      return transformFunc === cloneTransform && equalUnits;
    }
  }


  /**
   * Searches in the list of transform functions for the function for converting
   * coordinates from the source projection to the destination projection.
   *
   * @param {Projection} sourceProjection Source Projection object.
   * @param {Projection} destinationProjection Destination Projection
   *     object.
   * @return {TransformFunction} Transform function.
   */
  function getTransformFromProjections(sourceProjection, destinationProjection) {
    const sourceCode = sourceProjection.getCode();
    const destinationCode = destinationProjection.getCode();
    let transformFunc = get(sourceCode, destinationCode);
    if (!transformFunc) {
      transformFunc = identityTransform;
    }
    return transformFunc;
  }


  /**
   * Given the projection-like objects, searches for a transformation
   * function to convert a coordinates array from the source projection to the
   * destination projection.
   *
   * @param {ProjectionLike} source Source.
   * @param {ProjectionLike} destination Destination.
   * @return {TransformFunction} Transform function.
   * @api
   */
  function getTransform(source, destination) {
    const sourceProjection = get$2(source);
    const destinationProjection = get$2(destination);
    return getTransformFromProjections(sourceProjection, destinationProjection);
  }


  /**
   * Transforms a coordinate from source projection to destination projection.
   * This returns a new coordinate (and does not modify the original).
   *
   * See {@link module:ol/proj~transformExtent} for extent transformation.
   * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its
   * subclasses for geometry transforms.
   *
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   * @param {ProjectionLike} source Source projection-like.
   * @param {ProjectionLike} destination Destination projection-like.
   * @return {import("./coordinate.js").Coordinate} Coordinate.
   * @api
   */
  function transform(coordinate, source, destination) {
    const transformFunc = getTransform(source, destination);
    return transformFunc(coordinate, undefined, coordinate.length);
  }


  /**
   * Transforms an extent from source projection to destination projection.  This
   * returns a new extent (and does not modify the original).
   *
   * @param {import("./extent.js").Extent} extent The extent to transform.
   * @param {ProjectionLike} source Source projection-like.
   * @param {ProjectionLike} destination Destination projection-like.
   * @return {import("./extent.js").Extent} The transformed extent.
   * @api
   */
  function transformExtent(extent, source, destination) {
    const transformFunc = getTransform(source, destination);
    return applyTransform(extent, transformFunc);
  }


  /**
   * Transforms the given point to the destination projection.
   *
   * @param {import("./coordinate.js").Coordinate} point Point.
   * @param {Projection} sourceProjection Source projection.
   * @param {Projection} destinationProjection Destination projection.
   * @return {import("./coordinate.js").Coordinate} Point.
   */
  function transformWithProjections(point, sourceProjection, destinationProjection) {
    const transformFunc = getTransformFromProjections(sourceProjection, destinationProjection);
    return transformFunc(point);
  }

  /**
   * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called
   * by when this module is executed and should only need to be called again after
   * `clearAllProjections()` is called (e.g. in tests).
   */
  function addCommon() {
    // Add transformations that don't alter coordinates to convert within set of
    // projections with equal meaning.
    addEquivalentProjections(PROJECTIONS);
    addEquivalentProjections(PROJECTIONS$1);
    // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like
    // coordinates and back.
    addEquivalentTransforms(PROJECTIONS$1, PROJECTIONS, fromEPSG4326, toEPSG4326);
  }

  addCommon();

  var proj = /*#__PURE__*/Object.freeze({
    __proto__: null,
    METERS_PER_UNIT: METERS_PER_UNIT,
    Projection: Projection,
    cloneTransform: cloneTransform,
    identityTransform: identityTransform,
    addProjection: addProjection,
    addProjections: addProjections,
    get: get$2,
    getPointResolution: getPointResolution,
    addEquivalentProjections: addEquivalentProjections,
    addEquivalentTransforms: addEquivalentTransforms,
    clearAllProjections: clearAllProjections,
    createProjection: createProjection,
    createTransformFromCoordinateTransform: createTransformFromCoordinateTransform,
    addCoordinateTransforms: addCoordinateTransforms,
    fromLonLat: fromLonLat,
    toLonLat: toLonLat,
    equivalent: equivalent,
    getTransformFromProjections: getTransformFromProjections,
    getTransform: getTransform,
    transform: transform,
    transformExtent: transformExtent,
    transformWithProjections: transformWithProjections,
    addCommon: addCommon
  });

  /**
   * @module ol/transform
   */


  /**
   * An array representing an affine 2d transformation for use with
   * {@link module:ol/transform} functions. The array has 6 elements.
   * @typedef {!Array<number>} Transform
   */


  /**
   * Collection of affine 2d transformation functions. The functions work on an
   * array of 6 elements. The element order is compatible with the [SVGMatrix
   * interface](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) and is
   * a subset (elements a to f) of a 3×3 matrix:
   * ```
   * [ a c e ]
   * [ b d f ]
   * [ 0 0 1 ]
   * ```
   */


  /**
   * @private
   * @type {Transform}
   */
  const tmp_ = new Array(6);


  /**
   * Create an identity transform.
   * @return {!Transform} Identity transform.
   */
  function create() {
    return [1, 0, 0, 1, 0, 0];
  }


  /**
   * Resets the given transform to an identity transform.
   * @param {!Transform} transform Transform.
   * @return {!Transform} Transform.
   */
  function reset(transform) {
    return set(transform, 1, 0, 0, 1, 0, 0);
  }


  /**
   * Multiply the underlying matrices of two transforms and return the result in
   * the first transform.
   * @param {!Transform} transform1 Transform parameters of matrix 1.
   * @param {!Transform} transform2 Transform parameters of matrix 2.
   * @return {!Transform} transform1 multiplied with transform2.
   */
  function multiply(transform1, transform2) {
    const a1 = transform1[0];
    const b1 = transform1[1];
    const c1 = transform1[2];
    const d1 = transform1[3];
    const e1 = transform1[4];
    const f1 = transform1[5];
    const a2 = transform2[0];
    const b2 = transform2[1];
    const c2 = transform2[2];
    const d2 = transform2[3];
    const e2 = transform2[4];
    const f2 = transform2[5];

    transform1[0] = a1 * a2 + c1 * b2;
    transform1[1] = b1 * a2 + d1 * b2;
    transform1[2] = a1 * c2 + c1 * d2;
    transform1[3] = b1 * c2 + d1 * d2;
    transform1[4] = a1 * e2 + c1 * f2 + e1;
    transform1[5] = b1 * e2 + d1 * f2 + f1;

    return transform1;
  }

  /**
   * Set the transform components a-f on a given transform.
   * @param {!Transform} transform Transform.
   * @param {number} a The a component of the transform.
   * @param {number} b The b component of the transform.
   * @param {number} c The c component of the transform.
   * @param {number} d The d component of the transform.
   * @param {number} e The e component of the transform.
   * @param {number} f The f component of the transform.
   * @return {!Transform} Matrix with transform applied.
   */
  function set(transform, a, b, c, d, e, f) {
    transform[0] = a;
    transform[1] = b;
    transform[2] = c;
    transform[3] = d;
    transform[4] = e;
    transform[5] = f;
    return transform;
  }


  /**
   * Set transform on one matrix from another matrix.
   * @param {!Transform} transform1 Matrix to set transform to.
   * @param {!Transform} transform2 Matrix to set transform from.
   * @return {!Transform} transform1 with transform from transform2 applied.
   */
  function setFromArray(transform1, transform2) {
    transform1[0] = transform2[0];
    transform1[1] = transform2[1];
    transform1[2] = transform2[2];
    transform1[3] = transform2[3];
    transform1[4] = transform2[4];
    transform1[5] = transform2[5];
    return transform1;
  }


  /**
   * Transforms the given coordinate with the given transform returning the
   * resulting, transformed coordinate. The coordinate will be modified in-place.
   *
   * @param {Transform} transform The transformation.
   * @param {import("./coordinate.js").Coordinate|import("./pixel.js").Pixel} coordinate The coordinate to transform.
   * @return {import("./coordinate.js").Coordinate|import("./pixel.js").Pixel} return coordinate so that operations can be
   *     chained together.
   */
  function apply(transform, coordinate) {
    const x = coordinate[0];
    const y = coordinate[1];
    coordinate[0] = transform[0] * x + transform[2] * y + transform[4];
    coordinate[1] = transform[1] * x + transform[3] * y + transform[5];
    return coordinate;
  }


  /**
   * Applies rotation to the given transform.
   * @param {!Transform} transform Transform.
   * @param {number} angle Angle in radians.
   * @return {!Transform} The rotated transform.
   */
  function rotate$1(transform, angle) {
    const cos = Math.cos(angle);
    const sin = Math.sin(angle);
    return multiply(transform, set(tmp_, cos, sin, -sin, cos, 0, 0));
  }


  /**
   * Applies scale to a given transform.
   * @param {!Transform} transform Transform.
   * @param {number} x Scale factor x.
   * @param {number} y Scale factor y.
   * @return {!Transform} The scaled transform.
   */
  function scale$1(transform, x, y) {
    return multiply(transform, set(tmp_, x, 0, 0, y, 0, 0));
  }

  /**
   * Creates a scale transform.
   * @param {!Transform} target Transform to overwrite.
   * @param {number} x Scale factor x.
   * @param {number} y Scale factor y.
   * @return {!Transform} The scale transform.
   */
  function makeScale(target, x, y) {
    return set(target, x, 0, 0, y, 0, 0);
  }

  /**
   * Applies translation to the given transform.
   * @param {!Transform} transform Transform.
   * @param {number} dx Translation x.
   * @param {number} dy Translation y.
   * @return {!Transform} The translated transform.
   */
  function translate$1(transform, dx, dy) {
    return multiply(transform, set(tmp_, 1, 0, 0, 1, dx, dy));
  }


  /**
   * Creates a composite transform given an initial translation, scale, rotation, and
   * final translation (in that order only, not commutative).
   * @param {!Transform} transform The transform (will be modified in place).
   * @param {number} dx1 Initial translation x.
   * @param {number} dy1 Initial translation y.
   * @param {number} sx Scale factor x.
   * @param {number} sy Scale factor y.
   * @param {number} angle Rotation (in counter-clockwise radians).
   * @param {number} dx2 Final translation x.
   * @param {number} dy2 Final translation y.
   * @return {!Transform} The composite transform.
   */
  function compose(transform, dx1, dy1, sx, sy, angle, dx2, dy2) {
    const sin = Math.sin(angle);
    const cos = Math.cos(angle);
    transform[0] = sx * cos;
    transform[1] = sy * sin;
    transform[2] = -sx * sin;
    transform[3] = sy * cos;
    transform[4] = dx2 * sx * cos - dy2 * sx * sin + dx1;
    transform[5] = dx2 * sy * sin + dy2 * sy * cos + dy1;
    return transform;
  }

  /**
   * Invert the given transform.
   * @param {!Transform} target Transform to be set as the inverse of
   *     the source transform.
   * @param {!Transform} source The source transform to invert.
   * @return {!Transform} The inverted (target) transform.
   */
  function makeInverse(target, source) {
    const det = determinant(source);
    assert(det !== 0, 32); // Transformation matrix cannot be inverted

    const a = source[0];
    const b = source[1];
    const c = source[2];
    const d = source[3];
    const e = source[4];
    const f = source[5];

    target[0] = d / det;
    target[1] = -b / det;
    target[2] = -c / det;
    target[3] = a / det;
    target[4] = (c * f - d * e) / det;
    target[5] = -(a * f - b * e) / det;

    return target;
  }

  /**
   * Returns the determinant of the given matrix.
   * @param {!Transform} mat Matrix.
   * @return {number} Determinant.
   */
  function determinant(mat) {
    return mat[0] * mat[3] - mat[1] * mat[2];
  }

  /**
   * A string version of the transform.  This can be used
   * for CSS transforms.
   * @param {!Transform} mat Matrix.
   * @return {string} The transform as a string.
   */
  function toString(mat) {
    return 'matrix(' + mat.join(', ') + ')';
  }

  /**
   * @module ol/geom/Geometry
   */


  /**
   * @type {import("../transform.js").Transform}
   */
  const tmpTransform = create();


  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for vector geometries.
   *
   * To get notified of changes to the geometry, register a listener for the
   * generic `change` event on your geometry instance.
   *
   * @abstract
   * @api
   */
  class Geometry extends BaseObject {
    constructor() {

      super();

      /**
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.extent_ = createEmpty();

      /**
       * @private
       * @type {number}
       */
      this.extentRevision_ = -1;

      /**
       * @protected
       * @type {Object<string, Geometry>}
       */
      this.simplifiedGeometryCache = {};

      /**
       * @protected
       * @type {number}
       */
      this.simplifiedGeometryMaxMinSquaredTolerance = 0;

      /**
       * @protected
       * @type {number}
       */
      this.simplifiedGeometryRevision = 0;

    }

    /**
     * Make a complete copy of the geometry.
     * @abstract
     * @return {!Geometry} Clone.
     */
    clone() {
      return abstract();
    }

    /**
     * @abstract
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      return abstract();
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @return {boolean} Contains (x, y).
     */
    containsXY(x, y) {
      const coord = this.getClosestPoint([x, y]);
      return coord[0] === x && coord[1] === y;
    }

    /**
     * Return the closest point of the geometry to the passed point as
     * {@link module:ol/coordinate~Coordinate coordinate}.
     * @param {import("../coordinate.js").Coordinate} point Point.
     * @param {import("../coordinate.js").Coordinate=} opt_closestPoint Closest point.
     * @return {import("../coordinate.js").Coordinate} Closest point.
     * @api
     */
    getClosestPoint(point, opt_closestPoint) {
      const closestPoint = opt_closestPoint ? opt_closestPoint : [NaN, NaN];
      this.closestPointXY(point[0], point[1], closestPoint, Infinity);
      return closestPoint;
    }

    /**
     * Returns true if this geometry includes the specified coordinate. If the
     * coordinate is on the boundary of the geometry, returns false.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @return {boolean} Contains coordinate.
     * @api
     */
    intersectsCoordinate(coordinate) {
      return this.containsXY(coordinate[0], coordinate[1]);
    }

    /**
     * @abstract
     * @param {import("../extent.js").Extent} extent Extent.
     * @protected
     * @return {import("../extent.js").Extent} extent Extent.
     */
    computeExtent(extent) {
      return abstract();
    }

    /**
     * Get the extent of the geometry.
     * @param {import("../extent.js").Extent=} opt_extent Extent.
     * @return {import("../extent.js").Extent} extent Extent.
     * @api
     */
    getExtent(opt_extent) {
      if (this.extentRevision_ != this.getRevision()) {
        this.extent_ = this.computeExtent(this.extent_);
        this.extentRevision_ = this.getRevision();
      }
      return returnOrUpdate(this.extent_, opt_extent);
    }

    /**
     * Rotate the geometry around a given coordinate. This modifies the geometry
     * coordinates in place.
     * @abstract
     * @param {number} angle Rotation angle in radians.
     * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
     * @api
     */
    rotate(angle, anchor) {
      abstract();
    }

    /**
     * Scale the geometry (with an optional origin).  This modifies the geometry
     * coordinates in place.
     * @abstract
     * @param {number} sx The scaling factor in the x-direction.
     * @param {number=} opt_sy The scaling factor in the y-direction (defaults to
     *     sx).
     * @param {import("../coordinate.js").Coordinate=} opt_anchor The scale origin (defaults to the center
     *     of the geometry extent).
     * @api
     */
    scale(sx, opt_sy, opt_anchor) {
      abstract();
    }

    /**
     * Create a simplified version of this geometry.  For linestrings, this uses
     * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)
     * algorithm.  For polygons, a quantization-based
     * simplification is used to preserve topology.
     * @param {number} tolerance The tolerance distance for simplification.
     * @return {Geometry} A new, simplified version of the original geometry.
     * @api
     */
    simplify(tolerance) {
      return this.getSimplifiedGeometry(tolerance * tolerance);
    }

    /**
     * Create a simplified version of this geometry using the Douglas Peucker
     * algorithm.
     * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.
     * @abstract
     * @param {number} squaredTolerance Squared tolerance.
     * @return {Geometry} Simplified geometry.
     */
    getSimplifiedGeometry(squaredTolerance) {
      return abstract();
    }

    /**
     * Get the type of this geometry.
     * @abstract
     * @return {import("./GeometryType.js").default} Geometry type.
     */
    getType() {
      return abstract();
    }

    /**
     * Apply a transform function to each coordinate of the geometry.
     * The geometry is modified in place.
     * If you do not want the geometry modified in place, first `clone()` it and
     * then use this function on the clone.
     * @abstract
     * @param {import("../proj.js").TransformFunction} transformFn Transform.
     */
    applyTransform(transformFn) {
      abstract();
    }

    /**
     * Test if the geometry and the passed extent intersect.
     * @abstract
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     */
    intersectsExtent(extent) {
      return abstract();
    }

    /**
     * Translate the geometry.  This modifies the geometry coordinates in place.  If
     * instead you want a new geometry, first `clone()` this geometry.
     * @abstract
     * @param {number} deltaX Delta X.
     * @param {number} deltaY Delta Y.
     * @api
     */
    translate(deltaX, deltaY) {
      abstract();
    }

    /**
     * Transform each coordinate of the geometry from one coordinate reference
     * system to another. The geometry is modified in place.
     * For example, a line will be transformed to a line and a circle to a circle.
     * If you do not want the geometry modified in place, first `clone()` it and
     * then use this function on the clone.
     *
     * @param {import("../proj.js").ProjectionLike} source The current projection.  Can be a
     *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
     * @param {import("../proj.js").ProjectionLike} destination The desired projection.  Can be a
     *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
     * @return {Geometry} This geometry.  Note that original geometry is
     *     modified in place.
     * @api
     */
    transform(source, destination) {
      /** @type {import("../proj/Projection.js").default} */
      const sourceProj = get$2(source);
      const transformFn = sourceProj.getUnits() == Units.TILE_PIXELS ?
        function(inCoordinates, outCoordinates, stride) {
          const pixelExtent = sourceProj.getExtent();
          const projectedExtent = sourceProj.getWorldExtent();
          const scale = getHeight(projectedExtent) / getHeight(pixelExtent);
          compose(tmpTransform,
            projectedExtent[0], projectedExtent[3],
            scale, -scale, 0,
            0, 0);
          transform2D(inCoordinates, 0, inCoordinates.length, stride,
            tmpTransform, outCoordinates);
          return getTransform(sourceProj, destination)(inCoordinates, outCoordinates, stride);
        } :
        getTransform(sourceProj, destination);
      this.applyTransform(transformFn);
      return this;
    }

  }

  /**
   * @module ol/geom/SimpleGeometry
   */

  /**
   * @classdesc
   * Abstract base class; only used for creating subclasses; do not instantiate
   * in apps, as cannot be rendered.
   *
   * @abstract
   * @api
   */
  class SimpleGeometry extends Geometry {
    constructor() {

      super();

      /**
       * @protected
       * @type {GeometryLayout}
       */
      this.layout = GeometryLayout.XY;

      /**
       * @protected
       * @type {number}
       */
      this.stride = 2;

      /**
       * @protected
       * @type {Array<number>}
       */
      this.flatCoordinates = null;

    }

    /**
     * @inheritDoc
     */
    computeExtent(extent) {
      return createOrUpdateFromFlatCoordinates(this.flatCoordinates,
        0, this.flatCoordinates.length, this.stride, extent);
    }

    /**
     * @abstract
     * @return {Array<*>} Coordinates.
     */
    getCoordinates() {
      return abstract();
    }

    /**
     * Return the first coordinate of the geometry.
     * @return {import("../coordinate.js").Coordinate} First coordinate.
     * @api
     */
    getFirstCoordinate() {
      return this.flatCoordinates.slice(0, this.stride);
    }

    /**
     * @return {Array<number>} Flat coordinates.
     */
    getFlatCoordinates() {
      return this.flatCoordinates;
    }

    /**
     * Return the last coordinate of the geometry.
     * @return {import("../coordinate.js").Coordinate} Last point.
     * @api
     */
    getLastCoordinate() {
      return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);
    }

    /**
     * Return the {@link module:ol/geom/GeometryLayout layout} of the geometry.
     * @return {GeometryLayout} Layout.
     * @api
     */
    getLayout() {
      return this.layout;
    }

    /**
     * @inheritDoc
     */
    getSimplifiedGeometry(squaredTolerance) {
      if (this.simplifiedGeometryRevision != this.getRevision()) {
        clear(this.simplifiedGeometryCache);
        this.simplifiedGeometryMaxMinSquaredTolerance = 0;
        this.simplifiedGeometryRevision = this.getRevision();
      }
      // If squaredTolerance is negative or if we know that simplification will not
      // have any effect then just return this.
      if (squaredTolerance < 0 ||
          (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&
           squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)) {
        return this;
      }
      const key = squaredTolerance.toString();
      if (this.simplifiedGeometryCache.hasOwnProperty(key)) {
        return this.simplifiedGeometryCache[key];
      } else {
        const simplifiedGeometry =
            this.getSimplifiedGeometryInternal(squaredTolerance);
        const simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();
        if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {
          this.simplifiedGeometryCache[key] = simplifiedGeometry;
          return simplifiedGeometry;
        } else {
          // Simplification did not actually remove any coordinates.  We now know
          // that any calls to getSimplifiedGeometry with a squaredTolerance less
          // than or equal to the current squaredTolerance will also not have any
          // effect.  This allows us to short circuit simplification (saving CPU
          // cycles) and prevents the cache of simplified geometries from filling
          // up with useless identical copies of this geometry (saving memory).
          this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;
          return this;
        }
      }
    }

    /**
     * @param {number} squaredTolerance Squared tolerance.
     * @return {SimpleGeometry} Simplified geometry.
     * @protected
     */
    getSimplifiedGeometryInternal(squaredTolerance) {
      return this;
    }

    /**
     * @return {number} Stride.
     */
    getStride() {
      return this.stride;
    }

    /**
     * @param {GeometryLayout} layout Layout.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     */
    setFlatCoordinates(layout, flatCoordinates) {
      this.stride = getStrideForLayout(layout);
      this.layout = layout;
      this.flatCoordinates = flatCoordinates;
    }

    /**
     * @abstract
     * @param {!Array<*>} coordinates Coordinates.
     * @param {GeometryLayout=} opt_layout Layout.
     */
    setCoordinates(coordinates, opt_layout) {
      abstract();
    }

    /**
     * @param {GeometryLayout|undefined} layout Layout.
     * @param {Array<*>} coordinates Coordinates.
     * @param {number} nesting Nesting.
     * @protected
     */
    setLayout(layout, coordinates, nesting) {
      /** @type {number} */
      let stride;
      if (layout) {
        stride = getStrideForLayout(layout);
      } else {
        for (let i = 0; i < nesting; ++i) {
          if (coordinates.length === 0) {
            this.layout = GeometryLayout.XY;
            this.stride = 2;
            return;
          } else {
            coordinates = /** @type {Array} */ (coordinates[0]);
          }
        }
        stride = coordinates.length;
        layout = getLayoutForStride(stride);
      }
      this.layout = layout;
      this.stride = stride;
    }

    /**
     * @inheritDoc
     * @api
     */
    applyTransform(transformFn) {
      if (this.flatCoordinates) {
        transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);
        this.changed();
      }
    }

    /**
     * @inheritDoc
     * @api
     */
    rotate(angle, anchor) {
      const flatCoordinates = this.getFlatCoordinates();
      if (flatCoordinates) {
        const stride = this.getStride();
        rotate(
          flatCoordinates, 0, flatCoordinates.length,
          stride, angle, anchor, flatCoordinates);
        this.changed();
      }
    }

    /**
     * @inheritDoc
     * @api
     */
    scale(sx, opt_sy, opt_anchor) {
      let sy = opt_sy;
      if (sy === undefined) {
        sy = sx;
      }
      let anchor = opt_anchor;
      if (!anchor) {
        anchor = getCenter(this.getExtent());
      }
      const flatCoordinates = this.getFlatCoordinates();
      if (flatCoordinates) {
        const stride = this.getStride();
        scale(
          flatCoordinates, 0, flatCoordinates.length,
          stride, sx, sy, anchor, flatCoordinates);
        this.changed();
      }
    }

    /**
     * @inheritDoc
     * @api
     */
    translate(deltaX, deltaY) {
      const flatCoordinates = this.getFlatCoordinates();
      if (flatCoordinates) {
        const stride = this.getStride();
        translate(
          flatCoordinates, 0, flatCoordinates.length, stride,
          deltaX, deltaY, flatCoordinates);
        this.changed();
      }
    }
  }


  /**
   * @param {number} stride Stride.
   * @return {GeometryLayout} layout Layout.
   */
  function getLayoutForStride(stride) {
    let layout;
    if (stride == 2) {
      layout = GeometryLayout.XY;
    } else if (stride == 3) {
      layout = GeometryLayout.XYZ;
    } else if (stride == 4) {
      layout = GeometryLayout.XYZM;
    }
    return (
      /** @type {GeometryLayout} */ (layout)
    );
  }


  /**
   * @param {GeometryLayout} layout Layout.
   * @return {number} Stride.
   */
  function getStrideForLayout(layout) {
    let stride;
    if (layout == GeometryLayout.XY) {
      stride = 2;
    } else if (layout == GeometryLayout.XYZ || layout == GeometryLayout.XYM) {
      stride = 3;
    } else if (layout == GeometryLayout.XYZM) {
      stride = 4;
    }
    return /** @type {number} */ (stride);
  }


  /**
   * @param {SimpleGeometry} simpleGeometry Simple geometry.
   * @param {import("../transform.js").Transform} transform Transform.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Transformed flat coordinates.
   */
  function transformGeom2D(simpleGeometry, transform, opt_dest) {
    const flatCoordinates = simpleGeometry.getFlatCoordinates();
    if (!flatCoordinates) {
      return null;
    } else {
      const stride = simpleGeometry.getStride();
      return transform2D(
        flatCoordinates, 0, flatCoordinates.length, stride,
        transform, opt_dest);
    }
  }

  /**
   * @module ol/geom/flat/area
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {number} Area.
   */
  function linearRing(flatCoordinates, offset, end, stride) {
    let twiceArea = 0;
    let x1 = flatCoordinates[end - stride];
    let y1 = flatCoordinates[end - stride + 1];
    for (; offset < end; offset += stride) {
      const x2 = flatCoordinates[offset];
      const y2 = flatCoordinates[offset + 1];
      twiceArea += y1 * x2 - x1 * y2;
      x1 = x2;
      y1 = y2;
    }
    return twiceArea / 2;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @return {number} Area.
   */
  function linearRings(flatCoordinates, offset, ends, stride) {
    let area = 0;
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      const end = ends[i];
      area += linearRing(flatCoordinates, offset, end, stride);
      offset = end;
    }
    return area;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @return {number} Area.
   */
  function linearRingss(flatCoordinates, offset, endss, stride) {
    let area = 0;
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      area += linearRings(flatCoordinates, offset, ends, stride);
      offset = ends[ends.length - 1];
    }
    return area;
  }

  /**
   * @module ol/geom/flat/closest
   */


  /**
   * Returns the point on the 2D line segment flatCoordinates[offset1] to
   * flatCoordinates[offset2] that is closest to the point (x, y).  Extra
   * dimensions are linearly interpolated.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset1 Offset 1.
   * @param {number} offset2 Offset 2.
   * @param {number} stride Stride.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {Array<number>} closestPoint Closest point.
   */
  function assignClosest(flatCoordinates, offset1, offset2, stride, x, y, closestPoint) {
    const x1 = flatCoordinates[offset1];
    const y1 = flatCoordinates[offset1 + 1];
    const dx = flatCoordinates[offset2] - x1;
    const dy = flatCoordinates[offset2 + 1] - y1;
    let offset;
    if (dx === 0 && dy === 0) {
      offset = offset1;
    } else {
      const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
      if (t > 1) {
        offset = offset2;
      } else if (t > 0) {
        for (let i = 0; i < stride; ++i) {
          closestPoint[i] = lerp(flatCoordinates[offset1 + i],
            flatCoordinates[offset2 + i], t);
        }
        closestPoint.length = stride;
        return;
      } else {
        offset = offset1;
      }
    }
    for (let i = 0; i < stride; ++i) {
      closestPoint[i] = flatCoordinates[offset + i];
    }
    closestPoint.length = stride;
  }


  /**
   * Return the squared of the largest distance between any pair of consecutive
   * coordinates.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} max Max squared delta.
   * @return {number} Max squared delta.
   */
  function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {
    let x1 = flatCoordinates[offset];
    let y1 = flatCoordinates[offset + 1];
    for (offset += stride; offset < end; offset += stride) {
      const x2 = flatCoordinates[offset];
      const y2 = flatCoordinates[offset + 1];
      const squaredDelta = squaredDistance(x1, y1, x2, y2);
      if (squaredDelta > max) {
        max = squaredDelta;
      }
      x1 = x2;
      y1 = y2;
    }
    return max;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} max Max squared delta.
   * @return {number} Max squared delta.
   */
  function arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max) {
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      const end = ends[i];
      max = maxSquaredDelta(
        flatCoordinates, offset, end, stride, max);
      offset = end;
    }
    return max;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {number} max Max squared delta.
   * @return {number} Max squared delta.
   */
  function multiArrayMaxSquaredDelta(flatCoordinates, offset, endss, stride, max) {
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      max = arrayMaxSquaredDelta(
        flatCoordinates, offset, ends, stride, max);
      offset = ends[ends.length - 1];
    }
    return max;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} maxDelta Max delta.
   * @param {boolean} isRing Is ring.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {Array<number>} closestPoint Closest point.
   * @param {number} minSquaredDistance Minimum squared distance.
   * @param {Array<number>=} opt_tmpPoint Temporary point object.
   * @return {number} Minimum squared distance.
   */
  function assignClosestPoint(flatCoordinates, offset, end,
    stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance,
    opt_tmpPoint) {
    if (offset == end) {
      return minSquaredDistance;
    }
    let i, squaredDistance$1;
    if (maxDelta === 0) {
      // All points are identical, so just test the first point.
      squaredDistance$1 = squaredDistance(
        x, y, flatCoordinates[offset], flatCoordinates[offset + 1]);
      if (squaredDistance$1 < minSquaredDistance) {
        for (i = 0; i < stride; ++i) {
          closestPoint[i] = flatCoordinates[offset + i];
        }
        closestPoint.length = stride;
        return squaredDistance$1;
      } else {
        return minSquaredDistance;
      }
    }
    const tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];
    let index = offset + stride;
    while (index < end) {
      assignClosest(
        flatCoordinates, index - stride, index, stride, x, y, tmpPoint);
      squaredDistance$1 = squaredDistance(x, y, tmpPoint[0], tmpPoint[1]);
      if (squaredDistance$1 < minSquaredDistance) {
        minSquaredDistance = squaredDistance$1;
        for (i = 0; i < stride; ++i) {
          closestPoint[i] = tmpPoint[i];
        }
        closestPoint.length = stride;
        index += stride;
      } else {
        // Skip ahead multiple points, because we know that all the skipped
        // points cannot be any closer than the closest point we have found so
        // far.  We know this because we know how close the current point is, how
        // close the closest point we have found so far is, and the maximum
        // distance between consecutive points.  For example, if we're currently
        // at distance 10, the best we've found so far is 3, and that the maximum
        // distance between consecutive points is 2, then we'll need to skip at
        // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of
        // finding a closer point.  We use Math.max(..., 1) to ensure that we
        // always advance at least one point, to avoid an infinite loop.
        index += stride * Math.max(
          ((Math.sqrt(squaredDistance$1) -
              Math.sqrt(minSquaredDistance)) / maxDelta) | 0, 1);
      }
    }
    if (isRing) {
      // Check the closing segment.
      assignClosest(
        flatCoordinates, end - stride, offset, stride, x, y, tmpPoint);
      squaredDistance$1 = squaredDistance(x, y, tmpPoint[0], tmpPoint[1]);
      if (squaredDistance$1 < minSquaredDistance) {
        minSquaredDistance = squaredDistance$1;
        for (i = 0; i < stride; ++i) {
          closestPoint[i] = tmpPoint[i];
        }
        closestPoint.length = stride;
      }
    }
    return minSquaredDistance;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} maxDelta Max delta.
   * @param {boolean} isRing Is ring.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {Array<number>} closestPoint Closest point.
   * @param {number} minSquaredDistance Minimum squared distance.
   * @param {Array<number>=} opt_tmpPoint Temporary point object.
   * @return {number} Minimum squared distance.
   */
  function assignClosestArrayPoint(flatCoordinates, offset, ends,
    stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance,
    opt_tmpPoint) {
    const tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      const end = ends[i];
      minSquaredDistance = assignClosestPoint(
        flatCoordinates, offset, end, stride,
        maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);
      offset = end;
    }
    return minSquaredDistance;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {number} maxDelta Max delta.
   * @param {boolean} isRing Is ring.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {Array<number>} closestPoint Closest point.
   * @param {number} minSquaredDistance Minimum squared distance.
   * @param {Array<number>=} opt_tmpPoint Temporary point object.
   * @return {number} Minimum squared distance.
   */
  function assignClosestMultiArrayPoint(flatCoordinates, offset,
    endss, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance,
    opt_tmpPoint) {
    const tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      minSquaredDistance = assignClosestArrayPoint(
        flatCoordinates, offset, ends, stride,
        maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);
      offset = ends[ends.length - 1];
    }
    return minSquaredDistance;
  }

  /**
   * @module ol/geom/flat/deflate
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {number} stride Stride.
   * @return {number} offset Offset.
   */
  function deflateCoordinate(flatCoordinates, offset, coordinate, stride) {
    for (let i = 0, ii = coordinate.length; i < ii; ++i) {
      flatCoordinates[offset++] = coordinate[i];
    }
    return offset;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<import("../../coordinate.js").Coordinate>} coordinates Coordinates.
   * @param {number} stride Stride.
   * @return {number} offset Offset.
   */
  function deflateCoordinates(flatCoordinates, offset, coordinates, stride) {
    for (let i = 0, ii = coordinates.length; i < ii; ++i) {
      const coordinate = coordinates[i];
      for (let j = 0; j < stride; ++j) {
        flatCoordinates[offset++] = coordinate[j];
      }
    }
    return offset;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<import("../../coordinate.js").Coordinate>>} coordinatess Coordinatess.
   * @param {number} stride Stride.
   * @param {Array<number>=} opt_ends Ends.
   * @return {Array<number>} Ends.
   */
  function deflateCoordinatesArray(flatCoordinates, offset, coordinatess, stride, opt_ends) {
    const ends = opt_ends ? opt_ends : [];
    let i = 0;
    for (let j = 0, jj = coordinatess.length; j < jj; ++j) {
      const end = deflateCoordinates(
        flatCoordinates, offset, coordinatess[j], stride);
      ends[i++] = end;
      offset = end;
    }
    ends.length = i;
    return ends;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<Array<import("../../coordinate.js").Coordinate>>>} coordinatesss Coordinatesss.
   * @param {number} stride Stride.
   * @param {Array<Array<number>>=} opt_endss Endss.
   * @return {Array<Array<number>>} Endss.
   */
  function deflateMultiCoordinatesArray(flatCoordinates, offset, coordinatesss, stride, opt_endss) {
    const endss = opt_endss ? opt_endss : [];
    let i = 0;
    for (let j = 0, jj = coordinatesss.length; j < jj; ++j) {
      const ends = deflateCoordinatesArray(
        flatCoordinates, offset, coordinatesss[j], stride, endss[i]);
      endss[i++] = ends;
      offset = ends[ends.length - 1];
    }
    endss.length = i;
    return endss;
  }

  /**
   * @module ol/geom/flat/inflate
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {Array<import("../../coordinate.js").Coordinate>=} opt_coordinates Coordinates.
   * @return {Array<import("../../coordinate.js").Coordinate>} Coordinates.
   */
  function inflateCoordinates(flatCoordinates, offset, end, stride, opt_coordinates) {
    const coordinates = opt_coordinates !== undefined ? opt_coordinates : [];
    let i = 0;
    for (let j = offset; j < end; j += stride) {
      coordinates[i++] = flatCoordinates.slice(j, j + stride);
    }
    coordinates.length = i;
    return coordinates;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {Array<Array<import("../../coordinate.js").Coordinate>>=} opt_coordinatess Coordinatess.
   * @return {Array<Array<import("../../coordinate.js").Coordinate>>} Coordinatess.
   */
  function inflateCoordinatesArray(flatCoordinates, offset, ends, stride, opt_coordinatess) {
    const coordinatess = opt_coordinatess !== undefined ? opt_coordinatess : [];
    let i = 0;
    for (let j = 0, jj = ends.length; j < jj; ++j) {
      const end = ends[j];
      coordinatess[i++] = inflateCoordinates(
        flatCoordinates, offset, end, stride, coordinatess[i]);
      offset = end;
    }
    coordinatess.length = i;
    return coordinatess;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {Array<Array<Array<import("../../coordinate.js").Coordinate>>>=} opt_coordinatesss
   *     Coordinatesss.
   * @return {Array<Array<Array<import("../../coordinate.js").Coordinate>>>} Coordinatesss.
   */
  function inflateMultiCoordinatesArray(flatCoordinates, offset, endss, stride, opt_coordinatesss) {
    const coordinatesss = opt_coordinatesss !== undefined ? opt_coordinatesss : [];
    let i = 0;
    for (let j = 0, jj = endss.length; j < jj; ++j) {
      const ends = endss[j];
      coordinatesss[i++] = inflateCoordinatesArray(
        flatCoordinates, offset, ends, stride, coordinatesss[i]);
      offset = ends[ends.length - 1];
    }
    coordinatesss.length = i;
    return coordinatesss;
  }

  /**
   * @module ol/geom/flat/simplify
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} squaredTolerance Squared tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @return {number} Simplified offset.
   */
  function douglasPeucker(flatCoordinates, offset, end,
    stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {
    const n = (end - offset) / stride;
    if (n < 3) {
      for (; offset < end; offset += stride) {
        simplifiedFlatCoordinates[simplifiedOffset++] =
            flatCoordinates[offset];
        simplifiedFlatCoordinates[simplifiedOffset++] =
            flatCoordinates[offset + 1];
      }
      return simplifiedOffset;
    }
    /** @type {Array<number>} */
    const markers = new Array(n);
    markers[0] = 1;
    markers[n - 1] = 1;
    /** @type {Array<number>} */
    const stack = [offset, end - stride];
    let index = 0;
    while (stack.length > 0) {
      const last = stack.pop();
      const first = stack.pop();
      let maxSquaredDistance = 0;
      const x1 = flatCoordinates[first];
      const y1 = flatCoordinates[first + 1];
      const x2 = flatCoordinates[last];
      const y2 = flatCoordinates[last + 1];
      for (let i = first + stride; i < last; i += stride) {
        const x = flatCoordinates[i];
        const y = flatCoordinates[i + 1];
        const squaredDistance = squaredSegmentDistance(
          x, y, x1, y1, x2, y2);
        if (squaredDistance > maxSquaredDistance) {
          index = i;
          maxSquaredDistance = squaredDistance;
        }
      }
      if (maxSquaredDistance > squaredTolerance) {
        markers[(index - offset) / stride] = 1;
        if (first + stride < index) {
          stack.push(first, index);
        }
        if (index + stride < last) {
          stack.push(index, last);
        }
      }
    }
    for (let i = 0; i < n; ++i) {
      if (markers[i]) {
        simplifiedFlatCoordinates[simplifiedOffset++] =
            flatCoordinates[offset + i * stride];
        simplifiedFlatCoordinates[simplifiedOffset++] =
            flatCoordinates[offset + i * stride + 1];
      }
    }
    return simplifiedOffset;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} squaredTolerance Squared tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @param {Array<number>} simplifiedEnds Simplified ends.
   * @return {number} Simplified offset.
   */
  function douglasPeuckerArray(flatCoordinates, offset,
    ends, stride, squaredTolerance, simplifiedFlatCoordinates,
    simplifiedOffset, simplifiedEnds) {
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      const end = ends[i];
      simplifiedOffset = douglasPeucker(
        flatCoordinates, offset, end, stride, squaredTolerance,
        simplifiedFlatCoordinates, simplifiedOffset);
      simplifiedEnds.push(simplifiedOffset);
      offset = end;
    }
    return simplifiedOffset;
  }


  /**
   * @param {number} value Value.
   * @param {number} tolerance Tolerance.
   * @return {number} Rounded value.
   */
  function snap(value, tolerance) {
    return tolerance * Math.round(value / tolerance);
  }


  /**
   * Simplifies a line string using an algorithm designed by Tim Schaub.
   * Coordinates are snapped to the nearest value in a virtual grid and
   * consecutive duplicate coordinates are discarded.  This effectively preserves
   * topology as the simplification of any subsection of a line string is
   * independent of the rest of the line string.  This means that, for examples,
   * the common edge between two polygons will be simplified to the same line
   * string independently in both polygons.  This implementation uses a single
   * pass over the coordinates and eliminates intermediate collinear points.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} tolerance Tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @return {number} Simplified offset.
   */
  function quantize(flatCoordinates, offset, end, stride,
    tolerance, simplifiedFlatCoordinates, simplifiedOffset) {
    // do nothing if the line is empty
    if (offset == end) {
      return simplifiedOffset;
    }
    // snap the first coordinate (P1)
    let x1 = snap(flatCoordinates[offset], tolerance);
    let y1 = snap(flatCoordinates[offset + 1], tolerance);
    offset += stride;
    // add the first coordinate to the output
    simplifiedFlatCoordinates[simplifiedOffset++] = x1;
    simplifiedFlatCoordinates[simplifiedOffset++] = y1;
    // find the next coordinate that does not snap to the same value as the first
    // coordinate (P2)
    let x2, y2;
    do {
      x2 = snap(flatCoordinates[offset], tolerance);
      y2 = snap(flatCoordinates[offset + 1], tolerance);
      offset += stride;
      if (offset == end) {
        // all coordinates snap to the same value, the line collapses to a point
        // push the last snapped value anyway to ensure that the output contains
        // at least two points
        // FIXME should we really return at least two points anyway?
        simplifiedFlatCoordinates[simplifiedOffset++] = x2;
        simplifiedFlatCoordinates[simplifiedOffset++] = y2;
        return simplifiedOffset;
      }
    } while (x2 == x1 && y2 == y1);
    while (offset < end) {
      // snap the next coordinate (P3)
      const x3 = snap(flatCoordinates[offset], tolerance);
      const y3 = snap(flatCoordinates[offset + 1], tolerance);
      offset += stride;
      // skip P3 if it is equal to P2
      if (x3 == x2 && y3 == y2) {
        continue;
      }
      // calculate the delta between P1 and P2
      const dx1 = x2 - x1;
      const dy1 = y2 - y1;
      // calculate the delta between P3 and P1
      const dx2 = x3 - x1;
      const dy2 = y3 - y1;
      // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from
      // P1 in the same direction then P2 is on the straight line between P1 and
      // P3
      if ((dx1 * dy2 == dy1 * dx2) &&
          ((dx1 < 0 && dx2 < dx1) || dx1 == dx2 || (dx1 > 0 && dx2 > dx1)) &&
          ((dy1 < 0 && dy2 < dy1) || dy1 == dy2 || (dy1 > 0 && dy2 > dy1))) {
        // discard P2 and set P2 = P3
        x2 = x3;
        y2 = y3;
        continue;
      }
      // either P1, P2, and P3 are not colinear, or they are colinear but P3 is
      // between P3 and P1 or on the opposite half of the line to P2.  add P2,
      // and continue with P1 = P2 and P2 = P3
      simplifiedFlatCoordinates[simplifiedOffset++] = x2;
      simplifiedFlatCoordinates[simplifiedOffset++] = y2;
      x1 = x2;
      y1 = y2;
      x2 = x3;
      y2 = y3;
    }
    // add the last point (P2)
    simplifiedFlatCoordinates[simplifiedOffset++] = x2;
    simplifiedFlatCoordinates[simplifiedOffset++] = y2;
    return simplifiedOffset;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} tolerance Tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @param {Array<number>} simplifiedEnds Simplified ends.
   * @return {number} Simplified offset.
   */
  function quantizeArray(
    flatCoordinates, offset, ends, stride,
    tolerance,
    simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      const end = ends[i];
      simplifiedOffset = quantize(
        flatCoordinates, offset, end, stride,
        tolerance,
        simplifiedFlatCoordinates, simplifiedOffset);
      simplifiedEnds.push(simplifiedOffset);
      offset = end;
    }
    return simplifiedOffset;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {number} tolerance Tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @param {Array<Array<number>>} simplifiedEndss Simplified endss.
   * @return {number} Simplified offset.
   */
  function quantizeMultiArray(
    flatCoordinates, offset, endss, stride,
    tolerance,
    simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss) {
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      const simplifiedEnds = [];
      simplifiedOffset = quantizeArray(
        flatCoordinates, offset, ends, stride,
        tolerance,
        simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds);
      simplifiedEndss.push(simplifiedEnds);
      offset = ends[ends.length - 1];
    }
    return simplifiedOffset;
  }

  /**
   * @module ol/geom/LinearRing
   */

  /**
   * @classdesc
   * Linear ring geometry. Only used as part of polygon; cannot be rendered
   * on its own.
   *
   * @api
   */
  class LinearRing extends SimpleGeometry {

    /**
     * @param {Array<import("../coordinate.js").Coordinate>|Array<number>} coordinates Coordinates.
     *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.
     * @param {GeometryLayout=} opt_layout Layout.
     */
    constructor(coordinates, opt_layout) {

      super();

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDeltaRevision_ = -1;

      if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {
        this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
      } else {
        this.setCoordinates(/** @type {Array<import("../coordinate.js").Coordinate>} */ (coordinates), opt_layout);
      }

    }

    /**
     * Make a complete copy of the geometry.
     * @return {!LinearRing} Clone.
     * @override
     * @api
     */
    clone() {
      return new LinearRing(this.flatCoordinates.slice(), this.layout);
    }

    /**
     * @inheritDoc
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      if (this.maxDeltaRevision_ != this.getRevision()) {
        this.maxDelta_ = Math.sqrt(maxSquaredDelta(
          this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));
        this.maxDeltaRevision_ = this.getRevision();
      }
      return assignClosestPoint(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,
        this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
    }

    /**
     * Return the area of the linear ring on projected plane.
     * @return {number} Area (on projected plane).
     * @api
     */
    getArea() {
      return linearRing(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
    }

    /**
     * Return the coordinates of the linear ring.
     * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
     * @override
     * @api
     */
    getCoordinates() {
      return inflateCoordinates(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
    }

    /**
     * @inheritDoc
     */
    getSimplifiedGeometryInternal(squaredTolerance) {
      const simplifiedFlatCoordinates = [];
      simplifiedFlatCoordinates.length = douglasPeucker(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,
        squaredTolerance, simplifiedFlatCoordinates, 0);
      return new LinearRing(simplifiedFlatCoordinates, GeometryLayout.XY);
    }

    /**
     * @inheritDoc
     * @api
     */
    getType() {
      return GeometryType.LINEAR_RING;
    }

    /**
     * @inheritDoc
     */
    intersectsExtent(extent) {
      return false;
    }

    /**
     * Set the coordinates of the linear ring.
     * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
     * @param {GeometryLayout=} opt_layout Layout.
     * @override
     * @api
     */
    setCoordinates(coordinates, opt_layout) {
      this.setLayout(opt_layout, coordinates, 1);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      this.flatCoordinates.length = deflateCoordinates(
        this.flatCoordinates, 0, coordinates, this.stride);
      this.changed();
    }
  }

  /**
   * @module ol/geom/Point
   */

  /**
   * @classdesc
   * Point geometry.
   *
   * @api
   */
  class Point extends SimpleGeometry {

    /**
     * @param {import("../coordinate.js").Coordinate} coordinates Coordinates.
     * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
     */
    constructor(coordinates, opt_layout) {
      super();
      this.setCoordinates(coordinates, opt_layout);
    }

    /**
     * Make a complete copy of the geometry.
     * @return {!Point} Clone.
     * @override
     * @api
     */
    clone() {
      const point = new Point(this.flatCoordinates.slice(), this.layout);
      return point;
    }

    /**
     * @inheritDoc
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      const flatCoordinates = this.flatCoordinates;
      const squaredDistance$1 = squaredDistance(x, y, flatCoordinates[0], flatCoordinates[1]);
      if (squaredDistance$1 < minSquaredDistance) {
        const stride = this.stride;
        for (let i = 0; i < stride; ++i) {
          closestPoint[i] = flatCoordinates[i];
        }
        closestPoint.length = stride;
        return squaredDistance$1;
      } else {
        return minSquaredDistance;
      }
    }

    /**
     * Return the coordinate of the point.
     * @return {import("../coordinate.js").Coordinate} Coordinates.
     * @override
     * @api
     */
    getCoordinates() {
      return !this.flatCoordinates ? [] : this.flatCoordinates.slice();
    }

    /**
     * @inheritDoc
     */
    computeExtent(extent) {
      return createOrUpdateFromCoordinate(this.flatCoordinates, extent);
    }

    /**
     * @inheritDoc
     * @api
     */
    getType() {
      return GeometryType.POINT;
    }

    /**
     * @inheritDoc
     * @api
     */
    intersectsExtent(extent) {
      return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);
    }

    /**
     * @inheritDoc
     * @api
     */
    setCoordinates(coordinates, opt_layout) {
      this.setLayout(opt_layout, coordinates, 0);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      this.flatCoordinates.length = deflateCoordinate(
        this.flatCoordinates, 0, coordinates, this.stride);
      this.changed();
    }
  }

  /**
   * @module ol/geom/flat/contains
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} Contains extent.
   */
  function linearRingContainsExtent(flatCoordinates, offset, end, stride, extent) {
    const outside = forEachCorner(extent,
      /**
       * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
       * @return {boolean} Contains (x, y).
       */
      function(coordinate) {
        return !linearRingContainsXY(flatCoordinates, offset, end, stride, coordinate[0], coordinate[1]);
      });
    return !outside;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {boolean} Contains (x, y).
   */
  function linearRingContainsXY(flatCoordinates, offset, end, stride, x, y) {
    // http://geomalgorithms.com/a03-_inclusion.html
    // Copyright 2000 softSurfer, 2012 Dan Sunday
    // This code may be freely used and modified for any purpose
    // providing that this copyright notice is included with it.
    // SoftSurfer makes no warranty for this code, and cannot be held
    // liable for any real or imagined damage resulting from its use.
    // Users of this code must verify correctness for their application.
    let wn = 0;
    let x1 = flatCoordinates[end - stride];
    let y1 = flatCoordinates[end - stride + 1];
    for (; offset < end; offset += stride) {
      const x2 = flatCoordinates[offset];
      const y2 = flatCoordinates[offset + 1];
      if (y1 <= y) {
        if (y2 > y && ((x2 - x1) * (y - y1)) - ((x - x1) * (y2 - y1)) > 0) {
          wn++;
        }
      } else if (y2 <= y && ((x2 - x1) * (y - y1)) - ((x - x1) * (y2 - y1)) < 0) {
        wn--;
      }
      x1 = x2;
      y1 = y2;
    }
    return wn !== 0;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {boolean} Contains (x, y).
   */
  function linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y) {
    if (ends.length === 0) {
      return false;
    }
    if (!linearRingContainsXY(flatCoordinates, offset, ends[0], stride, x, y)) {
      return false;
    }
    for (let i = 1, ii = ends.length; i < ii; ++i) {
      if (linearRingContainsXY(flatCoordinates, ends[i - 1], ends[i], stride, x, y)) {
        return false;
      }
    }
    return true;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {boolean} Contains (x, y).
   */
  function linearRingssContainsXY(flatCoordinates, offset, endss, stride, x, y) {
    if (endss.length === 0) {
      return false;
    }
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {
        return true;
      }
      offset = ends[ends.length - 1];
    }
    return false;
  }

  /**
   * @module ol/geom/flat/interiorpoint
   */


  /**
   * Calculates a point that is likely to lie in the interior of the linear rings.
   * Inspired by JTS's com.vividsolutions.jts.geom.Geometry#getInteriorPoint.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {Array<number>} flatCenters Flat centers.
   * @param {number} flatCentersOffset Flat center offset.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Destination point as XYM coordinate, where M is the
   * length of the horizontal intersection that the point belongs to.
   */
  function getInteriorPointOfArray(flatCoordinates, offset,
    ends, stride, flatCenters, flatCentersOffset, opt_dest) {
    let i, ii, x, x1, x2, y1, y2;
    const y = flatCenters[flatCentersOffset + 1];
    /** @type {Array<number>} */
    const intersections = [];
    // Calculate intersections with the horizontal line
    for (let r = 0, rr = ends.length; r < rr; ++r) {
      const end = ends[r];
      x1 = flatCoordinates[end - stride];
      y1 = flatCoordinates[end - stride + 1];
      for (i = offset; i < end; i += stride) {
        x2 = flatCoordinates[i];
        y2 = flatCoordinates[i + 1];
        if ((y <= y1 && y2 <= y) || (y1 <= y && y <= y2)) {
          x = (y - y1) / (y2 - y1) * (x2 - x1) + x1;
          intersections.push(x);
        }
        x1 = x2;
        y1 = y2;
      }
    }
    // Find the longest segment of the horizontal line that has its center point
    // inside the linear ring.
    let pointX = NaN;
    let maxSegmentLength = -Infinity;
    intersections.sort(numberSafeCompareFunction);
    x1 = intersections[0];
    for (i = 1, ii = intersections.length; i < ii; ++i) {
      x2 = intersections[i];
      const segmentLength = Math.abs(x2 - x1);
      if (segmentLength > maxSegmentLength) {
        x = (x1 + x2) / 2;
        if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {
          pointX = x;
          maxSegmentLength = segmentLength;
        }
      }
      x1 = x2;
    }
    if (isNaN(pointX)) {
      // There is no horizontal line that has its center point inside the linear
      // ring.  Use the center of the the linear ring's extent.
      pointX = flatCenters[flatCentersOffset];
    }
    if (opt_dest) {
      opt_dest.push(pointX, y, maxSegmentLength);
      return opt_dest;
    } else {
      return [pointX, y, maxSegmentLength];
    }
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {Array<number>} flatCenters Flat centers.
   * @return {Array<number>} Interior points as XYM coordinates, where M is the
   * length of the horizontal intersection that the point belongs to.
   */
  function getInteriorPointsOfMultiArray(flatCoordinates, offset, endss, stride, flatCenters) {
    let interiorPoints = [];
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      interiorPoints = getInteriorPointOfArray(flatCoordinates,
        offset, ends, stride, flatCenters, 2 * i, interiorPoints);
      offset = ends[ends.length - 1];
    }
    return interiorPoints;
  }

  /**
   * @module ol/geom/flat/segments
   */


  /**
   * This function calls `callback` for each segment of the flat coordinates
   * array. If the callback returns a truthy value the function returns that
   * value immediately. Otherwise the function returns `false`.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {function(import("../../coordinate.js").Coordinate, import("../../coordinate.js").Coordinate): T} callback Function
   *     called for each segment.
   * @return {T|boolean} Value.
   * @template T
   */
  function forEach(flatCoordinates, offset, end, stride, callback) {
    const point1 = [flatCoordinates[offset], flatCoordinates[offset + 1]];
    const point2 = [];
    let ret;
    for (; (offset + stride) < end; offset += stride) {
      point2[0] = flatCoordinates[offset + stride];
      point2[1] = flatCoordinates[offset + stride + 1];
      ret = callback(point1, point2);
      if (ret) {
        return ret;
      }
      point1[0] = point2[0];
      point1[1] = point2[1];
    }
    return false;
  }

  /**
   * @module ol/geom/flat/intersectsextent
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLineString(flatCoordinates, offset, end, stride, extent) {
    const coordinatesExtent = extendFlatCoordinates(
      createEmpty(), flatCoordinates, offset, end, stride);
    if (!intersects(extent, coordinatesExtent)) {
      return false;
    }
    if (containsExtent(extent, coordinatesExtent)) {
      return true;
    }
    if (coordinatesExtent[0] >= extent[0] &&
        coordinatesExtent[2] <= extent[2]) {
      return true;
    }
    if (coordinatesExtent[1] >= extent[1] &&
        coordinatesExtent[3] <= extent[3]) {
      return true;
    }
    return forEach(flatCoordinates, offset, end, stride,
      /**
       * @param {import("../../coordinate.js").Coordinate} point1 Start point.
       * @param {import("../../coordinate.js").Coordinate} point2 End point.
       * @return {boolean} `true` if the segment and the extent intersect,
       *     `false` otherwise.
       */
      function(point1, point2) {
        return intersectsSegment(extent, point1, point2);
      });
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLineStringArray(flatCoordinates, offset, ends, stride, extent) {
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      if (intersectsLineString(
        flatCoordinates, offset, ends[i], stride, extent)) {
        return true;
      }
      offset = ends[i];
    }
    return false;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLinearRing(flatCoordinates, offset, end, stride, extent) {
    if (intersectsLineString(
      flatCoordinates, offset, end, stride, extent)) {
      return true;
    }
    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[1])) {
      return true;
    }
    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[3])) {
      return true;
    }
    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[1])) {
      return true;
    }
    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[3])) {
      return true;
    }
    return false;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent) {
    if (!intersectsLinearRing(
      flatCoordinates, offset, ends[0], stride, extent)) {
      return false;
    }
    if (ends.length === 1) {
      return true;
    }
    for (let i = 1, ii = ends.length; i < ii; ++i) {
      if (linearRingContainsExtent(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {
        if (!intersectsLineString(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {
          return false;
        }
      }
    }
    return true;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLinearRingMultiArray(flatCoordinates, offset, endss, stride, extent) {
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      if (intersectsLinearRingArray(
        flatCoordinates, offset, ends, stride, extent)) {
        return true;
      }
      offset = ends[ends.length - 1];
    }
    return false;
  }

  /**
   * @module ol/geom/flat/reverse
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   */
  function coordinates(flatCoordinates, offset, end, stride) {
    while (offset < end - stride) {
      for (let i = 0; i < stride; ++i) {
        const tmp = flatCoordinates[offset + i];
        flatCoordinates[offset + i] = flatCoordinates[end - stride + i];
        flatCoordinates[end - stride + i] = tmp;
      }
      offset += stride;
      end -= stride;
    }
  }

  /**
   * @module ol/geom/flat/orient
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {boolean} Is clockwise.
   */
  function linearRingIsClockwise(flatCoordinates, offset, end, stride) {
    // http://tinyurl.com/clockwise-method
    // https://github.com/OSGeo/gdal/blob/trunk/gdal/ogr/ogrlinearring.cpp
    let edge = 0;
    let x1 = flatCoordinates[end - stride];
    let y1 = flatCoordinates[end - stride + 1];
    for (; offset < end; offset += stride) {
      const x2 = flatCoordinates[offset];
      const y2 = flatCoordinates[offset + 1];
      edge += (x2 - x1) * (y2 + y1);
      x1 = x2;
      y1 = y2;
    }
    return edge > 0;
  }


  /**
   * Determines if linear rings are oriented.  By default, left-hand orientation
   * is tested (first ring must be clockwise, remaining rings counter-clockwise).
   * To test for right-hand orientation, use the `opt_right` argument.
   *
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Array of end indexes.
   * @param {number} stride Stride.
   * @param {boolean=} opt_right Test for right-hand orientation
   *     (counter-clockwise exterior ring and clockwise interior rings).
   * @return {boolean} Rings are correctly oriented.
   */
  function linearRingsAreOriented(flatCoordinates, offset, ends, stride, opt_right) {
    const right = opt_right !== undefined ? opt_right : false;
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      const end = ends[i];
      const isClockwise = linearRingIsClockwise(
        flatCoordinates, offset, end, stride);
      if (i === 0) {
        if ((right && isClockwise) || (!right && !isClockwise)) {
          return false;
        }
      } else {
        if ((right && !isClockwise) || (!right && isClockwise)) {
          return false;
        }
      }
      offset = end;
    }
    return true;
  }


  /**
   * Determines if linear rings are oriented.  By default, left-hand orientation
   * is tested (first ring must be clockwise, remaining rings counter-clockwise).
   * To test for right-hand orientation, use the `opt_right` argument.
   *
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Array of array of end indexes.
   * @param {number} stride Stride.
   * @param {boolean=} opt_right Test for right-hand orientation
   *     (counter-clockwise exterior ring and clockwise interior rings).
   * @return {boolean} Rings are correctly oriented.
   */
  function linearRingssAreOriented(flatCoordinates, offset, endss, stride, opt_right) {
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      if (!linearRingsAreOriented(
        flatCoordinates, offset, ends, stride, opt_right)) {
        return false;
      }
      if (ends.length) {
        offset = ends[ends.length - 1];
      }
    }
    return true;
  }


  /**
   * Orient coordinates in a flat array of linear rings.  By default, rings
   * are oriented following the left-hand rule (clockwise for exterior and
   * counter-clockwise for interior rings).  To orient according to the
   * right-hand rule, use the `opt_right` argument.
   *
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {boolean=} opt_right Follow the right-hand rule for orientation.
   * @return {number} End.
   */
  function orientLinearRings(flatCoordinates, offset, ends, stride, opt_right) {
    const right = opt_right !== undefined ? opt_right : false;
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      const end = ends[i];
      const isClockwise = linearRingIsClockwise(
        flatCoordinates, offset, end, stride);
      const reverse = i === 0 ?
        (right && isClockwise) || (!right && !isClockwise) :
        (right && !isClockwise) || (!right && isClockwise);
      if (reverse) {
        coordinates(flatCoordinates, offset, end, stride);
      }
      offset = end;
    }
    return offset;
  }


  /**
   * Orient coordinates in a flat array of linear rings.  By default, rings
   * are oriented following the left-hand rule (clockwise for exterior and
   * counter-clockwise for interior rings).  To orient according to the
   * right-hand rule, use the `opt_right` argument.
   *
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Array of array of end indexes.
   * @param {number} stride Stride.
   * @param {boolean=} opt_right Follow the right-hand rule for orientation.
   * @return {number} End.
   */
  function orientLinearRingsArray(flatCoordinates, offset, endss, stride, opt_right) {
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      offset = orientLinearRings(
        flatCoordinates, offset, endss[i], stride, opt_right);
    }
    return offset;
  }

  /**
   * @module ol/geom/Polygon
   */

  /**
   * @classdesc
   * Polygon geometry.
   *
   * @api
   */
  class Polygon extends SimpleGeometry {

    /**
     * @param {!Array<Array<import("../coordinate.js").Coordinate>>|!Array<number>} coordinates
     *     Array of linear rings that define the polygon. The first linear ring of the
     *     array defines the outer-boundary or surface of the polygon. Each subsequent
     *     linear ring defines a hole in the surface of the polygon. A linear ring is
     *     an array of vertices' coordinates where the first coordinate and the last are
     *     equivalent. (For internal use, flat coordinates in combination with
     *     `opt_layout` and `opt_ends` are also accepted.)
     * @param {GeometryLayout=} opt_layout Layout.
     * @param {Array<number>=} opt_ends Ends (for internal use with flat coordinates).
     */
    constructor(coordinates, opt_layout, opt_ends) {

      super();

      /**
       * @type {Array<number>}
       * @private
       */
      this.ends_ = [];

      /**
       * @private
       * @type {number}
       */
      this.flatInteriorPointRevision_ = -1;

      /**
       * @private
       * @type {import("../coordinate.js").Coordinate}
       */
      this.flatInteriorPoint_ = null;

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDeltaRevision_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.orientedRevision_ = -1;

      /**
       * @private
       * @type {Array<number>}
       */
      this.orientedFlatCoordinates_ = null;

      if (opt_layout !== undefined && opt_ends) {
        this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
        this.ends_ = opt_ends;
      } else {
        this.setCoordinates(/** @type {Array<Array<import("../coordinate.js").Coordinate>>} */ (coordinates), opt_layout);
      }

    }

    /**
     * Append the passed linear ring to this polygon.
     * @param {LinearRing} linearRing Linear ring.
     * @api
     */
    appendLinearRing(linearRing) {
      if (!this.flatCoordinates) {
        this.flatCoordinates = linearRing.getFlatCoordinates().slice();
      } else {
        extend$1(this.flatCoordinates, linearRing.getFlatCoordinates());
      }
      this.ends_.push(this.flatCoordinates.length);
      this.changed();
    }

    /**
     * Make a complete copy of the geometry.
     * @return {!Polygon} Clone.
     * @override
     * @api
     */
    clone() {
      return new Polygon(this.flatCoordinates.slice(), this.layout, this.ends_.slice());
    }

    /**
     * @inheritDoc
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      if (this.maxDeltaRevision_ != this.getRevision()) {
        this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(
          this.flatCoordinates, 0, this.ends_, this.stride, 0));
        this.maxDeltaRevision_ = this.getRevision();
      }
      return assignClosestArrayPoint(
        this.flatCoordinates, 0, this.ends_, this.stride,
        this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
    }

    /**
     * @inheritDoc
     */
    containsXY(x, y) {
      return linearRingsContainsXY(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);
    }

    /**
     * Return the area of the polygon on projected plane.
     * @return {number} Area (on projected plane).
     * @api
     */
    getArea() {
      return linearRings(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);
    }

    /**
     * Get the coordinate array for this geometry.  This array has the structure
     * of a GeoJSON coordinate array for polygons.
     *
     * @param {boolean=} opt_right Orient coordinates according to the right-hand
     *     rule (counter-clockwise for exterior and clockwise for interior rings).
     *     If `false`, coordinates will be oriented according to the left-hand rule
     *     (clockwise for exterior and counter-clockwise for interior rings).
     *     By default, coordinate orientation will depend on how the geometry was
     *     constructed.
     * @return {Array<Array<import("../coordinate.js").Coordinate>>} Coordinates.
     * @override
     * @api
     */
    getCoordinates(opt_right) {
      let flatCoordinates;
      if (opt_right !== undefined) {
        flatCoordinates = this.getOrientedFlatCoordinates().slice();
        orientLinearRings(
          flatCoordinates, 0, this.ends_, this.stride, opt_right);
      } else {
        flatCoordinates = this.flatCoordinates;
      }

      return inflateCoordinatesArray(
        flatCoordinates, 0, this.ends_, this.stride);
    }

    /**
     * @return {Array<number>} Ends.
     */
    getEnds() {
      return this.ends_;
    }

    /**
     * @return {Array<number>} Interior point.
     */
    getFlatInteriorPoint() {
      if (this.flatInteriorPointRevision_ != this.getRevision()) {
        const flatCenter = getCenter(this.getExtent());
        this.flatInteriorPoint_ = getInteriorPointOfArray(
          this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride,
          flatCenter, 0);
        this.flatInteriorPointRevision_ = this.getRevision();
      }
      return this.flatInteriorPoint_;
    }

    /**
     * Return an interior point of the polygon.
     * @return {Point} Interior point as XYM coordinate, where M is the
     * length of the horizontal intersection that the point belongs to.
     * @api
     */
    getInteriorPoint() {
      return new Point(this.getFlatInteriorPoint(), GeometryLayout.XYM);
    }

    /**
     * Return the number of rings of the polygon,  this includes the exterior
     * ring and any interior rings.
     *
     * @return {number} Number of rings.
     * @api
     */
    getLinearRingCount() {
      return this.ends_.length;
    }

    /**
     * Return the Nth linear ring of the polygon geometry. Return `null` if the
     * given index is out of range.
     * The exterior linear ring is available at index `0` and the interior rings
     * at index `1` and beyond.
     *
     * @param {number} index Index.
     * @return {LinearRing} Linear ring.
     * @api
     */
    getLinearRing(index) {
      if (index < 0 || this.ends_.length <= index) {
        return null;
      }
      return new LinearRing(this.flatCoordinates.slice(
        index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);
    }

    /**
     * Return the linear rings of the polygon.
     * @return {Array<LinearRing>} Linear rings.
     * @api
     */
    getLinearRings() {
      const layout = this.layout;
      const flatCoordinates = this.flatCoordinates;
      const ends = this.ends_;
      const linearRings = [];
      let offset = 0;
      for (let i = 0, ii = ends.length; i < ii; ++i) {
        const end = ends[i];
        const linearRing = new LinearRing(flatCoordinates.slice(offset, end), layout);
        linearRings.push(linearRing);
        offset = end;
      }
      return linearRings;
    }

    /**
     * @return {Array<number>} Oriented flat coordinates.
     */
    getOrientedFlatCoordinates() {
      if (this.orientedRevision_ != this.getRevision()) {
        const flatCoordinates = this.flatCoordinates;
        if (linearRingsAreOriented(
          flatCoordinates, 0, this.ends_, this.stride)) {
          this.orientedFlatCoordinates_ = flatCoordinates;
        } else {
          this.orientedFlatCoordinates_ = flatCoordinates.slice();
          this.orientedFlatCoordinates_.length =
              orientLinearRings(
                this.orientedFlatCoordinates_, 0, this.ends_, this.stride);
        }
        this.orientedRevision_ = this.getRevision();
      }
      return this.orientedFlatCoordinates_;
    }

    /**
     * @inheritDoc
     */
    getSimplifiedGeometryInternal(squaredTolerance) {
      const simplifiedFlatCoordinates = [];
      const simplifiedEnds = [];
      simplifiedFlatCoordinates.length = quantizeArray(
        this.flatCoordinates, 0, this.ends_, this.stride,
        Math.sqrt(squaredTolerance),
        simplifiedFlatCoordinates, 0, simplifiedEnds);
      return new Polygon(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);
    }

    /**
     * @inheritDoc
     * @api
     */
    getType() {
      return GeometryType.POLYGON;
    }

    /**
     * @inheritDoc
     * @api
     */
    intersectsExtent(extent) {
      return intersectsLinearRingArray(
        this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);
    }

    /**
     * Set the coordinates of the polygon.
     * @param {!Array<Array<import("../coordinate.js").Coordinate>>} coordinates Coordinates.
     * @param {GeometryLayout=} opt_layout Layout.
     * @override
     * @api
     */
    setCoordinates(coordinates, opt_layout) {
      this.setLayout(opt_layout, coordinates, 2);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      const ends = deflateCoordinatesArray(
        this.flatCoordinates, 0, coordinates, this.stride, this.ends_);
      this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];
      this.changed();
    }
  }


  /**
   * Create an approximation of a circle on the surface of a sphere.
   * @param {import("../coordinate.js").Coordinate} center Center (`[lon, lat]` in degrees).
   * @param {number} radius The great-circle distance from the center to
   *     the polygon vertices.
   * @param {number=} opt_n Optional number of vertices for the resulting
   *     polygon. Default is `32`.
   * @param {number=} opt_sphereRadius Optional radius for the sphere (defaults to
   *     the Earth's mean radius using the WGS84 ellipsoid).
   * @return {Polygon} The "circular" polygon.
   * @api
   */
  function circular(center, radius, opt_n, opt_sphereRadius) {
    const n = opt_n ? opt_n : 32;
    /** @type {Array<number>} */
    const flatCoordinates = [];
    for (let i = 0; i < n; ++i) {
      extend$1(flatCoordinates, offset(center, radius, 2 * Math.PI * i / n, opt_sphereRadius));
    }
    flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);
    return new Polygon(flatCoordinates, GeometryLayout.XY, [flatCoordinates.length]);
  }


  /**
   * Create a polygon from an extent. The layout used is `XY`.
   * @param {import("../extent.js").Extent} extent The extent.
   * @return {Polygon} The polygon.
   * @api
   */
  function fromExtent(extent) {
    const minX = extent[0];
    const minY = extent[1];
    const maxX = extent[2];
    const maxY = extent[3];
    const flatCoordinates =
        [minX, minY, minX, maxY, maxX, maxY, maxX, minY, minX, minY];
    return new Polygon(flatCoordinates, GeometryLayout.XY, [flatCoordinates.length]);
  }


  /**
   * Create a regular polygon from a circle.
   * @param {import("./Circle.js").default} circle Circle geometry.
   * @param {number=} opt_sides Number of sides of the polygon. Default is 32.
   * @param {number=} opt_angle Start angle for the first vertex of the polygon in
   *     radians. Default is 0.
   * @return {Polygon} Polygon geometry.
   * @api
   */
  function fromCircle(circle, opt_sides, opt_angle) {
    const sides = opt_sides ? opt_sides : 32;
    const stride = circle.getStride();
    const layout = circle.getLayout();
    const center = circle.getCenter();
    const arrayLength = stride * (sides + 1);
    const flatCoordinates = new Array(arrayLength);
    for (let i = 0; i < arrayLength; i += stride) {
      flatCoordinates[i] = 0;
      flatCoordinates[i + 1] = 0;
      for (let j = 2; j < stride; j++) {
        flatCoordinates[i + j] = center[j];
      }
    }
    const ends = [flatCoordinates.length];
    const polygon = new Polygon(flatCoordinates, layout, ends);
    makeRegular(polygon, center, circle.getRadius(), opt_angle);
    return polygon;
  }


  /**
   * Modify the coordinates of a polygon to make it a regular polygon.
   * @param {Polygon} polygon Polygon geometry.
   * @param {import("../coordinate.js").Coordinate} center Center of the regular polygon.
   * @param {number} radius Radius of the regular polygon.
   * @param {number=} opt_angle Start angle for the first vertex of the polygon in
   *     radians. Default is 0.
   */
  function makeRegular(polygon, center, radius, opt_angle) {
    const flatCoordinates = polygon.getFlatCoordinates();
    const stride = polygon.getStride();
    const sides = flatCoordinates.length / stride - 1;
    const startAngle = opt_angle ? opt_angle : 0;
    for (let i = 0; i <= sides; ++i) {
      const offset = i * stride;
      const angle = startAngle + (modulo(i, sides) * 2 * Math.PI / sides);
      flatCoordinates[offset] = center[0] + (radius * Math.cos(angle));
      flatCoordinates[offset + 1] = center[1] + (radius * Math.sin(angle));
    }
    polygon.changed();
  }

  /**
   * @module ol/Geolocation
   */


  /**
   * @enum {string}
   */
  const Property$2 = {
    ACCURACY: 'accuracy',
    ACCURACY_GEOMETRY: 'accuracyGeometry',
    ALTITUDE: 'altitude',
    ALTITUDE_ACCURACY: 'altitudeAccuracy',
    HEADING: 'heading',
    POSITION: 'position',
    PROJECTION: 'projection',
    SPEED: 'speed',
    TRACKING: 'tracking',
    TRACKING_OPTIONS: 'trackingOptions'
  };


  /**
   * @classdesc
   * Events emitted on Geolocation error.
   */
  class GeolocationError extends Event {
    /**
     * @param {PositionError} error error object.
     */
    constructor(error) {
      super(EventType.ERROR);

      /**
       * @type {number}
       */
      this.code = error.code;

      /**
       * @type {string}
       */
      this.message = error.message;
    }
  }


  /**
   * @typedef {Object} Options
   * @property {boolean} [tracking=false] Start Tracking right after
   * instantiation.
   * @property {PositionOptions} [trackingOptions] Tracking options.
   * See http://www.w3.org/TR/geolocation-API/#position_options_interface.
   * @property {import("./proj.js").ProjectionLike} [projection] The projection the position
   * is reported in.
   */


  /**
   * @classdesc
   * Helper class for providing HTML5 Geolocation capabilities.
   * The [Geolocation API](http://www.w3.org/TR/geolocation-API/)
   * is used to locate a user's position.
   *
   * To get notified of position changes, register a listener for the generic
   * `change` event on your instance of {@link module:ol/Geolocation~Geolocation}.
   *
   * Example:
   *
   *     var geolocation = new Geolocation({
   *       // take the projection to use from the map's view
   *       projection: view.getProjection()
   *     });
   *     // listen to changes in position
   *     geolocation.on('change', function(evt) {
   *       window.console.log(geolocation.getPosition());
   *     });
   *
   * @fires module:ol/events/Event~Event#event:error
   * @api
   */
  class Geolocation extends BaseObject {

    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {

      super();

      const options = opt_options || {};

      /**
       * The unprojected (EPSG:4326) device position.
       * @private
       * @type {import("./coordinate.js").Coordinate}
       */
      this.position_ = null;

      /**
       * @private
       * @type {import("./proj.js").TransformFunction}
       */
      this.transform_ = identityTransform;

      /**
       * @private
       * @type {number|undefined}
       */
      this.watchId_ = undefined;

      listen(
        this, getChangeEventType(Property$2.PROJECTION),
        this.handleProjectionChanged_, this);
      listen(
        this, getChangeEventType(Property$2.TRACKING),
        this.handleTrackingChanged_, this);

      if (options.projection !== undefined) {
        this.setProjection(options.projection);
      }
      if (options.trackingOptions !== undefined) {
        this.setTrackingOptions(options.trackingOptions);
      }

      this.setTracking(options.tracking !== undefined ? options.tracking : false);

    }

    /**
     * @inheritDoc
     */
    disposeInternal() {
      this.setTracking(false);
      super.disposeInternal();
    }

    /**
     * @private
     */
    handleProjectionChanged_() {
      const projection = this.getProjection();
      if (projection) {
        this.transform_ = getTransformFromProjections(
          get$2('EPSG:4326'), projection);
        if (this.position_) {
          this.set(Property$2.POSITION, this.transform_(this.position_));
        }
      }
    }

    /**
     * @private
     */
    handleTrackingChanged_() {
      if ('geolocation' in navigator) {
        const tracking = this.getTracking();
        if (tracking && this.watchId_ === undefined) {
          this.watchId_ = navigator.geolocation.watchPosition(
            this.positionChange_.bind(this),
            this.positionError_.bind(this),
            this.getTrackingOptions());
        } else if (!tracking && this.watchId_ !== undefined) {
          navigator.geolocation.clearWatch(this.watchId_);
          this.watchId_ = undefined;
        }
      }
    }

    /**
     * @private
     * @param {Position} position position event.
     */
    positionChange_(position) {
      const coords = position.coords;
      this.set(Property$2.ACCURACY, coords.accuracy);
      this.set(Property$2.ALTITUDE,
        coords.altitude === null ? undefined : coords.altitude);
      this.set(Property$2.ALTITUDE_ACCURACY,
        coords.altitudeAccuracy === null ?
          undefined : coords.altitudeAccuracy);
      this.set(Property$2.HEADING, coords.heading === null ?
        undefined : toRadians(coords.heading));
      if (!this.position_) {
        this.position_ = [coords.longitude, coords.latitude];
      } else {
        this.position_[0] = coords.longitude;
        this.position_[1] = coords.latitude;
      }
      const projectedPosition = this.transform_(this.position_);
      this.set(Property$2.POSITION, projectedPosition);
      this.set(Property$2.SPEED,
        coords.speed === null ? undefined : coords.speed);
      const geometry = circular(this.position_, coords.accuracy);
      geometry.applyTransform(this.transform_);
      this.set(Property$2.ACCURACY_GEOMETRY, geometry);
      this.changed();
    }

    /**
     * @private
     * @param {PositionError} error error object.
     */
    positionError_(error) {
      this.setTracking(false);
      this.dispatchEvent(new GeolocationError(error));
    }

    /**
     * Get the accuracy of the position in meters.
     * @return {number|undefined} The accuracy of the position measurement in
     *     meters.
     * @observable
     * @api
     */
    getAccuracy() {
      return /** @type {number|undefined} */ (this.get(Property$2.ACCURACY));
    }

    /**
     * Get a geometry of the position accuracy.
     * @return {?import("./geom/Polygon.js").default} A geometry of the position accuracy.
     * @observable
     * @api
     */
    getAccuracyGeometry() {
      return (
        /** @type {?import("./geom/Polygon.js").default} */ (this.get(Property$2.ACCURACY_GEOMETRY) || null)
      );
    }

    /**
     * Get the altitude associated with the position.
     * @return {number|undefined} The altitude of the position in meters above mean
     *     sea level.
     * @observable
     * @api
     */
    getAltitude() {
      return /** @type {number|undefined} */ (this.get(Property$2.ALTITUDE));
    }

    /**
     * Get the altitude accuracy of the position.
     * @return {number|undefined} The accuracy of the altitude measurement in
     *     meters.
     * @observable
     * @api
     */
    getAltitudeAccuracy() {
      return /** @type {number|undefined} */ (this.get(Property$2.ALTITUDE_ACCURACY));
    }

    /**
     * Get the heading as radians clockwise from North.
     * Note: depending on the browser, the heading is only defined if the `enableHighAccuracy`
     * is set to `true` in the tracking options.
     * @return {number|undefined} The heading of the device in radians from north.
     * @observable
     * @api
     */
    getHeading() {
      return /** @type {number|undefined} */ (this.get(Property$2.HEADING));
    }

    /**
     * Get the position of the device.
     * @return {import("./coordinate.js").Coordinate|undefined} The current position of the device reported
     *     in the current projection.
     * @observable
     * @api
     */
    getPosition() {
      return (
        /** @type {import("./coordinate.js").Coordinate|undefined} */ (this.get(Property$2.POSITION))
      );
    }

    /**
     * Get the projection associated with the position.
     * @return {import("./proj/Projection.js").default|undefined} The projection the position is
     *     reported in.
     * @observable
     * @api
     */
    getProjection() {
      return (
        /** @type {import("./proj/Projection.js").default|undefined} */ (this.get(Property$2.PROJECTION))
      );
    }

    /**
     * Get the speed in meters per second.
     * @return {number|undefined} The instantaneous speed of the device in meters
     *     per second.
     * @observable
     * @api
     */
    getSpeed() {
      return /** @type {number|undefined} */ (this.get(Property$2.SPEED));
    }

    /**
     * Determine if the device location is being tracked.
     * @return {boolean} The device location is being tracked.
     * @observable
     * @api
     */
    getTracking() {
      return /** @type {boolean} */ (this.get(Property$2.TRACKING));
    }

    /**
     * Get the tracking options.
     * See http://www.w3.org/TR/geolocation-API/#position-options.
     * @return {PositionOptions|undefined} PositionOptions as defined by
     *     the [HTML5 Geolocation spec
     *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).
     * @observable
     * @api
     */
    getTrackingOptions() {
      return /** @type {PositionOptions|undefined} */ (this.get(Property$2.TRACKING_OPTIONS));
    }

    /**
     * Set the projection to use for transforming the coordinates.
     * @param {import("./proj.js").ProjectionLike} projection The projection the position is
     *     reported in.
     * @observable
     * @api
     */
    setProjection(projection) {
      this.set(Property$2.PROJECTION, get$2(projection));
    }

    /**
     * Enable or disable tracking.
     * @param {boolean} tracking Enable tracking.
     * @observable
     * @api
     */
    setTracking(tracking) {
      this.set(Property$2.TRACKING, tracking);
    }

    /**
     * Set the tracking options.
     * See http://www.w3.org/TR/geolocation-API/#position-options.
     * @param {PositionOptions} options PositionOptions as defined by the
     *     [HTML5 Geolocation spec
     *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).
     * @observable
     * @api
     */
    setTrackingOptions(options) {
      this.set(Property$2.TRACKING_OPTIONS, options);
    }
  }

  /**
   * @module ol/layer/Property
   */

  /**
   * @enum {string}
   */
  var LayerProperty = {
    OPACITY: 'opacity',
    VISIBLE: 'visible',
    EXTENT: 'extent',
    Z_INDEX: 'zIndex',
    MAX_RESOLUTION: 'maxResolution',
    MIN_RESOLUTION: 'minResolution',
    SOURCE: 'source'
  };

  /**
   * @module ol/layer/Base
   */


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   */


  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Note that with {@link module:ol/layer/Base} and all its subclasses, any property set in
   * the options is set as a {@link module:ol/Object} property on the layer object, so
   * is observable, and has get/set accessors.
   *
   * @api
   */
  class BaseLayer extends BaseObject {
    /**
     * @param {Options} options Layer options.
     */
    constructor(options) {

      super();

      /**
       * @type {Object<string, *>}
       */
      const properties = assign({}, options);
      properties[LayerProperty.OPACITY] =
         options.opacity !== undefined ? options.opacity : 1;
      properties[LayerProperty.VISIBLE] =
         options.visible !== undefined ? options.visible : true;
      properties[LayerProperty.Z_INDEX] = options.zIndex;
      properties[LayerProperty.MAX_RESOLUTION] =
         options.maxResolution !== undefined ? options.maxResolution : Infinity;
      properties[LayerProperty.MIN_RESOLUTION] =
         options.minResolution !== undefined ? options.minResolution : 0;

      /**
       * @type {string}
       * @private
       */
      this.className_ = properties.className !== undefined ? options.className : 'ol-layer';
      delete properties.className;

      this.setProperties(properties);

      /**
       * @type {import("./Layer.js").State}
       * @private
       */
      this.state_ = null;

    }

    /**
     * @return {string} CSS class name.
     */
    getClassName() {
      return this.className_;
    }

    /**
     * This method is not meant to be called by layers or layer renderers because the state
     * is incorrect if the layer is included in a layer group.
     *
     * @param {boolean=} opt_managed Layer is managed.
     * @return {import("./Layer.js").State} Layer state.
     */
    getLayerState(opt_managed) {
      /** @type {import("./Layer.js").State} */
      const state = this.state_ || /** @type {?} */ ({
        layer: this,
        managed: opt_managed === undefined ? true : opt_managed,
        hasOverlay: false
      });
      state.opacity = clamp(Math.round(this.getOpacity() * 100) / 100, 0, 1);
      state.sourceState = this.getSourceState();
      state.visible = this.getVisible();
      state.extent = this.getExtent();
      state.zIndex = this.getZIndex() || (state.managed === false ? Infinity : 0);
      state.maxResolution = this.getMaxResolution();
      state.minResolution = Math.max(this.getMinResolution(), 0);
      this.state_ = state;

      return state;
    }

    /**
     * @abstract
     * @param {Array<import("./Layer.js").default>=} opt_array Array of layers (to be
     *     modified in place).
     * @return {Array<import("./Layer.js").default>} Array of layers.
     */
    getLayersArray(opt_array) {
      return abstract();
    }

    /**
     * @abstract
     * @param {Array<import("./Layer.js").State>=} opt_states Optional list of layer
     *     states (to be modified in place).
     * @return {Array<import("./Layer.js").State>} List of layer states.
     */
    getLayerStatesArray(opt_states) {
      return abstract();
    }

    /**
     * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it
     * will be visible regardless of extent.
     * @return {import("../extent.js").Extent|undefined} The layer extent.
     * @observable
     * @api
     */
    getExtent() {
      return (
        /** @type {import("../extent.js").Extent|undefined} */ (this.get(LayerProperty.EXTENT))
      );
    }

    /**
     * Return the maximum resolution of the layer.
     * @return {number} The maximum resolution of the layer.
     * @observable
     * @api
     */
    getMaxResolution() {
      return /** @type {number} */ (this.get(LayerProperty.MAX_RESOLUTION));
    }

    /**
     * Return the minimum resolution of the layer.
     * @return {number} The minimum resolution of the layer.
     * @observable
     * @api
     */
    getMinResolution() {
      return /** @type {number} */ (this.get(LayerProperty.MIN_RESOLUTION));
    }

    /**
     * Return the opacity of the layer (between 0 and 1).
     * @return {number} The opacity of the layer.
     * @observable
     * @api
     */
    getOpacity() {
      return /** @type {number} */ (this.get(LayerProperty.OPACITY));
    }

    /**
     * @abstract
     * @return {import("../source/State.js").default} Source state.
     */
    getSourceState() {
      return abstract();
    }

    /**
     * Return the visibility of the layer (`true` or `false`).
     * @return {boolean} The visibility of the layer.
     * @observable
     * @api
     */
    getVisible() {
      return /** @type {boolean} */ (this.get(LayerProperty.VISIBLE));
    }

    /**
     * Return the Z-index of the layer, which is used to order layers before
     * rendering. The default Z-index is 0.
     * @return {number} The Z-index of the layer.
     * @observable
     * @api
     */
    getZIndex() {
      return /** @type {number} */ (this.get(LayerProperty.Z_INDEX));
    }

    /**
     * Set the extent at which the layer is visible.  If `undefined`, the layer
     * will be visible at all extents.
     * @param {import("../extent.js").Extent|undefined} extent The extent of the layer.
     * @observable
     * @api
     */
    setExtent(extent) {
      this.set(LayerProperty.EXTENT, extent);
    }

    /**
     * Set the maximum resolution at which the layer is visible.
     * @param {number} maxResolution The maximum resolution of the layer.
     * @observable
     * @api
     */
    setMaxResolution(maxResolution) {
      this.set(LayerProperty.MAX_RESOLUTION, maxResolution);
    }

    /**
     * Set the minimum resolution at which the layer is visible.
     * @param {number} minResolution The minimum resolution of the layer.
     * @observable
     * @api
     */
    setMinResolution(minResolution) {
      this.set(LayerProperty.MIN_RESOLUTION, minResolution);
    }

    /**
     * Set the opacity of the layer, allowed values range from 0 to 1.
     * @param {number} opacity The opacity of the layer.
     * @observable
     * @api
     */
    setOpacity(opacity) {
      this.set(LayerProperty.OPACITY, opacity);
    }

    /**
     * Set the visibility of the layer (`true` or `false`).
     * @param {boolean} visible The visibility of the layer.
     * @observable
     * @api
     */
    setVisible(visible) {
      this.set(LayerProperty.VISIBLE, visible);
    }

    /**
     * Set Z-index of the layer, which is used to order layers before rendering.
     * The default Z-index is 0.
     * @param {number} zindex The z-index of the layer.
     * @observable
     * @api
     */
    setZIndex(zindex) {
      this.set(LayerProperty.Z_INDEX, zindex);
    }
  }

  /**
   * @module ol/render/EventType
   */

  /**
   * @enum {string}
   */
  var RenderEventType = {

    /**
     * Triggered before a layer is rendered.
     * @event module:ol/render/Event~RenderEvent#prerender
     * @api
     */
    PRERENDER: 'prerender',

    /**
     * Triggered after a layer is rendered.
     * @event module:ol/render/Event~RenderEvent#postrender
     * @api
     */
    POSTRENDER: 'postrender',

    /**
     * Triggered before layers are rendered.
     * @event module:ol/render/Event~RenderEvent#precompose
     * @api
     */
    PRECOMPOSE: 'precompose',

    /**
     * Triggered after all layers are rendered.
     * @event module:ol/render/Event~RenderEvent#postcompose
     * @api
     */
    POSTCOMPOSE: 'postcompose',

    /**
     * Triggered when rendering is complete, i.e. all sources and tiles have
     * finished loading for the current viewport, and all tiles are faded in.
     * @event module:ol/render/Event~RenderEvent#rendercomplete
     * @api
     */
    RENDERCOMPLETE: 'rendercomplete'

  };

  /**
   * @module ol/source/State
   */

  /**
   * @enum {string}
   * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.
   */
  var SourceState = {
    UNDEFINED: 'undefined',
    LOADING: 'loading',
    READY: 'ready',
    ERROR: 'error'
  };

  /**
   * @module ol/layer/Layer
   */

  /**
   * @typedef {function(import("../PluggableMap.js").FrameState):HTMLElement} RenderFunction
   */


  /**
   * @typedef {Object} Options
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {import("../source/Source.js").default} [source] Source for this layer.  If not provided to the constructor,
   * the source can be set by calling {@link module:ol/layer/Layer#setSource layer.setSource(source)} after
   * construction.
   * @property {import("../PluggableMap.js").default} [map] Map.
   * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an
   * HTML element. Will overwrite the default rendering for the layer.
   */


  /**
   * @typedef {Object} State
   * @property {import("./Base.js").default} layer
   * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.
   * @property {SourceState} sourceState
   * @property {boolean} visible
   * @property {boolean} managed
   * @property {boolean} hasOverlay Set by the renderer when an overlay for points and text is used.
   * @property {import("../extent.js").Extent} [extent]
   * @property {number} zIndex
   * @property {number} maxResolution
   * @property {number} minResolution
   */

  /**
   * @classdesc
   * Base class from which all layer types are derived. This should only be instantiated
   * in the case where a custom layer is be added to the map with a custom `render` function.
   * Such a function can be specified in the `options` object, and is expected to return an HTML element.
   *
   * A visual representation of raster or vector map data.
   * Layers group together those properties that pertain to how the data is to be
   * displayed, irrespective of the source of that data.
   *
   * Layers are usually added to a map with {@link module:ol/Map#addLayer}. Components
   * like {@link module:ol/interaction/Select~Select} use unmanaged layers
   * internally. These unmanaged layers are associated with the map using
   * {@link module:ol/layer/Layer~Layer#setMap} instead.
   *
   * A generic `change` event is fired when the state of the source changes.
   *
   * @fires import("../render/Event.js").RenderEvent#prerender
   * @fires import("../render/Event.js").RenderEvent#postrender
   *
   * @template {import("../source/Source.js").default} SourceType
   * @api
   */
  class Layer extends BaseLayer {
    /**
     * @param {Options} options Layer options.
     */
    constructor(options) {

      const baseOptions = assign({}, options);
      delete baseOptions.source;

      super(baseOptions);

      /**
       * @private
       * @type {?import("../events.js").EventsKey}
       */
      this.mapPrecomposeKey_ = null;

      /**
       * @private
       * @type {?import("../events.js").EventsKey}
       */
      this.mapRenderKey_ = null;

      /**
       * @private
       * @type {?import("../events.js").EventsKey}
       */
      this.sourceChangeKey_ = null;

      /**
       * @private
       * @type {import("../renderer/Layer.js").default}
       */
      this.renderer_ = null;

      // Overwrite default render method with a custom one
      if (options.render) {
        this.render = options.render;
      }

      if (options.map) {
        this.setMap(options.map);
      }

      listen(this,
        getChangeEventType(LayerProperty.SOURCE),
        this.handleSourcePropertyChange_, this);

      const source = options.source ? /** @type {SourceType} */ (options.source) : null;
      this.setSource(source);
    }

    /**
     * @inheritDoc
     */
    getLayersArray(opt_array) {
      const array = opt_array ? opt_array : [];
      array.push(this);
      return array;
    }

    /**
     * @inheritDoc
     */
    getLayerStatesArray(opt_states) {
      const states = opt_states ? opt_states : [];
      states.push(this.getLayerState());
      return states;
    }

    /**
     * Get the layer source.
     * @return {SourceType} The layer source (or `null` if not yet set).
     * @observable
     * @api
     */
    getSource() {
      return /** @type {SourceType} */ (this.get(LayerProperty.SOURCE)) || null;
    }

    /**
      * @inheritDoc
      */
    getSourceState() {
      const source = this.getSource();
      return !source ? SourceState.UNDEFINED : source.getState();
    }

    /**
     * @private
     */
    handleSourceChange_() {
      this.changed();
    }

    /**
     * @private
     */
    handleSourcePropertyChange_() {
      if (this.sourceChangeKey_) {
        unlistenByKey(this.sourceChangeKey_);
        this.sourceChangeKey_ = null;
      }
      const source = this.getSource();
      if (source) {
        this.sourceChangeKey_ = listen(source,
          EventType.CHANGE, this.handleSourceChange_, this);
      }
      this.changed();
    }

    /**
     * In charge to manage the rendering of the layer. One layer type is
     * bounded with one layer renderer.
     * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
     * @param {HTMLElement} target Target which the renderer may (but need not) use
     * for rendering its content.
     * @return {HTMLElement} The rendered element.
     */
    render(frameState, target) {
      const layerRenderer = this.getRenderer();

      if (layerRenderer.prepareFrame(frameState)) {
        return layerRenderer.renderFrame(frameState, target);
      }
    }

    /**
     * Sets the layer to be rendered on top of other layers on a map. The map will
     * not manage this layer in its layers collection, and the callback in
     * {@link module:ol/Map#forEachLayerAtPixel} will receive `null` as layer. This
     * is useful for temporary layers. To remove an unmanaged layer from the map,
     * use `#setMap(null)`.
     *
     * To add the layer to a map and have it managed by the map, use
     * {@link module:ol/Map#addLayer} instead.
     * @param {import("../PluggableMap.js").default} map Map.
     * @api
     */
    setMap(map) {
      if (this.mapPrecomposeKey_) {
        unlistenByKey(this.mapPrecomposeKey_);
        this.mapPrecomposeKey_ = null;
      }
      if (!map) {
        this.changed();
      }
      if (this.mapRenderKey_) {
        unlistenByKey(this.mapRenderKey_);
        this.mapRenderKey_ = null;
      }
      if (map) {
        this.mapPrecomposeKey_ = listen(map, RenderEventType.PRECOMPOSE, function(evt) {
          const renderEvent = /** @type {import("../render/Event.js").default} */ (evt);
          renderEvent.frameState.layerStatesArray.push(this.getLayerState(false));
        }, this);
        this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);
        this.changed();
      }
    }

    /**
     * Set the layer source.
     * @param {SourceType} source The layer source.
     * @observable
     * @api
     */
    setSource(source) {
      this.set(LayerProperty.SOURCE, source);
    }

    /**
     * Get the renderer for this layer.
     * @return {import("../renderer/Layer.js").default} The layer renderer.
     */
    getRenderer() {
      if (!this.renderer_) {
        this.renderer_ = this.createRenderer();
      }
      return this.renderer_;
    }

    /**
     * @return {boolean} The layer has a renderer.
     */
    hasRenderer() {
      return !!this.renderer_;
    }

    /**
     * Create a renderer for this layer.
     * @return {import("../renderer/Layer.js").default} A layer renderer.
     * @protected
     */
    createRenderer() {
      return null;
    }

  }


  /**
   * Return `true` if the layer is visible, and if the passed resolution is
   * between the layer's minResolution and maxResolution. The comparison is
   * inclusive for `minResolution` and exclusive for `maxResolution`.
   * @param {State} layerState Layer state.
   * @param {number} resolution Resolution.
   * @return {boolean} The layer is visible at the given resolution.
   */
  function visibleAtResolution(layerState, resolution) {
    return layerState.visible && resolution >= layerState.minResolution &&
        resolution < layerState.maxResolution;
  }

  /**
   * @module ol/color
   */


  /**
   * A color represented as a short array [red, green, blue, alpha].
   * red, green, and blue should be integers in the range 0..255 inclusive.
   * alpha should be a float in the range 0..1 inclusive. If no alpha value is
   * given then `1` will be used.
   * @typedef {Array<number>} Color
   * @api
   */


  /**
   * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.
   * @const
   * @type {RegExp}
   * @private
   */
  const HEX_COLOR_RE_ = /^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i;


  /**
   * Regular expression for matching potential named color style strings.
   * @const
   * @type {RegExp}
   * @private
   */
  const NAMED_COLOR_RE_ = /^([a-z]*)$/i;


  /**
   * Return the color as an rgba string.
   * @param {Color|string} color Color.
   * @return {string} Rgba string.
   * @api
   */
  function asString(color) {
    if (typeof color === 'string') {
      return color;
    } else {
      return toString$1(color);
    }
  }

  /**
   * Return named color as an rgba string.
   * @param {string} color Named color.
   * @return {string} Rgb string.
   */
  function fromNamed(color) {
    const el = document.createElement('div');
    el.style.color = color;
    if (el.style.color !== '') {
      document.body.appendChild(el);
      const rgb = getComputedStyle(el).color;
      document.body.removeChild(el);
      return rgb;
    } else {
      return '';
    }
  }


  /**
   * @param {string} s String.
   * @return {Color} Color.
   */
  const fromString = (
    function() {

      // We maintain a small cache of parsed strings.  To provide cheap LRU-like
      // semantics, whenever the cache grows too large we simply delete an
      // arbitrary 25% of the entries.

      /**
       * @const
       * @type {number}
       */
      const MAX_CACHE_SIZE = 1024;

      /**
       * @type {Object<string, Color>}
       */
      const cache = {};

      /**
       * @type {number}
       */
      let cacheSize = 0;

      return (
        /**
         * @param {string} s String.
         * @return {Color} Color.
         */
        function(s) {
          let color;
          if (cache.hasOwnProperty(s)) {
            color = cache[s];
          } else {
            if (cacheSize >= MAX_CACHE_SIZE) {
              let i = 0;
              for (const key in cache) {
                if ((i++ & 3) === 0) {
                  delete cache[key];
                  --cacheSize;
                }
              }
            }
            color = fromStringInternal_(s);
            cache[s] = color;
            ++cacheSize;
          }
          return color;
        }
      );

    })();

  /**
   * Return the color as an array. This function maintains a cache of calculated
   * arrays which means the result should not be modified.
   * @param {Color|string} color Color.
   * @return {Color} Color.
   * @api
   */
  function asArray(color) {
    if (Array.isArray(color)) {
      return color;
    } else {
      return fromString(color);
    }
  }

  /**
   * @param {string} s String.
   * @private
   * @return {Color} Color.
   */
  function fromStringInternal_(s) {
    let r, g, b, a, color;

    if (NAMED_COLOR_RE_.exec(s)) {
      s = fromNamed(s);
    }

    if (HEX_COLOR_RE_.exec(s)) { // hex
      const n = s.length - 1; // number of hex digits
      let d; // number of digits per channel
      if (n <= 4) {
        d = 1;
      } else {
        d = 2;
      }
      const hasAlpha = n === 4 || n === 8;
      r = parseInt(s.substr(1 + 0 * d, d), 16);
      g = parseInt(s.substr(1 + 1 * d, d), 16);
      b = parseInt(s.substr(1 + 2 * d, d), 16);
      if (hasAlpha) {
        a = parseInt(s.substr(1 + 3 * d, d), 16);
      } else {
        a = 255;
      }
      if (d == 1) {
        r = (r << 4) + r;
        g = (g << 4) + g;
        b = (b << 4) + b;
        if (hasAlpha) {
          a = (a << 4) + a;
        }
      }
      color = [r, g, b, a / 255];
    } else if (s.indexOf('rgba(') == 0) { // rgba()
      color = s.slice(5, -1).split(',').map(Number);
      normalize(color);
    } else if (s.indexOf('rgb(') == 0) { // rgb()
      color = s.slice(4, -1).split(',').map(Number);
      color.push(1);
      normalize(color);
    } else {
      assert(false, 14); // Invalid color
    }
    return color;
  }


  /**
   * TODO this function is only used in the test, we probably shouldn't export it
   * @param {Color} color Color.
   * @return {Color} Clamped color.
   */
  function normalize(color) {
    color[0] = clamp((color[0] + 0.5) | 0, 0, 255);
    color[1] = clamp((color[1] + 0.5) | 0, 0, 255);
    color[2] = clamp((color[2] + 0.5) | 0, 0, 255);
    color[3] = clamp(color[3], 0, 1);
    return color;
  }


  /**
   * @param {Color} color Color.
   * @return {string} String.
   */
  function toString$1(color) {
    let r = color[0];
    if (r != (r | 0)) {
      r = (r + 0.5) | 0;
    }
    let g = color[1];
    if (g != (g | 0)) {
      g = (g + 0.5) | 0;
    }
    let b = color[2];
    if (b != (b | 0)) {
      b = (b + 0.5) | 0;
    }
    const a = color[3] === undefined ? 1 : color[3];
    return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
  }

  /**
   * @module ol/colorlike
   */


  /**
   * A type accepted by CanvasRenderingContext2D.fillStyle
   * or CanvasRenderingContext2D.strokeStyle.
   * Represents a color, pattern, or gradient. The origin for patterns and
   * gradients as fill style is an increment of 512 css pixels from map coordinate
   * `[0, 0]`. For seamless repeat patterns, width and height of the pattern image
   * must be a factor of two (2, 4, 8, ..., 512).
   *
   * @typedef {string|CanvasPattern|CanvasGradient} ColorLike
   * @api
   */


  /**
   * @param {import("./color.js").Color|ColorLike} color Color.
   * @return {ColorLike} The color as an {@link ol/colorlike~ColorLike}.
   * @api
   */
  function asColorLike(color) {
    if (Array.isArray(color)) {
      return toString$1(color);
    } else {
      return color;
    }
  }

  /**
   * @module ol/ImageState
   */

  /**
   * @enum {number}
   */
  var ImageState = {
    IDLE: 0,
    LOADING: 1,
    LOADED: 2,
    ERROR: 3
  };

  /**
   * @module ol/structs/LRUCache
   */


  /**
   * @typedef {Object} Entry
   * @property {string} key_
   * @property {Object} newer
   * @property {Object} older
   * @property {*} value_
   */


  /**
   * @classdesc
   * Implements a Least-Recently-Used cache where the keys do not conflict with
   * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring
   * items from the cache is the responsibility of the user.
   *
   * @fires import("../events/Event.js").Event
   * @template T
   */
  class LRUCache extends Target {

    /**
     * @param {number=} opt_highWaterMark High water mark.
     */
    constructor(opt_highWaterMark) {

      super();

      /**
       * @type {number}
       */
      this.highWaterMark = opt_highWaterMark !== undefined ? opt_highWaterMark : 2048;

      /**
       * @private
       * @type {number}
       */
      this.count_ = 0;

      /**
       * @private
       * @type {!Object<string, Entry>}
       */
      this.entries_ = {};

      /**
       * @private
       * @type {?Entry}
       */
      this.oldest_ = null;

      /**
       * @private
       * @type {?Entry}
       */
      this.newest_ = null;

    }


    /**
     * @return {boolean} Can expire cache.
     */
    canExpireCache() {
      return this.getCount() > this.highWaterMark;
    }


    /**
     * FIXME empty description for jsdoc
     */
    clear() {
      this.count_ = 0;
      this.entries_ = {};
      this.oldest_ = null;
      this.newest_ = null;
      this.dispatchEvent(EventType.CLEAR);
    }


    /**
     * @param {string} key Key.
     * @return {boolean} Contains key.
     */
    containsKey(key) {
      return this.entries_.hasOwnProperty(key);
    }


    /**
     * @param {function(T, string, LRUCache): ?} f The function
     *     to call for every entry from the oldest to the newer. This function takes
     *     3 arguments (the entry value, the entry key and the LRUCache object).
     *     The return value is ignored.
     */
    forEach(f) {
      let entry = this.oldest_;
      while (entry) {
        f(entry.value_, entry.key_, this);
        entry = entry.newer;
      }
    }


    /**
     * @param {string} key Key.
     * @param {*=} opt_options Options (reserverd for subclasses).
     * @return {T} Value.
     */
    get(key, opt_options) {
      const entry = this.entries_[key];
      assert(entry !== undefined,
        15); // Tried to get a value for a key that does not exist in the cache
      if (entry === this.newest_) {
        return entry.value_;
      } else if (entry === this.oldest_) {
        this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);
        this.oldest_.older = null;
      } else {
        entry.newer.older = entry.older;
        entry.older.newer = entry.newer;
      }
      entry.newer = null;
      entry.older = this.newest_;
      this.newest_.newer = entry;
      this.newest_ = entry;
      return entry.value_;
    }


    /**
     * Remove an entry from the cache.
     * @param {string} key The entry key.
     * @return {T} The removed entry.
     */
    remove(key) {
      const entry = this.entries_[key];
      assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache
      if (entry === this.newest_) {
        this.newest_ = /** @type {Entry} */ (entry.older);
        if (this.newest_) {
          this.newest_.newer = null;
        }
      } else if (entry === this.oldest_) {
        this.oldest_ = /** @type {Entry} */ (entry.newer);
        if (this.oldest_) {
          this.oldest_.older = null;
        }
      } else {
        entry.newer.older = entry.older;
        entry.older.newer = entry.newer;
      }
      delete this.entries_[key];
      --this.count_;
      return entry.value_;
    }


    /**
     * @return {number} Count.
     */
    getCount() {
      return this.count_;
    }


    /**
     * @return {Array<string>} Keys.
     */
    getKeys() {
      const keys = new Array(this.count_);
      let i = 0;
      let entry;
      for (entry = this.newest_; entry; entry = entry.older) {
        keys[i++] = entry.key_;
      }
      return keys;
    }


    /**
     * @return {Array<T>} Values.
     */
    getValues() {
      const values = new Array(this.count_);
      let i = 0;
      let entry;
      for (entry = this.newest_; entry; entry = entry.older) {
        values[i++] = entry.value_;
      }
      return values;
    }


    /**
     * @return {T} Last value.
     */
    peekLast() {
      return this.oldest_.value_;
    }


    /**
     * @return {string} Last key.
     */
    peekLastKey() {
      return this.oldest_.key_;
    }


    /**
     * Get the key of the newest item in the cache.  Throws if the cache is empty.
     * @return {string} The newest key.
     */
    peekFirstKey() {
      return this.newest_.key_;
    }


    /**
     * @return {T} value Value.
     */
    pop() {
      const entry = this.oldest_;
      delete this.entries_[entry.key_];
      if (entry.newer) {
        entry.newer.older = null;
      }
      this.oldest_ = /** @type {Entry} */ (entry.newer);
      if (!this.oldest_) {
        this.newest_ = null;
      }
      --this.count_;
      return entry.value_;
    }


    /**
     * @param {string} key Key.
     * @param {T} value Value.
     */
    replace(key, value) {
      this.get(key); // update `newest_`
      this.entries_[key].value_ = value;
    }


    /**
     * @param {string} key Key.
     * @param {T} value Value.
     */
    set(key, value) {
      assert(!(key in this.entries_),
        16); // Tried to set a value for a key that is used already
      const entry = {
        key_: key,
        newer: null,
        older: this.newest_,
        value_: value
      };
      if (!this.newest_) {
        this.oldest_ = entry;
      } else {
        this.newest_.newer = entry;
      }
      this.newest_ = entry;
      this.entries_[key] = entry;
      ++this.count_;
    }


    /**
     * Set a maximum number of entries for the cache.
     * @param {number} size Cache size.
     * @api
     */
    setSize(size) {
      this.highWaterMark = size;
    }

  }

  /**
   * @module ol/render/canvas/LabelCache
   */

  /**
   * @classdesc
   * Cache of pre-rendered labels.
   * @fires import("../events/Event.js").Event
   */
  class LabelCache extends LRUCache {

    /**
     * @inheritDoc
     */
    constructor(opt_highWaterMark) {
      super(opt_highWaterMark);
      this.consumers = {};
    }

    clear() {
      super.clear();
      this.consumers = {};
    }

    /**
     * @override
     * @param {string} key Label key.
     * @param {import("./Executor.js").default} consumer Label consumer.
     * @return {HTMLCanvasElement} Label.
     */
    get(key, consumer) {
      const canvas = super.get(key);
      const consumerId = getUid(consumer);
      if (!(consumerId in this.consumers)) {
        this.consumers[consumerId] = {};
      }
      this.consumers[consumerId][key] = true;
      return canvas;
    }

    prune() {
      outer:
      while (this.canExpireCache()) {
        const key = this.peekLastKey();
        for (const consumerId in this.consumers) {
          if (key in this.consumers[consumerId]) {
            break outer;
          }
        }
        const canvas = this.pop();
        canvas.width = canvas.height = 0;
        for (const consumerId in this.consumers) {
          delete this.consumers[consumerId][key];
        }
      }
    }

    /**
     * @param {import("./Executor.js").default} consumer Label consumer.
     */
    release(consumer) {
      delete this.consumers[getUid(consumer)];
    }
  }

  /**
   * @module ol/render/canvas
   */


  /**
   * @typedef {Object} FillState
   * @property {import("../colorlike.js").ColorLike} fillStyle
   */


  /**
   * @typedef {Object} FillStrokeState
   * @property {import("../colorlike.js").ColorLike} [currentFillStyle]
   * @property {import("../colorlike.js").ColorLike} [currentStrokeStyle]
   * @property {CanvasLineCap} [currentLineCap]
   * @property {Array<number>} currentLineDash
   * @property {number} [currentLineDashOffset]
   * @property {CanvasLineJoin} [currentLineJoin]
   * @property {number} [currentLineWidth]
   * @property {number} [currentMiterLimit]
   * @property {number} [lastStroke]
   * @property {import("../colorlike.js").ColorLike} [fillStyle]
   * @property {import("../colorlike.js").ColorLike} [strokeStyle]
   * @property {CanvasLineCap} [lineCap]
   * @property {Array<number>} lineDash
   * @property {number} [lineDashOffset]
   * @property {CanvasLineJoin} [lineJoin]
   * @property {number} [lineWidth]
   * @property {number} [miterLimit]
   */


  /**
   * @typedef {Object} StrokeState
   * @property {CanvasLineCap} lineCap
   * @property {Array<number>} lineDash
   * @property {number} lineDashOffset
   * @property {CanvasLineJoin} lineJoin
   * @property {number} lineWidth
   * @property {number} miterLimit
   * @property {import("../colorlike.js").ColorLike} strokeStyle
   */


  /**
   * @typedef {Object} TextState
   * @property {string} font
   * @property {string} [textAlign]
   * @property {string} textBaseline
   * @property {string} [placement]
   * @property {number} [maxAngle]
   * @property {boolean} [overflow]
   * @property {import("../style/Fill.js").default} [backgroundFill]
   * @property {import("../style/Stroke.js").default} [backgroundStroke]
   * @property {number} [scale]
   * @property {Array<number>} [padding]
   */


  /**
   * Container for decluttered replay instructions that need to be rendered or
   * omitted together, i.e. when styles render both an image and text, or for the
   * characters that form text along lines. The basic elements of this array are
   * `[minX, minY, maxX, maxY, count]`, where the first four entries are the
   * rendered extent of the group in pixel space. `count` is the number of styles
   * in the group, i.e. 2 when an image and a text are grouped, or 1 otherwise.
   * In addition to these four elements, declutter instruction arrays (i.e. the
   * arguments to {@link module:ol/render/canvas~drawImage} are appended to the array.
   * @typedef {Array<*>} DeclutterGroup
   */


  /**
   * @const
   * @type {string}
   */
  const defaultFont = '10px sans-serif';


  /**
   * @const
   * @type {import("../colorlike.js").ColorLike}
   */
  const defaultFillStyle = '#000';


  /**
   * @const
   * @type {CanvasLineCap}
   */
  const defaultLineCap = 'round';


  /**
   * @const
   * @type {Array<number>}
   */
  const defaultLineDash = [];


  /**
   * @const
   * @type {number}
   */
  const defaultLineDashOffset = 0;


  /**
   * @const
   * @type {CanvasLineJoin}
   */
  const defaultLineJoin = 'round';


  /**
   * @const
   * @type {number}
   */
  const defaultMiterLimit = 10;


  /**
   * @const
   * @type {import("../colorlike.js").ColorLike}
   */
  const defaultStrokeStyle = '#000';


  /**
   * @const
   * @type {string}
   */
  const defaultTextAlign = 'center';


  /**
   * @const
   * @type {string}
   */
  const defaultTextBaseline = 'middle';


  /**
   * @const
   * @type {Array<number>}
   */
  const defaultPadding = [0, 0, 0, 0];


  /**
   * @const
   * @type {number}
   */
  const defaultLineWidth = 1;


  /**
   * The label cache for text rendering. To change the default cache size of 2048
   * entries, use {@link module:ol/structs/LRUCache#setSize}.
   * @type {LabelCache}
   * @api
   */
  const labelCache = new LabelCache();


  /**
   * @type {!Object<string, number>}
   */
  const checkedFonts = {};


  /**
   * @type {CanvasRenderingContext2D}
   */
  let measureContext = null;


  /**
   * @type {!Object<string, number>}
   */
  const textHeights = {};


  /**
   * Clears the label cache when a font becomes available.
   * @param {string} fontSpec CSS font spec.
   */
  const checkFont = (function() {
    const retries = 60;
    const checked = checkedFonts;
    const size = '32px ';
    const referenceFonts = ['monospace', 'serif'];
    const len = referenceFonts.length;
    const text = 'wmytzilWMYTZIL@#/&?$%10\uF013';
    let interval, referenceWidth;

    function isAvailable(font) {
      const context = getMeasureContext();
      // Check weight ranges according to
      // https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Fallback_weights
      for (let weight = 100; weight <= 700; weight += 300) {
        const fontWeight = weight + ' ';
        let available = true;
        for (let i = 0; i < len; ++i) {
          const referenceFont = referenceFonts[i];
          context.font = fontWeight + size + referenceFont;
          referenceWidth = context.measureText(text).width;
          if (font != referenceFont) {
            context.font = fontWeight + size + font + ',' + referenceFont;
            const width = context.measureText(text).width;
            // If width and referenceWidth are the same, then the fallback was used
            // instead of the font we wanted, so the font is not available.
            available = available && width != referenceWidth;
          }
        }
        if (available) {
          // Consider font available when it is available in one weight range.
          //FIXME With this we miss rare corner cases, so we should consider
          //FIXME checking availability for each requested weight range.
          return true;
        }
      }
      return false;
    }

    function check() {
      let done = true;
      for (const font in checked) {
        if (checked[font] < retries) {
          if (isAvailable(font)) {
            checked[font] = retries;
            clear(textHeights);
            // Make sure that loaded fonts are picked up by Safari
            measureContext = null;
            labelCache.clear();
          } else {
            ++checked[font];
            done = false;
          }
        }
      }
      if (done) {
        clearInterval(interval);
        interval = undefined;
      }
    }

    return function(fontSpec) {
      const fontFamilies = getFontFamilies(fontSpec);
      if (!fontFamilies) {
        return;
      }
      for (let i = 0, ii = fontFamilies.length; i < ii; ++i) {
        const fontFamily = fontFamilies[i];
        if (!(fontFamily in checked)) {
          checked[fontFamily] = retries;
          if (!isAvailable(fontFamily)) {
            checked[fontFamily] = 0;
            if (interval === undefined) {
              interval = setInterval(check, 32);
            }
          }
        }
      }
    };
  })();


  /**
   * @return {CanvasRenderingContext2D} Measure context.
   */
  function getMeasureContext() {
    if (!measureContext) {
      measureContext = createCanvasContext2D(1, 1);
    }
    return measureContext;
  }


  /**
   * @param {string} font Font to use for measuring.
   * @return {import("../size.js").Size} Measurement.
   */
  const measureTextHeight = (function() {
    let div;
    const heights = textHeights;
    return function(font) {
      let height = heights[font];
      if (height == undefined) {
        if (!div) {
          div = document.createElement('div');
          div.innerHTML = 'M';
          div.style.margin = div.style.padding = '0 !important';
          div.style.position = 'absolute !important';
          div.style.left = '-99999px !important';
        }
        div.style.font = font;
        document.body.appendChild(div);
        height = heights[font] = div.offsetHeight;
        document.body.removeChild(div);
      }
      return height;
    };
  })();


  /**
   * @param {string} font Font.
   * @param {string} text Text.
   * @return {number} Width.
   */
  function measureTextWidth(font, text) {
    const measureContext = getMeasureContext();
    if (font != measureContext.font) {
      measureContext.font = font;
    }
    return measureContext.measureText(text).width;
  }


  /**
   * Measure text width using a cache.
   * @param {string} font The font.
   * @param {string} text The text to measure.
   * @param {Object<string, number>} cache A lookup of cached widths by text.
   * @returns {number} The text width.
   */
  function measureAndCacheTextWidth(font, text, cache) {
    if (text in cache) {
      return cache[text];
    }
    const width = cache[text] = measureTextWidth(font, text);
    return width;
  }


  /**
   * @param {string} font Font to use for measuring.
   * @param {Array<string>} lines Lines to measure.
   * @param {Array<number>} widths Array will be populated with the widths of
   * each line.
   * @return {number} Width of the whole text.
   */
  function measureTextWidths(font, lines, widths) {
    const numLines = lines.length;
    let width = 0;
    for (let i = 0; i < numLines; ++i) {
      const currentWidth = measureTextWidth(font, lines[i]);
      width = Math.max(width, currentWidth);
      widths.push(currentWidth);
    }
    return width;
  }


  /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {number} rotation Rotation.
   * @param {number} offsetX X offset.
   * @param {number} offsetY Y offset.
   */
  function rotateAtOffset(context, rotation, offsetX, offsetY) {
    if (rotation !== 0) {
      context.translate(offsetX, offsetY);
      context.rotate(rotation);
      context.translate(-offsetX, -offsetY);
    }
  }


  const resetTransform = create();


  /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import("../transform.js").Transform|null} transform Transform.
   * @param {number} opacity Opacity.
   * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} image Image.
   * @param {number} originX Origin X.
   * @param {number} originY Origin Y.
   * @param {number} w Width.
   * @param {number} h Height.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {number} scale Scale.
   */
  function drawImage(context,
    transform, opacity, image, originX, originY, w, h, x, y, scale) {
    let alpha;
    if (opacity != 1) {
      alpha = context.globalAlpha;
      context.globalAlpha = alpha * opacity;
    }
    if (transform) {
      context.setTransform.apply(context, transform);
    }

    context.drawImage(image, originX, originY, w, h, x, y, w * scale, h * scale);

    if (opacity != 1) {
      context.globalAlpha = alpha;
    }
    if (transform) {
      context.setTransform.apply(context, resetTransform);
    }
  }

  /**
   * @module ol/style/Image
   */


  /**
   * @typedef {Object} Options
   * @property {number} opacity
   * @property {boolean} rotateWithView
   * @property {number} rotation
   * @property {number} scale
   */


  /**
   * @classdesc
   * A base class used for creating subclasses and not instantiated in
   * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and
   * {@link module:ol/style/RegularShape~RegularShape}.
   * @abstract
   * @api
   */
  class ImageStyle {
    /**
     * @param {Options} options Options.
     */
    constructor(options) {

      /**
       * @private
       * @type {number}
       */
      this.opacity_ = options.opacity;

      /**
       * @private
       * @type {boolean}
       */
      this.rotateWithView_ = options.rotateWithView;

      /**
       * @private
       * @type {number}
       */
      this.rotation_ = options.rotation;

      /**
       * @private
       * @type {number}
       */
      this.scale_ = options.scale;

    }

    /**
     * Clones the style.
     * @return {ImageStyle} The cloned style.
     * @api
     */
    clone() {
      return new ImageStyle({
        opacity: this.getOpacity(),
        scale: this.getScale(),
        rotation: this.getRotation(),
        rotateWithView: this.getRotateWithView()
      });
    }

    /**
     * Get the symbolizer opacity.
     * @return {number} Opacity.
     * @api
     */
    getOpacity() {
      return this.opacity_;
    }

    /**
     * Determine whether the symbolizer rotates with the map.
     * @return {boolean} Rotate with map.
     * @api
     */
    getRotateWithView() {
      return this.rotateWithView_;
    }

    /**
     * Get the symoblizer rotation.
     * @return {number} Rotation.
     * @api
     */
    getRotation() {
      return this.rotation_;
    }

    /**
     * Get the symbolizer scale.
     * @return {number} Scale.
     * @api
     */
    getScale() {
      return this.scale_;
    }

    /**
     * Get the anchor point in pixels. The anchor determines the center point for the
     * symbolizer.
     * @abstract
     * @return {Array<number>} Anchor.
     */
    getAnchor() {
      return abstract();
    }

    /**
     * Get the image element for the symbolizer.
     * @abstract
     * @param {number} pixelRatio Pixel ratio.
     * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.
     */
    getImage(pixelRatio) {
      return abstract();
    }

    /**
     * @abstract
     * @param {number} pixelRatio Pixel ratio.
     * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.
     */
    getHitDetectionImage(pixelRatio) {
      return abstract();
    }

    /**
     * @abstract
     * @return {import("../ImageState.js").default} Image state.
     */
    getImageState() {
      return abstract();
    }

    /**
     * @abstract
     * @return {import("../size.js").Size} Image size.
     */
    getImageSize() {
      return abstract();
    }

    /**
     * @abstract
     * @return {import("../size.js").Size} Size of the hit-detection image.
     */
    getHitDetectionImageSize() {
      return abstract();
    }

    /**
     * Get the origin of the symbolizer.
     * @abstract
     * @return {Array<number>} Origin.
     */
    getOrigin() {
      return abstract();
    }

    /**
     * Get the size of the symbolizer (in pixels).
     * @abstract
     * @return {import("../size.js").Size} Size.
     */
    getSize() {
      return abstract();
    }

    /**
     * Set the opacity.
     *
     * @param {number} opacity Opacity.
     * @api
     */
    setOpacity(opacity) {
      this.opacity_ = opacity;
    }

    /**
     * Set whether to rotate the style with the view.
     *
     * @param {boolean} rotateWithView Rotate with map.
     * @api
     */
    setRotateWithView(rotateWithView) {
      this.rotateWithView_ = rotateWithView;
    }

    /**
     * Set the rotation.
     *
     * @param {number} rotation Rotation.
     * @api
     */
    setRotation(rotation) {
      this.rotation_ = rotation;
    }
    /**
     * Set the scale.
     *
     * @param {number} scale Scale.
     * @api
     */
    setScale(scale) {
      this.scale_ = scale;
    }

    /**
     * @abstract
     * @param {function(this: T, import("../events/Event.js").default): void} listener Listener function.
     * @param {T} thisArg Value to use as `this` when executing `listener`.
     * @return {import("../events.js").EventsKey|undefined} Listener key.
     * @template T
     */
    listenImageChange(listener, thisArg) {
      return abstract();
    }

    /**
     * Load not yet loaded URI.
     * @abstract
     */
    load() {
      abstract();
    }

    /**
     * @abstract
     * @param {function(this: T, import("../events/Event.js").default): void} listener Listener function.
     * @param {T} thisArg Value to use as `this` when executing `listener`.
     * @template T
     */
    unlistenImageChange(listener, thisArg) {
      abstract();
    }
  }

  /**
   * @module ol/style/RegularShape
   */


  /**
   * Specify radius for regular polygons, or radius1 and radius2 for stars.
   * @typedef {Object} Options
   * @property {import("./Fill.js").default} [fill] Fill style.
   * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points
   * is the number of sides.
   * @property {number} [radius] Radius of a regular polygon.
   * @property {number} [radius1] Outer radius of a star.
   * @property {number} [radius2] Inner radius of a star.
   * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.
   * @property {import("./Stroke.js").default} [stroke] Stroke style.
   * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
   * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.
   */


  /**
   * @typedef {Object} RenderOptions
   * @property {import("../colorlike.js").ColorLike} [strokeStyle]
   * @property {number} strokeWidth
   * @property {number} size
   * @property {CanvasLineCap} lineCap
   * @property {Array<number>} lineDash
   * @property {number} lineDashOffset
   * @property {CanvasLineJoin} lineJoin
   * @property {number} miterLimit
   */


  /**
   * @classdesc
   * Set regular shape style for vector features. The resulting shape will be
   * a regular polygon when `radius` is provided, or a star when `radius1` and
   * `radius2` are provided.
   * @api
   */
  class RegularShape extends ImageStyle {
    /**
     * @param {Options} options Options.
     */
    constructor(options) {
      /**
       * @type {boolean}
       */
      const rotateWithView = options.rotateWithView !== undefined ?
        options.rotateWithView : false;

      super({
        opacity: 1,
        rotateWithView: rotateWithView,
        rotation: options.rotation !== undefined ? options.rotation : 0,
        scale: 1
      });

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.canvas_ = null;

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.hitDetectionCanvas_ = null;

      /**
       * @private
       * @type {import("./Fill.js").default}
       */
      this.fill_ = options.fill !== undefined ? options.fill : null;

      /**
       * @private
       * @type {Array<number>}
       */
      this.origin_ = [0, 0];

      /**
       * @private
       * @type {number}
       */
      this.points_ = options.points;

      /**
       * @protected
       * @type {number}
       */
      this.radius_ = /** @type {number} */ (options.radius !== undefined ?
        options.radius : options.radius1);

      /**
       * @private
       * @type {number|undefined}
       */
      this.radius2_ = options.radius2;

      /**
       * @private
       * @type {number}
       */
      this.angle_ = options.angle !== undefined ? options.angle : 0;

      /**
       * @private
       * @type {import("./Stroke.js").default}
       */
      this.stroke_ = options.stroke !== undefined ? options.stroke : null;

      /**
       * @private
       * @type {Array<number>}
       */
      this.anchor_ = null;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.size_ = null;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.imageSize_ = null;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.hitDetectionImageSize_ = null;

      this.render();

    }

    /**
     * Clones the style.
     * @return {RegularShape} The cloned style.
     * @api
     */
    clone() {
      const style = new RegularShape({
        fill: this.getFill() ? this.getFill().clone() : undefined,
        points: this.getPoints(),
        radius: this.getRadius(),
        radius2: this.getRadius2(),
        angle: this.getAngle(),
        stroke: this.getStroke() ? this.getStroke().clone() : undefined,
        rotation: this.getRotation(),
        rotateWithView: this.getRotateWithView()
      });
      style.setOpacity(this.getOpacity());
      style.setScale(this.getScale());
      return style;
    }

    /**
     * @inheritDoc
     * @api
     */
    getAnchor() {
      return this.anchor_;
    }

    /**
     * Get the angle used in generating the shape.
     * @return {number} Shape's rotation in radians.
     * @api
     */
    getAngle() {
      return this.angle_;
    }

    /**
     * Get the fill style for the shape.
     * @return {import("./Fill.js").default} Fill style.
     * @api
     */
    getFill() {
      return this.fill_;
    }

    /**
     * @inheritDoc
     */
    getHitDetectionImage(pixelRatio) {
      return this.hitDetectionCanvas_;
    }

    /**
     * @inheritDoc
     * @api
     */
    getImage(pixelRatio) {
      return this.canvas_;
    }

    /**
     * @inheritDoc
     */
    getImageSize() {
      return this.imageSize_;
    }

    /**
     * @inheritDoc
     */
    getHitDetectionImageSize() {
      return this.hitDetectionImageSize_;
    }

    /**
     * @inheritDoc
     */
    getImageState() {
      return ImageState.LOADED;
    }

    /**
     * @inheritDoc
     * @api
     */
    getOrigin() {
      return this.origin_;
    }

    /**
     * Get the number of points for generating the shape.
     * @return {number} Number of points for stars and regular polygons.
     * @api
     */
    getPoints() {
      return this.points_;
    }

    /**
     * Get the (primary) radius for the shape.
     * @return {number} Radius.
     * @api
     */
    getRadius() {
      return this.radius_;
    }

    /**
     * Get the secondary radius for the shape.
     * @return {number|undefined} Radius2.
     * @api
     */
    getRadius2() {
      return this.radius2_;
    }

    /**
     * @inheritDoc
     * @api
     */
    getSize() {
      return this.size_;
    }

    /**
     * Get the stroke style for the shape.
     * @return {import("./Stroke.js").default} Stroke style.
     * @api
     */
    getStroke() {
      return this.stroke_;
    }

    /**
     * @inheritDoc
     */
    listenImageChange(listener, thisArg) {
      return undefined;
    }

    /**
     * @inheritDoc
     */
    load() {}

    /**
     * @inheritDoc
     */
    unlistenImageChange(listener, thisArg) {}

    /**
     * @protected
     */
    render() {
      let lineCap = defaultLineCap;
      let lineJoin = defaultLineJoin;
      let miterLimit = 0;
      let lineDash = null;
      let lineDashOffset = 0;
      let strokeStyle;
      let strokeWidth = 0;

      if (this.stroke_) {
        strokeStyle = this.stroke_.getColor();
        if (strokeStyle === null) {
          strokeStyle = defaultStrokeStyle;
        }
        strokeStyle = asColorLike(strokeStyle);
        strokeWidth = this.stroke_.getWidth();
        if (strokeWidth === undefined) {
          strokeWidth = defaultLineWidth;
        }
        lineDash = this.stroke_.getLineDash();
        lineDashOffset = this.stroke_.getLineDashOffset();
        lineJoin = this.stroke_.getLineJoin();
        if (lineJoin === undefined) {
          lineJoin = defaultLineJoin;
        }
        lineCap = this.stroke_.getLineCap();
        if (lineCap === undefined) {
          lineCap = defaultLineCap;
        }
        miterLimit = this.stroke_.getMiterLimit();
        if (miterLimit === undefined) {
          miterLimit = defaultMiterLimit;
        }
      }

      let size = 2 * (this.radius_ + strokeWidth) + 1;

      const renderOptions = {
        strokeStyle: strokeStyle,
        strokeWidth: strokeWidth,
        size: size,
        lineCap: lineCap,
        lineDash: lineDash,
        lineDashOffset: lineDashOffset,
        lineJoin: lineJoin,
        miterLimit: miterLimit
      };

      const context = createCanvasContext2D(size, size);
      this.canvas_ = context.canvas;

      // canvas.width and height are rounded to the closest integer
      size = this.canvas_.width;
      const imageSize = size;

      this.draw_(renderOptions, context, 0, 0);

      this.createHitDetectionCanvas_(renderOptions);

      this.anchor_ = [size / 2, size / 2];
      this.size_ = [size, size];
      this.imageSize_ = [imageSize, imageSize];
    }

    /**
     * @private
     * @param {RenderOptions} renderOptions Render options.
     * @param {CanvasRenderingContext2D} context The rendering context.
     * @param {number} x The origin for the symbol (x).
     * @param {number} y The origin for the symbol (y).
     */
    draw_(renderOptions, context, x, y) {
      let i, angle0, radiusC;
      // reset transform
      context.setTransform(1, 0, 0, 1, 0, 0);

      // then move to (x, y)
      context.translate(x, y);

      context.beginPath();

      let points = this.points_;
      if (points === Infinity) {
        context.arc(
          renderOptions.size / 2, renderOptions.size / 2,
          this.radius_, 0, 2 * Math.PI, true);
      } else {
        const radius2 = (this.radius2_ !== undefined) ? this.radius2_
          : this.radius_;
        if (radius2 !== this.radius_) {
          points = 2 * points;
        }
        for (i = 0; i <= points; i++) {
          angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this.angle_;
          radiusC = i % 2 === 0 ? this.radius_ : radius2;
          context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0),
            renderOptions.size / 2 + radiusC * Math.sin(angle0));
        }
      }


      if (this.fill_) {
        let color = this.fill_.getColor();
        if (color === null) {
          color = defaultFillStyle;
        }
        context.fillStyle = asColorLike(color);
        context.fill();
      }
      if (this.stroke_) {
        context.strokeStyle = renderOptions.strokeStyle;
        context.lineWidth = renderOptions.strokeWidth;
        if (context.setLineDash && renderOptions.lineDash) {
          context.setLineDash(renderOptions.lineDash);
          context.lineDashOffset = renderOptions.lineDashOffset;
        }
        context.lineCap = renderOptions.lineCap;
        context.lineJoin = renderOptions.lineJoin;
        context.miterLimit = renderOptions.miterLimit;
        context.stroke();
      }
      context.closePath();
    }

    /**
     * @private
     * @param {RenderOptions} renderOptions Render options.
     */
    createHitDetectionCanvas_(renderOptions) {
      this.hitDetectionImageSize_ = [renderOptions.size, renderOptions.size];
      if (this.fill_) {
        this.hitDetectionCanvas_ = this.canvas_;
        return;
      }

      // if no fill style is set, create an extra hit-detection image with a
      // default fill style
      const context = createCanvasContext2D(renderOptions.size, renderOptions.size);
      this.hitDetectionCanvas_ = context.canvas;

      this.drawHitDetectionCanvas_(renderOptions, context, 0, 0);
    }

    /**
     * @private
     * @param {RenderOptions} renderOptions Render options.
     * @param {CanvasRenderingContext2D} context The context.
     * @param {number} x The origin for the symbol (x).
     * @param {number} y The origin for the symbol (y).
     */
    drawHitDetectionCanvas_(renderOptions, context, x, y) {
      // reset transform
      context.setTransform(1, 0, 0, 1, 0, 0);

      // then move to (x, y)
      context.translate(x, y);

      context.beginPath();

      let points = this.points_;
      if (points === Infinity) {
        context.arc(
          renderOptions.size / 2, renderOptions.size / 2,
          this.radius_, 0, 2 * Math.PI, true);
      } else {
        const radius2 = (this.radius2_ !== undefined) ? this.radius2_
          : this.radius_;
        if (radius2 !== this.radius_) {
          points = 2 * points;
        }
        let i, radiusC, angle0;
        for (i = 0; i <= points; i++) {
          angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this.angle_;
          radiusC = i % 2 === 0 ? this.radius_ : radius2;
          context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0),
            renderOptions.size / 2 + radiusC * Math.sin(angle0));
        }
      }

      context.fillStyle = defaultFillStyle;
      context.fill();
      if (this.stroke_) {
        context.strokeStyle = renderOptions.strokeStyle;
        context.lineWidth = renderOptions.strokeWidth;
        if (renderOptions.lineDash) {
          context.setLineDash(renderOptions.lineDash);
          context.lineDashOffset = renderOptions.lineDashOffset;
        }
        context.stroke();
      }
      context.closePath();
    }

  }

  /**
   * @module ol/style/Circle
   */


  /**
   * @typedef {Object} Options
   * @property {import("./Fill.js").default} [fill] Fill style.
   * @property {number} radius Circle radius.
   * @property {import("./Stroke.js").default} [stroke] Stroke style.
   */


  /**
   * @classdesc
   * Set circle style for vector features.
   * @api
   */
  class CircleStyle extends RegularShape {
    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {

      const options = opt_options ? opt_options : {};

      super({
        points: Infinity,
        fill: options.fill,
        radius: options.radius,
        stroke: options.stroke
      });

    }

    /**
    * Clones the style.
    * @return {CircleStyle} The cloned style.
    * @override
    * @api
    */
    clone() {
      const style = new CircleStyle({
        fill: this.getFill() ? this.getFill().clone() : undefined,
        stroke: this.getStroke() ? this.getStroke().clone() : undefined,
        radius: this.getRadius()
      });
      style.setOpacity(this.getOpacity());
      style.setScale(this.getScale());
      return style;
    }

    /**
     * Set the circle radius.
     *
     * @param {number} radius Circle radius.
     * @api
     */
    setRadius(radius) {
      this.radius_ = radius;
      this.render();
    }
  }

  /**
   * @module ol/style/Fill
   */


  /**
   * @typedef {Object} Options
   * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [color=null] A color, gradient or pattern.
   * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.
   * Default null; if null, the Canvas/renderer default black will be used.
   */


  /**
   * @classdesc
   * Set fill style for vector features.
   * @api
   */
  class Fill {
    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {

      const options = opt_options || {};

      /**
       * @private
       * @type {import("../color.js").Color|import("../colorlike.js").ColorLike}
       */
      this.color_ = options.color !== undefined ? options.color : null;
    }

    /**
     * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.
     * @return {Fill} The cloned style.
     * @api
     */
    clone() {
      const color = this.getColor();
      return new Fill({
        color: Array.isArray(color) ? color.slice() : color || undefined
      });
    }

    /**
     * Get the fill color.
     * @return {import("../color.js").Color|import("../colorlike.js").ColorLike} Color.
     * @api
     */
    getColor() {
      return this.color_;
    }

    /**
     * Set the color.
     *
     * @param {import("../color.js").Color|import("../colorlike.js").ColorLike} color Color.
     * @api
     */
    setColor(color) {
      this.color_ = color;
    }

  }

  /**
   * @module ol/style/Stroke
   */


  /**
   * @typedef {Object} Options
   * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [color] A color, gradient or pattern.
   * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.
   * Default null; if null, the Canvas/renderer default black will be used.
   * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.
   * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.
   * @property {Array<number>} [lineDash] Line dash pattern. Default is `undefined` (no dash).
   * Please note that Internet Explorer 10 and lower do not support the `setLineDash` method on
   * the `CanvasRenderingContext2D` and therefore this option will have no visual effect in these browsers.
   * @property {number} [lineDashOffset=0] Line dash offset.
   * @property {number} [miterLimit=10] Miter limit.
   * @property {number} [width] Width.
   */


  /**
   * @classdesc
   * Set stroke style for vector features.
   * Note that the defaults given are the Canvas defaults, which will be used if
   * option is not defined. The `get` functions return whatever was entered in
   * the options; they will not return the default.
   * @api
   */
  class Stroke {
    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {

      const options = opt_options || {};

      /**
       * @private
       * @type {import("../color.js").Color|import("../colorlike.js").ColorLike}
       */
      this.color_ = options.color !== undefined ? options.color : null;

      /**
       * @private
       * @type {CanvasLineCap|undefined}
       */
      this.lineCap_ = options.lineCap;

      /**
       * @private
       * @type {Array<number>}
       */
      this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;

      /**
       * @private
       * @type {number|undefined}
       */
      this.lineDashOffset_ = options.lineDashOffset;

      /**
       * @private
       * @type {CanvasLineJoin|undefined}
       */
      this.lineJoin_ = options.lineJoin;

      /**
       * @private
       * @type {number|undefined}
       */
      this.miterLimit_ = options.miterLimit;

      /**
       * @private
       * @type {number|undefined}
       */
      this.width_ = options.width;
    }

    /**
     * Clones the style.
     * @return {Stroke} The cloned style.
     * @api
     */
    clone() {
      const color = this.getColor();
      return new Stroke({
        color: Array.isArray(color) ? color.slice() : color || undefined,
        lineCap: this.getLineCap(),
        lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,
        lineDashOffset: this.getLineDashOffset(),
        lineJoin: this.getLineJoin(),
        miterLimit: this.getMiterLimit(),
        width: this.getWidth()
      });
    }

    /**
     * Get the stroke color.
     * @return {import("../color.js").Color|import("../colorlike.js").ColorLike} Color.
     * @api
     */
    getColor() {
      return this.color_;
    }

    /**
     * Get the line cap type for the stroke.
     * @return {CanvasLineCap|undefined} Line cap.
     * @api
     */
    getLineCap() {
      return this.lineCap_;
    }

    /**
     * Get the line dash style for the stroke.
     * @return {Array<number>} Line dash.
     * @api
     */
    getLineDash() {
      return this.lineDash_;
    }

    /**
     * Get the line dash offset for the stroke.
     * @return {number|undefined} Line dash offset.
     * @api
     */
    getLineDashOffset() {
      return this.lineDashOffset_;
    }

    /**
     * Get the line join type for the stroke.
     * @return {CanvasLineJoin|undefined} Line join.
     * @api
     */
    getLineJoin() {
      return this.lineJoin_;
    }

    /**
     * Get the miter limit for the stroke.
     * @return {number|undefined} Miter limit.
     * @api
     */
    getMiterLimit() {
      return this.miterLimit_;
    }

    /**
     * Get the stroke width.
     * @return {number|undefined} Width.
     * @api
     */
    getWidth() {
      return this.width_;
    }

    /**
     * Set the color.
     *
     * @param {import("../color.js").Color|import("../colorlike.js").ColorLike} color Color.
     * @api
     */
    setColor(color) {
      this.color_ = color;
    }

    /**
     * Set the line cap.
     *
     * @param {CanvasLineCap|undefined} lineCap Line cap.
     * @api
     */
    setLineCap(lineCap) {
      this.lineCap_ = lineCap;
    }

    /**
     * Set the line dash.
     *
     * Please note that Internet Explorer 10 and lower [do not support][mdn] the
     * `setLineDash` method on the `CanvasRenderingContext2D` and therefore this
     * property will have no visual effect in these browsers.
     *
     * [mdn]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility
     *
     * @param {Array<number>} lineDash Line dash.
     * @api
     */
    setLineDash(lineDash) {
      this.lineDash_ = lineDash;
    }

    /**
     * Set the line dash offset.
     *
     * @param {number|undefined} lineDashOffset Line dash offset.
     * @api
     */
    setLineDashOffset(lineDashOffset) {
      this.lineDashOffset_ = lineDashOffset;
    }

    /**
     * Set the line join.
     *
     * @param {CanvasLineJoin|undefined} lineJoin Line join.
     * @api
     */
    setLineJoin(lineJoin) {
      this.lineJoin_ = lineJoin;
    }

    /**
     * Set the miter limit.
     *
     * @param {number|undefined} miterLimit Miter limit.
     * @api
     */
    setMiterLimit(miterLimit) {
      this.miterLimit_ = miterLimit;
    }

    /**
     * Set the width.
     *
     * @param {number|undefined} width Width.
     * @api
     */
    setWidth(width) {
      this.width_ = width;
    }

  }

  /**
   * @module ol/style/Style
   */


  /**
   * A function that takes an {@link module:ol/Feature} and a `{number}`
   * representing the view's resolution. The function should return a
   * {@link module:ol/style/Style} or an array of them. This way e.g. a
   * vector layer can be styled.
   *
   * @typedef {function(import("../Feature.js").FeatureLike, number):(Style|Array<Style>)} StyleFunction
   */

  /**
   * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.
   * @typedef {Style|Array<Style>|StyleFunction} StyleLike
   */

  /**
   * A function that takes an {@link module:ol/Feature} as argument and returns an
   * {@link module:ol/geom/Geometry} that will be rendered and styled for the feature.
   *
   * @typedef {function(import("../Feature.js").FeatureLike):
   *     (import("../geom/Geometry.js").default|import("../render/Feature.js").default|undefined)} GeometryFunction
   */


  /**
   * Custom renderer function. Takes two arguments:
   *
   * 1. The pixel coordinates of the geometry in GeoJSON notation.
   * 2. The {@link module:ol/render~State} of the layer renderer.
   *
   * @typedef {function((import("../coordinate.js").Coordinate|Array<import("../coordinate.js").Coordinate>|Array<Array<import("../coordinate.js").Coordinate>>),import("../render.js").State): void}
   * RenderFunction
   */


  /**
   * @typedef {Object} Options
   * @property {string|import("../geom/Geometry.js").default|GeometryFunction} [geometry] Feature property or geometry
   * or function returning a geometry to render for this style.
   * @property {import("./Fill.js").default} [fill] Fill style.
   * @property {import("./Image.js").default} [image] Image style.
   * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be
   * ignored, and the provided function will be called with each render frame for each geometry.
   * @property {import("./Stroke.js").default} [stroke] Stroke style.
   * @property {import("./Text.js").default} [text] Text style.
   * @property {number} [zIndex] Z index.
   */

  /**
   * @classdesc
   * Container for vector feature rendering styles. Any changes made to the style
   * or its children through `set*()` methods will not take effect until the
   * feature or layer that uses the style is re-rendered.
   * @api
   */
  class Style$1 {
    /**
     * @param {Options=} opt_options Style options.
     */
    constructor(opt_options) {

      const options = opt_options || {};

      /**
       * @private
       * @type {string|import("../geom/Geometry.js").default|GeometryFunction}
       */
      this.geometry_ = null;

      /**
       * @private
       * @type {!GeometryFunction}
       */
      this.geometryFunction_ = defaultGeometryFunction;

      if (options.geometry !== undefined) {
        this.setGeometry(options.geometry);
      }

      /**
       * @private
       * @type {import("./Fill.js").default}
       */
      this.fill_ = options.fill !== undefined ? options.fill : null;

      /**
         * @private
         * @type {import("./Image.js").default}
         */
      this.image_ = options.image !== undefined ? options.image : null;

      /**
       * @private
       * @type {RenderFunction|null}
       */
      this.renderer_ = options.renderer !== undefined ? options.renderer : null;

      /**
       * @private
       * @type {import("./Stroke.js").default}
       */
      this.stroke_ = options.stroke !== undefined ? options.stroke : null;

      /**
       * @private
       * @type {import("./Text.js").default}
       */
      this.text_ = options.text !== undefined ? options.text : null;

      /**
       * @private
       * @type {number|undefined}
       */
      this.zIndex_ = options.zIndex;

    }

    /**
     * Clones the style.
     * @return {Style} The cloned style.
     * @api
     */
    clone() {
      let geometry = this.getGeometry();
      if (geometry && typeof geometry === 'object') {
        geometry = /** @type {import("../geom/Geometry.js").default} */ (geometry).clone();
      }
      return new Style$1({
        geometry: geometry,
        fill: this.getFill() ? this.getFill().clone() : undefined,
        image: this.getImage() ? this.getImage().clone() : undefined,
        stroke: this.getStroke() ? this.getStroke().clone() : undefined,
        text: this.getText() ? this.getText().clone() : undefined,
        zIndex: this.getZIndex()
      });
    }

    /**
     * Get the custom renderer function that was configured with
     * {@link #setRenderer} or the `renderer` constructor option.
     * @return {RenderFunction|null} Custom renderer function.
     * @api
     */
    getRenderer() {
      return this.renderer_;
    }

    /**
     * Sets a custom renderer function for this style. When set, `fill`, `stroke`
     * and `image` options of the style will be ignored.
     * @param {RenderFunction|null} renderer Custom renderer function.
     * @api
     */
    setRenderer(renderer) {
      this.renderer_ = renderer;
    }

    /**
     * Get the geometry to be rendered.
     * @return {string|import("../geom/Geometry.js").default|GeometryFunction}
     * Feature property or geometry or function that returns the geometry that will
     * be rendered with this style.
     * @api
     */
    getGeometry() {
      return this.geometry_;
    }

    /**
     * Get the function used to generate a geometry for rendering.
     * @return {!GeometryFunction} Function that is called with a feature
     * and returns the geometry to render instead of the feature's geometry.
     * @api
     */
    getGeometryFunction() {
      return this.geometryFunction_;
    }

    /**
     * Get the fill style.
     * @return {import("./Fill.js").default} Fill style.
     * @api
     */
    getFill() {
      return this.fill_;
    }

    /**
     * Set the fill style.
     * @param {import("./Fill.js").default} fill Fill style.
     * @api
     */
    setFill(fill) {
      this.fill_ = fill;
    }

    /**
     * Get the image style.
     * @return {import("./Image.js").default} Image style.
     * @api
     */
    getImage() {
      return this.image_;
    }

    /**
     * Set the image style.
     * @param {import("./Image.js").default} image Image style.
     * @api
     */
    setImage(image) {
      this.image_ = image;
    }

    /**
     * Get the stroke style.
     * @return {import("./Stroke.js").default} Stroke style.
     * @api
     */
    getStroke() {
      return this.stroke_;
    }

    /**
     * Set the stroke style.
     * @param {import("./Stroke.js").default} stroke Stroke style.
     * @api
     */
    setStroke(stroke) {
      this.stroke_ = stroke;
    }

    /**
     * Get the text style.
     * @return {import("./Text.js").default} Text style.
     * @api
     */
    getText() {
      return this.text_;
    }

    /**
     * Set the text style.
     * @param {import("./Text.js").default} text Text style.
     * @api
     */
    setText(text) {
      this.text_ = text;
    }

    /**
     * Get the z-index for the style.
     * @return {number|undefined} ZIndex.
     * @api
     */
    getZIndex() {
      return this.zIndex_;
    }

    /**
     * Set a geometry that is rendered instead of the feature's geometry.
     *
     * @param {string|import("../geom/Geometry.js").default|GeometryFunction} geometry
     *     Feature property or geometry or function returning a geometry to render
     *     for this style.
     * @api
     */
    setGeometry(geometry) {
      if (typeof geometry === 'function') {
        this.geometryFunction_ = geometry;
      } else if (typeof geometry === 'string') {
        this.geometryFunction_ = function(feature) {
          return (
            /** @type {import("../geom/Geometry.js").default} */ (feature.get(geometry))
          );
        };
      } else if (!geometry) {
        this.geometryFunction_ = defaultGeometryFunction;
      } else if (geometry !== undefined) {
        this.geometryFunction_ = function() {
          return (
            /** @type {import("../geom/Geometry.js").default} */ (geometry)
          );
        };
      }
      this.geometry_ = geometry;
    }

    /**
     * Set the z-index.
     *
     * @param {number|undefined} zIndex ZIndex.
     * @api
     */
    setZIndex(zIndex) {
      this.zIndex_ = zIndex;
    }
  }


  /**
   * Convert the provided object into a style function.  Functions passed through
   * unchanged.  Arrays of Style or single style objects wrapped in a
   * new style function.
   * @param {StyleFunction|Array<Style>|Style} obj
   *     A style function, a single style, or an array of styles.
   * @return {StyleFunction} A style function.
   */
  function toFunction(obj) {
    let styleFunction;

    if (typeof obj === 'function') {
      styleFunction = obj;
    } else {
      /**
       * @type {Array<Style>}
       */
      let styles;
      if (Array.isArray(obj)) {
        styles = obj;
      } else {
        assert(typeof /** @type {?} */ (obj).getZIndex === 'function',
          41); // Expected an `Style` or an array of `Style`
        const style = /** @type {Style} */ (obj);
        styles = [style];
      }
      styleFunction = function() {
        return styles;
      };
    }
    return styleFunction;
  }


  /**
   * @type {Array<Style>}
   */
  let defaultStyles = null;


  /**
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {number} resolution Resolution.
   * @return {Array<Style>} Style.
   */
  function createDefaultStyle(feature, resolution) {
    // We don't use an immediately-invoked function
    // and a closure so we don't get an error at script evaluation time in
    // browsers that do not support Canvas. (import("./Circle.js").CircleStyle does
    // canvas.getContext('2d') at construction time, which will cause an.error
    // in such browsers.)
    if (!defaultStyles) {
      const fill = new Fill({
        color: 'rgba(255,255,255,0.4)'
      });
      const stroke = new Stroke({
        color: '#3399CC',
        width: 1.25
      });
      defaultStyles = [
        new Style$1({
          image: new CircleStyle({
            fill: fill,
            stroke: stroke,
            radius: 5
          }),
          fill: fill,
          stroke: stroke
        })
      ];
    }
    return defaultStyles;
  }


  /**
   * Default styles for editing features.
   * @return {Object<import("../geom/GeometryType.js").default, Array<Style>>} Styles
   */
  function createEditingStyle() {
    /** @type {Object<import("../geom/GeometryType.js").default, Array<Style>>} */
    const styles = {};
    const white = [255, 255, 255, 1];
    const blue = [0, 153, 255, 1];
    const width = 3;
    styles[GeometryType.POLYGON] = [
      new Style$1({
        fill: new Fill({
          color: [255, 255, 255, 0.5]
        })
      })
    ];
    styles[GeometryType.MULTI_POLYGON] =
        styles[GeometryType.POLYGON];

    styles[GeometryType.LINE_STRING] = [
      new Style$1({
        stroke: new Stroke({
          color: white,
          width: width + 2
        })
      }),
      new Style$1({
        stroke: new Stroke({
          color: blue,
          width: width
        })
      })
    ];
    styles[GeometryType.MULTI_LINE_STRING] =
        styles[GeometryType.LINE_STRING];

    styles[GeometryType.CIRCLE] =
        styles[GeometryType.POLYGON].concat(
          styles[GeometryType.LINE_STRING]
        );


    styles[GeometryType.POINT] = [
      new Style$1({
        image: new CircleStyle({
          radius: width * 2,
          fill: new Fill({
            color: blue
          }),
          stroke: new Stroke({
            color: white,
            width: width / 2
          })
        }),
        zIndex: Infinity
      })
    ];
    styles[GeometryType.MULTI_POINT] =
        styles[GeometryType.POINT];

    styles[GeometryType.GEOMETRY_COLLECTION] =
        styles[GeometryType.POLYGON].concat(
          styles[GeometryType.LINE_STRING],
          styles[GeometryType.POINT]
        );

    return styles;
  }


  /**
   * Function that is called with a feature and returns its default geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature to get the geometry for.
   * @return {import("../geom/Geometry.js").default|import("../render/Feature.js").default|undefined} Geometry to render.
   */
  function defaultGeometryFunction(feature) {
    return feature.getGeometry();
  }

  /**
   * @module ol/layer/BaseVector
   */


  /**
   * @typedef {Object} Options
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {import("../render.js").OrderFunction} [renderOrder] Render order. Function to be used when sorting
   * features before rendering. By default features are drawn in the order that they are created. Use
   * `null` to avoid the sort, but get an undefined draw order.
   * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the
   * renderer when getting features from the vector source for the rendering or hit-detection.
   * Recommended value: the size of the largest symbol, line width or label.
   * @property {import("../source/Vector.js").default} [source] Source.
   * @property {import("../PluggableMap.js").default} [map] Sets the layer as overlay on a map. The map will not manage
   * this layer in its layers collection, and the layer will be rendered on top. This is useful for
   * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
   * use {@link module:ol/Map#addLayer}.
   * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all
   * image and text styles of all Vector and VectorTile layers that have set this to `true`. The priority
   * is defined by the z-index of the layer, the `zIndex` of the style and the render order of features.
   * Higher z-index means higher priority. Within the same z-index, a feature rendered before another has
   * higher priority.
   * @property {import("../style/Style.js").StyleLike} [style] Layer style. See
   * {@link module:ol/style} for default style which will be used if this is not defined.
   * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will
   * be recreated during animations. This means that no vectors will be shown clipped, but the
   * setting will have a performance impact for large amounts of vector data. When set to `false`,
   * batches will be recreated when no animation is active.
   * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will
   * be recreated during interactions. See also `updateWhileAnimating`.
   */


  /**
   * @enum {string}
   * @private
   */
  const Property$3 = {
    RENDER_ORDER: 'renderOrder'
  };


  /**
   * @classdesc
   * Vector data that is rendered client-side.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @template {import("../source/Vector.js").default|import("../source/VectorTile.js").default} VectorSourceType
   * @extends {Layer<VectorSourceType>}
   * @api
   */
  class BaseVectorLayer extends Layer {
    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {
      const options = opt_options ? opt_options : {};

      const baseOptions = assign({}, options);

      delete baseOptions.style;
      delete baseOptions.renderBuffer;
      delete baseOptions.updateWhileAnimating;
      delete baseOptions.updateWhileInteracting;
      super(baseOptions);

      /**
       * @private
       * @type {boolean}
       */
      this.declutter_ = options.declutter !== undefined ? options.declutter : false;

      /**
       * @type {number}
       * @private
       */
      this.renderBuffer_ = options.renderBuffer !== undefined ?
        options.renderBuffer : 100;

      /**
       * User provided style.
       * @type {import("../style/Style.js").StyleLike}
       * @private
       */
      this.style_ = null;

      /**
       * Style function for use within the library.
       * @type {import("../style/Style.js").StyleFunction|undefined}
       * @private
       */
      this.styleFunction_ = undefined;

      this.setStyle(options.style);

      /**
       * @type {boolean}
       * @private
       */
      this.updateWhileAnimating_ = options.updateWhileAnimating !== undefined ?
        options.updateWhileAnimating : false;

      /**
       * @type {boolean}
       * @private
       */
      this.updateWhileInteracting_ = options.updateWhileInteracting !== undefined ?
        options.updateWhileInteracting : false;

    }

    /**
     * @return {boolean} Declutter.
     */
    getDeclutter() {
      return this.declutter_;
    }

    /**
     * @return {number|undefined} Render buffer.
     */
    getRenderBuffer() {
      return this.renderBuffer_;
    }

    /**
     * @return {function(import("../Feature.js").default, import("../Feature.js").default): number|null|undefined} Render
     *     order.
     */
    getRenderOrder() {
      return (
      /** @type {import("../render.js").OrderFunction|null|undefined} */ (this.get(Property$3.RENDER_ORDER))
      );
    }

    /**
     * Get the style for features.  This returns whatever was passed to the `style`
     * option at construction or to the `setStyle` method.
     * @return {import("../style/Style.js").StyleLike}
     *     Layer style.
     * @api
     */
    getStyle() {
      return this.style_;
    }

    /**
     * Get the style function.
     * @return {import("../style/Style.js").StyleFunction|undefined} Layer style function.
     * @api
     */
    getStyleFunction() {
      return this.styleFunction_;
    }

    /**
     * @return {boolean} Whether the rendered layer should be updated while
     *     animating.
     */
    getUpdateWhileAnimating() {
      return this.updateWhileAnimating_;
    }

    /**
     * @return {boolean} Whether the rendered layer should be updated while
     *     interacting.
     */
    getUpdateWhileInteracting() {
      return this.updateWhileInteracting_;
    }

    /**
     * @param {import("../render.js").OrderFunction|null|undefined} renderOrder
     *     Render order.
     */
    setRenderOrder(renderOrder) {
      this.set(Property$3.RENDER_ORDER, renderOrder);
    }

    /**
     * Set the style for features.  This can be a single style object, an array
     * of styles, or a function that takes a feature and resolution and returns
     * an array of styles. If it is `undefined` the default style is used. If
     * it is `null` the layer has no style (a `null` style), so only features
     * that have their own styles will be rendered in the layer. See
     * {@link module:ol/style} for information on the default style.
     * @param {import("../style/Style.js").default|Array<import("../style/Style.js").default>|import("../style/Style.js").StyleFunction|null|undefined} style Layer style.
     * @api
     */
    setStyle(style) {
      this.style_ = style !== undefined ? style : createDefaultStyle;
      this.styleFunction_ = style === null ?
        undefined : toFunction(this.style_);
      this.changed();
    }

  }

  /**
   * @module ol/ViewHint
   */

  /**
   * @enum {number}
   */
  var ViewHint = {
    ANIMATING: 0,
    INTERACTING: 1
  };

  /**
   * @module ol/render/VectorContext
   */

  /**
   * @classdesc
   * Context for drawing geometries.  A vector context is available on render
   * events and does not need to be constructed directly.
   * @api
   */
  class VectorContext {
    /**
     * Render a geometry with a custom renderer.
     *
     * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {Function} renderer Renderer.
     */
    drawCustom(geometry, feature, renderer) {}

    /**
     * Render a geometry.
     *
     * @param {import("../geom/Geometry.js").default} geometry The geometry to render.
     */
    drawGeometry(geometry) {}

    /**
     * Set the rendering style.
     *
     * @param {import("../style/Style.js").default} style The rendering style.
     */
    setStyle(style) {}

    /**
     * @param {import("../geom/Circle.js").default} circleGeometry Circle geometry.
     * @param {import("../Feature.js").default} feature Feature.
     */
    drawCircle(circleGeometry, feature) {}

    /**
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("../style/Style.js").default} style Style.
     */
    drawFeature(feature, style) {}

    /**
     * @param {import("../geom/GeometryCollection.js").default} geometryCollectionGeometry Geometry collection.
     * @param {import("../Feature.js").default} feature Feature.
     */
    drawGeometryCollection(geometryCollectionGeometry, feature) {}

    /**
     * @param {import("../geom/LineString.js").default|import("./Feature.js").default} lineStringGeometry Line string geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */
    drawLineString(lineStringGeometry, feature) {}

    /**
     * @param {import("../geom/MultiLineString.js").default|import("./Feature.js").default} multiLineStringGeometry MultiLineString geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */
    drawMultiLineString(multiLineStringGeometry, feature) {}

    /**
     * @param {import("../geom/MultiPoint.js").default|import("./Feature.js").default} multiPointGeometry MultiPoint geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */
    drawMultiPoint(multiPointGeometry, feature) {}

    /**
     * @param {import("../geom/MultiPolygon.js").default} multiPolygonGeometry MultiPolygon geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */
    drawMultiPolygon(multiPolygonGeometry, feature) {}

    /**
     * @param {import("../geom/Point.js").default|import("./Feature.js").default} pointGeometry Point geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */
    drawPoint(pointGeometry, feature) {}

    /**
     * @param {import("../geom/Polygon.js").default|import("./Feature.js").default} polygonGeometry Polygon geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */
    drawPolygon(polygonGeometry, feature) {}

    /**
     * @param {import("../geom/Geometry.js").default|import("./Feature.js").default} geometry Geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */
    drawText(geometry, feature) {}

    /**
     * @param {import("../style/Fill.js").default} fillStyle Fill style.
     * @param {import("../style/Stroke.js").default} strokeStyle Stroke style.
     */
    setFillStrokeStyle(fillStyle, strokeStyle) {}

    /**
     * @param {import("../style/Image.js").default} imageStyle Image style.
     * @param {import("./canvas.js").DeclutterGroup=} opt_declutterGroup Declutter.
     */
    setImageStyle(imageStyle, opt_declutterGroup) {}

    /**
     * @param {import("../style/Text.js").default} textStyle Text style.
     * @param {import("./canvas.js").DeclutterGroup=} opt_declutterGroup Declutter.
     */
    setTextStyle(textStyle, opt_declutterGroup) {}
  }

  /**
   * @module ol/render/canvas/Instruction
   */

  /**
   * @enum {number}
   */
  const Instruction = {
    BEGIN_GEOMETRY: 0,
    BEGIN_PATH: 1,
    CIRCLE: 2,
    CLOSE_PATH: 3,
    CUSTOM: 4,
    DRAW_CHARS: 5,
    DRAW_IMAGE: 6,
    END_GEOMETRY: 7,
    FILL: 8,
    MOVE_TO_LINE_TO: 9,
    SET_FILL_STYLE: 10,
    SET_STROKE_STYLE: 11,
    STROKE: 12
  };


  /**
   * @type {Array<Instruction>}
   */
  const fillInstruction = [Instruction.FILL];


  /**
   * @type {Array<Instruction>}
   */
  const strokeInstruction = [Instruction.STROKE];


  /**
   * @type {Array<Instruction>}
   */
  const beginPathInstruction = [Instruction.BEGIN_PATH];


  /**
   * @type {Array<Instruction>}
   */
  const closePathInstruction = [Instruction.CLOSE_PATH];

  /**
   * @module ol/render/canvas/Builder
   */


  /**
   * @typedef {Object} SerializableInstructions
   * @property {Array<*>} instructions The rendering instructions.
   * @property {Array<*>} hitDetectionInstructions The rendering hit detection instructions.
   * @property {Array<number>} coordinates The array of all coordinates.
   * @property {!Object<string, import("../canvas.js").TextState>} [textStates] The text states (decluttering).
   * @property {!Object<string, import("../canvas.js").FillState>} [fillStates] The fill states (decluttering).
   * @property {!Object<string, import("../canvas.js").StrokeState>} [strokeStates] The stroke states (decluttering).
   */


  class CanvasBuilder extends VectorContext {
    /**
     * @param {number} tolerance Tolerance.
     * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     */
    constructor(tolerance, maxExtent, resolution, pixelRatio) {
      super();

      /**
       * @protected
       * @type {number}
       */
      this.tolerance = tolerance;

      /**
       * @protected
       * @const
       * @type {import("../../extent.js").Extent}
       */
      this.maxExtent = maxExtent;

      /**
       * @protected
       * @type {number}
       */
      this.pixelRatio = pixelRatio;

      /**
       * @protected
       * @type {number}
       */
      this.maxLineWidth = 0;

      /**
       * @protected
       * @const
       * @type {number}
       */
      this.resolution = resolution;

      /**
       * @private
       * @type {Array<*>}
       */
      this.beginGeometryInstruction1_ = null;

      /**
       * @private
       * @type {Array<*>}
       */
      this.beginGeometryInstruction2_ = null;

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.bufferedMaxExtent_ = null;

      /**
       * @protected
       * @type {Array<*>}
       */
      this.instructions = [];

      /**
       * @protected
       * @type {Array<number>}
       */
      this.coordinates = [];

      /**
       * @private
       * @type {import("../../coordinate.js").Coordinate}
       */
      this.tmpCoordinate_ = [];

      /**
       * @protected
       * @type {Array<*>}
       */
      this.hitDetectionInstructions = [];

      /**
       * @protected
       * @type {import("../canvas.js").FillStrokeState}
       */
      this.state = /** @type {import("../canvas.js").FillStrokeState} */ ({});

    }

    /**
     * @protected
     * @param {Array<number>} dashArray Dash array.
     * @return {Array<number>} Dash array with pixel ratio applied
     */
    applyPixelRatio(dashArray) {
      const pixelRatio = this.pixelRatio;
      return pixelRatio == 1 ? dashArray : dashArray.map(function(dash) {
        return dash * pixelRatio;
      });
    }

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {boolean} closed Last input coordinate equals first.
     * @param {boolean} skipFirst Skip first coordinate.
     * @protected
     * @return {number} My end.
     */
    appendFlatCoordinates(flatCoordinates, offset, end, stride, closed, skipFirst) {

      let myEnd = this.coordinates.length;
      const extent = this.getBufferedMaxExtent();
      if (skipFirst) {
        offset += stride;
      }
      let lastXCoord = flatCoordinates[offset];
      let lastYCoord = flatCoordinates[offset + 1];
      const nextCoord = this.tmpCoordinate_;
      let skipped = true;

      let i, lastRel, nextRel;
      for (i = offset + stride; i < end; i += stride) {
        nextCoord[0] = flatCoordinates[i];
        nextCoord[1] = flatCoordinates[i + 1];
        nextRel = coordinateRelationship(extent, nextCoord);
        if (nextRel !== lastRel) {
          if (skipped) {
            this.coordinates[myEnd++] = lastXCoord;
            this.coordinates[myEnd++] = lastYCoord;
          }
          this.coordinates[myEnd++] = nextCoord[0];
          this.coordinates[myEnd++] = nextCoord[1];
          skipped = false;
        } else if (nextRel === Relationship.INTERSECTING) {
          this.coordinates[myEnd++] = nextCoord[0];
          this.coordinates[myEnd++] = nextCoord[1];
          skipped = false;
        } else {
          skipped = true;
        }
        lastXCoord = nextCoord[0];
        lastYCoord = nextCoord[1];
        lastRel = nextRel;
      }

      // Last coordinate equals first or only one point to append:
      if ((closed && skipped) || i === offset + stride) {
        this.coordinates[myEnd++] = lastXCoord;
        this.coordinates[myEnd++] = lastYCoord;
      }
      return myEnd;
    }

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {Array<number>} builderEnds Builder ends.
     * @return {number} Offset.
     */
    drawCustomCoordinates_(flatCoordinates, offset, ends, stride, builderEnds) {
      for (let i = 0, ii = ends.length; i < ii; ++i) {
        const end = ends[i];
        const builderEnd = this.appendFlatCoordinates(flatCoordinates, offset, end, stride, false, false);
        builderEnds.push(builderEnd);
        offset = end;
      }
      return offset;
    }

    /**
     * @inheritDoc.
     */
    drawCustom(geometry, feature, renderer) {
      this.beginGeometry(feature);
      const type = geometry.getType();
      const stride = geometry.getStride();
      const builderBegin = this.coordinates.length;
      let flatCoordinates, builderEnd, builderEnds, builderEndss;
      let offset;
      if (type == GeometryType.MULTI_POLYGON) {
        geometry = /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry);
        flatCoordinates = geometry.getOrientedFlatCoordinates();
        builderEndss = [];
        const endss = geometry.getEndss();
        offset = 0;
        for (let i = 0, ii = endss.length; i < ii; ++i) {
          const myEnds = [];
          offset = this.drawCustomCoordinates_(flatCoordinates, offset, endss[i], stride, myEnds);
          builderEndss.push(myEnds);
        }
        this.instructions.push([Instruction.CUSTOM,
          builderBegin, builderEndss, geometry, renderer, inflateMultiCoordinatesArray]);
      } else if (type == GeometryType.POLYGON || type == GeometryType.MULTI_LINE_STRING) {
        builderEnds = [];
        flatCoordinates = (type == GeometryType.POLYGON) ?
          /** @type {import("../../geom/Polygon.js").default} */ (geometry).getOrientedFlatCoordinates() :
          geometry.getFlatCoordinates();
        offset = this.drawCustomCoordinates_(flatCoordinates, 0,
          /** @type {import("../../geom/Polygon.js").default|import("../../geom/MultiLineString.js").default} */ (geometry).getEnds(),
          stride, builderEnds);
        this.instructions.push([Instruction.CUSTOM,
          builderBegin, builderEnds, geometry, renderer, inflateCoordinatesArray]);
      } else if (type == GeometryType.LINE_STRING || type == GeometryType.MULTI_POINT) {
        flatCoordinates = geometry.getFlatCoordinates();
        builderEnd = this.appendFlatCoordinates(
          flatCoordinates, 0, flatCoordinates.length, stride, false, false);
        this.instructions.push([Instruction.CUSTOM,
          builderBegin, builderEnd, geometry, renderer, inflateCoordinates]);
      } else if (type == GeometryType.POINT) {
        flatCoordinates = geometry.getFlatCoordinates();
        this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);
        builderEnd = this.coordinates.length;
        this.instructions.push([Instruction.CUSTOM,
          builderBegin, builderEnd, geometry, renderer]);
      }
      this.endGeometry(feature);
    }

    /**
     * @protected
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     */
    beginGeometry(feature) {
      this.beginGeometryInstruction1_ = [Instruction.BEGIN_GEOMETRY, feature, 0];
      this.instructions.push(this.beginGeometryInstruction1_);
      this.beginGeometryInstruction2_ = [Instruction.BEGIN_GEOMETRY, feature, 0];
      this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);
    }

    /**
     * @return {SerializableInstructions} the serializable instructions.
     */
    finish() {
      return {
        instructions: this.instructions,
        hitDetectionInstructions: this.hitDetectionInstructions,
        coordinates: this.coordinates
      };
    }

    /**
     * Reverse the hit detection instructions.
     */
    reverseHitDetectionInstructions() {
      const hitDetectionInstructions = this.hitDetectionInstructions;
      // step 1 - reverse array
      hitDetectionInstructions.reverse();
      // step 2 - reverse instructions within geometry blocks
      let i;
      const n = hitDetectionInstructions.length;
      let instruction;
      let type;
      let begin = -1;
      for (i = 0; i < n; ++i) {
        instruction = hitDetectionInstructions[i];
        type = /** @type {CanvasInstruction} */ (instruction[0]);
        if (type == Instruction.END_GEOMETRY) {
          begin = i;
        } else if (type == Instruction.BEGIN_GEOMETRY) {
          instruction[2] = i;
          reverseSubArray(this.hitDetectionInstructions, begin, i);
          begin = -1;
        }
      }
    }

    /**
     * @inheritDoc
     */
    setFillStrokeStyle(fillStyle, strokeStyle) {
      const state = this.state;
      if (fillStyle) {
        const fillStyleColor = fillStyle.getColor();
        state.fillStyle = asColorLike(fillStyleColor ?
          fillStyleColor : defaultFillStyle);
      } else {
        state.fillStyle = undefined;
      }
      if (strokeStyle) {
        const strokeStyleColor = strokeStyle.getColor();
        state.strokeStyle = asColorLike(strokeStyleColor ?
          strokeStyleColor : defaultStrokeStyle);
        const strokeStyleLineCap = strokeStyle.getLineCap();
        state.lineCap = strokeStyleLineCap !== undefined ?
          strokeStyleLineCap : defaultLineCap;
        const strokeStyleLineDash = strokeStyle.getLineDash();
        state.lineDash = strokeStyleLineDash ?
          strokeStyleLineDash.slice() : defaultLineDash;
        const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
        state.lineDashOffset = strokeStyleLineDashOffset ?
          strokeStyleLineDashOffset : defaultLineDashOffset;
        const strokeStyleLineJoin = strokeStyle.getLineJoin();
        state.lineJoin = strokeStyleLineJoin !== undefined ?
          strokeStyleLineJoin : defaultLineJoin;
        const strokeStyleWidth = strokeStyle.getWidth();
        state.lineWidth = strokeStyleWidth !== undefined ?
          strokeStyleWidth : defaultLineWidth;
        const strokeStyleMiterLimit = strokeStyle.getMiterLimit();
        state.miterLimit = strokeStyleMiterLimit !== undefined ?
          strokeStyleMiterLimit : defaultMiterLimit;

        if (state.lineWidth > this.maxLineWidth) {
          this.maxLineWidth = state.lineWidth;
          // invalidate the buffered max extent cache
          this.bufferedMaxExtent_ = null;
        }
      } else {
        state.strokeStyle = undefined;
        state.lineCap = undefined;
        state.lineDash = null;
        state.lineDashOffset = undefined;
        state.lineJoin = undefined;
        state.lineWidth = undefined;
        state.miterLimit = undefined;
      }
    }

    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     * @return {Array<*>} Fill instruction.
     */
    createFill(state) {
      const fillStyle = state.fillStyle;
      /** @type {Array<*>} */
      const fillInstruction = [Instruction.SET_FILL_STYLE, fillStyle];
      if (typeof fillStyle !== 'string') {
        // Fill is a pattern or gradient - align it!
        fillInstruction.push(true);
      }
      return fillInstruction;
    }

    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     */
    applyStroke(state) {
      this.instructions.push(this.createStroke(state));
    }

    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     * @return {Array<*>} Stroke instruction.
     */
    createStroke(state) {
      return [
        Instruction.SET_STROKE_STYLE,
        state.strokeStyle, state.lineWidth * this.pixelRatio, state.lineCap,
        state.lineJoin, state.miterLimit,
        this.applyPixelRatio(state.lineDash), state.lineDashOffset * this.pixelRatio
      ];
    }

    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     * @param {function(this:CanvasBuilder, import("../canvas.js").FillStrokeState):Array<*>} createFill Create fill.
     */
    updateFillStyle(state, createFill) {
      const fillStyle = state.fillStyle;
      if (typeof fillStyle !== 'string' || state.currentFillStyle != fillStyle) {
        if (fillStyle !== undefined) {
          this.instructions.push(createFill.call(this, state));
        }
        state.currentFillStyle = fillStyle;
      }
    }

    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     * @param {function(this:CanvasBuilder, import("../canvas.js").FillStrokeState): void} applyStroke Apply stroke.
     */
    updateStrokeStyle(state, applyStroke) {
      const strokeStyle = state.strokeStyle;
      const lineCap = state.lineCap;
      const lineDash = state.lineDash;
      const lineDashOffset = state.lineDashOffset;
      const lineJoin = state.lineJoin;
      const lineWidth = state.lineWidth;
      const miterLimit = state.miterLimit;
      if (state.currentStrokeStyle != strokeStyle ||
          state.currentLineCap != lineCap ||
          (lineDash != state.currentLineDash && !equals$1(state.currentLineDash, lineDash)) ||
          state.currentLineDashOffset != lineDashOffset ||
          state.currentLineJoin != lineJoin ||
          state.currentLineWidth != lineWidth ||
          state.currentMiterLimit != miterLimit) {
        if (strokeStyle !== undefined) {
          applyStroke.call(this, state);
        }
        state.currentStrokeStyle = strokeStyle;
        state.currentLineCap = lineCap;
        state.currentLineDash = lineDash;
        state.currentLineDashOffset = lineDashOffset;
        state.currentLineJoin = lineJoin;
        state.currentLineWidth = lineWidth;
        state.currentMiterLimit = miterLimit;
      }
    }

    /**
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     */
    endGeometry(feature) {
      this.beginGeometryInstruction1_[2] = this.instructions.length;
      this.beginGeometryInstruction1_ = null;
      this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;
      this.beginGeometryInstruction2_ = null;
      const endGeometryInstruction = [Instruction.END_GEOMETRY, feature];
      this.instructions.push(endGeometryInstruction);
      this.hitDetectionInstructions.push(endGeometryInstruction);
    }

    /**
     * Get the buffered rendering extent.  Rendering will be clipped to the extent
     * provided to the constructor.  To account for symbolizers that may intersect
     * this extent, we calculate a buffered extent (e.g. based on stroke width).
     * @return {import("../../extent.js").Extent} The buffered rendering extent.
     * @protected
     */
    getBufferedMaxExtent() {
      if (!this.bufferedMaxExtent_) {
        this.bufferedMaxExtent_ = clone(this.maxExtent);
        if (this.maxLineWidth > 0) {
          const width = this.resolution * (this.maxLineWidth + 1) / 2;
          buffer(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);
        }
      }
      return this.bufferedMaxExtent_;
    }
  }

  /**
   * @module ol/render/canvas/ImageBuilder
   */

  class CanvasImageBuilder extends CanvasBuilder {
    /**
     * @param {number} tolerance Tolerance.
     * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     */
    constructor(tolerance, maxExtent, resolution, pixelRatio) {
      super(tolerance, maxExtent, resolution, pixelRatio);

      /**
       * @private
       * @type {import("../canvas.js").DeclutterGroup}
       */
      this.declutterGroup_ = null;

      /**
       * @private
       * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
       */
      this.hitDetectionImage_ = null;

      /**
       * @private
       * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
       */
      this.image_ = null;

      /**
       * @private
       * @type {number|undefined}
       */
      this.anchorX_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.anchorY_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.height_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.opacity_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.originX_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.originY_ = undefined;

      /**
       * @private
       * @type {boolean|undefined}
       */
      this.rotateWithView_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.rotation_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.scale_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.width_ = undefined;

    }

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @private
     * @return {number} My end.
     */
    drawCoordinates_(flatCoordinates, offset, end, stride) {
      return this.appendFlatCoordinates(flatCoordinates, offset, end, stride, false, false);
    }

    /**
     * @inheritDoc
     */
    drawPoint(pointGeometry, feature) {
      if (!this.image_) {
        return;
      }
      this.beginGeometry(feature);
      const flatCoordinates = pointGeometry.getFlatCoordinates();
      const stride = pointGeometry.getStride();
      const myBegin = this.coordinates.length;
      const myEnd = this.drawCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);
      this.instructions.push([
        Instruction.DRAW_IMAGE, myBegin, myEnd, this.image_,
        // Remaining arguments to DRAW_IMAGE are in alphabetical order
        this.anchorX_, this.anchorY_, this.declutterGroup_, this.height_, this.opacity_,
        this.originX_, this.originY_, this.rotateWithView_, this.rotation_,
        this.scale_ * this.pixelRatio, this.width_
      ]);
      this.hitDetectionInstructions.push([
        Instruction.DRAW_IMAGE, myBegin, myEnd, this.hitDetectionImage_,
        // Remaining arguments to DRAW_IMAGE are in alphabetical order
        this.anchorX_, this.anchorY_, this.declutterGroup_, this.height_, this.opacity_,
        this.originX_, this.originY_, this.rotateWithView_, this.rotation_,
        this.scale_, this.width_
      ]);
      this.endGeometry(feature);
    }

    /**
     * @inheritDoc
     */
    drawMultiPoint(multiPointGeometry, feature) {
      if (!this.image_) {
        return;
      }
      this.beginGeometry(feature);
      const flatCoordinates = multiPointGeometry.getFlatCoordinates();
      const stride = multiPointGeometry.getStride();
      const myBegin = this.coordinates.length;
      const myEnd = this.drawCoordinates_(
        flatCoordinates, 0, flatCoordinates.length, stride);
      this.instructions.push([
        Instruction.DRAW_IMAGE, myBegin, myEnd, this.image_,
        // Remaining arguments to DRAW_IMAGE are in alphabetical order
        this.anchorX_, this.anchorY_, this.declutterGroup_, this.height_, this.opacity_,
        this.originX_, this.originY_, this.rotateWithView_, this.rotation_,
        this.scale_ * this.pixelRatio, this.width_
      ]);
      this.hitDetectionInstructions.push([
        Instruction.DRAW_IMAGE, myBegin, myEnd, this.hitDetectionImage_,
        // Remaining arguments to DRAW_IMAGE are in alphabetical order
        this.anchorX_, this.anchorY_, this.declutterGroup_, this.height_, this.opacity_,
        this.originX_, this.originY_, this.rotateWithView_, this.rotation_,
        this.scale_, this.width_
      ]);
      this.endGeometry(feature);
    }

    /**
     * @inheritDoc
     */
    finish() {
      this.reverseHitDetectionInstructions();
      // FIXME this doesn't really protect us against further calls to draw*Geometry
      this.anchorX_ = undefined;
      this.anchorY_ = undefined;
      this.hitDetectionImage_ = null;
      this.image_ = null;
      this.height_ = undefined;
      this.scale_ = undefined;
      this.opacity_ = undefined;
      this.originX_ = undefined;
      this.originY_ = undefined;
      this.rotateWithView_ = undefined;
      this.rotation_ = undefined;
      this.width_ = undefined;
      return super.finish();
    }

    /**
     * @inheritDoc
     */
    setImageStyle(imageStyle, declutterGroup) {
      const anchor = imageStyle.getAnchor();
      const size = imageStyle.getSize();
      const hitDetectionImage = imageStyle.getHitDetectionImage(1);
      const image = imageStyle.getImage(1);
      const origin = imageStyle.getOrigin();
      this.anchorX_ = anchor[0];
      this.anchorY_ = anchor[1];
      this.declutterGroup_ = /** @type {import("../canvas.js").DeclutterGroup} */ (declutterGroup);
      this.hitDetectionImage_ = hitDetectionImage;
      this.image_ = image;
      this.height_ = size[1];
      this.opacity_ = imageStyle.getOpacity();
      this.originX_ = origin[0];
      this.originY_ = origin[1];
      this.rotateWithView_ = imageStyle.getRotateWithView();
      this.rotation_ = imageStyle.getRotation();
      this.scale_ = imageStyle.getScale();
      this.width_ = size[0];
    }
  }

  /**
   * @module ol/render/canvas/LineStringBuilder
   */

  class CanvasLineStringBuilder extends CanvasBuilder {
    /**
     * @param {number} tolerance Tolerance.
     * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     */
    constructor(tolerance, maxExtent, resolution, pixelRatio) {
      super(tolerance, maxExtent, resolution, pixelRatio);
    }

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @private
     * @return {number} end.
     */
    drawFlatCoordinates_(flatCoordinates, offset, end, stride) {
      const myBegin = this.coordinates.length;
      const myEnd = this.appendFlatCoordinates(
        flatCoordinates, offset, end, stride, false, false);
      const moveToLineToInstruction = [Instruction.MOVE_TO_LINE_TO, myBegin, myEnd];
      this.instructions.push(moveToLineToInstruction);
      this.hitDetectionInstructions.push(moveToLineToInstruction);
      return end;
    }

    /**
     * @inheritDoc
     */
    drawLineString(lineStringGeometry, feature) {
      const state = this.state;
      const strokeStyle = state.strokeStyle;
      const lineWidth = state.lineWidth;
      if (strokeStyle === undefined || lineWidth === undefined) {
        return;
      }
      this.updateStrokeStyle(state, this.applyStroke);
      this.beginGeometry(feature);
      this.hitDetectionInstructions.push([
        Instruction.SET_STROKE_STYLE,
        state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
        state.miterLimit, state.lineDash, state.lineDashOffset
      ], beginPathInstruction);
      const flatCoordinates = lineStringGeometry.getFlatCoordinates();
      const stride = lineStringGeometry.getStride();
      this.drawFlatCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);
      this.hitDetectionInstructions.push(strokeInstruction);
      this.endGeometry(feature);
    }

    /**
     * @inheritDoc
     */
    drawMultiLineString(multiLineStringGeometry, feature) {
      const state = this.state;
      const strokeStyle = state.strokeStyle;
      const lineWidth = state.lineWidth;
      if (strokeStyle === undefined || lineWidth === undefined) {
        return;
      }
      this.updateStrokeStyle(state, this.applyStroke);
      this.beginGeometry(feature);
      this.hitDetectionInstructions.push([
        Instruction.SET_STROKE_STYLE,
        state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
        state.miterLimit, state.lineDash, state.lineDashOffset
      ], beginPathInstruction);
      const ends = multiLineStringGeometry.getEnds();
      const flatCoordinates = multiLineStringGeometry.getFlatCoordinates();
      const stride = multiLineStringGeometry.getStride();
      let offset = 0;
      for (let i = 0, ii = ends.length; i < ii; ++i) {
        offset = this.drawFlatCoordinates_(flatCoordinates, offset, ends[i], stride);
      }
      this.hitDetectionInstructions.push(strokeInstruction);
      this.endGeometry(feature);
    }

    /**
     * @inheritDoc
     */
    finish() {
      const state = this.state;
      if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) {
        this.instructions.push(strokeInstruction);
      }
      this.reverseHitDetectionInstructions();
      this.state = null;
      return super.finish();
    }

    /**
     * @inheritDoc.
     */
    applyStroke(state) {
      if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) {
        this.instructions.push(strokeInstruction);
        state.lastStroke = this.coordinates.length;
      }
      state.lastStroke = 0;
      super.applyStroke(state);
      this.instructions.push(beginPathInstruction);
    }
  }

  /**
   * @module ol/render/canvas/PolygonBuilder
   */


  class CanvasPolygonBuilder extends CanvasBuilder {
    /**
     * @param {number} tolerance Tolerance.
     * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     */
    constructor(tolerance, maxExtent, resolution, pixelRatio) {
      super(tolerance, maxExtent, resolution, pixelRatio);
    }

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @private
     * @return {number} End.
     */
    drawFlatCoordinatess_(flatCoordinates, offset, ends, stride) {
      const state = this.state;
      const fill = state.fillStyle !== undefined;
      const stroke = state.strokeStyle != undefined;
      const numEnds = ends.length;
      this.instructions.push(beginPathInstruction);
      this.hitDetectionInstructions.push(beginPathInstruction);
      for (let i = 0; i < numEnds; ++i) {
        const end = ends[i];
        const myBegin = this.coordinates.length;
        const myEnd = this.appendFlatCoordinates(flatCoordinates, offset, end, stride, true, !stroke);
        const moveToLineToInstruction = [Instruction.MOVE_TO_LINE_TO, myBegin, myEnd];
        this.instructions.push(moveToLineToInstruction);
        this.hitDetectionInstructions.push(moveToLineToInstruction);
        if (stroke) {
          // Performance optimization: only call closePath() when we have a stroke.
          // Otherwise the ring is closed already (see appendFlatCoordinates above).
          this.instructions.push(closePathInstruction);
          this.hitDetectionInstructions.push(closePathInstruction);
        }
        offset = end;
      }
      if (fill) {
        this.instructions.push(fillInstruction);
        this.hitDetectionInstructions.push(fillInstruction);
      }
      if (stroke) {
        this.instructions.push(strokeInstruction);
        this.hitDetectionInstructions.push(strokeInstruction);
      }
      return offset;
    }

    /**
     * @inheritDoc
     */
    drawCircle(circleGeometry, feature) {
      const state = this.state;
      const fillStyle = state.fillStyle;
      const strokeStyle = state.strokeStyle;
      if (fillStyle === undefined && strokeStyle === undefined) {
        return;
      }
      this.setFillStrokeStyles_();
      this.beginGeometry(feature);
      if (state.fillStyle !== undefined) {
        this.hitDetectionInstructions.push([
          Instruction.SET_FILL_STYLE,
          defaultFillStyle
        ]);
      }
      if (state.strokeStyle !== undefined) {
        this.hitDetectionInstructions.push([
          Instruction.SET_STROKE_STYLE,
          state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
          state.miterLimit, state.lineDash, state.lineDashOffset
        ]);
      }
      const flatCoordinates = circleGeometry.getFlatCoordinates();
      const stride = circleGeometry.getStride();
      const myBegin = this.coordinates.length;
      this.appendFlatCoordinates(
        flatCoordinates, 0, flatCoordinates.length, stride, false, false);
      const circleInstruction = [Instruction.CIRCLE, myBegin];
      this.instructions.push(beginPathInstruction, circleInstruction);
      this.hitDetectionInstructions.push(beginPathInstruction, circleInstruction);
      this.hitDetectionInstructions.push(fillInstruction);
      if (state.fillStyle !== undefined) {
        this.instructions.push(fillInstruction);
      }
      if (state.strokeStyle !== undefined) {
        this.instructions.push(strokeInstruction);
        this.hitDetectionInstructions.push(strokeInstruction);
      }
      this.endGeometry(feature);
    }

    /**
     * @inheritDoc
     */
    drawPolygon(polygonGeometry, feature) {
      const state = this.state;
      const fillStyle = state.fillStyle;
      const strokeStyle = state.strokeStyle;
      if (fillStyle === undefined && strokeStyle === undefined) {
        return;
      }
      this.setFillStrokeStyles_();
      this.beginGeometry(feature);
      if (state.fillStyle !== undefined) {
        this.hitDetectionInstructions.push([
          Instruction.SET_FILL_STYLE,
          defaultFillStyle
        ]);
      }
      if (state.strokeStyle !== undefined) {
        this.hitDetectionInstructions.push([
          Instruction.SET_STROKE_STYLE,
          state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
          state.miterLimit, state.lineDash, state.lineDashOffset
        ]);
      }
      const ends = polygonGeometry.getEnds();
      const flatCoordinates = polygonGeometry.getOrientedFlatCoordinates();
      const stride = polygonGeometry.getStride();
      this.drawFlatCoordinatess_(flatCoordinates, 0, ends, stride);
      this.endGeometry(feature);
    }

    /**
     * @inheritDoc
     */
    drawMultiPolygon(multiPolygonGeometry, feature) {
      const state = this.state;
      const fillStyle = state.fillStyle;
      const strokeStyle = state.strokeStyle;
      if (fillStyle === undefined && strokeStyle === undefined) {
        return;
      }
      this.setFillStrokeStyles_();
      this.beginGeometry(feature);
      if (state.fillStyle !== undefined) {
        this.hitDetectionInstructions.push([
          Instruction.SET_FILL_STYLE,
          defaultFillStyle
        ]);
      }
      if (state.strokeStyle !== undefined) {
        this.hitDetectionInstructions.push([
          Instruction.SET_STROKE_STYLE,
          state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
          state.miterLimit, state.lineDash, state.lineDashOffset
        ]);
      }
      const endss = multiPolygonGeometry.getEndss();
      const flatCoordinates = multiPolygonGeometry.getOrientedFlatCoordinates();
      const stride = multiPolygonGeometry.getStride();
      let offset = 0;
      for (let i = 0, ii = endss.length; i < ii; ++i) {
        offset = this.drawFlatCoordinatess_(flatCoordinates, offset, endss[i], stride);
      }
      this.endGeometry(feature);
    }

    /**
     * @inheritDoc
     */
    finish() {
      this.reverseHitDetectionInstructions();
      this.state = null;
      // We want to preserve topology when drawing polygons.  Polygons are
      // simplified using quantization and point elimination. However, we might
      // have received a mix of quantized and non-quantized geometries, so ensure
      // that all are quantized by quantizing all coordinates in the batch.
      const tolerance = this.tolerance;
      if (tolerance !== 0) {
        const coordinates = this.coordinates;
        for (let i = 0, ii = coordinates.length; i < ii; ++i) {
          coordinates[i] = snap(coordinates[i], tolerance);
        }
      }
      return super.finish();
    }

    /**
     * @private
     */
    setFillStrokeStyles_() {
      const state = this.state;
      const fillStyle = state.fillStyle;
      if (fillStyle !== undefined) {
        this.updateFillStyle(state, this.createFill);
      }
      if (state.strokeStyle !== undefined) {
        this.updateStrokeStyle(state, this.applyStroke);
      }
    }
  }

  /**
   * @module ol/geom/flat/straightchunk
   */


  /**
   * @param {number} maxAngle Maximum acceptable angle delta between segments.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {Array<number>} Start and end of the first suitable chunk of the
   * given `flatCoordinates`.
   */
  function matchingChunk(maxAngle, flatCoordinates, offset, end, stride) {
    let chunkStart = offset;
    let chunkEnd = offset;
    let chunkM = 0;
    let m = 0;
    let start = offset;
    let acos, i, m12, m23, x1, y1, x12, y12, x23, y23;
    for (i = offset; i < end; i += stride) {
      const x2 = flatCoordinates[i];
      const y2 = flatCoordinates[i + 1];
      if (x1 !== undefined) {
        x23 = x2 - x1;
        y23 = y2 - y1;
        m23 = Math.sqrt(x23 * x23 + y23 * y23);
        if (x12 !== undefined) {
          m += m12;
          acos = Math.acos((x12 * x23 + y12 * y23) / (m12 * m23));
          if (acos > maxAngle) {
            if (m > chunkM) {
              chunkM = m;
              chunkStart = start;
              chunkEnd = i;
            }
            m = 0;
            start = i - stride;
          }
        }
        m12 = m23;
        x12 = x23;
        y12 = y23;
      }
      x1 = x2;
      y1 = y2;
    }
    m += m23;
    return m > chunkM ? [start, i] : [chunkStart, chunkEnd];
  }

  /**
   * @module ol/style/TextPlacement
   */

  /**
   * Text placement. One of `'point'`, `'line'`. Default is `'point'`. Note that
   * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},
   * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or
   * {@link module:ol/geom/MultiPolygon~MultiPolygon}.
   * @enum {string}
   */
  var TextPlacement = {
    POINT: 'point',
    LINE: 'line'
  };

  /**
   * @module ol/render/canvas/TextBuilder
   */
  /**
   * @const
   * @enum {number}
   */
  const TEXT_ALIGN = {};
  TEXT_ALIGN['left'] = 0;
  TEXT_ALIGN['end'] = 0;
  TEXT_ALIGN['center'] = 0.5;
  TEXT_ALIGN['right'] = 1;
  TEXT_ALIGN['start'] = 1;
  TEXT_ALIGN['top'] = 0;
  TEXT_ALIGN['middle'] = 0.5;
  TEXT_ALIGN['hanging'] = 0.2;
  TEXT_ALIGN['alphabetic'] = 0.8;
  TEXT_ALIGN['ideographic'] = 0.8;
  TEXT_ALIGN['bottom'] = 1;


  class CanvasTextBuilder extends CanvasBuilder {
    /**
     * @param {number} tolerance Tolerance.
     * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     */
    constructor(tolerance, maxExtent, resolution, pixelRatio) {
      super(tolerance, maxExtent, resolution, pixelRatio);

      /**
       * @private
       * @type {import("../canvas.js").DeclutterGroup}
       */
      this.declutterGroup_;

      /**
       * @private
       * @type {Array<HTMLCanvasElement>}
       */
      this.labels_ = null;

      /**
       * @private
       * @type {string}
       */
      this.text_ = '';

      /**
       * @private
       * @type {number}
       */
      this.textOffsetX_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.textOffsetY_ = 0;

      /**
       * @private
       * @type {boolean|undefined}
       */
      this.textRotateWithView_ = undefined;

      /**
       * @private
       * @type {number}
       */
      this.textRotation_ = 0;

      /**
       * @private
       * @type {?import("../canvas.js").FillState}
       */
      this.textFillState_ = null;

      /**
       * @type {!Object<string, import("../canvas.js").FillState>}
       */
      this.fillStates = {};

      /**
       * @private
       * @type {?import("../canvas.js").StrokeState}
       */
      this.textStrokeState_ = null;

      /**
       * @type {!Object<string, import("../canvas.js").StrokeState>}
       */
      this.strokeStates = {};

      /**
       * @private
       * @type {import("../canvas.js").TextState}
       */
      this.textState_ = /** @type {import("../canvas.js").TextState} */ ({});

      /**
       * @type {!Object<string, import("../canvas.js").TextState>}
       */
      this.textStates = {};

      /**
       * @private
       * @type {string}
       */
      this.textKey_ = '';

      /**
       * @private
       * @type {string}
       */
      this.fillKey_ = '';

      /**
       * @private
       * @type {string}
       */
      this.strokeKey_ = '';

      labelCache.prune();
    }

    /**
     * @inheritDoc
     */
    finish() {
      const instructions = super.finish();
      instructions.textStates = this.textStates;
      instructions.fillStates = this.fillStates;
      instructions.strokeStates = this.strokeStates;
      return instructions;
    }

    /**
     * @inheritDoc
     */
    drawText(geometry, feature) {
      const fillState = this.textFillState_;
      const strokeState = this.textStrokeState_;
      const textState = this.textState_;
      if (this.text_ === '' || !textState || (!fillState && !strokeState)) {
        return;
      }

      let begin = this.coordinates.length;

      const geometryType = geometry.getType();
      let flatCoordinates = null;
      let end = 2;
      let stride = 2;
      let i, ii;

      if (textState.placement === TextPlacement.LINE) {
        if (!intersects(this.getBufferedMaxExtent(), geometry.getExtent())) {
          return;
        }
        let ends;
        flatCoordinates = geometry.getFlatCoordinates();
        stride = geometry.getStride();
        if (geometryType == GeometryType.LINE_STRING) {
          ends = [flatCoordinates.length];
        } else if (geometryType == GeometryType.MULTI_LINE_STRING) {
          ends = geometry.getEnds();
        } else if (geometryType == GeometryType.POLYGON) {
          ends = geometry.getEnds().slice(0, 1);
        } else if (geometryType == GeometryType.MULTI_POLYGON) {
          const endss = geometry.getEndss();
          ends = [];
          for (i = 0, ii = endss.length; i < ii; ++i) {
            ends.push(endss[i][0]);
          }
        }
        this.beginGeometry(feature);
        const textAlign = textState.textAlign;
        let flatOffset = 0;
        let flatEnd;
        for (let o = 0, oo = ends.length; o < oo; ++o) {
          if (textAlign == undefined) {
            const range = matchingChunk(textState.maxAngle, flatCoordinates, flatOffset, ends[o], stride);
            flatOffset = range[0];
            flatEnd = range[1];
          } else {
            flatEnd = ends[o];
          }
          for (i = flatOffset; i < flatEnd; i += stride) {
            this.coordinates.push(flatCoordinates[i], flatCoordinates[i + 1]);
          }
          end = this.coordinates.length;
          flatOffset = ends[o];
          this.drawChars_(begin, end, this.declutterGroup_);
          begin = end;
        }
        this.endGeometry(feature);

      } else {

        let geometryWidths = null;
        if (!textState.overflow) {
          geometryWidths = [];
        }
        switch (geometryType) {
          case GeometryType.POINT:
          case GeometryType.MULTI_POINT:
            flatCoordinates = geometry.getFlatCoordinates();
            end = flatCoordinates.length;
            break;
          case GeometryType.LINE_STRING:
            flatCoordinates = /** @type {import("../../geom/LineString.js").default} */ (geometry).getFlatMidpoint();
            break;
          case GeometryType.CIRCLE:
            flatCoordinates = /** @type {import("../../geom/Circle.js").default} */ (geometry).getCenter();
            break;
          case GeometryType.MULTI_LINE_STRING:
            flatCoordinates = /** @type {import("../../geom/MultiLineString.js").default} */ (geometry).getFlatMidpoints();
            end = flatCoordinates.length;
            break;
          case GeometryType.POLYGON:
            flatCoordinates = /** @type {import("../../geom/Polygon.js").default} */ (geometry).getFlatInteriorPoint();
            if (!textState.overflow) {
              geometryWidths.push(flatCoordinates[2] / this.resolution);
            }
            stride = 3;
            break;
          case GeometryType.MULTI_POLYGON:
            const interiorPoints = /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry).getFlatInteriorPoints();
            flatCoordinates = [];
            for (i = 0, ii = interiorPoints.length; i < ii; i += 3) {
              if (!textState.overflow) {
                geometryWidths.push(interiorPoints[i + 2] / this.resolution);
              }
              flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);
            }
            end = flatCoordinates.length;
            if (end == 0) {
              return;
            }
            break;
        }
        end = this.appendFlatCoordinates(flatCoordinates, 0, end, stride, false, false);

        this.saveTextStates_();

        if (textState.backgroundFill || textState.backgroundStroke) {
          this.setFillStrokeStyle(textState.backgroundFill, textState.backgroundStroke);
          if (textState.backgroundFill) {
            this.updateFillStyle(this.state, this.createFill);
            this.hitDetectionInstructions.push(this.createFill(this.state));
          }
          if (textState.backgroundStroke) {
            this.updateStrokeStyle(this.state, this.applyStroke);
            this.hitDetectionInstructions.push(this.createStroke(this.state));
          }
        }

        this.beginGeometry(feature);

        // The image is unknown at this stage so we pass null; it will be computed at render time.
        // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at
        // render time.
        const pixelRatio = this.pixelRatio;
        this.instructions.push([Instruction.DRAW_IMAGE, begin, end,
          null, NaN, NaN, this.declutterGroup_, NaN, 1, 0, 0,
          this.textRotateWithView_, this.textRotation_, 1, NaN,
          textState.padding == defaultPadding ?
            defaultPadding : textState.padding.map(function(p) {
              return p * pixelRatio;
            }),
          !!textState.backgroundFill, !!textState.backgroundStroke,
          this.text_, this.textKey_, this.strokeKey_, this.fillKey_,
          this.textOffsetX_, this.textOffsetY_, geometryWidths
        ]);
        this.hitDetectionInstructions.push([Instruction.DRAW_IMAGE, begin, end,
          null, NaN, NaN, this.declutterGroup_, NaN, 1, 0, 0,
          this.textRotateWithView_, this.textRotation_, 1 / this.pixelRatio, NaN,
          textState.padding,
          !!textState.backgroundFill, !!textState.backgroundStroke,
          this.text_, this.textKey_, this.strokeKey_, this.fillKey_,
          this.textOffsetX_, this.textOffsetY_, geometryWidths
        ]);

        this.endGeometry(feature);
      }
    }

    /**
     * @private
     */
    saveTextStates_() {
      const strokeState = this.textStrokeState_;
      const textState = this.textState_;
      const fillState = this.textFillState_;

      const strokeKey = this.strokeKey_;
      if (strokeState) {
        if (!(strokeKey in this.strokeStates)) {
          this.strokeStates[strokeKey] = {
            strokeStyle: strokeState.strokeStyle,
            lineCap: strokeState.lineCap,
            lineDashOffset: strokeState.lineDashOffset,
            lineWidth: strokeState.lineWidth,
            lineJoin: strokeState.lineJoin,
            miterLimit: strokeState.miterLimit,
            lineDash: strokeState.lineDash
          };
        }
      }
      const textKey = this.textKey_;
      if (!(textKey in this.textStates)) {
        this.textStates[textKey] = {
          font: textState.font,
          textAlign: textState.textAlign || defaultTextAlign,
          textBaseline: textState.textBaseline || defaultTextBaseline,
          scale: textState.scale
        };
      }
      const fillKey = this.fillKey_;
      if (fillState) {
        if (!(fillKey in this.fillStates)) {
          this.fillStates[fillKey] = {
            fillStyle: fillState.fillStyle
          };
        }
      }
    }

    /**
     * @private
     * @param {number} begin Begin.
     * @param {number} end End.
     * @param {import("../canvas.js").DeclutterGroup} declutterGroup Declutter group.
     */
    drawChars_(begin, end, declutterGroup) {
      const strokeState = this.textStrokeState_;
      const textState = this.textState_;

      const strokeKey = this.strokeKey_;
      const textKey = this.textKey_;
      const fillKey = this.fillKey_;
      this.saveTextStates_();


      const pixelRatio = this.pixelRatio;
      const baseline = TEXT_ALIGN[textState.textBaseline];

      const offsetY = this.textOffsetY_ * pixelRatio;
      const text = this.text_;
      const textScale = textState.scale;
      const strokeWidth = strokeState ? strokeState.lineWidth * textScale / 2 : 0;

      this.instructions.push([Instruction.DRAW_CHARS,
        begin, end, baseline, declutterGroup,
        textState.overflow, fillKey, textState.maxAngle,
        pixelRatio,
        offsetY, strokeKey, strokeWidth * pixelRatio, text, textKey, 1
      ]);
      this.hitDetectionInstructions.push([Instruction.DRAW_CHARS,
        begin, end, baseline, declutterGroup,
        textState.overflow, fillKey, textState.maxAngle,
        1,
        offsetY, strokeKey, strokeWidth, text, textKey, 1 / pixelRatio
      ]);
    }

    /**
     * @inheritDoc
     */
    setTextStyle(textStyle, declutterGroup) {
      let textState, fillState, strokeState;
      if (!textStyle) {
        this.text_ = '';
      } else {
        this.declutterGroup_ = /** @type {import("../canvas.js").DeclutterGroup} */ (declutterGroup);

        const textFillStyle = textStyle.getFill();
        if (!textFillStyle) {
          fillState = this.textFillState_ = null;
        } else {
          fillState = this.textFillState_;
          if (!fillState) {
            fillState = this.textFillState_ = /** @type {import("../canvas.js").FillState} */ ({});
          }
          fillState.fillStyle = asColorLike(
            textFillStyle.getColor() || defaultFillStyle);
        }

        const textStrokeStyle = textStyle.getStroke();
        if (!textStrokeStyle) {
          strokeState = this.textStrokeState_ = null;
        } else {
          strokeState = this.textStrokeState_;
          if (!strokeState) {
            strokeState = this.textStrokeState_ = /** @type {import("../canvas.js").StrokeState} */ ({});
          }
          const lineDash = textStrokeStyle.getLineDash();
          const lineDashOffset = textStrokeStyle.getLineDashOffset();
          const lineWidth = textStrokeStyle.getWidth();
          const miterLimit = textStrokeStyle.getMiterLimit();
          strokeState.lineCap = textStrokeStyle.getLineCap() || defaultLineCap;
          strokeState.lineDash = lineDash ? lineDash.slice() : defaultLineDash;
          strokeState.lineDashOffset =
              lineDashOffset === undefined ? defaultLineDashOffset : lineDashOffset;
          strokeState.lineJoin = textStrokeStyle.getLineJoin() || defaultLineJoin;
          strokeState.lineWidth =
              lineWidth === undefined ? defaultLineWidth : lineWidth;
          strokeState.miterLimit =
              miterLimit === undefined ? defaultMiterLimit : miterLimit;
          strokeState.strokeStyle = asColorLike(
            textStrokeStyle.getColor() || defaultStrokeStyle);
        }

        textState = this.textState_;
        const font = textStyle.getFont() || defaultFont;
        checkFont(font);
        const textScale = textStyle.getScale();
        textState.overflow = textStyle.getOverflow();
        textState.font = font;
        textState.maxAngle = textStyle.getMaxAngle();
        textState.placement = textStyle.getPlacement();
        textState.textAlign = textStyle.getTextAlign();
        textState.textBaseline = textStyle.getTextBaseline() || defaultTextBaseline;
        textState.backgroundFill = textStyle.getBackgroundFill();
        textState.backgroundStroke = textStyle.getBackgroundStroke();
        textState.padding = textStyle.getPadding() || defaultPadding;
        textState.scale = textScale === undefined ? 1 : textScale;

        const textOffsetX = textStyle.getOffsetX();
        const textOffsetY = textStyle.getOffsetY();
        const textRotateWithView = textStyle.getRotateWithView();
        const textRotation = textStyle.getRotation();
        this.text_ = textStyle.getText() || '';
        this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;
        this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;
        this.textRotateWithView_ = textRotateWithView === undefined ? false : textRotateWithView;
        this.textRotation_ = textRotation === undefined ? 0 : textRotation;

        this.strokeKey_ = strokeState ?
          (typeof strokeState.strokeStyle == 'string' ? strokeState.strokeStyle : getUid(strokeState.strokeStyle)) +
          strokeState.lineCap + strokeState.lineDashOffset + '|' + strokeState.lineWidth +
          strokeState.lineJoin + strokeState.miterLimit + '[' + strokeState.lineDash.join() + ']' :
          '';
        this.textKey_ = textState.font + textState.scale + (textState.textAlign || '?');
        this.fillKey_ = fillState ?
          (typeof fillState.fillStyle == 'string' ? fillState.fillStyle : ('|' + getUid(fillState.fillStyle))) :
          '';
      }
    }
  }

  /**
   * @module ol/render/canvas/BuilderGroup
   */


  /**
   * @type {Object<import("./BuilderType").default, typeof Builder>}
   */
  const BATCH_CONSTRUCTORS = {
    'Circle': CanvasPolygonBuilder,
    'Default': CanvasBuilder,
    'Image': CanvasImageBuilder,
    'LineString': CanvasLineStringBuilder,
    'Polygon': CanvasPolygonBuilder,
    'Text': CanvasTextBuilder
  };


  class BuilderGroup {
    /**
     * @param {number} tolerance Tolerance.
     * @param {import("../../extent.js").Extent} maxExtent Max extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {boolean} declutter Decluttering enabled.
     */
    constructor(tolerance, maxExtent, resolution, pixelRatio, declutter) {

      /**
       * @type {boolean}
       * @private
       */
      this.declutter_ = declutter;

      /**
       * @type {import("../canvas.js").DeclutterGroup}
       * @private
       */
      this.declutterGroup_ = null;

      /**
       * @private
       * @type {number}
       */
      this.tolerance_ = tolerance;

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.maxExtent_ = maxExtent;

      /**
       * @private
       * @type {number}
       */
      this.pixelRatio_ = pixelRatio;

      /**
       * @private
       * @type {number}
       */
      this.resolution_ = resolution;

      /**
       * @private
       * @type {!Object<string, !Object<import("./BuilderType").default, Builder>>}
       */
      this.buildersByZIndex_ = {};
    }

    /**
     * @param {boolean} group Group with previous builder.
     * @return {Array<*>} The resulting instruction group.
     */
    addDeclutter(group) {
      let declutter = null;
      if (this.declutter_) {
        if (group) {
          declutter = this.declutterGroup_;
          /** @type {number} */ (declutter[4])++;
        } else {
          declutter = this.declutterGroup_ = createEmpty();
          declutter.push(1);
        }
      }
      return declutter;
    }

    /**
     * @return {!Object<string, !Object<import("./BuilderType").default, import("./Builder.js").SerializableInstructions>>} The serializable instructions
     */
    finish() {
      const builderInstructions = {};
      for (const zKey in this.buildersByZIndex_) {
        builderInstructions[zKey] = builderInstructions[zKey] || {};
        const builders = this.buildersByZIndex_[zKey];
        for (const builderKey in builders) {
          const builderInstruction = builders[builderKey].finish();
          builderInstructions[zKey][builderKey] = builderInstruction;
        }
      }
      return builderInstructions;
    }

    /**
     * @param {number|undefined} zIndex Z index.
     * @param {import("./BuilderType.js").default} builderType Replay type.
     * @return {import("../VectorContext.js").default} Replay.
     */
    getBuilder(zIndex, builderType) {
      const zIndexKey = zIndex !== undefined ? zIndex.toString() : '0';
      let replays = this.buildersByZIndex_[zIndexKey];
      if (replays === undefined) {
        replays = {};
        this.buildersByZIndex_[zIndexKey] = replays;
      }
      let replay = replays[builderType];
      if (replay === undefined) {
        const Constructor = BATCH_CONSTRUCTORS[builderType];
        replay = new Constructor(this.tolerance_, this.maxExtent_,
          this.resolution_, this.pixelRatio_);
        replays[builderType] = replay;
      }
      return replay;
    }
  }

  /**
   * @module ol/render/canvas/BuilderType
   */

  /**
   * @enum {string}
   */
  var ReplayType = {
    CIRCLE: 'Circle',
    DEFAULT: 'Default',
    IMAGE: 'Image',
    LINE_STRING: 'LineString',
    POLYGON: 'Polygon',
    TEXT: 'Text'
  };

  /**
   * @module ol/geom/flat/length
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {number} Length.
   */
  function lineStringLength(flatCoordinates, offset, end, stride) {
    let x1 = flatCoordinates[offset];
    let y1 = flatCoordinates[offset + 1];
    let length = 0;
    for (let i = offset + stride; i < end; i += stride) {
      const x2 = flatCoordinates[i];
      const y2 = flatCoordinates[i + 1];
      length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
      x1 = x2;
      y1 = y2;
    }
    return length;
  }

  /**
   * @module ol/geom/flat/textpath
   */


  /**
   * @param {Array<number>} flatCoordinates Path to put text on.
   * @param {number} offset Start offset of the `flatCoordinates`.
   * @param {number} end End offset of the `flatCoordinates`.
   * @param {number} stride Stride.
   * @param {string} text Text to place on the path.
   * @param {number} startM m along the path where the text starts.
   * @param {number} maxAngle Max angle between adjacent chars in radians.
   * @param {number} scale The product of the text scale and the device pixel ratio.
   * @param {function(string, string, Object<string, number>):number} measureAndCacheTextWidth Measure and cache text width.
   * @param {string} font The font.
   * @param {Object<string, number>} cache A cache of measured widths.
   * @return {Array<Array<*>>} The result array (or null if `maxAngle` was
   * exceeded). Entries of the array are x, y, anchorX, angle, chunk.
   */
  function drawTextOnPath(
    flatCoordinates, offset, end, stride, text, startM, maxAngle, scale, measureAndCacheTextWidth, font, cache) {
    const result = [];

    // Keep text upright
    const reverse = flatCoordinates[offset] > flatCoordinates[end - stride];

    const numChars = text.length;

    let x1 = flatCoordinates[offset];
    let y1 = flatCoordinates[offset + 1];
    offset += stride;
    let x2 = flatCoordinates[offset];
    let y2 = flatCoordinates[offset + 1];
    let segmentM = 0;
    let segmentLength = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
    let angleChanged = false;

    let index, previousAngle;
    for (let i = 0; i < numChars; ++i) {
      index = reverse ? numChars - i - 1 : i;
      const char = text[index];
      const charLength = scale * measureAndCacheTextWidth(font, char, cache);
      const charM = startM + charLength / 2;
      while (offset < end - stride && segmentM + segmentLength < charM) {
        x1 = x2;
        y1 = y2;
        offset += stride;
        x2 = flatCoordinates[offset];
        y2 = flatCoordinates[offset + 1];
        segmentM += segmentLength;
        segmentLength = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
      }
      const segmentPos = charM - segmentM;
      let angle = Math.atan2(y2 - y1, x2 - x1);
      if (reverse) {
        angle += angle > 0 ? -Math.PI : Math.PI;
      }
      if (previousAngle !== undefined) {
        let delta = angle - previousAngle;
        angleChanged = angleChanged || delta !== 0;
        delta += (delta > Math.PI) ? -2 * Math.PI : (delta < -Math.PI) ? 2 * Math.PI : 0;
        if (Math.abs(delta) > maxAngle) {
          return null;
        }
      }
      previousAngle = angle;
      const interpolate = segmentPos / segmentLength;
      const x = lerp(x1, x2, interpolate);
      const y = lerp(y1, y2, interpolate);
      result[index] = [x, y, charLength / 2, angle, char];
      startM += charLength;
    }
    return angleChanged ? result : [[result[0][0], result[0][1], result[0][2], result[0][3], text]];
  }

  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var quickselect = createCommonjsModule(function (module, exports) {
  (function (global, factory) {
  	 module.exports = factory() ;
  }(commonjsGlobal, (function () {
  function quickselect(arr, k, left, right, compare) {
      quickselectStep(arr, k, left || 0, right || (arr.length - 1), compare || defaultCompare);
  }

  function quickselectStep(arr, k, left, right, compare) {

      while (right > left) {
          if (right - left > 600) {
              var n = right - left + 1;
              var m = k - left + 1;
              var z = Math.log(n);
              var s = 0.5 * Math.exp(2 * z / 3);
              var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
              var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
              var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
              quickselectStep(arr, k, newLeft, newRight, compare);
          }

          var t = arr[k];
          var i = left;
          var j = right;

          swap(arr, left, k);
          if (compare(arr[right], t) > 0) swap(arr, left, right);

          while (i < j) {
              swap(arr, i, j);
              i++;
              j--;
              while (compare(arr[i], t) < 0) i++;
              while (compare(arr[j], t) > 0) j--;
          }

          if (compare(arr[left], t) === 0) swap(arr, left, j);
          else {
              j++;
              swap(arr, j, right);
          }

          if (j <= k) left = j + 1;
          if (k <= j) right = j - 1;
      }
  }

  function swap(arr, i, j) {
      var tmp = arr[i];
      arr[i] = arr[j];
      arr[j] = tmp;
  }

  function defaultCompare(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
  }

  return quickselect;

  })));
  });

  var quickselect$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': quickselect,
    __moduleExports: quickselect
  });

  var quickselect$2 = ( quickselect$1 && quickselect ) || quickselect$1;

  var rbush_1 = rbush;
  var default_1 = rbush;



  function rbush(maxEntries, format) {
      if (!(this instanceof rbush)) return new rbush(maxEntries, format);

      // max entries in a node is 9 by default; min node fill is 40% for best performance
      this._maxEntries = Math.max(4, maxEntries || 9);
      this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));

      if (format) {
          this._initFormat(format);
      }

      this.clear();
  }

  rbush.prototype = {

      all: function () {
          return this._all(this.data, []);
      },

      search: function (bbox) {

          var node = this.data,
              result = [],
              toBBox = this.toBBox;

          if (!intersects$1(bbox, node)) return result;

          var nodesToSearch = [],
              i, len, child, childBBox;

          while (node) {
              for (i = 0, len = node.children.length; i < len; i++) {

                  child = node.children[i];
                  childBBox = node.leaf ? toBBox(child) : child;

                  if (intersects$1(bbox, childBBox)) {
                      if (node.leaf) result.push(child);
                      else if (contains(bbox, childBBox)) this._all(child, result);
                      else nodesToSearch.push(child);
                  }
              }
              node = nodesToSearch.pop();
          }

          return result;
      },

      collides: function (bbox) {

          var node = this.data,
              toBBox = this.toBBox;

          if (!intersects$1(bbox, node)) return false;

          var nodesToSearch = [],
              i, len, child, childBBox;

          while (node) {
              for (i = 0, len = node.children.length; i < len; i++) {

                  child = node.children[i];
                  childBBox = node.leaf ? toBBox(child) : child;

                  if (intersects$1(bbox, childBBox)) {
                      if (node.leaf || contains(bbox, childBBox)) return true;
                      nodesToSearch.push(child);
                  }
              }
              node = nodesToSearch.pop();
          }

          return false;
      },

      load: function (data) {
          if (!(data && data.length)) return this;

          if (data.length < this._minEntries) {
              for (var i = 0, len = data.length; i < len; i++) {
                  this.insert(data[i]);
              }
              return this;
          }

          // recursively build the tree with the given data from scratch using OMT algorithm
          var node = this._build(data.slice(), 0, data.length - 1, 0);

          if (!this.data.children.length) {
              // save as is if tree is empty
              this.data = node;

          } else if (this.data.height === node.height) {
              // split root if trees have the same height
              this._splitRoot(this.data, node);

          } else {
              if (this.data.height < node.height) {
                  // swap trees if inserted one is bigger
                  var tmpNode = this.data;
                  this.data = node;
                  node = tmpNode;
              }

              // insert the small tree into the large tree at appropriate level
              this._insert(node, this.data.height - node.height - 1, true);
          }

          return this;
      },

      insert: function (item) {
          if (item) this._insert(item, this.data.height - 1);
          return this;
      },

      clear: function () {
          this.data = createNode([]);
          return this;
      },

      remove: function (item, equalsFn) {
          if (!item) return this;

          var node = this.data,
              bbox = this.toBBox(item),
              path = [],
              indexes = [],
              i, parent, index, goingUp;

          // depth-first iterative tree traversal
          while (node || path.length) {

              if (!node) { // go up
                  node = path.pop();
                  parent = path[path.length - 1];
                  i = indexes.pop();
                  goingUp = true;
              }

              if (node.leaf) { // check current node
                  index = findItem(item, node.children, equalsFn);

                  if (index !== -1) {
                      // item found, remove the item and condense tree upwards
                      node.children.splice(index, 1);
                      path.push(node);
                      this._condense(path);
                      return this;
                  }
              }

              if (!goingUp && !node.leaf && contains(node, bbox)) { // go down
                  path.push(node);
                  indexes.push(i);
                  i = 0;
                  parent = node;
                  node = node.children[0];

              } else if (parent) { // go right
                  i++;
                  node = parent.children[i];
                  goingUp = false;

              } else node = null; // nothing found
          }

          return this;
      },

      toBBox: function (item) { return item; },

      compareMinX: compareNodeMinX,
      compareMinY: compareNodeMinY,

      toJSON: function () { return this.data; },

      fromJSON: function (data) {
          this.data = data;
          return this;
      },

      _all: function (node, result) {
          var nodesToSearch = [];
          while (node) {
              if (node.leaf) result.push.apply(result, node.children);
              else nodesToSearch.push.apply(nodesToSearch, node.children);

              node = nodesToSearch.pop();
          }
          return result;
      },

      _build: function (items, left, right, height) {

          var N = right - left + 1,
              M = this._maxEntries,
              node;

          if (N <= M) {
              // reached leaf level; return leaf
              node = createNode(items.slice(left, right + 1));
              calcBBox(node, this.toBBox);
              return node;
          }

          if (!height) {
              // target height of the bulk-loaded tree
              height = Math.ceil(Math.log(N) / Math.log(M));

              // target number of root entries to maximize storage utilization
              M = Math.ceil(N / Math.pow(M, height - 1));
          }

          node = createNode([]);
          node.leaf = false;
          node.height = height;

          // split the items into M mostly square tiles

          var N2 = Math.ceil(N / M),
              N1 = N2 * Math.ceil(Math.sqrt(M)),
              i, j, right2, right3;

          multiSelect(items, left, right, N1, this.compareMinX);

          for (i = left; i <= right; i += N1) {

              right2 = Math.min(i + N1 - 1, right);

              multiSelect(items, i, right2, N2, this.compareMinY);

              for (j = i; j <= right2; j += N2) {

                  right3 = Math.min(j + N2 - 1, right2);

                  // pack each entry recursively
                  node.children.push(this._build(items, j, right3, height - 1));
              }
          }

          calcBBox(node, this.toBBox);

          return node;
      },

      _chooseSubtree: function (bbox, node, level, path) {

          var i, len, child, targetNode, area, enlargement, minArea, minEnlargement;

          while (true) {
              path.push(node);

              if (node.leaf || path.length - 1 === level) break;

              minArea = minEnlargement = Infinity;

              for (i = 0, len = node.children.length; i < len; i++) {
                  child = node.children[i];
                  area = bboxArea(child);
                  enlargement = enlargedArea(bbox, child) - area;

                  // choose entry with the least area enlargement
                  if (enlargement < minEnlargement) {
                      minEnlargement = enlargement;
                      minArea = area < minArea ? area : minArea;
                      targetNode = child;

                  } else if (enlargement === minEnlargement) {
                      // otherwise choose one with the smallest area
                      if (area < minArea) {
                          minArea = area;
                          targetNode = child;
                      }
                  }
              }

              node = targetNode || node.children[0];
          }

          return node;
      },

      _insert: function (item, level, isNode) {

          var toBBox = this.toBBox,
              bbox = isNode ? item : toBBox(item),
              insertPath = [];

          // find the best node for accommodating the item, saving all nodes along the path too
          var node = this._chooseSubtree(bbox, this.data, level, insertPath);

          // put the item into the node
          node.children.push(item);
          extend$2(node, bbox);

          // split on node overflow; propagate upwards if necessary
          while (level >= 0) {
              if (insertPath[level].children.length > this._maxEntries) {
                  this._split(insertPath, level);
                  level--;
              } else break;
          }

          // adjust bboxes along the insertion path
          this._adjustParentBBoxes(bbox, insertPath, level);
      },

      // split overflowed node into two
      _split: function (insertPath, level) {

          var node = insertPath[level],
              M = node.children.length,
              m = this._minEntries;

          this._chooseSplitAxis(node, m, M);

          var splitIndex = this._chooseSplitIndex(node, m, M);

          var newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));
          newNode.height = node.height;
          newNode.leaf = node.leaf;

          calcBBox(node, this.toBBox);
          calcBBox(newNode, this.toBBox);

          if (level) insertPath[level - 1].children.push(newNode);
          else this._splitRoot(node, newNode);
      },

      _splitRoot: function (node, newNode) {
          // split root node
          this.data = createNode([node, newNode]);
          this.data.height = node.height + 1;
          this.data.leaf = false;
          calcBBox(this.data, this.toBBox);
      },

      _chooseSplitIndex: function (node, m, M) {

          var i, bbox1, bbox2, overlap, area, minOverlap, minArea, index;

          minOverlap = minArea = Infinity;

          for (i = m; i <= M - m; i++) {
              bbox1 = distBBox(node, 0, i, this.toBBox);
              bbox2 = distBBox(node, i, M, this.toBBox);

              overlap = intersectionArea(bbox1, bbox2);
              area = bboxArea(bbox1) + bboxArea(bbox2);

              // choose distribution with minimum overlap
              if (overlap < minOverlap) {
                  minOverlap = overlap;
                  index = i;

                  minArea = area < minArea ? area : minArea;

              } else if (overlap === minOverlap) {
                  // otherwise choose distribution with minimum area
                  if (area < minArea) {
                      minArea = area;
                      index = i;
                  }
              }
          }

          return index;
      },

      // sorts node children by the best axis for split
      _chooseSplitAxis: function (node, m, M) {

          var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX,
              compareMinY = node.leaf ? this.compareMinY : compareNodeMinY,
              xMargin = this._allDistMargin(node, m, M, compareMinX),
              yMargin = this._allDistMargin(node, m, M, compareMinY);

          // if total distributions margin value is minimal for x, sort by minX,
          // otherwise it's already sorted by minY
          if (xMargin < yMargin) node.children.sort(compareMinX);
      },

      // total margin of all possible split distributions where each node is at least m full
      _allDistMargin: function (node, m, M, compare) {

          node.children.sort(compare);

          var toBBox = this.toBBox,
              leftBBox = distBBox(node, 0, m, toBBox),
              rightBBox = distBBox(node, M - m, M, toBBox),
              margin = bboxMargin(leftBBox) + bboxMargin(rightBBox),
              i, child;

          for (i = m; i < M - m; i++) {
              child = node.children[i];
              extend$2(leftBBox, node.leaf ? toBBox(child) : child);
              margin += bboxMargin(leftBBox);
          }

          for (i = M - m - 1; i >= m; i--) {
              child = node.children[i];
              extend$2(rightBBox, node.leaf ? toBBox(child) : child);
              margin += bboxMargin(rightBBox);
          }

          return margin;
      },

      _adjustParentBBoxes: function (bbox, path, level) {
          // adjust bboxes along the given tree path
          for (var i = level; i >= 0; i--) {
              extend$2(path[i], bbox);
          }
      },

      _condense: function (path) {
          // go through the path, removing empty nodes and updating bboxes
          for (var i = path.length - 1, siblings; i >= 0; i--) {
              if (path[i].children.length === 0) {
                  if (i > 0) {
                      siblings = path[i - 1].children;
                      siblings.splice(siblings.indexOf(path[i]), 1);

                  } else this.clear();

              } else calcBBox(path[i], this.toBBox);
          }
      },

      _initFormat: function (format) {
          // data format (minX, minY, maxX, maxY accessors)

          // uses eval-type function compilation instead of just accepting a toBBox function
          // because the algorithms are very sensitive to sorting functions performance,
          // so they should be dead simple and without inner calls

          var compareArr = ['return a', ' - b', ';'];

          this.compareMinX = new Function('a', 'b', compareArr.join(format[0]));
          this.compareMinY = new Function('a', 'b', compareArr.join(format[1]));

          this.toBBox = new Function('a',
              'return {minX: a' + format[0] +
              ', minY: a' + format[1] +
              ', maxX: a' + format[2] +
              ', maxY: a' + format[3] + '};');
      }
  };

  function findItem(item, items, equalsFn) {
      if (!equalsFn) return items.indexOf(item);

      for (var i = 0; i < items.length; i++) {
          if (equalsFn(item, items[i])) return i;
      }
      return -1;
  }

  // calculate node's bbox from bboxes of its children
  function calcBBox(node, toBBox) {
      distBBox(node, 0, node.children.length, toBBox, node);
  }

  // min bounding rectangle of node children from k to p-1
  function distBBox(node, k, p, toBBox, destNode) {
      if (!destNode) destNode = createNode(null);
      destNode.minX = Infinity;
      destNode.minY = Infinity;
      destNode.maxX = -Infinity;
      destNode.maxY = -Infinity;

      for (var i = k, child; i < p; i++) {
          child = node.children[i];
          extend$2(destNode, node.leaf ? toBBox(child) : child);
      }

      return destNode;
  }

  function extend$2(a, b) {
      a.minX = Math.min(a.minX, b.minX);
      a.minY = Math.min(a.minY, b.minY);
      a.maxX = Math.max(a.maxX, b.maxX);
      a.maxY = Math.max(a.maxY, b.maxY);
      return a;
  }

  function compareNodeMinX(a, b) { return a.minX - b.minX; }
  function compareNodeMinY(a, b) { return a.minY - b.minY; }

  function bboxArea(a)   { return (a.maxX - a.minX) * (a.maxY - a.minY); }
  function bboxMargin(a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }

  function enlargedArea(a, b) {
      return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *
             (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));
  }

  function intersectionArea(a, b) {
      var minX = Math.max(a.minX, b.minX),
          minY = Math.max(a.minY, b.minY),
          maxX = Math.min(a.maxX, b.maxX),
          maxY = Math.min(a.maxY, b.maxY);

      return Math.max(0, maxX - minX) *
             Math.max(0, maxY - minY);
  }

  function contains(a, b) {
      return a.minX <= b.minX &&
             a.minY <= b.minY &&
             b.maxX <= a.maxX &&
             b.maxY <= a.maxY;
  }

  function intersects$1(a, b) {
      return b.minX <= a.maxX &&
             b.minY <= a.maxY &&
             b.maxX >= a.minX &&
             b.maxY >= a.minY;
  }

  function createNode(children) {
      return {
          children: children,
          height: 1,
          leaf: true,
          minX: Infinity,
          minY: Infinity,
          maxX: -Infinity,
          maxY: -Infinity
      };
  }

  // sort an array so that items come in groups of n unsorted items, with groups sorted between each other;
  // combines selection algorithm with binary divide & conquer approach

  function multiSelect(arr, left, right, n, compare) {
      var stack = [left, right],
          mid;

      while (stack.length) {
          right = stack.pop();
          left = stack.pop();

          if (right - left <= n) continue;

          mid = left + Math.ceil((right - left) / n / 2) * n;
          quickselect$2(arr, mid, left, right, compare);

          stack.push(left, mid, mid, right);
      }
  }
  rbush_1.default = default_1;

  /**
   * @module ol/render/canvas/Executor
   */


  /**
   * @typedef {Object} SerializableInstructions
   * @property {Array<*>} instructions The rendering instructions.
   * @property {Array<*>} hitDetectionInstructions The rendering hit detection instructions.
   * @property {Array<number>} coordinates The array of all coordinates.
   * @property {!Object<string, import("../canvas.js").TextState>} textStates The text states (decluttering).
   * @property {!Object<string, import("../canvas.js").FillState>} fillStates The fill states (decluttering).
   * @property {!Object<string, import("../canvas.js").StrokeState>} strokeStates The stroke states (decluttering).
   */

  /**
   * @type {import("../../extent.js").Extent}
   */
  const tmpExtent = createEmpty();

  /**
   * @type {!import("../../transform.js").Transform}
   */
  const tmpTransform$1 = create();

  /** @type {import("../../coordinate.js").Coordinate} */
  const p1 = [];
  /** @type {import("../../coordinate.js").Coordinate} */
  const p2 = [];
  /** @type {import("../../coordinate.js").Coordinate} */
  const p3 = [];
  /** @type {import("../../coordinate.js").Coordinate} */
  const p4 = [];


  class Executor extends Disposable {
    /**
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {boolean} overlaps The replay can have overlapping geometries.
     * @param {SerializableInstructions} instructions The serializable instructions
     */
    constructor(resolution, pixelRatio, overlaps, instructions) {
      super();

      /**
       * @protected
       * @type {boolean}
       */
      this.overlaps = overlaps;

      /**
       * @protected
       * @type {number}
       */
      this.pixelRatio = pixelRatio;

      /**
       * @protected
       * @const
       * @type {number}
       */
      this.resolution = resolution;

      /**
       * @private
       * @type {boolean}
       */
      this.alignFill_;

      /**
       * @type {Array<*>}
       */
      this.declutterItems = [];

      /**
       * @protected
       * @type {Array<*>}
       */
      this.instructions = instructions.instructions;

      /**
       * @protected
       * @type {Array<number>}
       */
      this.coordinates = instructions.coordinates;

      /**
       * @private
       * @type {!Object<number,import("../../coordinate.js").Coordinate|Array<import("../../coordinate.js").Coordinate>|Array<Array<import("../../coordinate.js").Coordinate>>>}
       */
      this.coordinateCache_ = {};

      /**
       * @private
       * @type {!import("../../transform.js").Transform}
       */
      this.renderedTransform_ = create();

      /**
       * @protected
       * @type {Array<*>}
       */
      this.hitDetectionInstructions = instructions.hitDetectionInstructions;

      /**
       * @private
       * @type {Array<number>}
       */
      this.pixelCoordinates_ = null;

      /**
       * @private
       * @type {number}
       */
      this.viewRotation_ = 0;

      /**
       * @type {!Object<string, import("../canvas.js").FillState>}
       */
      this.fillStates = instructions.fillStates || {};

      /**
       * @type {!Object<string, import("../canvas.js").StrokeState>}
       */
      this.strokeStates = instructions.strokeStates || {};

      /**
       * @type {!Object<string, import("../canvas.js").TextState>}
       */
      this.textStates = instructions.textStates || {};

      /**
       * @private
       * @type {Object<string, Object<string, number>>}
       */
      this.widths_ = {};
    }

    /**
     * @inheritDoc
     */
    disposeInternal() {
      labelCache.release(this);
      super.disposeInternal();
    }


    /**
     * @param {string} text Text.
     * @param {string} textKey Text style key.
     * @param {string} fillKey Fill style key.
     * @param {string} strokeKey Stroke style key.
     * @return {HTMLCanvasElement} Image.
     */
    getTextImage(text, textKey, fillKey, strokeKey) {
      let label;
      const key = strokeKey + textKey + text + fillKey + this.pixelRatio;

      if (!labelCache.containsKey(key)) {
        const strokeState = strokeKey ? this.strokeStates[strokeKey] : null;
        const fillState = fillKey ? this.fillStates[fillKey] : null;
        const textState = this.textStates[textKey];
        const pixelRatio = this.pixelRatio;
        const scale = textState.scale * pixelRatio;
        const align = TEXT_ALIGN[textState.textAlign || defaultTextAlign];
        const strokeWidth = strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;

        const lines = text.split('\n');
        const numLines = lines.length;
        const widths = [];
        const width = measureTextWidths(textState.font, lines, widths);
        const lineHeight = measureTextHeight(textState.font);
        const height = lineHeight * numLines;
        const renderWidth = width + strokeWidth;
        const context = createCanvasContext2D(
          // make canvas 2 pixels wider to account for italic text width measurement errors
          Math.ceil((renderWidth + 2) * scale),
          Math.ceil((height + strokeWidth) * scale));
        label = context.canvas;
        labelCache.set(key, label);
        if (scale != 1) {
          context.scale(scale, scale);
        }
        context.font = textState.font;
        if (strokeKey) {
          context.strokeStyle = strokeState.strokeStyle;
          context.lineWidth = strokeWidth;
          context.lineCap = strokeState.lineCap;
          context.lineJoin = strokeState.lineJoin;
          context.miterLimit = strokeState.miterLimit;
          if (context.setLineDash && strokeState.lineDash.length) {
            context.setLineDash(strokeState.lineDash);
            context.lineDashOffset = strokeState.lineDashOffset;
          }
        }
        if (fillKey) {
          context.fillStyle = fillState.fillStyle;
        }
        context.textBaseline = 'middle';
        context.textAlign = 'center';
        const leftRight = (0.5 - align);
        const x = align * renderWidth + leftRight * strokeWidth;
        let i;
        if (strokeKey) {
          for (i = 0; i < numLines; ++i) {
            context.strokeText(lines[i], x + leftRight * widths[i], 0.5 * (strokeWidth + lineHeight) + i * lineHeight);
          }
        }
        if (fillKey) {
          for (i = 0; i < numLines; ++i) {
            context.fillText(lines[i], x + leftRight * widths[i], 0.5 * (strokeWidth + lineHeight) + i * lineHeight);
          }
        }
      }
      return labelCache.get(key, this);
    }

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../coordinate.js").Coordinate} p1 1st point of the background box.
     * @param {import("../../coordinate.js").Coordinate} p2 2nd point of the background box.
     * @param {import("../../coordinate.js").Coordinate} p3 3rd point of the background box.
     * @param {import("../../coordinate.js").Coordinate} p4 4th point of the background box.
     * @param {Array<*>} fillInstruction Fill instruction.
     * @param {Array<*>} strokeInstruction Stroke instruction.
     */
    replayTextBackground_(context, p1, p2, p3, p4, fillInstruction, strokeInstruction) {
      context.beginPath();
      context.moveTo.apply(context, p1);
      context.lineTo.apply(context, p2);
      context.lineTo.apply(context, p3);
      context.lineTo.apply(context, p4);
      context.lineTo.apply(context, p1);
      if (fillInstruction) {
        this.alignFill_ = /** @type {boolean} */ (fillInstruction[2]);
        this.fill_(context);
      }
      if (strokeInstruction) {
        this.setStrokeStyle_(context, /** @type {Array<*>} */ (strokeInstruction));
        context.stroke();
      }
    }

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {number} x X.
     * @param {number} y Y.
     * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} image Image.
     * @param {number} anchorX Anchor X.
     * @param {number} anchorY Anchor Y.
     * @param {import("../canvas.js").DeclutterGroup} declutterGroup Declutter group.
     * @param {number} height Height.
     * @param {number} opacity Opacity.
     * @param {number} originX Origin X.
     * @param {number} originY Origin Y.
     * @param {number} rotation Rotation.
     * @param {number} scale Scale.
     * @param {boolean} snapToPixel Snap to pixel.
     * @param {number} width Width.
     * @param {Array<number>} padding Padding.
     * @param {Array<*>} fillInstruction Fill instruction.
     * @param {Array<*>} strokeInstruction Stroke instruction.
     */
    replayImage_(
      context,
      x,
      y,
      image,
      anchorX,
      anchorY,
      declutterGroup,
      height,
      opacity,
      originX,
      originY,
      rotation,
      scale,
      snapToPixel,
      width,
      padding,
      fillInstruction,
      strokeInstruction
    ) {
      const fillStroke = fillInstruction || strokeInstruction;
      anchorX *= scale;
      anchorY *= scale;
      x -= anchorX;
      y -= anchorY;

      const w = (width + originX > image.width) ? image.width - originX : width;
      const h = (height + originY > image.height) ? image.height - originY : height;
      const boxW = padding[3] + w * scale + padding[1];
      const boxH = padding[0] + h * scale + padding[2];
      const boxX = x - padding[3];
      const boxY = y - padding[0];

      if (fillStroke || rotation !== 0) {
        p1[0] = p4[0] = boxX;
        p1[1] = p2[1] = boxY;
        p2[0] = p3[0] = boxX + boxW;
        p3[1] = p4[1] = boxY + boxH;
      }

      let transform = null;
      if (rotation !== 0) {
        const centerX = x + anchorX;
        const centerY = y + anchorY;
        transform = compose(tmpTransform$1, centerX, centerY, 1, 1, rotation, -centerX, -centerY);

        apply(tmpTransform$1, p1);
        apply(tmpTransform$1, p2);
        apply(tmpTransform$1, p3);
        apply(tmpTransform$1, p4);
        createOrUpdate(
          Math.min(p1[0], p2[0], p3[0], p4[0]),
          Math.min(p1[1], p2[1], p3[1], p4[1]),
          Math.max(p1[0], p2[0], p3[0], p4[0]),
          Math.max(p1[1], p2[1], p3[1], p4[1]),
          tmpExtent
        );
      } else {
        createOrUpdate(boxX, boxY, boxX + boxW, boxY + boxH, tmpExtent);
      }
      const canvas = context.canvas;
      const strokePadding = strokeInstruction ? (strokeInstruction[2] * scale / 2) : 0;
      const intersects =
          tmpExtent[0] - strokePadding <= canvas.width && tmpExtent[2] + strokePadding >= 0 &&
          tmpExtent[1] - strokePadding <= canvas.height && tmpExtent[3] + strokePadding >= 0;

      if (snapToPixel) {
        x = Math.round(x);
        y = Math.round(y);
      }

      if (declutterGroup) {
        if (!intersects && declutterGroup[4] == 1) {
          return;
        }
        extend(declutterGroup, tmpExtent);
        const declutterArgs = intersects ?
          [context, transform ? transform.slice(0) : null, opacity, image, originX, originY, w, h, x, y, scale] :
          null;
        if (declutterArgs) {
          if (fillStroke) {
            declutterArgs.push(fillInstruction, strokeInstruction, p1, p2, p3, p4);
          }
          declutterGroup.push(declutterArgs);
        }
      } else if (intersects) {
        if (fillStroke) {
          this.replayTextBackground_(context, p1, p2, p3, p4,
            /** @type {Array<*>} */ (fillInstruction),
            /** @type {Array<*>} */ (strokeInstruction));
        }
        drawImage(context, transform, opacity, image, originX, originY, w, h, x, y, scale);
      }
    }

    /**
     * @private
     * @param {CanvasRenderingContext2D} context Context.
     */
    fill_(context) {
      if (this.alignFill_) {
        const origin = apply(this.renderedTransform_, [0, 0]);
        const repeatSize = 512 * this.pixelRatio;
        context.save();
        context.translate(origin[0] % repeatSize, origin[1] % repeatSize);
        context.rotate(this.viewRotation_);
      }
      context.fill();
      if (this.alignFill_) {
        context.restore();
      }
    }

    /**
     * @private
     * @param {CanvasRenderingContext2D} context Context.
     * @param {Array<*>} instruction Instruction.
     */
    setStrokeStyle_(context, instruction) {
      context.strokeStyle = /** @type {import("../../colorlike.js").ColorLike} */ (instruction[1]);
      context.lineWidth = /** @type {number} */ (instruction[2]);
      context.lineCap = /** @type {CanvasLineCap} */ (instruction[3]);
      context.lineJoin = /** @type {CanvasLineJoin} */ (instruction[4]);
      context.miterLimit = /** @type {number} */ (instruction[5]);
      if (context.setLineDash) {
        context.lineDashOffset = /** @type {number} */ (instruction[7]);
        context.setLineDash(/** @type {Array<number>} */ (instruction[6]));
      }
    }

    /**
     * @param {import("../canvas.js").DeclutterGroup} declutterGroup Declutter group.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     * @param {number} opacity Layer opacity.
     * @param {?} declutterTree Declutter tree.
     * @return {?} Declutter tree.
     */
    renderDeclutter(declutterGroup, feature, opacity, declutterTree) {
      if (declutterGroup && declutterGroup.length > 5) {
        const groupCount = declutterGroup[4];
        if (groupCount == 1 || groupCount == declutterGroup.length - 5) {
          /** @type {import("../../structs/RBush.js").Entry} */
          const box = {
            minX: /** @type {number} */ (declutterGroup[0]),
            minY: /** @type {number} */ (declutterGroup[1]),
            maxX: /** @type {number} */ (declutterGroup[2]),
            maxY: /** @type {number} */ (declutterGroup[3]),
            value: feature
          };
          if (!declutterTree) {
            declutterTree = new rbush_1(9);
          }
          if (!declutterTree.collides(box)) {
            declutterTree.insert(box);
            for (let j = 5, jj = declutterGroup.length; j < jj; ++j) {
              const declutterData = /** @type {Array} */ (declutterGroup[j]);
              const context = declutterData[0];
              const currentAlpha = context.globalAlpha;
              if (currentAlpha !== opacity) {
                context.globalAlpha = opacity;
              }
              if (declutterData.length > 11) {
                this.replayTextBackground_(declutterData[0],
                  declutterData[13], declutterData[14], declutterData[15], declutterData[16],
                  declutterData[11], declutterData[12]);
              }
              drawImage.apply(undefined, declutterData);
              if (currentAlpha !== opacity) {
                context.globalAlpha = currentAlpha;
              }
            }
          }
          declutterGroup.length = 5;
          createOrUpdateEmpty(declutterGroup);
        }
      }
      return declutterTree;
    }

    /**
     * @private
     * @param {string} text The text to draw.
     * @param {string} textKey The key of the text state.
     * @param {string} strokeKey The key for the stroke state.
     * @param {string} fillKey The key for the fill state.
     * @return {{label: HTMLCanvasElement, anchorX: number, anchorY: number}} The text image and its anchor.
     */
    drawTextImageWithPointPlacement_(text, textKey, strokeKey, fillKey) {
      const textState = this.textStates[textKey];

      const label = this.getTextImage(text, textKey, fillKey, strokeKey);

      const strokeState = this.strokeStates[strokeKey];
      const pixelRatio = this.pixelRatio;
      const align = TEXT_ALIGN[textState.textAlign || defaultTextAlign];
      const baseline = TEXT_ALIGN[textState.textBaseline || defaultTextBaseline];
      const strokeWidth = strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;

      // Remove the 2 pixels we added in getTextImage() for the anchor
      const width = label.width / pixelRatio - 2 * textState.scale;
      const anchorX = align * width + 2 * (0.5 - align) * strokeWidth;
      const anchorY = baseline * label.height / pixelRatio + 2 * (0.5 - baseline) * strokeWidth;

      return {
        label: label,
        anchorX: anchorX,
        anchorY: anchorY
      };
    }

    /**
     * @private
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features
     *     to skip.
     * @param {Array<*>} instructions Instructions array.
     * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
     * @param {function(import("../../Feature.js").FeatureLike): T|undefined} featureCallback Feature callback.
     * @param {import("../../extent.js").Extent=} opt_hitExtent Only check features that intersect this
     *     extent.
     * @return {T|undefined} Callback result.
     * @template T
     */
    execute_(
      context,
      transform,
      skippedFeaturesHash,
      instructions,
      snapToPixel,
      featureCallback,
      opt_hitExtent
    ) {
      this.declutterItems.length = 0;
      /** @type {Array<number>} */
      let pixelCoordinates;
      if (this.pixelCoordinates_ && equals$1(transform, this.renderedTransform_)) {
        pixelCoordinates = this.pixelCoordinates_;
      } else {
        if (!this.pixelCoordinates_) {
          this.pixelCoordinates_ = [];
        }
        pixelCoordinates = transform2D(
          this.coordinates, 0, this.coordinates.length, 2,
          transform, this.pixelCoordinates_);
        setFromArray(this.renderedTransform_, transform);
      }
      const skipFeatures = !isEmpty(skippedFeaturesHash);
      let i = 0; // instruction index
      const ii = instructions.length; // end of instructions
      let d = 0; // data index
      let dd; // end of per-instruction data
      let anchorX, anchorY, prevX, prevY, roundX, roundY, declutterGroup, image, text, textKey;
      let strokeKey, fillKey;
      let pendingFill = 0;
      let pendingStroke = 0;
      let lastFillInstruction = null;
      let lastStrokeInstruction = null;
      const coordinateCache = this.coordinateCache_;
      const viewRotation = this.viewRotation_;

      const state = /** @type {import("../../render.js").State} */ ({
        context: context,
        pixelRatio: this.pixelRatio,
        resolution: this.resolution,
        rotation: viewRotation
      });

      // When the batch size gets too big, performance decreases. 200 is a good
      // balance between batch size and number of fill/stroke instructions.
      const batchSize = this.instructions != instructions || this.overlaps ? 0 : 200;
      let /** @type {import("../../Feature.js").FeatureLike} */ feature;
      let x, y;
      while (i < ii) {
        const instruction = instructions[i];
        const type = /** @type {CanvasInstruction} */ (instruction[0]);
        switch (type) {
          case Instruction.BEGIN_GEOMETRY:
            feature = /** @type {import("../../Feature.js").FeatureLike} */ (instruction[1]);
            if ((skipFeatures && skippedFeaturesHash[getUid(feature)]) || !feature.getGeometry()) {
              i = /** @type {number} */ (instruction[2]);
            } else if (opt_hitExtent !== undefined && !intersects(
              opt_hitExtent, feature.getGeometry().getExtent())) {
              i = /** @type {number} */ (instruction[2]) + 1;
            } else {
              ++i;
            }
            break;
          case Instruction.BEGIN_PATH:
            if (pendingFill > batchSize) {
              this.fill_(context);
              pendingFill = 0;
            }
            if (pendingStroke > batchSize) {
              context.stroke();
              pendingStroke = 0;
            }
            if (!pendingFill && !pendingStroke) {
              context.beginPath();
              prevX = prevY = NaN;
            }
            ++i;
            break;
          case Instruction.CIRCLE:
            d = /** @type {number} */ (instruction[1]);
            const x1 = pixelCoordinates[d];
            const y1 = pixelCoordinates[d + 1];
            const x2 = pixelCoordinates[d + 2];
            const y2 = pixelCoordinates[d + 3];
            const dx = x2 - x1;
            const dy = y2 - y1;
            const r = Math.sqrt(dx * dx + dy * dy);
            context.moveTo(x1 + r, y1);
            context.arc(x1, y1, r, 0, 2 * Math.PI, true);
            ++i;
            break;
          case Instruction.CLOSE_PATH:
            context.closePath();
            ++i;
            break;
          case Instruction.CUSTOM:
            d = /** @type {number} */ (instruction[1]);
            dd = instruction[2];
            const geometry = /** @type {import("../../geom/SimpleGeometry.js").default} */ (instruction[3]);
            const renderer = instruction[4];
            const fn = instruction.length == 6 ? instruction[5] : undefined;
            state.geometry = geometry;
            state.feature = feature;
            if (!(i in coordinateCache)) {
              coordinateCache[i] = [];
            }
            const coords = coordinateCache[i];
            if (fn) {
              fn(pixelCoordinates, d, dd, 2, coords);
            } else {
              coords[0] = pixelCoordinates[d];
              coords[1] = pixelCoordinates[d + 1];
              coords.length = 2;
            }
            renderer(coords, state);
            ++i;
            break;
          case Instruction.DRAW_IMAGE:
            d = /** @type {number} */ (instruction[1]);
            dd = /** @type {number} */ (instruction[2]);
            image = /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */ (instruction[3]);

            // Remaining arguments in DRAW_IMAGE are in alphabetical order
            anchorX = /** @type {number} */ (instruction[4]);
            anchorY = /** @type {number} */ (instruction[5]);
            declutterGroup = featureCallback ? null : /** @type {import("../canvas.js").DeclutterGroup} */ (instruction[6]);
            let height = /** @type {number} */ (instruction[7]);
            const opacity = /** @type {number} */ (instruction[8]);
            const originX = /** @type {number} */ (instruction[9]);
            const originY = /** @type {number} */ (instruction[10]);
            const rotateWithView = /** @type {boolean} */ (instruction[11]);
            let rotation = /** @type {number} */ (instruction[12]);
            const scale = /** @type {number} */ (instruction[13]);
            let width = /** @type {number} */ (instruction[14]);


            if (!image && instruction.length >= 19) {
              // create label images
              text = /** @type {string} */ (instruction[18]);
              textKey = /** @type {string} */ (instruction[19]);
              strokeKey = /** @type {string} */ (instruction[20]);
              fillKey = /** @type {string} */ (instruction[21]);
              const labelWithAnchor = this.drawTextImageWithPointPlacement_(text, textKey, strokeKey, fillKey);
              image = instruction[3] = labelWithAnchor.label;
              const textOffsetX = /** @type {number} */ (instruction[22]);
              anchorX = instruction[4] = (labelWithAnchor.anchorX - textOffsetX) * this.pixelRatio;
              const textOffsetY = /** @type {number} */ (instruction[23]);
              anchorY = instruction[5] = (labelWithAnchor.anchorY - textOffsetY) * this.pixelRatio;
              height = instruction[7] = image.height;
              width = instruction[14] = image.width;
            }

            let geometryWidths;
            if (instruction.length > 24) {
              geometryWidths = /** @type {number} */ (instruction[24]);
            }

            let padding, backgroundFill, backgroundStroke;
            if (instruction.length > 16) {
              padding = /** @type {Array<number>} */ (instruction[15]);
              backgroundFill = /** @type {boolean} */ (instruction[16]);
              backgroundStroke = /** @type {boolean} */ (instruction[17]);
            } else {
              padding = defaultPadding;
              backgroundFill = backgroundStroke = false;
            }

            if (rotateWithView) {
              rotation += viewRotation;
            }
            let widthIndex = 0;
            for (; d < dd; d += 2) {
              if (geometryWidths && geometryWidths[widthIndex++] < width / this.pixelRatio) {
                continue;
              }
              this.replayImage_(context,
                pixelCoordinates[d], pixelCoordinates[d + 1], image, anchorX, anchorY,
                declutterGroup, height, opacity, originX, originY, rotation, scale,
                snapToPixel, width, padding,
                backgroundFill ? /** @type {Array<*>} */ (lastFillInstruction) : null,
                backgroundStroke ? /** @type {Array<*>} */ (lastStrokeInstruction) : null);
            }
            this.declutterItems.push(this, declutterGroup, feature);
            ++i;
            break;
          case Instruction.DRAW_CHARS:
            const begin = /** @type {number} */ (instruction[1]);
            const end = /** @type {number} */ (instruction[2]);
            const baseline = /** @type {number} */ (instruction[3]);
            declutterGroup = featureCallback ? null : /** @type {import("../canvas.js").DeclutterGroup} */ (instruction[4]);
            const overflow = /** @type {number} */ (instruction[5]);
            fillKey = /** @type {string} */ (instruction[6]);
            const maxAngle = /** @type {number} */ (instruction[7]);
            const measurePixelRatio = /** @type {number} */ (instruction[8]);
            const offsetY = /** @type {number} */ (instruction[9]);
            strokeKey = /** @type {string} */ (instruction[10]);
            const strokeWidth = /** @type {number} */ (instruction[11]);
            text = /** @type {string} */ (instruction[12]);
            textKey = /** @type {string} */ (instruction[13]);
            const pixelRatioScale = /** @type {number} */ (instruction[14]);

            const textState = this.textStates[textKey];
            const font = textState.font;
            const textScale = textState.scale * measurePixelRatio;

            let cachedWidths;
            if (font in this.widths_) {
              cachedWidths = this.widths_[font];
            } else {
              cachedWidths = this.widths_[font] = {};
            }

            const pathLength = lineStringLength(pixelCoordinates, begin, end, 2);
            const textLength = textScale * measureAndCacheTextWidth(font, text, cachedWidths);
            if (overflow || textLength <= pathLength) {
              const textAlign = this.textStates[textKey].textAlign;
              const startM = (pathLength - textLength) * TEXT_ALIGN[textAlign];
              const parts = drawTextOnPath(
                pixelCoordinates, begin, end, 2, text, startM, maxAngle, textScale, measureAndCacheTextWidth, font, cachedWidths);
              if (parts) {
                let c, cc, chars, label, part;
                if (strokeKey) {
                  for (c = 0, cc = parts.length; c < cc; ++c) {
                    part = parts[c]; // x, y, anchorX, rotation, chunk
                    chars = /** @type {string} */ (part[4]);
                    label = this.getTextImage(chars, textKey, '', strokeKey);
                    anchorX = /** @type {number} */ (part[2]) + strokeWidth;
                    anchorY = baseline * label.height + (0.5 - baseline) * 2 * strokeWidth - offsetY;
                    this.replayImage_(context,
                      /** @type {number} */ (part[0]), /** @type {number} */ (part[1]), label,
                      anchorX, anchorY, declutterGroup, label.height, 1, 0, 0,
                      /** @type {number} */ (part[3]), pixelRatioScale, false, label.width,
                      defaultPadding, null, null);
                  }
                }
                if (fillKey) {
                  for (c = 0, cc = parts.length; c < cc; ++c) {
                    part = parts[c]; // x, y, anchorX, rotation, chunk
                    chars = /** @type {string} */ (part[4]);
                    label = this.getTextImage(chars, textKey, fillKey, '');
                    anchorX = /** @type {number} */ (part[2]);
                    anchorY = baseline * label.height - offsetY;
                    this.replayImage_(context,
                      /** @type {number} */ (part[0]), /** @type {number} */ (part[1]), label,
                      anchorX, anchorY, declutterGroup, label.height, 1, 0, 0,
                      /** @type {number} */ (part[3]), pixelRatioScale, false, label.width,
                      defaultPadding, null, null);
                  }
                }
              }
            }
            this.declutterItems.push(this, declutterGroup, feature);
            ++i;
            break;
          case Instruction.END_GEOMETRY:
            if (featureCallback !== undefined) {
              feature = /** @type {import("../../Feature.js").FeatureLike} */ (instruction[1]);
              const result = featureCallback(feature);
              if (result) {
                return result;
              }
            }
            ++i;
            break;
          case Instruction.FILL:
            if (batchSize) {
              pendingFill++;
            } else {
              this.fill_(context);
            }
            ++i;
            break;
          case Instruction.MOVE_TO_LINE_TO:
            d = /** @type {number} */ (instruction[1]);
            dd = /** @type {number} */ (instruction[2]);
            x = pixelCoordinates[d];
            y = pixelCoordinates[d + 1];
            roundX = (x + 0.5) | 0;
            roundY = (y + 0.5) | 0;
            if (roundX !== prevX || roundY !== prevY) {
              context.moveTo(x, y);
              prevX = roundX;
              prevY = roundY;
            }
            for (d += 2; d < dd; d += 2) {
              x = pixelCoordinates[d];
              y = pixelCoordinates[d + 1];
              roundX = (x + 0.5) | 0;
              roundY = (y + 0.5) | 0;
              if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {
                context.lineTo(x, y);
                prevX = roundX;
                prevY = roundY;
              }
            }
            ++i;
            break;
          case Instruction.SET_FILL_STYLE:
            lastFillInstruction = instruction;
            this.alignFill_ = instruction[2];

            if (pendingFill) {
              this.fill_(context);
              pendingFill = 0;
              if (pendingStroke) {
                context.stroke();
                pendingStroke = 0;
              }
            }

            context.fillStyle = /** @type {import("../../colorlike.js").ColorLike} */ (instruction[1]);
            ++i;
            break;
          case Instruction.SET_STROKE_STYLE:
            lastStrokeInstruction = instruction;
            if (pendingStroke) {
              context.stroke();
              pendingStroke = 0;
            }
            this.setStrokeStyle_(context, /** @type {Array<*>} */ (instruction));
            ++i;
            break;
          case Instruction.STROKE:
            if (batchSize) {
              pendingStroke++;
            } else {
              context.stroke();
            }
            ++i;
            break;
          default:
            ++i; // consume the instruction anyway, to avoid an infinite loop
            break;
        }
      }
      if (pendingFill) {
        this.fill_(context);
      }
      if (pendingStroke) {
        context.stroke();
      }
      return undefined;
    }

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {number} viewRotation View rotation.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features
     *     to skip.
     * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
     */
    execute(context, transform, viewRotation, skippedFeaturesHash, snapToPixel) {
      this.viewRotation_ = viewRotation;
      this.execute_(context, transform,
        skippedFeaturesHash, this.instructions, snapToPixel, undefined, undefined);
    }

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {number} viewRotation View rotation.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features
     *     to skip.
     * @param {function(import("../../Feature.js").FeatureLike): T=} opt_featureCallback
     *     Feature callback.
     * @param {import("../../extent.js").Extent=} opt_hitExtent Only check features that intersect this
     *     extent.
     * @return {T|undefined} Callback result.
     * @template T
     */
    executeHitDetection(
      context,
      transform,
      viewRotation,
      skippedFeaturesHash,
      opt_featureCallback,
      opt_hitExtent
    ) {
      this.viewRotation_ = viewRotation;
      return this.execute_(context, transform, skippedFeaturesHash,
        this.hitDetectionInstructions, true, opt_featureCallback, opt_hitExtent);
    }
  }

  /**
   * @module ol/render/canvas/ExecutorGroup
   */

  /**
   * @const
   * @type {Array<BuilderType>}
   */
  const ORDER = [
    ReplayType.POLYGON,
    ReplayType.CIRCLE,
    ReplayType.LINE_STRING,
    ReplayType.IMAGE,
    ReplayType.TEXT,
    ReplayType.DEFAULT
  ];


  class ExecutorGroup extends Disposable {
    /**
     * @param {import("../../extent.js").Extent} maxExtent Max extent for clipping. When a
     * `maxExtent` was set on the Buillder for this executor group, the same `maxExtent`
     * should be set here, unless the target context does not exceet that extent (which
     * can be the case when rendering to tiles).
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {boolean} overlaps The executor group can have overlapping geometries.
     * @param {!Object<string, !Object<BuilderType, import("./Builder.js").SerializableInstructions>>} allInstructions
     * The serializable instructions.
     * @param {number=} opt_renderBuffer Optional rendering buffer.
     */
    constructor(maxExtent, resolution, pixelRatio, overlaps, allInstructions, opt_renderBuffer) {
      super();

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.maxExtent_ = maxExtent;

      /**
       * @private
       * @type {boolean}
       */
      this.overlaps_ = overlaps;

      /**
       * @private
       * @type {number}
       */
      this.pixelRatio_ = pixelRatio;

      /**
       * @private
       * @type {number}
       */
      this.resolution_ = resolution;

      /**
       * @private
       * @type {number|undefined}
       */
      this.renderBuffer_ = opt_renderBuffer;

      /**
       * @private
       * @type {!Object<string, !Object<BuilderType, import("./Executor").default>>}
       */
      this.executorsByZIndex_ = {};

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.hitDetectionContext_ = null;

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.hitDetectionTransform_ = create();

      this.createExecutors_(allInstructions);
    }

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../transform.js").Transform} transform Transform.
     */
    clip(context, transform) {
      const flatClipCoords = this.getClipCoords(transform);
      context.beginPath();
      context.moveTo(flatClipCoords[0], flatClipCoords[1]);
      context.lineTo(flatClipCoords[2], flatClipCoords[3]);
      context.lineTo(flatClipCoords[4], flatClipCoords[5]);
      context.lineTo(flatClipCoords[6], flatClipCoords[7]);
      context.clip();
    }

    /**
     * Create executors and populate them using the provided instructions.
     * @private
     * @param {!Object<string, !Object<BuilderType, import("./Builder.js").SerializableInstructions>>} allInstructions The serializable instructions
     */
    createExecutors_(allInstructions) {
      for (const zIndex in allInstructions) {
        let executors = this.executorsByZIndex_[zIndex];
        if (executors === undefined) {
          this.executorsByZIndex_[zIndex] = executors = {};
        }
        const instructionByZindex = allInstructions[zIndex];
        for (const builderType in instructionByZindex) {
          const instructions = instructionByZindex[builderType];
          executors[builderType] = new Executor(
            this.resolution_, this.pixelRatio_, this.overlaps_, instructions);
        }
      }
    }

    /**
     * @inheritDoc
     */
    disposeInternal() {
      for (const z in this.executorsByZIndex_) {
        const executors = this.executorsByZIndex_[z];
        for (const key in executors) {
          executors[key].disposeInternal();
        }
      }
      if (this.hitDetectionContext_) {
        const canvas = this.hitDetectionContext_.canvas;
        canvas.width = canvas.height = 0;
      }

      super.disposeInternal();
    }

    /**
     * @param {Array<BuilderType>} executors Executors.
     * @return {boolean} Has executors of the provided types.
     */
    hasExecutors(executors) {
      for (const zIndex in this.executorsByZIndex_) {
        const candidates = this.executorsByZIndex_[zIndex];
        for (let i = 0, ii = executors.length; i < ii; ++i) {
          if (executors[i] in candidates) {
            return true;
          }
        }
      }
      return false;
    }


    /**
     * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features to skip.
     * @param {function(import("../../Feature.js").FeatureLike): T} callback Feature callback.
     * @param {Array<import("../../Feature.js").FeatureLike>} declutteredFeatures Decluttered features.
     * @return {T|undefined} Callback result.
     * @template T
     */
    forEachFeatureAtCoordinate(
      coordinate,
      resolution,
      rotation,
      hitTolerance,
      skippedFeaturesHash,
      callback,
      declutteredFeatures
    ) {

      hitTolerance = Math.round(hitTolerance);
      const contextSize = hitTolerance * 2 + 1;
      const transform = compose(this.hitDetectionTransform_,
        hitTolerance + 0.5, hitTolerance + 0.5,
        1 / resolution, -1 / resolution,
        -rotation,
        -coordinate[0], -coordinate[1]);

      if (!this.hitDetectionContext_) {
        this.hitDetectionContext_ = createCanvasContext2D(contextSize, contextSize);
      }
      const context = this.hitDetectionContext_;

      if (context.canvas.width !== contextSize || context.canvas.height !== contextSize) {
        context.canvas.width = contextSize;
        context.canvas.height = contextSize;
      } else {
        context.clearRect(0, 0, contextSize, contextSize);
      }

      /**
       * @type {import("../../extent.js").Extent}
       */
      let hitExtent;
      if (this.renderBuffer_ !== undefined) {
        hitExtent = createEmpty();
        extendCoordinate(hitExtent, coordinate);
        buffer(hitExtent, resolution * (this.renderBuffer_ + hitTolerance), hitExtent);
      }

      const mask = getCircleArray(hitTolerance);

      let builderType;

      /**
       * @param {import("../../Feature.js").FeatureLike} feature Feature.
       * @return {?} Callback result.
       */
      function featureCallback(feature) {
        const imageData = context.getImageData(0, 0, contextSize, contextSize).data;
        for (let i = 0; i < contextSize; i++) {
          for (let j = 0; j < contextSize; j++) {
            if (mask[i][j]) {
              if (imageData[(j * contextSize + i) * 4 + 3] > 0) {
                let result;
                if (!(declutteredFeatures && (builderType == ReplayType.IMAGE || builderType == ReplayType.TEXT)) ||
                    declutteredFeatures.indexOf(feature) !== -1) {
                  result = callback(feature);
                }
                if (result) {
                  return result;
                } else {
                  context.clearRect(0, 0, contextSize, contextSize);
                  return undefined;
                }
              }
            }
          }
        }
      }

      /** @type {Array<number>} */
      const zs = Object.keys(this.executorsByZIndex_).map(Number);
      zs.sort(numberSafeCompareFunction);

      let i, j, executors, executor, result;
      for (i = zs.length - 1; i >= 0; --i) {
        const zIndexKey = zs[i].toString();
        executors = this.executorsByZIndex_[zIndexKey];
        for (j = ORDER.length - 1; j >= 0; --j) {
          builderType = ORDER[j];
          executor = executors[builderType];
          if (executor !== undefined) {
            result = executor.executeHitDetection(context, transform, rotation,
              skippedFeaturesHash, featureCallback, hitExtent);
            if (result) {
              return result;
            }
          }
        }
      }
      return undefined;
    }

    /**
     * @param {import("../../transform.js").Transform} transform Transform.
     * @return {Array<number>} Clip coordinates.
     */
    getClipCoords(transform) {
      const maxExtent = this.maxExtent_;
      if (!maxExtent) {
        return null;
      }
      const minX = maxExtent[0];
      const minY = maxExtent[1];
      const maxX = maxExtent[2];
      const maxY = maxExtent[3];
      const flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];
      transform2D(
        flatClipCoords, 0, 8, 2, transform, flatClipCoords);
      return flatClipCoords;
    }

    /**
     * @return {boolean} Is empty.
     */
    isEmpty() {
      return isEmpty(this.executorsByZIndex_);
    }

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {number} viewRotation View rotation.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features to skip.
     * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.
     * @param {Array<BuilderType>=} opt_builderTypes Ordered replay types to replay.
     *     Default is {@link module:ol/render/replay~ORDER}
     * @param {Object<string, import("../canvas.js").DeclutterGroup>=} opt_declutterReplays Declutter replays.
     */
    execute(context, transform, viewRotation, skippedFeaturesHash, snapToPixel, opt_builderTypes,
      opt_declutterReplays) {

      /** @type {Array<number>} */
      const zs = Object.keys(this.executorsByZIndex_).map(Number);
      zs.sort(numberSafeCompareFunction);

      // setup clipping so that the parts of over-simplified geometries are not
      // visible outside the current extent when panning
      if (this.maxExtent_) {
        context.save();
        this.clip(context, transform);
      }

      const builderTypes = opt_builderTypes ? opt_builderTypes : ORDER;
      let i, ii, j, jj, replays, replay;
      for (i = 0, ii = zs.length; i < ii; ++i) {
        const zIndexKey = zs[i].toString();
        replays = this.executorsByZIndex_[zIndexKey];
        for (j = 0, jj = builderTypes.length; j < jj; ++j) {
          const builderType = builderTypes[j];
          replay = replays[builderType];
          if (replay !== undefined) {
            if (opt_declutterReplays &&
                (builderType == ReplayType.IMAGE || builderType == ReplayType.TEXT)) {
              const declutter = opt_declutterReplays[zIndexKey];
              if (!declutter) {
                opt_declutterReplays[zIndexKey] = [replay, transform.slice(0)];
              } else {
                declutter.push(replay, transform.slice(0));
              }
            } else {
              replay.execute(context, transform, viewRotation, skippedFeaturesHash, snapToPixel);
            }
          }
        }
      }

      if (this.maxExtent_) {
        context.restore();
      }
    }
  }


  /**
   * This cache is used for storing calculated pixel circles for increasing performance.
   * It is a static property to allow each Replaygroup to access it.
   * @type {Object<number, Array<Array<(boolean|undefined)>>>}
   */
  const circleArrayCache = {
    0: [[true]]
  };


  /**
   * This method fills a row in the array from the given coordinate to the
   * middle with `true`.
   * @param {Array<Array<(boolean|undefined)>>} array The array that will be altered.
   * @param {number} x X coordinate.
   * @param {number} y Y coordinate.
   */
  function fillCircleArrayRowToMiddle(array, x, y) {
    let i;
    const radius = Math.floor(array.length / 2);
    if (x >= radius) {
      for (i = radius; i < x; i++) {
        array[i][y] = true;
      }
    } else if (x < radius) {
      for (i = x + 1; i < radius; i++) {
        array[i][y] = true;
      }
    }
  }


  /**
   * This methods creates a circle inside a fitting array. Points inside the
   * circle are marked by true, points on the outside are undefined.
   * It uses the midpoint circle algorithm.
   * A cache is used to increase performance.
   * @param {number} radius Radius.
   * @returns {Array<Array<(boolean|undefined)>>} An array with marked circle points.
   */
  function getCircleArray(radius) {
    if (circleArrayCache[radius] !== undefined) {
      return circleArrayCache[radius];
    }

    const arraySize = radius * 2 + 1;
    const arr = new Array(arraySize);
    for (let i = 0; i < arraySize; i++) {
      arr[i] = new Array(arraySize);
    }

    let x = radius;
    let y = 0;
    let error = 0;

    while (x >= y) {
      fillCircleArrayRowToMiddle(arr, radius + x, radius + y);
      fillCircleArrayRowToMiddle(arr, radius + y, radius + x);
      fillCircleArrayRowToMiddle(arr, radius - y, radius + x);
      fillCircleArrayRowToMiddle(arr, radius - x, radius + y);
      fillCircleArrayRowToMiddle(arr, radius - x, radius - y);
      fillCircleArrayRowToMiddle(arr, radius - y, radius - x);
      fillCircleArrayRowToMiddle(arr, radius + y, radius - x);
      fillCircleArrayRowToMiddle(arr, radius + x, radius - y);

      y++;
      error += 1 + 2 * y;
      if (2 * (error - x) + 1 > 0) {
        x -= 1;
        error += 1 - 2 * x;
      }
    }

    circleArrayCache[radius] = arr;
    return arr;
  }


  /**
   * @param {!Object<string, Array<*>>} declutterReplays Declutter replays.
   * @param {CanvasRenderingContext2D} context Context.
   * @param {number} rotation Rotation.
   * @param {number} opacity Opacity.
   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
   * @param {Array<import("../../PluggableMap.js").DeclutterItems>} declutterItems Declutter items.
   */
  function replayDeclutter(declutterReplays, context, rotation, opacity, snapToPixel, declutterItems) {
    const zs = Object.keys(declutterReplays).map(Number).sort(numberSafeCompareFunction);
    const skippedFeatureUids = {};
    for (let z = 0, zz = zs.length; z < zz; ++z) {
      const executorData = declutterReplays[zs[z].toString()];
      let currentExecutor;
      for (let i = 0, ii = executorData.length; i < ii;) {
        const executor = executorData[i++];
        if (executor !== currentExecutor) {
          currentExecutor = executor;
          declutterItems.push({
            items: executor.declutterItems,
            opacity: opacity
          });
        }
        const transform = executorData[i++];
        executor.execute(context, transform, rotation, skippedFeatureUids, snapToPixel);
      }
    }
  }

  /**
   * @module ol/render/Event
   */

  class RenderEvent extends Event {

    /**
     * @param {import("./EventType.js").default} type Type.
     * @param {import("../transform.js").Transform=} opt_inversePixelTransform Transform for
     *     CSS pixels to rendered pixels.
     * @param {import("../PluggableMap.js").FrameState=} opt_frameState Frame state.
     * @param {?CanvasRenderingContext2D=} opt_context Context.
     */
    constructor(type, opt_inversePixelTransform, opt_frameState, opt_context) {

      super(type);

      /**
       * Transform from CSS pixels (relative to the top-left corner of the map viewport)
       * to rendered pixels on this event's `context`.
       * @type {import("../transform.js").Transform|undefined}
       * @api
       */
      this.inversePixelTransform = opt_inversePixelTransform;

      /**
       * An object representing the current render frame state.
       * @type {import("../PluggableMap.js").FrameState|undefined}
       * @api
       */
      this.frameState = opt_frameState;

      /**
       * Canvas context. Only available when a Canvas renderer is used, null
       * otherwise.
       * @type {CanvasRenderingContext2D|null|undefined}
       * @api
       */
      this.context = opt_context;

    }

  }

  /**
   * @module ol/renderer/Layer
   */

  class LayerRenderer extends Observable {

    /**
     * @param {import("../layer/Layer.js").default} layer Layer.
     */
    constructor(layer) {

      super();

      /**
       * @private
       * @type {import("../layer/Layer.js").default}
       */
      this.layer_ = layer;

    }

    /**
     * Determine whether render should be called.
     * @abstract
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @return {boolean} Layer is ready to be rendered.
     */
    prepareFrame(frameState) {
      return abstract();
    }

    /**
     * Render the layer.
     * @abstract
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @param {HTMLElement} target Target that may be used to render content to.
     * @return {HTMLElement} The rendered element.
     */
    renderFrame(frameState, target) {
      return abstract();
    }

    /**
     * @param {Object<number, Object<string, import("../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
     * @param {number} zoom Zoom level.
     * @param {import("../Tile.js").default} tile Tile.
     */
    loadedTileCallback(tiles, zoom, tile) {
      if (!tiles[zoom]) {
        tiles[zoom] = {};
      }
      tiles[zoom][tile.tileCoord.toString()] = tile;
    }

    /**
     * Create a function that adds loaded tiles to the tile lookup.
     * @param {import("../source/Tile.js").default} source Tile source.
     * @param {import("../proj/Projection.js").default} projection Projection of the tiles.
     * @param {Object<number, Object<string, import("../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
     * @return {function(number, import("../TileRange.js").default):boolean} A function that can be
     *     called with a zoom level and a tile range to add loaded tiles to the lookup.
     * @protected
     */
    createLoadedTileFinder(source, projection, tiles) {
      return (
        /**
         * @param {number} zoom Zoom level.
         * @param {import("../TileRange.js").default} tileRange Tile range.
         * @return {boolean} The tile range is fully loaded.
         * @this {LayerRenderer}
         */
        function(zoom, tileRange) {
          const callback = this.loadedTileCallback.bind(this, tiles, zoom);
          return source.forEachLoadedTile(projection, zoom, tileRange, callback);
        }
      ).bind(this);
    }

    /**
     * @abstract
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {function(import("../Feature.js").FeatureLike, import("../layer/Layer.js").default): T} callback Feature callback.
     * @param {Array<import("../Feature.js").FeatureLike>} declutteredFeatures Decluttered features.
     * @return {T|void} Callback result.
     * @template T
     */
    forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, declutteredFeatures) {}

    /**
     * @abstract
     * @param {import("../pixel.js").Pixel} pixel Pixel.
     * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel
     *    location, null will be returned.  If there is data, but pixel values cannot be
     *    returned, and empty array will be returned.
     */
    getDataAtPixel(pixel, frameState, hitTolerance) {
      return abstract();
    }

    /**
     * @return {import("../layer/Layer.js").default} Layer.
     */
    getLayer() {
      return this.layer_;
    }

    /**
     * Perform action necessary to get the layer rendered after new fonts have loaded
     * @abstract
     */
    handleFontsChanged() {}

    /**
     * Handle changes in image state.
     * @param {import("../events/Event.js").default} event Image change event.
     * @private
     */
    handleImageChange_(event) {
      const image = /** @type {import("../Image.js").default} */ (event.target);
      if (image.getState() === ImageState.LOADED) {
        this.renderIfReadyAndVisible();
      }
    }

    /**
     * Load the image if not already loaded, and register the image change
     * listener if needed.
     * @param {import("../ImageBase.js").default} image Image.
     * @return {boolean} `true` if the image is already loaded, `false` otherwise.
     * @protected
     */
    loadImage(image) {
      let imageState = image.getState();
      if (imageState != ImageState.LOADED && imageState != ImageState.ERROR) {
        listen(image, EventType.CHANGE, this.handleImageChange_, this);
      }
      if (imageState == ImageState.IDLE) {
        image.load();
        imageState = image.getState();
      }
      return imageState == ImageState.LOADED;
    }

    /**
     * @protected
     */
    renderIfReadyAndVisible() {
      const layer = this.getLayer();
      if (layer.getVisible() && layer.getSourceState() == SourceState.READY) {
        layer.changed();
      }
    }

  }

  /**
   * @module ol/renderer/canvas/Layer
   */

  /**
   * @abstract
   */
  class CanvasLayerRenderer extends LayerRenderer {

    /**
     * @param {import("../../layer/Layer.js").default} layer Layer.
     */
    constructor(layer) {

      super(layer);

      /**
       * @protected
       * @type {HTMLElement}
       */
      this.container = null;

      /**
       * @protected
       * @type {number}
       */
      this.renderedResolution;

      /**
       * A temporary transform.  The values in this transform should only be used in a
       * function that sets the values.
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.tempTransform_ = create();

      /**
       * The transform for rendered pixels to viewport CSS pixels.  This transform must
       * be set when rendering a frame and may be used by other functions after rendering.
       * @protected
       * @type {import("../../transform.js").Transform}
       */
      this.pixelTransform = create();

      /**
       * The transform for viewport CSS pixels to rendered pixels.  This transform must
       * be set when rendering a frame and may be used by other functions after rendering.
       * @protected
       * @type {import("../../transform.js").Transform}
       */
      this.inversePixelTransform = create();

      /**
       * @protected
       * @type {CanvasRenderingContext2D}
       */
      this.context = null;

      /**
       * @type {boolean}
       */
      this.containerReused = false;

    }

    /**
     * Get a rendering container from an existing target, if compatible.
     * @param {HTMLElement} target Potential render target.
     * @param {import("../../transform").Transform} transform Transform.
     * @param {number} opacity Opacity.
     */
    useContainer(target, transform, opacity) {
      const layerClassName = this.getLayer().getClassName();
      let container, context;
      if (target && target.style.opacity === '' && target.className === layerClassName) {
        const canvas = target.firstElementChild;
        if (canvas instanceof HTMLCanvasElement) {
          context = canvas.getContext('2d');
        }
      }
      if (context && context.canvas.style.transform === toString(transform)) {
        // Container of the previous layer renderer can be used.
        this.container = target;
        this.context = context;
        this.containerReused = true;
      } else if (this.containerReused) {
        // Previously reused container cannot be used any more.
        this.container = null;
        this.context = null;
        this.containerReused = false;
      }
      if (!this.container) {
        container = document.createElement('div');
        container.className = layerClassName;
        let style = container.style;
        style.position = 'absolute';
        style.width = '100%';
        style.height = '100%';
        context = createCanvasContext2D();
        const canvas = context.canvas;
        container.appendChild(canvas);
        style = canvas.style;
        style.position = 'absolute';
        style.transformOrigin = 'top left';
        this.container = container;
        this.context = context;
      }
    }

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../extent.js").Extent} extent Clip extent.
     * @protected
     */
    clip(context, frameState, extent) {
      const pixelRatio = frameState.pixelRatio;
      const halfWidth = (frameState.size[0] * pixelRatio) / 2;
      const halfHeight = (frameState.size[1] * pixelRatio) / 2;
      const rotation = frameState.viewState.rotation;
      const topLeft = getTopLeft(extent);
      const topRight = getTopRight(extent);
      const bottomRight = getBottomRight(extent);
      const bottomLeft = getBottomLeft(extent);

      apply(frameState.coordinateToPixelTransform, topLeft);
      apply(frameState.coordinateToPixelTransform, topRight);
      apply(frameState.coordinateToPixelTransform, bottomRight);
      apply(frameState.coordinateToPixelTransform, bottomLeft);

      context.save();
      rotateAtOffset(context, -rotation, halfWidth, halfHeight);
      context.beginPath();
      context.moveTo(topLeft[0] * pixelRatio, topLeft[1] * pixelRatio);
      context.lineTo(topRight[0] * pixelRatio, topRight[1] * pixelRatio);
      context.lineTo(bottomRight[0] * pixelRatio, bottomRight[1] * pixelRatio);
      context.lineTo(bottomLeft[0] * pixelRatio, bottomLeft[1] * pixelRatio);
      context.clip();
      rotateAtOffset(context, rotation, halfWidth, halfHeight);
    }

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../extent.js").Extent} extent Clip extent.
     * @protected
     */
    clipUnrotated(context, frameState, extent) {
      const topLeft = getTopLeft(extent);
      const topRight = getTopRight(extent);
      const bottomRight = getBottomRight(extent);
      const bottomLeft = getBottomLeft(extent);

      apply(frameState.coordinateToPixelTransform, topLeft);
      apply(frameState.coordinateToPixelTransform, topRight);
      apply(frameState.coordinateToPixelTransform, bottomRight);
      apply(frameState.coordinateToPixelTransform, bottomLeft);

      const inverted = this.inversePixelTransform;
      apply(inverted, topLeft);
      apply(inverted, topRight);
      apply(inverted, bottomRight);
      apply(inverted, bottomLeft);

      context.save();
      context.beginPath();
      context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));
      context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));
      context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));
      context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));
      context.clip();
    }

    /**
     * @param {import("../../render/EventType.js").default} type Event type.
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @private
     */
    dispatchRenderEvent_(type, context, frameState) {
      const layer = this.getLayer();
      if (layer.hasListener(type)) {
        const event = new RenderEvent(type, this.inversePixelTransform, frameState, context);
        layer.dispatchEvent(event);
      }
    }

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @protected
     */
    preRender(context, frameState) {
      this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);
    }

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @protected
     */
    postRender(context, frameState) {
      this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);
    }

    /**
     * Creates a transform for rendering to an element that will be rotated after rendering.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {number} width Width of the rendered element (in pixels).
     * @param {number} height Height of the rendered element (in pixels).
     * @param {number} offsetX Offset on the x-axis in view coordinates.
     * @protected
     * @return {!import("../../transform.js").Transform} Transform.
     */
    getRenderTransform(frameState, width, height, offsetX) {
      const viewState = frameState.viewState;
      const pixelRatio = frameState.pixelRatio;
      const dx1 = width / 2;
      const dy1 = height / 2;
      const sx = pixelRatio / viewState.resolution;
      const sy = -sx;
      const dx2 = -viewState.center[0] + offsetX;
      const dy2 = -viewState.center[1];
      return compose(this.tempTransform_, dx1, dy1, sx, sy, -viewState.rotation, dx2, dy2);
    }

    /**
     * @param {import("../../pixel.js").Pixel} pixel Pixel.
     * @param {import("../../PluggableMap.js").FrameState} frameState FrameState.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel
     *    location, null will be returned.  If there is data, but pixel values cannot be
     *    returned, and empty array will be returned.
     */
    getDataAtPixel(pixel, frameState, hitTolerance) {
      const renderPixel = apply(this.inversePixelTransform, pixel.slice());
      const context = this.context;

      let data;
      try {
        data = context.getImageData(Math.round(renderPixel[0]), Math.round(renderPixel[1]), 1, 1).data;
      } catch (err) {
        if (err.name === 'SecurityError') {
          // tainted canvas, we assume there is data at the given pixel (although there might not be)
          return new Uint8Array();
        }
        return data;
      }

      if (data[3] === 0) {
        return null;
      }
      return data;
    }

  }

  /**
   * @module ol/renderer/vector
   */


  /**
   * Tolerance for geometry simplification in device pixels.
   * @type {number}
   */
  const SIMPLIFY_TOLERANCE = 0.5;


  /**
   * @const
   * @type {Object<import("../geom/GeometryType.js").default,
   *                function(import("../render/canvas/BuilderGroup.js").default, import("../geom/Geometry.js").default,
   *                         import("../style/Style.js").default, Object): void>}
   */
  const GEOMETRY_RENDERERS = {
    'Point': renderPointGeometry,
    'LineString': renderLineStringGeometry,
    'Polygon': renderPolygonGeometry,
    'MultiPoint': renderMultiPointGeometry,
    'MultiLineString': renderMultiLineStringGeometry,
    'MultiPolygon': renderMultiPolygonGeometry,
    'GeometryCollection': renderGeometryCollectionGeometry,
    'Circle': renderCircleGeometry
  };


  /**
   * @param {import("../Feature.js").FeatureLike} feature1 Feature 1.
   * @param {import("../Feature.js").FeatureLike} feature2 Feature 2.
   * @return {number} Order.
   */
  function defaultOrder(feature1, feature2) {
    return parseInt(getUid(feature1), 10) - parseInt(getUid(feature2), 10);
  }


  /**
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   * @return {number} Squared pixel tolerance.
   */
  function getSquaredTolerance(resolution, pixelRatio) {
    const tolerance = getTolerance(resolution, pixelRatio);
    return tolerance * tolerance;
  }


  /**
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   * @return {number} Pixel tolerance.
   */
  function getTolerance(resolution, pixelRatio) {
    return SIMPLIFY_TOLERANCE * resolution / pixelRatio;
  }


  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Builder group.
   * @param {import("../geom/Circle.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").default} feature Feature.
   */
  function renderCircleGeometry(builderGroup, geometry, style, feature) {
    const fillStyle = style.getFill();
    const strokeStyle = style.getStroke();
    if (fillStyle || strokeStyle) {
      const circleReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.CIRCLE);
      circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);
      circleReplay.drawCircle(geometry, feature);
    }
    const textStyle = style.getText();
    if (textStyle) {
      const textReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.TEXT);
      textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(false));
      textReplay.drawText(geometry, feature);
    }
  }


  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {import("../style/Style.js").default} style Style.
   * @param {number} squaredTolerance Squared tolerance.
   * @param {function(this: T, import("../events/Event.js").default): void} listener Listener function.
   * @param {T} thisArg Value to use as `this` when executing `listener`.
   * @return {boolean} `true` if style is loading.
   * @template T
   */
  function renderFeature(replayGroup, feature, style, squaredTolerance, listener, thisArg) {
    let loading = false;
    const imageStyle = style.getImage();
    if (imageStyle) {
      let imageState = imageStyle.getImageState();
      if (imageState == ImageState.LOADED || imageState == ImageState.ERROR) {
        imageStyle.unlistenImageChange(listener, thisArg);
      } else {
        if (imageState == ImageState.IDLE) {
          imageStyle.load();
        }
        imageState = imageStyle.getImageState();
        imageStyle.listenImageChange(listener, thisArg);
        loading = true;
      }
    }
    renderFeatureInternal(replayGroup, feature, style, squaredTolerance);

    return loading;
  }


  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {import("../style/Style.js").default} style Style.
   * @param {number} squaredTolerance Squared tolerance.
   */
  function renderFeatureInternal(replayGroup, feature, style, squaredTolerance) {
    const geometry = style.getGeometryFunction()(feature);
    if (!geometry) {
      return;
    }
    const simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);
    const renderer = style.getRenderer();
    if (renderer) {
      renderGeometry(replayGroup, simplifiedGeometry, style, feature);
    } else {
      const geometryRenderer = GEOMETRY_RENDERERS[simplifiedGeometry.getType()];
      geometryRenderer(replayGroup, simplifiedGeometry, style, feature);
    }
  }


  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
   * @param {import("../geom/Geometry.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */
  function renderGeometry(replayGroup, geometry, style, feature) {
    if (geometry.getType() == GeometryType.GEOMETRY_COLLECTION) {
      const geometries = /** @type {import("../geom/GeometryCollection.js").default} */ (geometry).getGeometries();
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        renderGeometry(replayGroup, geometries[i], style, feature);
      }
      return;
    }
    const replay = replayGroup.getBuilder(style.getZIndex(), ReplayType.DEFAULT);
    replay.drawCustom(/** @type {import("../geom/SimpleGeometry.js").default} */ (geometry), feature, style.getRenderer());
  }


  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
   * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").default} feature Feature.
   */
  function renderGeometryCollectionGeometry(replayGroup, geometry, style, feature) {
    const geometries = geometry.getGeometriesArray();
    let i, ii;
    for (i = 0, ii = geometries.length; i < ii; ++i) {
      const geometryRenderer =
          GEOMETRY_RENDERERS[geometries[i].getType()];
      geometryRenderer(replayGroup, geometries[i], style, feature);
    }
  }


  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
   * @param {import("../geom/LineString.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */
  function renderLineStringGeometry(builderGroup, geometry, style, feature) {
    const strokeStyle = style.getStroke();
    if (strokeStyle) {
      const lineStringReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.LINE_STRING);
      lineStringReplay.setFillStrokeStyle(null, strokeStyle);
      lineStringReplay.drawLineString(geometry, feature);
    }
    const textStyle = style.getText();
    if (textStyle) {
      const textReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.TEXT);
      textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(false));
      textReplay.drawText(geometry, feature);
    }
  }


  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
   * @param {import("../geom/MultiLineString.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */
  function renderMultiLineStringGeometry(builderGroup, geometry, style, feature) {
    const strokeStyle = style.getStroke();
    if (strokeStyle) {
      const lineStringReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.LINE_STRING);
      lineStringReplay.setFillStrokeStyle(null, strokeStyle);
      lineStringReplay.drawMultiLineString(geometry, feature);
    }
    const textStyle = style.getText();
    if (textStyle) {
      const textReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.TEXT);
      textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(false));
      textReplay.drawText(geometry, feature);
    }
  }


  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
   * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").default} feature Feature.
   */
  function renderMultiPolygonGeometry(builderGroup, geometry, style, feature) {
    const fillStyle = style.getFill();
    const strokeStyle = style.getStroke();
    if (strokeStyle || fillStyle) {
      const polygonReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.POLYGON);
      polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);
      polygonReplay.drawMultiPolygon(geometry, feature);
    }
    const textStyle = style.getText();
    if (textStyle) {
      const textReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.TEXT);
      textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(false));
      textReplay.drawText(geometry, feature);
    }
  }


  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
   * @param {import("../geom/Point.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */
  function renderPointGeometry(builderGroup, geometry, style, feature) {
    const imageStyle = style.getImage();
    if (imageStyle) {
      if (imageStyle.getImageState() != ImageState.LOADED) {
        return;
      }
      const imageReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.IMAGE);
      imageReplay.setImageStyle(imageStyle, builderGroup.addDeclutter(false));
      imageReplay.drawPoint(geometry, feature);
    }
    const textStyle = style.getText();
    if (textStyle) {
      const textReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.TEXT);
      textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(!!imageStyle));
      textReplay.drawText(geometry, feature);
    }
  }


  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
   * @param {import("../geom/MultiPoint.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */
  function renderMultiPointGeometry(builderGroup, geometry, style, feature) {
    const imageStyle = style.getImage();
    if (imageStyle) {
      if (imageStyle.getImageState() != ImageState.LOADED) {
        return;
      }
      const imageReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.IMAGE);
      imageReplay.setImageStyle(imageStyle, builderGroup.addDeclutter(false));
      imageReplay.drawMultiPoint(geometry, feature);
    }
    const textStyle = style.getText();
    if (textStyle) {
      const textReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.TEXT);
      textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(!!imageStyle));
      textReplay.drawText(geometry, feature);
    }
  }


  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
   * @param {import("../geom/Polygon.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */
  function renderPolygonGeometry(builderGroup, geometry, style, feature) {
    const fillStyle = style.getFill();
    const strokeStyle = style.getStroke();
    if (fillStyle || strokeStyle) {
      const polygonReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.POLYGON);
      polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);
      polygonReplay.drawPolygon(geometry, feature);
    }
    const textStyle = style.getText();
    if (textStyle) {
      const textReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.TEXT);
      textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(false));
      textReplay.drawText(geometry, feature);
    }
  }

  /**
   * @module ol/renderer/canvas/VectorLayer
   */

  /**
   * @classdesc
   * Canvas renderer for vector layers.
   * @api
   */
  class CanvasVectorLayerRenderer extends CanvasLayerRenderer {

    /**
     * @param {import("../../layer/Vector.js").default} vectorLayer Vector layer.
     */
    constructor(vectorLayer) {

      super(vectorLayer);

      /**
       * @private
       * @type {boolean}
       */
      this.dirty_ = false;

      /**
       * @private
       * @type {number}
       */
      this.renderedRevision_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.renderedResolution_ = NaN;

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.renderedExtent_ = createEmpty();

      /**
       * @private
       * @type {function(import("../../Feature.js").default, import("../../Feature.js").default): number|null}
       */
      this.renderedRenderOrder_ = null;

      /**
       * @private
       * @type {import("../../render/canvas/ExecutorGroup").default}
       */
      this.replayGroup_ = null;

      /**
       * A new replay group had to be created by `prepareFrame()`
       * @type {boolean}
       */
      this.replayGroupChanged = true;
    }

    /**
     * @inheritDoc
     */
    useContainer(target, transform, opacity) {
      if (opacity < 1) {
        target = null;
      }
      super.useContainer(target, transform, opacity);
    }

    /**
     * @inheritDoc
     */
    renderFrame(frameState, target) {

      const pixelRatio = frameState.pixelRatio;
      const layerState = frameState.layerStatesArray[frameState.layerIndex];

      // set forward and inverse pixel transforms
      makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);
      makeInverse(this.inversePixelTransform, this.pixelTransform);

      this.useContainer(target, this.pixelTransform, layerState.opacity);
      const context = this.context;
      const canvas = context.canvas;

      const replayGroup = this.replayGroup_;
      if (!replayGroup || replayGroup.isEmpty()) {
        if (!this.containerReused && canvas.width > 0) {
          canvas.width = 0;
        }
        return this.container;
      }

      // resize and clear
      const width = Math.round(frameState.size[0] * pixelRatio);
      const height = Math.round(frameState.size[1] * pixelRatio);
      if (canvas.width != width || canvas.height != height) {
        canvas.width = width;
        canvas.height = height;
        const canvasTransform = toString(this.pixelTransform);
        if (canvas.style.transform !== canvasTransform) {
          canvas.style.transform = canvasTransform;
        }
      } else if (!this.containerReused) {
        context.clearRect(0, 0, width, height);
      }

      this.preRender(context, frameState);

      const extent = frameState.extent;
      const viewState = frameState.viewState;
      const projection = viewState.projection;
      const rotation = viewState.rotation;
      const projectionExtent = projection.getExtent();
      const vectorSource = this.getLayer().getSource();

      // clipped rendering if layer extent is set
      const clipExtent = layerState.extent;
      const clipped = clipExtent !== undefined;
      if (clipped) {
        this.clip(context, frameState, clipExtent);
      }


      const viewHints = frameState.viewHints;
      const snapToPixel = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);

      const transform = this.getRenderTransform(frameState, width, height, 0);
      const skippedFeatureUids = layerState.managed ? frameState.skippedFeatureUids : {};
      const declutterReplays = /** @type {import("../../layer/Vector.js").default} */ (this.getLayer()).getDeclutter() ? {} : null;
      replayGroup.execute(context, transform, rotation, skippedFeatureUids, snapToPixel, undefined, declutterReplays);

      if (vectorSource.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, extent)) {
        let startX = extent[0];
        const worldWidth = getWidth(projectionExtent);
        let world = 0;
        let offsetX;
        while (startX < projectionExtent[0]) {
          --world;
          offsetX = worldWidth * world;
          const transform = this.getRenderTransform(frameState, width, height, offsetX);
          replayGroup.execute(context, transform, rotation, skippedFeatureUids, snapToPixel, undefined, declutterReplays);
          startX += worldWidth;
        }
        world = 0;
        startX = extent[2];
        while (startX > projectionExtent[2]) {
          ++world;
          offsetX = worldWidth * world;
          const transform = this.getRenderTransform(frameState, width, height, offsetX);
          replayGroup.execute(context, transform, rotation, skippedFeatureUids, snapToPixel, undefined, declutterReplays);
          startX -= worldWidth;
        }
      }
      if (declutterReplays) {
        const viewHints = frameState.viewHints;
        const hifi = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);
        replayDeclutter(declutterReplays, context, rotation, 1, hifi, frameState.declutterItems);
      }

      if (clipped) {
        context.restore();
      }

      this.postRender(context, frameState);

      const opacity = layerState.opacity;
      const container = this.container;
      if (opacity !== parseFloat(container.style.opacity)) {
        container.style.opacity = opacity === 1 ? '' : opacity;
      }

      return this.container;
    }

    /**
     * @inheritDoc
     */
    forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, declutteredFeatures) {
      if (!this.replayGroup_) {
        return undefined;
      } else {
        const resolution = frameState.viewState.resolution;
        const rotation = frameState.viewState.rotation;
        const layer = /** @type {import("../../layer/Vector").default} */ (this.getLayer());
        /** @type {!Object<string, boolean>} */
        const features = {};
        const result = this.replayGroup_.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, {},
          /**
           * @param {import("../../Feature.js").FeatureLike} feature Feature.
           * @return {?} Callback result.
           */
          function(feature) {
            const key = getUid(feature);
            if (!(key in features)) {
              features[key] = true;
              return callback(feature, layer);
            }
          }, layer.getDeclutter() ? declutteredFeatures : null);
        return result;
      }
    }

    /**
     * @inheritDoc
     */
    handleFontsChanged() {
      const layer = this.getLayer();
      if (layer.getVisible() && this.replayGroup_) {
        layer.changed();
      }
    }

    /**
     * Handle changes in image style state.
     * @param {import("../../events/Event.js").default} event Image style change event.
     * @private
     */
    handleStyleImageChange_(event) {
      this.renderIfReadyAndVisible();
    }

    /**
     * @inheritDoc
     */
    prepareFrame(frameState) {
      const vectorLayer = /** @type {import("../../layer/Vector.js").default} */ (this.getLayer());
      const vectorSource = vectorLayer.getSource();

      const animating = frameState.viewHints[ViewHint.ANIMATING];
      const interacting = frameState.viewHints[ViewHint.INTERACTING];
      const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();
      const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();

      if (!this.dirty_ && (!updateWhileAnimating && animating) ||
          (!updateWhileInteracting && interacting)) {
        return true;
      }

      const frameStateExtent = frameState.extent;
      const viewState = frameState.viewState;
      const projection = viewState.projection;
      const resolution = viewState.resolution;
      const pixelRatio = frameState.pixelRatio;
      const vectorLayerRevision = vectorLayer.getRevision();
      const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();
      let vectorLayerRenderOrder = vectorLayer.getRenderOrder();

      if (vectorLayerRenderOrder === undefined) {
        vectorLayerRenderOrder = defaultOrder;
      }

      const extent = buffer(frameStateExtent,
        vectorLayerRenderBuffer * resolution);
      const projectionExtent = viewState.projection.getExtent();

      if (vectorSource.getWrapX() && viewState.projection.canWrapX() &&
          !containsExtent(projectionExtent, frameState.extent)) {
        // For the replay group, we need an extent that intersects the real world
        // (-180° to +180°). To support geometries in a coordinate range from -540°
        // to +540°, we add at least 1 world width on each side of the projection
        // extent. If the viewport is wider than the world, we need to add half of
        // the viewport width to make sure we cover the whole viewport.
        const worldWidth = getWidth(projectionExtent);
        const gutter = Math.max(getWidth(extent) / 2, worldWidth);
        extent[0] = projectionExtent[0] - gutter;
        extent[2] = projectionExtent[2] + gutter;
      }

      if (!this.dirty_ &&
          this.renderedResolution_ == resolution &&
          this.renderedRevision_ == vectorLayerRevision &&
          this.renderedRenderOrder_ == vectorLayerRenderOrder &&
          containsExtent(this.renderedExtent_, extent)) {
        this.replayGroupChanged = false;
        return true;
      }

      if (this.replayGroup_) {
        this.replayGroup_.dispose();
      }
      this.replayGroup_ = null;

      this.dirty_ = false;

      const replayGroup = new BuilderGroup(
        getTolerance(resolution, pixelRatio), extent, resolution,
        pixelRatio, vectorLayer.getDeclutter());

      vectorSource.loadFeatures(extent, resolution, projection);

      /**
       * @param {import("../../Feature.js").default} feature Feature.
       * @this {CanvasVectorLayerRenderer}
       */
      const render = function(feature) {
        let styles;
        const styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();
        if (styleFunction) {
          styles = styleFunction(feature, resolution);
        }
        if (styles) {
          const dirty = this.renderFeature(
            feature, resolution, pixelRatio, styles, replayGroup);
          this.dirty_ = this.dirty_ || dirty;
        }
      }.bind(this);
      if (vectorLayerRenderOrder) {
        /** @type {Array<import("../../Feature.js").default>} */
        const features = [];
        vectorSource.forEachFeatureInExtent(extent,
          /**
           * @param {import("../../Feature.js").default} feature Feature.
           */
          function(feature) {
            features.push(feature);
          });
        features.sort(vectorLayerRenderOrder);
        for (let i = 0, ii = features.length; i < ii; ++i) {
          render(features[i]);
        }
      } else {
        vectorSource.forEachFeatureInExtent(extent, render);
      }

      const replayGroupInstructions = replayGroup.finish();
      const executorGroup = new ExecutorGroup(extent, resolution,
        pixelRatio, vectorSource.getOverlaps(),
        replayGroupInstructions, vectorLayer.getRenderBuffer());

      this.renderedResolution_ = resolution;
      this.renderedRevision_ = vectorLayerRevision;
      this.renderedRenderOrder_ = vectorLayerRenderOrder;
      this.renderedExtent_ = extent;
      this.replayGroup_ = executorGroup;

      this.replayGroupChanged = true;
      return true;
    }

    /**
     * @param {import("../../Feature.js").default} feature Feature.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../../style/Style.js").default|Array<import("../../style/Style.js").default>} styles The style or array of styles.
     * @param {import("../../render/canvas/BuilderGroup.js").default} builderGroup Builder group.
     * @return {boolean} `true` if an image is loading.
     */
    renderFeature(feature, resolution, pixelRatio, styles, builderGroup) {
      if (!styles) {
        return false;
      }
      let loading = false;
      if (Array.isArray(styles)) {
        for (let i = 0, ii = styles.length; i < ii; ++i) {
          loading = renderFeature(
            builderGroup, feature, styles[i],
            getSquaredTolerance(resolution, pixelRatio),
            this.handleStyleImageChange_, this) || loading;
        }
      } else {
        loading = renderFeature(
          builderGroup, feature, styles,
          getSquaredTolerance(resolution, pixelRatio),
          this.handleStyleImageChange_, this);
      }
      return loading;
    }
  }

  /**
   * @module ol/layer/Vector
   */


  /**
   * @classdesc
   * Vector data that is rendered client-side.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @extends {BaseVectorLayer<import("../source/Vector.js").default>}
   * @api
   */
  class VectorLayer extends BaseVectorLayer {
    /**
     * @param {import("./BaseVector.js").Options=} opt_options Options.
     */
    constructor(opt_options) {
      super(opt_options);
    }

    /**
     * Create a renderer for this layer.
     * @return {import("../renderer/Layer.js").default} A layer renderer.
     * @protected
     */
    createRenderer() {
      return new CanvasVectorLayerRenderer(this);
    }
  }

  /**
   * @module ol/string
   */

  /**
   * @param {number} number Number to be formatted
   * @param {number} width The desired width
   * @param {number=} opt_precision Precision of the output string (i.e. number of decimal places)
   * @returns {string} Formatted string
   */
  function padNumber(number, width, opt_precision) {
    const numberString = opt_precision !== undefined ? number.toFixed(opt_precision) : '' + number;
    let decimal = numberString.indexOf('.');
    decimal = decimal === -1 ? numberString.length : decimal;
    return decimal > width ? numberString : new Array(1 + width - decimal).join('0') + numberString;
  }


  /**
   * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js
   * @param {string|number} v1 First version
   * @param {string|number} v2 Second version
   * @returns {number} Value
   */
  function compareVersions(v1, v2) {
    const s1 = ('' + v1).split('.');
    const s2 = ('' + v2).split('.');

    for (let i = 0; i < Math.max(s1.length, s2.length); i++) {
      const n1 = parseInt(s1[i] || '0', 10);
      const n2 = parseInt(s2[i] || '0', 10);

      if (n1 > n2) {
        return 1;
      }
      if (n2 > n1) {
        return -1;
      }
    }

    return 0;
  }

  /**
   * @module ol/coordinate
   */


  /**
   * An array of numbers representing an xy coordinate. Example: `[16, 48]`.
   * @typedef {Array<number>} Coordinate
   * @api
   */


  /**
   * A function that takes a {@link module:ol/coordinate~Coordinate} and
   * transforms it into a `{string}`.
   *
   * @typedef {function((Coordinate|undefined)): string} CoordinateFormat
   * @api
   */


  /**
   * Add `delta` to `coordinate`. `coordinate` is modified in place and returned
   * by the function.
   *
   * Example:
   *
   *     import {add} from 'ol/coordinate';
   *
   *     var coord = [7.85, 47.983333];
   *     add(coord, [-2, 4]);
   *     // coord is now [5.85, 51.983333]
   *
   * @param {Coordinate} coordinate Coordinate.
   * @param {Coordinate} delta Delta.
   * @return {Coordinate} The input coordinate adjusted by
   * the given delta.
   * @api
   */
  function add$2(coordinate, delta) {
    coordinate[0] += +delta[0];
    coordinate[1] += +delta[1];
    return coordinate;
  }


  /**
   * Calculates the point closest to the passed coordinate on the passed circle.
   *
   * @param {Coordinate} coordinate The coordinate.
   * @param {import("./geom/Circle.js").default} circle The circle.
   * @return {Coordinate} Closest point on the circumference.
   */
  function closestOnCircle(coordinate, circle) {
    const r = circle.getRadius();
    const center = circle.getCenter();
    const x0 = center[0];
    const y0 = center[1];
    const x1 = coordinate[0];
    const y1 = coordinate[1];

    let dx = x1 - x0;
    const dy = y1 - y0;
    if (dx === 0 && dy === 0) {
      dx = 1;
    }
    const d = Math.sqrt(dx * dx + dy * dy);

    const x = x0 + r * dx / d;
    const y = y0 + r * dy / d;

    return [x, y];
  }


  /**
   * Calculates the point closest to the passed coordinate on the passed segment.
   * This is the foot of the perpendicular of the coordinate to the segment when
   * the foot is on the segment, or the closest segment coordinate when the foot
   * is outside the segment.
   *
   * @param {Coordinate} coordinate The coordinate.
   * @param {Array<Coordinate>} segment The two coordinates
   * of the segment.
   * @return {Coordinate} The foot of the perpendicular of
   * the coordinate to the segment.
   */
  function closestOnSegment(coordinate, segment) {
    const x0 = coordinate[0];
    const y0 = coordinate[1];
    const start = segment[0];
    const end = segment[1];
    const x1 = start[0];
    const y1 = start[1];
    const x2 = end[0];
    const y2 = end[1];
    const dx = x2 - x1;
    const dy = y2 - y1;
    const along = (dx === 0 && dy === 0) ? 0 :
      ((dx * (x0 - x1)) + (dy * (y0 - y1))) / ((dx * dx + dy * dy) || 0);
    let x, y;
    if (along <= 0) {
      x = x1;
      y = y1;
    } else if (along >= 1) {
      x = x2;
      y = y2;
    } else {
      x = x1 + along * dx;
      y = y1 + along * dy;
    }
    return [x, y];
  }


  /**
   * @param {string} hemispheres Hemispheres.
   * @param {number} degrees Degrees.
   * @param {number=} opt_fractionDigits The number of digits to include
   *    after the decimal point. Default is `0`.
   * @return {string} String.
   */
  function degreesToStringHDMS(hemispheres, degrees, opt_fractionDigits) {
    const normalizedDegrees = modulo(degrees + 180, 360) - 180;
    const x = Math.abs(3600 * normalizedDegrees);
    const dflPrecision = opt_fractionDigits || 0;
    const precision = Math.pow(10, dflPrecision);

    let deg = Math.floor(x / 3600);
    let min = Math.floor((x - deg * 3600) / 60);
    let sec = x - (deg * 3600) - (min * 60);
    sec = Math.ceil(sec * precision) / precision;

    if (sec >= 60) {
      sec = 0;
      min += 1;
    }

    if (min >= 60) {
      min = 0;
      deg += 1;
    }

    return deg + '\u00b0 ' + padNumber(min, 2) + '\u2032 ' +
      padNumber(sec, 2, dflPrecision) + '\u2033' +
      (normalizedDegrees == 0 ? '' : ' ' + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0));
  }


  /**
   * @param {Coordinate} coordinate1 First coordinate.
   * @param {Coordinate} coordinate2 Second coordinate.
   * @return {boolean} The two coordinates are equal.
   */
  function equals$2(coordinate1, coordinate2) {
    let equals = true;
    for (let i = coordinate1.length - 1; i >= 0; --i) {
      if (coordinate1[i] != coordinate2[i]) {
        equals = false;
        break;
      }
    }
    return equals;
  }


  /**
   * Rotate `coordinate` by `angle`. `coordinate` is modified in place and
   * returned by the function.
   *
   * Example:
   *
   *     import {rotate} from 'ol/coordinate';
   *
   *     var coord = [7.85, 47.983333];
   *     var rotateRadians = Math.PI / 2; // 90 degrees
   *     rotate(coord, rotateRadians);
   *     // coord is now [-47.983333, 7.85]
   *
   * @param {Coordinate} coordinate Coordinate.
   * @param {number} angle Angle in radian.
   * @return {Coordinate} Coordinate.
   * @api
   */
  function rotate$2(coordinate, angle) {
    const cosAngle = Math.cos(angle);
    const sinAngle = Math.sin(angle);
    const x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;
    const y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;
    coordinate[0] = x;
    coordinate[1] = y;
    return coordinate;
  }


  /**
   * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned
   * by the function.
   *
   * Example:
   *
   *     import {scale as scaleCoordinate} from 'ol/coordinate';
   *
   *     var coord = [7.85, 47.983333];
   *     var scale = 1.2;
   *     scaleCoordinate(coord, scale);
   *     // coord is now [9.42, 57.5799996]
   *
   * @param {Coordinate} coordinate Coordinate.
   * @param {number} scale Scale factor.
   * @return {Coordinate} Coordinate.
   */
  function scale$2(coordinate, scale) {
    coordinate[0] *= scale;
    coordinate[1] *= scale;
    return coordinate;
  }


  /**
   * @param {Coordinate} coord1 First coordinate.
   * @param {Coordinate} coord2 Second coordinate.
   * @return {number} Squared distance between coord1 and coord2.
   */
  function squaredDistance$1(coord1, coord2) {
    const dx = coord1[0] - coord2[0];
    const dy = coord1[1] - coord2[1];
    return dx * dx + dy * dy;
  }


  /**
   * @param {Coordinate} coord1 First coordinate.
   * @param {Coordinate} coord2 Second coordinate.
   * @return {number} Distance between coord1 and coord2.
   */
  function distance(coord1, coord2) {
    return Math.sqrt(squaredDistance$1(coord1, coord2));
  }


  /**
   * Calculate the squared distance from a coordinate to a line segment.
   *
   * @param {Coordinate} coordinate Coordinate of the point.
   * @param {Array<Coordinate>} segment Line segment (2
   * coordinates).
   * @return {number} Squared distance from the point to the line segment.
   */
  function squaredDistanceToSegment(coordinate, segment) {
    return squaredDistance$1(coordinate,
      closestOnSegment(coordinate, segment));
  }

  /**
   * @module ol/style/Text
   */


  /**
   * The default fill color to use if no fill was set at construction time; a
   * blackish `#333`.
   *
   * @const {string}
   */
  const DEFAULT_FILL_COLOR = '#333';


  /**
   * @typedef {Object} Options
   * @property {string} [font] Font style as CSS 'font' value, see:
   * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is '10px sans-serif'
   * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.
   * The expected value is in radians, and the default is 45° (`Math.PI / 4`).
   * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.
   * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.
   * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed
   * the width of the polygon at the label position or the length of the path that it follows.
   * @property {import("./TextPlacement.js").default|string} [placement='point'] Text placement.
   * @property {number} [scale] Scale.
   * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.
   * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
   * @property {string} [text] Text content.
   * @property {string} [textAlign] Text alignment. Possible values: 'left', 'right', 'center', 'end' or 'start'.
   * Default is 'center' for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a
   * placement where `maxAngle` is not exceeded.
   * @property {string} [textBaseline='middle'] Text base line. Possible values: 'bottom', 'top', 'middle', 'alphabetic',
   * 'hanging', 'ideographic'.
   * @property {import("./Fill.js").default} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333).
   * @property {import("./Stroke.js").default} [stroke] Stroke style.
   * @property {import("./Fill.js").default} [backgroundFill] Fill style for the text background when `placement` is
   * `'point'`. Default is no fill.
   * @property {import("./Stroke.js").default} [backgroundStroke] Stroke style for the text background  when `placement`
   * is `'point'`. Default is no stroke.
   * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of
   * values in the array is `[top, right, bottom, left]`.
   */


  /**
   * @classdesc
   * Set text style for vector features.
   * @api
   */
  class Text {
    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {

      const options = opt_options || {};

      /**
       * @private
       * @type {string|undefined}
       */
      this.font_ = options.font;

      /**
       * @private
       * @type {number|undefined}
       */
      this.rotation_ = options.rotation;

      /**
       * @private
       * @type {boolean|undefined}
       */
      this.rotateWithView_ = options.rotateWithView;

      /**
       * @private
       * @type {number|undefined}
       */
      this.scale_ = options.scale;

      /**
       * @private
       * @type {string|undefined}
       */
      this.text_ = options.text;

      /**
       * @private
       * @type {string|undefined}
       */
      this.textAlign_ = options.textAlign;

      /**
       * @private
       * @type {string|undefined}
       */
      this.textBaseline_ = options.textBaseline;

      /**
       * @private
       * @type {import("./Fill.js").default}
       */
      this.fill_ = options.fill !== undefined ? options.fill :
        new Fill({color: DEFAULT_FILL_COLOR});

      /**
       * @private
       * @type {number}
       */
      this.maxAngle_ = options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;

      /**
       * @private
       * @type {import("./TextPlacement.js").default|string}
       */
      this.placement_ = options.placement !== undefined ? options.placement : TextPlacement.POINT;

      /**
       * @private
       * @type {boolean}
       */
      this.overflow_ = !!options.overflow;

      /**
       * @private
       * @type {import("./Stroke.js").default}
       */
      this.stroke_ = options.stroke !== undefined ? options.stroke : null;

      /**
       * @private
       * @type {number}
       */
      this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;

      /**
       * @private
       * @type {number}
       */
      this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;

      /**
       * @private
       * @type {import("./Fill.js").default}
       */
      this.backgroundFill_ = options.backgroundFill ? options.backgroundFill : null;

      /**
       * @private
       * @type {import("./Stroke.js").default}
       */
      this.backgroundStroke_ = options.backgroundStroke ? options.backgroundStroke : null;

      /**
       * @private
       * @type {Array<number>}
       */
      this.padding_ = options.padding === undefined ? null : options.padding;
    }

    /**
     * Clones the style.
     * @return {Text} The cloned style.
     * @api
     */
    clone() {
      return new Text({
        font: this.getFont(),
        placement: this.getPlacement(),
        maxAngle: this.getMaxAngle(),
        overflow: this.getOverflow(),
        rotation: this.getRotation(),
        rotateWithView: this.getRotateWithView(),
        scale: this.getScale(),
        text: this.getText(),
        textAlign: this.getTextAlign(),
        textBaseline: this.getTextBaseline(),
        fill: this.getFill() ? this.getFill().clone() : undefined,
        stroke: this.getStroke() ? this.getStroke().clone() : undefined,
        offsetX: this.getOffsetX(),
        offsetY: this.getOffsetY(),
        backgroundFill: this.getBackgroundFill() ? this.getBackgroundFill().clone() : undefined,
        backgroundStroke: this.getBackgroundStroke() ? this.getBackgroundStroke().clone() : undefined
      });
    }

    /**
     * Get the `overflow` configuration.
     * @return {boolean} Let text overflow the length of the path they follow.
     * @api
     */
    getOverflow() {
      return this.overflow_;
    }

    /**
     * Get the font name.
     * @return {string|undefined} Font.
     * @api
     */
    getFont() {
      return this.font_;
    }

    /**
     * Get the maximum angle between adjacent characters.
     * @return {number} Angle in radians.
     * @api
     */
    getMaxAngle() {
      return this.maxAngle_;
    }

    /**
     * Get the label placement.
     * @return {import("./TextPlacement.js").default|string} Text placement.
     * @api
     */
    getPlacement() {
      return this.placement_;
    }

    /**
     * Get the x-offset for the text.
     * @return {number} Horizontal text offset.
     * @api
     */
    getOffsetX() {
      return this.offsetX_;
    }

    /**
     * Get the y-offset for the text.
     * @return {number} Vertical text offset.
     * @api
     */
    getOffsetY() {
      return this.offsetY_;
    }

    /**
     * Get the fill style for the text.
     * @return {import("./Fill.js").default} Fill style.
     * @api
     */
    getFill() {
      return this.fill_;
    }

    /**
     * Determine whether the text rotates with the map.
     * @return {boolean|undefined} Rotate with map.
     * @api
     */
    getRotateWithView() {
      return this.rotateWithView_;
    }

    /**
     * Get the text rotation.
     * @return {number|undefined} Rotation.
     * @api
     */
    getRotation() {
      return this.rotation_;
    }

    /**
     * Get the text scale.
     * @return {number|undefined} Scale.
     * @api
     */
    getScale() {
      return this.scale_;
    }

    /**
     * Get the stroke style for the text.
     * @return {import("./Stroke.js").default} Stroke style.
     * @api
     */
    getStroke() {
      return this.stroke_;
    }

    /**
     * Get the text to be rendered.
     * @return {string|undefined} Text.
     * @api
     */
    getText() {
      return this.text_;
    }

    /**
     * Get the text alignment.
     * @return {string|undefined} Text align.
     * @api
     */
    getTextAlign() {
      return this.textAlign_;
    }

    /**
     * Get the text baseline.
     * @return {string|undefined} Text baseline.
     * @api
     */
    getTextBaseline() {
      return this.textBaseline_;
    }

    /**
     * Get the background fill style for the text.
     * @return {import("./Fill.js").default} Fill style.
     * @api
     */
    getBackgroundFill() {
      return this.backgroundFill_;
    }

    /**
     * Get the background stroke style for the text.
     * @return {import("./Stroke.js").default} Stroke style.
     * @api
     */
    getBackgroundStroke() {
      return this.backgroundStroke_;
    }

    /**
     * Get the padding for the text.
     * @return {Array<number>} Padding.
     * @api
     */
    getPadding() {
      return this.padding_;
    }

    /**
     * Set the `overflow` property.
     *
     * @param {boolean} overflow Let text overflow the path that it follows.
     * @api
     */
    setOverflow(overflow) {
      this.overflow_ = overflow;
    }

    /**
     * Set the font.
     *
     * @param {string|undefined} font Font.
     * @api
     */
    setFont(font) {
      this.font_ = font;
    }

    /**
     * Set the maximum angle between adjacent characters.
     *
     * @param {number} maxAngle Angle in radians.
     * @api
     */
    setMaxAngle(maxAngle) {
      this.maxAngle_ = maxAngle;
    }

    /**
     * Set the x offset.
     *
     * @param {number} offsetX Horizontal text offset.
     * @api
     */
    setOffsetX(offsetX) {
      this.offsetX_ = offsetX;
    }

    /**
     * Set the y offset.
     *
     * @param {number} offsetY Vertical text offset.
     * @api
     */
    setOffsetY(offsetY) {
      this.offsetY_ = offsetY;
    }

    /**
     * Set the text placement.
     *
     * @param {import("./TextPlacement.js").default|string} placement Placement.
     * @api
     */
    setPlacement(placement) {
      this.placement_ = placement;
    }

    /**
     * Set whether to rotate the text with the view.
     *
     * @param {boolean} rotateWithView Rotate with map.
     * @api
     */
    setRotateWithView(rotateWithView) {
      this.rotateWithView_ = rotateWithView;
    }

    /**
     * Set the fill.
     *
     * @param {import("./Fill.js").default} fill Fill style.
     * @api
     */
    setFill(fill) {
      this.fill_ = fill;
    }

    /**
     * Set the rotation.
     *
     * @param {number|undefined} rotation Rotation.
     * @api
     */
    setRotation(rotation) {
      this.rotation_ = rotation;
    }

    /**
     * Set the scale.
     *
     * @param {number|undefined} scale Scale.
     * @api
     */
    setScale(scale) {
      this.scale_ = scale;
    }

    /**
     * Set the stroke.
     *
     * @param {import("./Stroke.js").default} stroke Stroke style.
     * @api
     */
    setStroke(stroke) {
      this.stroke_ = stroke;
    }

    /**
     * Set the text.
     *
     * @param {string|undefined} text Text.
     * @api
     */
    setText(text) {
      this.text_ = text;
    }

    /**
     * Set the text alignment.
     *
     * @param {string|undefined} textAlign Text align.
     * @api
     */
    setTextAlign(textAlign) {
      this.textAlign_ = textAlign;
    }

    /**
     * Set the text baseline.
     *
     * @param {string|undefined} textBaseline Text baseline.
     * @api
     */
    setTextBaseline(textBaseline) {
      this.textBaseline_ = textBaseline;
    }

    /**
     * Set the background fill.
     *
     * @param {import("./Fill.js").default} fill Fill style.
     * @api
     */
    setBackgroundFill(fill) {
      this.backgroundFill_ = fill;
    }

    /**
     * Set the background stroke.
     *
     * @param {import("./Stroke.js").default} stroke Stroke style.
     * @api
     */
    setBackgroundStroke(stroke) {
      this.backgroundStroke_ = stroke;
    }

    /**
     * Set the padding (`[top, right, bottom, left]`).
     *
     * @param {!Array<number>} padding Padding.
     * @api
     */
    setPadding(padding) {
      this.padding_ = padding;
    }
  }

  /**
   * @module ol/geom/flat/interpolate
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} fraction Fraction.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Destination.
   */
  function interpolatePoint(flatCoordinates, offset, end, stride, fraction, opt_dest) {
    let pointX = NaN;
    let pointY = NaN;
    const n = (end - offset) / stride;
    if (n === 1) {
      pointX = flatCoordinates[offset];
      pointY = flatCoordinates[offset + 1];
    } else if (n == 2) {
      pointX = (1 - fraction) * flatCoordinates[offset] +
          fraction * flatCoordinates[offset + stride];
      pointY = (1 - fraction) * flatCoordinates[offset + 1] +
          fraction * flatCoordinates[offset + stride + 1];
    } else if (n !== 0) {
      let x1 = flatCoordinates[offset];
      let y1 = flatCoordinates[offset + 1];
      let length = 0;
      const cumulativeLengths = [0];
      for (let i = offset + stride; i < end; i += stride) {
        const x2 = flatCoordinates[i];
        const y2 = flatCoordinates[i + 1];
        length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
        cumulativeLengths.push(length);
        x1 = x2;
        y1 = y2;
      }
      const target = fraction * length;
      const index = binarySearch(cumulativeLengths, target);
      if (index < 0) {
        const t = (target - cumulativeLengths[-index - 2]) /
            (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);
        const o = offset + (-index - 2) * stride;
        pointX = lerp(
          flatCoordinates[o], flatCoordinates[o + stride], t);
        pointY = lerp(
          flatCoordinates[o + 1], flatCoordinates[o + stride + 1], t);
      } else {
        pointX = flatCoordinates[offset + index * stride];
        pointY = flatCoordinates[offset + index * stride + 1];
      }
    }
    if (opt_dest) {
      opt_dest[0] = pointX;
      opt_dest[1] = pointY;
      return opt_dest;
    } else {
      return [pointX, pointY];
    }
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} m M.
   * @param {boolean} extrapolate Extrapolate.
   * @return {import("../../coordinate.js").Coordinate} Coordinate.
   */
  function lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, extrapolate) {
    if (end == offset) {
      return null;
    }
    let coordinate;
    if (m < flatCoordinates[offset + stride - 1]) {
      if (extrapolate) {
        coordinate = flatCoordinates.slice(offset, offset + stride);
        coordinate[stride - 1] = m;
        return coordinate;
      } else {
        return null;
      }
    } else if (flatCoordinates[end - 1] < m) {
      if (extrapolate) {
        coordinate = flatCoordinates.slice(end - stride, end);
        coordinate[stride - 1] = m;
        return coordinate;
      } else {
        return null;
      }
    }
    // FIXME use O(1) search
    if (m == flatCoordinates[offset + stride - 1]) {
      return flatCoordinates.slice(offset, offset + stride);
    }
    let lo = offset / stride;
    let hi = end / stride;
    while (lo < hi) {
      const mid = (lo + hi) >> 1;
      if (m < flatCoordinates[(mid + 1) * stride - 1]) {
        hi = mid;
      } else {
        lo = mid + 1;
      }
    }
    const m0 = flatCoordinates[lo * stride - 1];
    if (m == m0) {
      return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);
    }
    const m1 = flatCoordinates[(lo + 1) * stride - 1];
    const t = (m - m0) / (m1 - m0);
    coordinate = [];
    for (let i = 0; i < stride - 1; ++i) {
      coordinate.push(lerp(flatCoordinates[(lo - 1) * stride + i],
        flatCoordinates[lo * stride + i], t));
    }
    coordinate.push(m);
    return coordinate;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} m M.
   * @param {boolean} extrapolate Extrapolate.
   * @param {boolean} interpolate Interpolate.
   * @return {import("../../coordinate.js").Coordinate} Coordinate.
   */
  function lineStringsCoordinateAtM(
    flatCoordinates, offset, ends, stride, m, extrapolate, interpolate) {
    if (interpolate) {
      return lineStringCoordinateAtM(
        flatCoordinates, offset, ends[ends.length - 1], stride, m, extrapolate);
    }
    let coordinate;
    if (m < flatCoordinates[stride - 1]) {
      if (extrapolate) {
        coordinate = flatCoordinates.slice(0, stride);
        coordinate[stride - 1] = m;
        return coordinate;
      } else {
        return null;
      }
    }
    if (flatCoordinates[flatCoordinates.length - 1] < m) {
      if (extrapolate) {
        coordinate = flatCoordinates.slice(flatCoordinates.length - stride);
        coordinate[stride - 1] = m;
        return coordinate;
      } else {
        return null;
      }
    }
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      const end = ends[i];
      if (offset == end) {
        continue;
      }
      if (m < flatCoordinates[offset + stride - 1]) {
        return null;
      } else if (m <= flatCoordinates[end - 1]) {
        return lineStringCoordinateAtM(
          flatCoordinates, offset, end, stride, m, false);
      }
      offset = end;
    }
    return null;
  }

  /**
   * @module ol/geom/LineString
   */

  /**
   * @classdesc
   * Linestring geometry.
   *
   * @api
   */
  class LineString extends SimpleGeometry {

    /**
     * @param {Array<import("../coordinate.js").Coordinate>|Array<number>} coordinates Coordinates.
     *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.
     * @param {GeometryLayout=} opt_layout Layout.
     */
    constructor(coordinates, opt_layout) {

      super();

      /**
       * @private
       * @type {import("../coordinate.js").Coordinate}
       */
      this.flatMidpoint_ = null;

      /**
       * @private
       * @type {number}
       */
      this.flatMidpointRevision_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDeltaRevision_ = -1;

      if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {
        this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
      } else {
        this.setCoordinates(/** @type {Array<import("../coordinate.js").Coordinate>} */ (coordinates), opt_layout);
      }

    }

    /**
     * Append the passed coordinate to the coordinates of the linestring.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @api
     */
    appendCoordinate(coordinate) {
      if (!this.flatCoordinates) {
        this.flatCoordinates = coordinate.slice();
      } else {
        extend$1(this.flatCoordinates, coordinate);
      }
      this.changed();
    }

    /**
     * Make a complete copy of the geometry.
     * @return {!LineString} Clone.
     * @override
     * @api
     */
    clone() {
      return new LineString(this.flatCoordinates.slice(), this.layout);
    }

    /**
     * @inheritDoc
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      if (this.maxDeltaRevision_ != this.getRevision()) {
        this.maxDelta_ = Math.sqrt(maxSquaredDelta(
          this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));
        this.maxDeltaRevision_ = this.getRevision();
      }
      return assignClosestPoint(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,
        this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);
    }

    /**
     * Iterate over each segment, calling the provided callback.
     * If the callback returns a truthy value the function returns that
     * value immediately. Otherwise the function returns `false`.
     *
     * @param {function(this: S, import("../coordinate.js").Coordinate, import("../coordinate.js").Coordinate): T} callback Function
     *     called for each segment.
     * @return {T|boolean} Value.
     * @template T,S
     * @api
     */
    forEachSegment(callback) {
      return forEach(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);
    }

    /**
     * Returns the coordinate at `m` using linear interpolation, or `null` if no
     * such coordinate exists.
     *
     * `opt_extrapolate` controls extrapolation beyond the range of Ms in the
     * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first
     * M will return the first coordinate and Ms greater than the last M will
     * return the last coordinate.
     *
     * @param {number} m M.
     * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.
     * @return {import("../coordinate.js").Coordinate} Coordinate.
     * @api
     */
    getCoordinateAtM(m, opt_extrapolate) {
      if (this.layout != GeometryLayout.XYM &&
          this.layout != GeometryLayout.XYZM) {
        return null;
      }
      const extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;
      return lineStringCoordinateAtM(this.flatCoordinates, 0,
        this.flatCoordinates.length, this.stride, m, extrapolate);
    }

    /**
     * Return the coordinates of the linestring.
     * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
     * @override
     * @api
     */
    getCoordinates() {
      return inflateCoordinates(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
    }

    /**
     * Return the coordinate at the provided fraction along the linestring.
     * The `fraction` is a number between 0 and 1, where 0 is the start of the
     * linestring and 1 is the end.
     * @param {number} fraction Fraction.
     * @param {import("../coordinate.js").Coordinate=} opt_dest Optional coordinate whose values will
     *     be modified. If not provided, a new coordinate will be returned.
     * @return {import("../coordinate.js").Coordinate} Coordinate of the interpolated point.
     * @api
     */
    getCoordinateAt(fraction, opt_dest) {
      return interpolatePoint(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,
        fraction, opt_dest);
    }

    /**
     * Return the length of the linestring on projected plane.
     * @return {number} Length (on projected plane).
     * @api
     */
    getLength() {
      return lineStringLength(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
    }

    /**
     * @return {Array<number>} Flat midpoint.
     */
    getFlatMidpoint() {
      if (this.flatMidpointRevision_ != this.getRevision()) {
        this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);
        this.flatMidpointRevision_ = this.getRevision();
      }
      return this.flatMidpoint_;
    }

    /**
     * @inheritDoc
     */
    getSimplifiedGeometryInternal(squaredTolerance) {
      const simplifiedFlatCoordinates = [];
      simplifiedFlatCoordinates.length = douglasPeucker(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,
        squaredTolerance, simplifiedFlatCoordinates, 0);
      return new LineString(simplifiedFlatCoordinates, GeometryLayout.XY);
    }

    /**
     * @inheritDoc
     * @api
     */
    getType() {
      return GeometryType.LINE_STRING;
    }

    /**
     * @inheritDoc
     * @api
     */
    intersectsExtent(extent) {
      return intersectsLineString(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,
        extent);
    }

    /**
     * Set the coordinates of the linestring.
     * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
     * @param {GeometryLayout=} opt_layout Layout.
     * @override
     * @api
     */
    setCoordinates(coordinates, opt_layout) {
      this.setLayout(opt_layout, coordinates, 1);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      this.flatCoordinates.length = deflateCoordinates(
        this.flatCoordinates, 0, coordinates, this.stride);
      this.changed();
    }
  }

  /**
   * @module ol/format/FormatType
   */

  /**
   * @enum {string}
   */
  var FormatType = {
    ARRAY_BUFFER: 'arraybuffer',
    JSON: 'json',
    TEXT: 'text',
    XML: 'xml'
  };

  /**
   * @module ol/featureloader
   */

  /**
   * {@link module:ol/source/Vector} sources use a function of this type to
   * load features.
   *
   * This function takes an {@link module:ol/extent~Extent} representing the area to be loaded,
   * a `{number}` representing the resolution (map units per pixel) and an
   * {@link module:ol/proj/Projection} for the projection  as
   * arguments. `this` within the function is bound to the
   * {@link module:ol/source/Vector} it's called from.
   *
   * The function is responsible for loading the features and adding them to the
   * source.
   * @typedef {function(this:(import("./source/Vector").default|import("./VectorTile.js").default), import("./extent.js").Extent, number,
   *                    import("./proj/Projection.js").default): void} FeatureLoader
   * @api
   */


  /**
   * {@link module:ol/source/Vector} sources use a function of this type to
   * get the url to load features from.
   *
   * This function takes an {@link module:ol/extent~Extent} representing the area
   * to be loaded, a `{number}` representing the resolution (map units per pixel)
   * and an {@link module:ol/proj/Projection} for the projection  as
   * arguments and returns a `{string}` representing the URL.
   * @typedef {function(import("./extent.js").Extent, number, import("./proj/Projection.js").default): string} FeatureUrlFunction
   * @api
   */


  /**
   * @param {string|FeatureUrlFunction} url Feature URL service.
   * @param {import("./format/Feature.js").default} format Feature format.
   * @param {function(this:import("./VectorTile.js").default, Array<import("./Feature.js").default>, import("./proj/Projection.js").default, import("./extent.js").Extent): void|function(this:import("./source/Vector").default, Array<import("./Feature.js").default>): void} success
   *     Function called with the loaded features and optionally with the data
   *     projection. Called with the vector tile or source as `this`.
   * @param {function(this:import("./VectorTile.js").default): void|function(this:import("./source/Vector").default): void} failure
   *     Function called when loading failed. Called with the vector tile or
   *     source as `this`.
   * @return {FeatureLoader} The feature loader.
   */
  function loadFeaturesXhr(url, format, success, failure) {
    return (
      /**
       * @param {import("./extent.js").Extent} extent Extent.
       * @param {number} resolution Resolution.
       * @param {import("./proj/Projection.js").default} projection Projection.
       * @this {import("./source/Vector").default|import("./VectorTile.js").default}
       */
      function(extent, resolution, projection) {
        const xhr = new XMLHttpRequest();
        xhr.open('GET',
          typeof url === 'function' ? url(extent, resolution, projection) : url,
          true);
        if (format.getType() == FormatType.ARRAY_BUFFER) {
          xhr.responseType = 'arraybuffer';
        }
        /**
         * @param {Event} event Event.
         * @private
         */
        xhr.onload = function(event) {
          // status will be 0 for file:// urls
          if (!xhr.status || xhr.status >= 200 && xhr.status < 300) {
            const type = format.getType();
            /** @type {Document|Node|Object|string|undefined} */
            let source;
            if (type == FormatType.JSON || type == FormatType.TEXT) {
              source = xhr.responseText;
            } else if (type == FormatType.XML) {
              source = xhr.responseXML;
              if (!source) {
                source = new DOMParser().parseFromString(xhr.responseText, 'application/xml');
              }
            } else if (type == FormatType.ARRAY_BUFFER) {
              source = /** @type {ArrayBuffer} */ (xhr.response);
            }
            if (source) {
              success.call(this, format.readFeatures(source, {
                extent: extent,
                featureProjection: projection
              }),
              format.readProjection(source));
            } else {
              failure.call(this);
            }
          } else {
            failure.call(this);
          }
        }.bind(this);
        /**
         * @private
         */
        xhr.onerror = function() {
          failure.call(this);
        }.bind(this);
        xhr.send();
      }
    );
  }


  /**
   * Create an XHR feature loader for a `url` and `format`. The feature loader
   * loads features (with XHR), parses the features, and adds them to the
   * vector source.
   * @param {string|FeatureUrlFunction} url Feature URL service.
   * @param {import("./format/Feature.js").default} format Feature format.
   * @return {FeatureLoader} The feature loader.
   * @api
   */
  function xhr(url, format) {
    return loadFeaturesXhr(url, format,
      /**
       * @param {Array<import("./Feature.js").default>} features The loaded features.
       * @param {import("./proj/Projection.js").default} dataProjection Data
       * projection.
       * @this {import("./source/Vector").default|import("./VectorTile.js").default}
       */
      function(features, dataProjection) {
        const sourceOrTile = /** @type {?} */ (this);
        if (typeof sourceOrTile.addFeatures === 'function') {
          /** @type {import("./source/Vector").default} */ (sourceOrTile).addFeatures(features);
        }
      }, /* FIXME handle error */ VOID);
  }

  /**
   * @module ol/loadingstrategy
   */


  /**
   * Strategy function for loading all features with a single request.
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {number} resolution Resolution.
   * @return {Array<import("./extent.js").Extent>} Extents.
   * @api
   */
  function all(extent, resolution) {
    return [[-Infinity, -Infinity, Infinity, Infinity]];
  }


  /**
   * Strategy function for loading features based on the view's extent and
   * resolution.
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {number} resolution Resolution.
   * @return {Array<import("./extent.js").Extent>} Extents.
   * @api
   */
  function bbox(extent, resolution) {
    return [extent];
  }

  /**
   * @module ol/source/Source
   */


  /**
   * A function that returns a string or an array of strings representing source
   * attributions.
   *
   * @typedef {function(import("../PluggableMap.js").FrameState): (string|Array<string>)} Attribution
   */


  /**
   * A type that can be used to provide attribution information for data sources.
   *
   * It represents either
   * * a simple string (e.g. `'© Acme Inc.'`)
   * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)
   * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})
   *
   * @typedef {string|Array<string>|Attribution} AttributionLike
   */


  /**
   * @typedef {Object} Options
   * @property {AttributionLike} [attributions]
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {SourceState} [state='ready']
   * @property {boolean} [wrapX=false]
   */


  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for {@link module:ol/layer/Layer~Layer} sources.
   *
   * A generic `change` event is triggered when the state of the source changes.
   * @abstract
   * @api
   */
  class Source extends BaseObject {
    /**
     * @param {Options} options Source options.
     */
    constructor(options) {

      super();

      /**
       * @private
       * @type {import("../proj/Projection.js").default}
       */
      this.projection_ = get$2(options.projection);

      /**
       * @private
       * @type {?Attribution}
       */
      this.attributions_ = adaptAttributions(options.attributions);

      /**
       * @private
       * @type {boolean}
       */
      this.attributionsCollapsible_ = options.attributionsCollapsible !== undefined ?
        options.attributionsCollapsible : true;

      /**
       * This source is currently loading data. Sources that defer loading to the
       * map's tile queue never set this to `true`.
       * @type {boolean}
       */
      this.loading = false;

      /**
       * @private
       * @type {SourceState}
       */
      this.state_ = options.state !== undefined ?
        options.state : SourceState.READY;

      /**
       * @private
       * @type {boolean}
       */
      this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;

    }

    /**
     * Get the attribution function for the source.
     * @return {?Attribution} Attribution function.
     */
    getAttributions() {
      return this.attributions_;
    }

    /**
     * @return {boolean} Attributions are collapsible.
     */
    getAttributionsCollapsible() {
      return this.attributionsCollapsible_;
    }

    /**
     * Get the projection of the source.
     * @return {import("../proj/Projection.js").default} Projection.
     * @api
     */
    getProjection() {
      return this.projection_;
    }

    /**
     * @abstract
     * @return {Array<number>|undefined} Resolutions.
     */
    getResolutions() {
      return abstract();
    }

    /**
     * Get the state of the source, see {@link module:ol/source/State~State} for possible states.
     * @return {SourceState} State.
     * @api
     */
    getState() {
      return this.state_;
    }

    /**
     * @return {boolean|undefined} Wrap X.
     */
    getWrapX() {
      return this.wrapX_;
    }

    /**
     * Refreshes the source. The source will be cleared, and data from the server will be reloaded.
     * @api
     */
    refresh() {
      this.changed();
    }

    /**
     * Set the attributions of the source.
     * @param {AttributionLike|undefined} attributions Attributions.
     *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},
     *     or `undefined`.
     * @api
     */
    setAttributions(attributions) {
      this.attributions_ = adaptAttributions(attributions);
      this.changed();
    }

    /**
     * Set the state of the source.
     * @param {SourceState} state State.
     * @protected
     */
    setState(state) {
      this.state_ = state;
      this.changed();
    }
  }


  /**
   * Turns the attributions option into an attributions function.
   * @param {AttributionLike|undefined} attributionLike The attribution option.
   * @return {?Attribution} An attribution function (or null).
   */
  function adaptAttributions(attributionLike) {
    if (!attributionLike) {
      return null;
    }
    if (Array.isArray(attributionLike)) {
      return function(frameState) {
        return attributionLike;
      };
    }

    if (typeof attributionLike === 'function') {
      return attributionLike;
    }

    return function(frameState) {
      return [attributionLike];
    };
  }

  /**
   * @module ol/source/VectorEventType
   */

  /**
   * @enum {string}
   */
  var VectorEventType = {
    /**
     * Triggered when a feature is added to the source.
     * @event module:ol/source/Vector.VectorSourceEvent#addfeature
     * @api
     */
    ADDFEATURE: 'addfeature',

    /**
     * Triggered when a feature is updated.
     * @event module:ol/source/Vector.VectorSourceEvent#changefeature
     * @api
     */
    CHANGEFEATURE: 'changefeature',

    /**
     * Triggered when the clear method is called on the source.
     * @event module:ol/source/Vector.VectorSourceEvent#clear
     * @api
     */
    CLEAR: 'clear',

    /**
     * Triggered when a feature is removed from the source.
     * See {@link module:ol/source/Vector#clear source.clear()} for exceptions.
     * @event module:ol/source/Vector.VectorSourceEvent#removefeature
     * @api
     */
    REMOVEFEATURE: 'removefeature'
  };

  /**
   * @module ol/structs/RBush
   */

  /**
   * @typedef {Object} Entry
   * @property {number} minX
   * @property {number} minY
   * @property {number} maxX
   * @property {number} maxY
   * @property {Object} [value]
   */

  /**
   * @classdesc
   * Wrapper around the RBush by Vladimir Agafonkin.
   * See https://github.com/mourner/rbush.
   *
   * @template T
   */
  class RBush {
    /**
     * @param {number=} opt_maxEntries Max entries.
     */
    constructor(opt_maxEntries) {

      /**
       * @private
       */
      this.rbush_ = new rbush_1(opt_maxEntries);

      /**
       * A mapping between the objects added to this rbush wrapper
       * and the objects that are actually added to the internal rbush.
       * @private
       * @type {Object<string, Entry>}
       */
      this.items_ = {};

    }

    /**
     * Insert a value into the RBush.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {T} value Value.
     */
    insert(extent, value) {
      /** @type {Entry} */
      const item = {
        minX: extent[0],
        minY: extent[1],
        maxX: extent[2],
        maxY: extent[3],
        value: value
      };

      this.rbush_.insert(item);
      this.items_[getUid(value)] = item;
    }


    /**
     * Bulk-insert values into the RBush.
     * @param {Array<import("../extent.js").Extent>} extents Extents.
     * @param {Array<T>} values Values.
     */
    load(extents, values) {
      const items = new Array(values.length);
      for (let i = 0, l = values.length; i < l; i++) {
        const extent = extents[i];
        const value = values[i];

        /** @type {Entry} */
        const item = {
          minX: extent[0],
          minY: extent[1],
          maxX: extent[2],
          maxY: extent[3],
          value: value
        };
        items[i] = item;
        this.items_[getUid(value)] = item;
      }
      this.rbush_.load(items);
    }


    /**
     * Remove a value from the RBush.
     * @param {T} value Value.
     * @return {boolean} Removed.
     */
    remove(value) {
      const uid = getUid(value);

      // get the object in which the value was wrapped when adding to the
      // internal rbush. then use that object to do the removal.
      const item = this.items_[uid];
      delete this.items_[uid];
      return this.rbush_.remove(item) !== null;
    }


    /**
     * Update the extent of a value in the RBush.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {T} value Value.
     */
    update(extent, value) {
      const item = this.items_[getUid(value)];
      const bbox = [item.minX, item.minY, item.maxX, item.maxY];
      if (!equals(bbox, extent)) {
        this.remove(value);
        this.insert(extent, value);
      }
    }


    /**
     * Return all values in the RBush.
     * @return {Array<T>} All.
     */
    getAll() {
      const items = this.rbush_.all();
      return items.map(function(item) {
        return item.value;
      });
    }


    /**
     * Return all values in the given extent.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {Array<T>} All in extent.
     */
    getInExtent(extent) {
      /** @type {Entry} */
      const bbox = {
        minX: extent[0],
        minY: extent[1],
        maxX: extent[2],
        maxY: extent[3]
      };
      const items = this.rbush_.search(bbox);
      return items.map(function(item) {
        return item.value;
      });
    }


    /**
     * Calls a callback function with each value in the tree.
     * If the callback returns a truthy value, this value is returned without
     * checking the rest of the tree.
     * @param {function(T): *} callback Callback.
     * @return {*} Callback return value.
     */
    forEach(callback) {
      return this.forEach_(this.getAll(), callback);
    }


    /**
     * Calls a callback function with each value in the provided extent.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {function(T): *} callback Callback.
     * @return {*} Callback return value.
     */
    forEachInExtent(extent, callback) {
      return this.forEach_(this.getInExtent(extent), callback);
    }


    /**
     * @param {Array<T>} values Values.
     * @param {function(T): *} callback Callback.
     * @private
     * @return {*} Callback return value.
     */
    forEach_(values, callback) {
      let result;
      for (let i = 0, l = values.length; i < l; i++) {
        result = callback(values[i]);
        if (result) {
          return result;
        }
      }
      return result;
    }


    /**
     * @return {boolean} Is empty.
     */
    isEmpty() {
      return isEmpty(this.items_);
    }


    /**
     * Remove all values from the RBush.
     */
    clear() {
      this.rbush_.clear();
      this.items_ = {};
    }


    /**
     * @param {import("../extent.js").Extent=} opt_extent Extent.
     * @return {import("../extent.js").Extent} Extent.
     */
    getExtent(opt_extent) {
      const data = this.rbush_.toJSON();
      return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);
    }


    /**
     * @param {RBush} rbush R-Tree.
     */
    concat(rbush) {
      this.rbush_.load(rbush.rbush_.all());
      for (const i in rbush.items_) {
        this.items_[i] = rbush.items_[i];
      }
    }

  }

  /**
   * @module ol/source/Vector
   */

  /**
   * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and
   * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this
   * is one of the standard {@link module:ol/loadingstrategy} strategies.
   *
   * @typedef {function(import("../extent.js").Extent, number): Array<import("../extent.js").Extent>} LoadingStrategy
   * @api
   */


  /**
   * @classdesc
   * Events emitted by {@link module:ol/source/Vector} instances are instances of this
   * type.
   * @template {import("../geom/Geometry.js").default} Geometry
   */
  class VectorSourceEvent extends Event {

    /**
     * @param {string} type Type.
     * @param {import("../Feature.js").default<Geometry>=} opt_feature Feature.
     */
    constructor(type, opt_feature) {

      super(type);

      /**
       * The feature being added or removed.
       * @type {import("../Feature.js").default<Geometry>|undefined}
       * @api
       */
      this.feature = opt_feature;

    }

  }


  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {Array<import("../Feature.js").default>|Collection<import("../Feature.js").default>} [features]
   * Features. If provided as {@link module:ol/Collection}, the features in the source
   * and the collection will stay in sync.
   * @property {import("../format/Feature.js").default} [format] The feature format used by the XHR
   * feature loader when `url` is set. Required if `url` is set, otherwise ignored.
   * @property {import("../featureloader.js").FeatureLoader} [loader]
   * The loader function used to load features, from a remote source for example.
   * If this is not set and `url` is set, the source will create and use an XHR
   * feature loader.
   *
   * Example:
   *
   * ```js
   * import {Vector} from 'ol/source';
   * import {GeoJSON} from 'ol/format';
   * import {bbox} from 'ol/loadingstrategy';
   *
   * var vectorSource = new Vector({
   *   format: new GeoJSON(),
   *   loader: function(extent, resolution, projection) {
   *      var proj = projection.getCode();
   *      var url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +
   *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +
   *          'outputFormat=application/json&srsname=' + proj + '&' +
   *          'bbox=' + extent.join(',') + ',' + proj;
   *      var xhr = new XMLHttpRequest();
   *      xhr.open('GET', url);
   *      var onError = function() {
   *        vectorSource.removeLoadedExtent(extent);
   *      }
   *      xhr.onerror = onError;
   *      xhr.onload = function() {
   *        if (xhr.status == 200) {
   *          vectorSource.addFeatures(
   *              vectorSource.getFormat().readFeatures(xhr.responseText));
   *        } else {
   *          onError();
   *        }
   *      }
   *      xhr.send();
   *    },
   *    strategy: bbox
   *  });
   * ```
   * @property {boolean} [overlaps=true] This source may have overlapping geometries.
   * Setting this to `false` (e.g. for sources with polygons that represent administrative
   * boundaries or TopoJSON sources) allows the renderer to optimise fill and
   * stroke operations.
   * @property {LoadingStrategy} [strategy] The loading strategy to use.
   * By default an {@link module:ol/loadingstrategy~all}
   * strategy is used, a one-off strategy which loads all features at once.
   * @property {string|import("../featureloader.js").FeatureUrlFunction} [url]
   * Setting this option instructs the source to load features using an XHR loader
   * (see {@link module:ol/featureloader~xhr}). Use a `string` and an
   * {@link module:ol/loadingstrategy~all} for a one-off download of all features from
   * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with
   * other loading strategies.
   * Requires `format` to be set as well.
   * When default XHR feature loader is provided, the features will
   * be transformed from the data projection to the view projection
   * during parsing. If your remote data source does not advertise its projection
   * properly, this transformation will be incorrect. For some formats, the
   * default projection (usually EPSG:4326) can be overridden by setting the
   * dataProjection constructor option on the format.
   * Note that if a source contains non-feature data, such as a GeoJSON geometry
   * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.
   * @property {boolean} [useSpatialIndex=true]
   * By default, an RTree is used as spatial index. When features are removed and
   * added frequently, and the total number of features is low, setting this to
   * `false` may improve performance.
   *
   * Note that
   * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},
   * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and
   * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is
   * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop
   * through all features.
   *
   * When set to `false`, the features will be maintained in an
   * {@link module:ol/Collection}, which can be retrieved through
   * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.
   * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the
   * -180° and 180° meridians to work properly, this should be set to `false`. The
   * resulting geometry coordinates will then exceed the world bounds.
   */


  /**
   * @classdesc
   * Provides a source of features for vector layers. Vector features provided
   * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for
   * vector data that is optimized for rendering.
   *
   * @fires VectorSourceEvent
   * @api
   * @template {import("../geom/Geometry.js").default} Geometry
   */
  class VectorSource extends Source {
    /**
     * @param {Options=} opt_options Vector source options.
     */
    constructor(opt_options) {

      const options = opt_options || {};

      super({
        attributions: options.attributions,
        projection: undefined,
        state: SourceState.READY,
        wrapX: options.wrapX !== undefined ? options.wrapX : true
      });

      /**
       * @private
       * @type {import("../featureloader.js").FeatureLoader}
       */
      this.loader_ = VOID;

      /**
       * @private
       * @type {import("../format/Feature.js").default|undefined}
       */
      this.format_ = options.format;

      /**
       * @private
       * @type {boolean}
       */
      this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;

      /**
       * @private
       * @type {string|import("../featureloader.js").FeatureUrlFunction|undefined}
       */
      this.url_ = options.url;

      if (options.loader !== undefined) {
        this.loader_ = options.loader;
      } else if (this.url_ !== undefined) {
        assert(this.format_, 7); // `format` must be set when `url` is set
        // create a XHR feature loader for "url" and "format"
        this.loader_ = xhr(this.url_, /** @type {import("../format/Feature.js").default} */ (this.format_));
      }

      /**
       * @private
       * @type {LoadingStrategy}
       */
      this.strategy_ = options.strategy !== undefined ? options.strategy : all;

      const useSpatialIndex =
          options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;

      /**
       * @private
       * @type {RBush<import("../Feature.js").default<Geometry>>}
       */
      this.featuresRtree_ = useSpatialIndex ? new RBush() : null;

      /**
       * @private
       * @type {RBush<{extent: import("../extent.js").Extent}>}
       */
      this.loadedExtentsRtree_ = new RBush();

      /**
       * @private
       * @type {!Object<string, import("../Feature.js").default<Geometry>>}
       */
      this.nullGeometryFeatures_ = {};

      /**
       * A lookup of features by id (the return from feature.getId()).
       * @private
       * @type {!Object<string, import("../Feature.js").default<Geometry>>}
       */
      this.idIndex_ = {};

      /**
       * A lookup of features by uid (using getUid(feature)).
       * @private
       * @type {!Object<string, import("../Feature.js").default<Geometry>>}
       */
      this.uidIndex_ = {};

      /**
       * @private
       * @type {Object<string, Array<import("../events.js").EventsKey>>}
       */
      this.featureChangeKeys_ = {};

      /**
       * @private
       * @type {Collection<import("../Feature.js").default<Geometry>>}
       */
      this.featuresCollection_ = null;

      let collection, features;
      if (Array.isArray(options.features)) {
        features = options.features;
      } else if (options.features) {
        collection = options.features;
        features = collection.getArray();
      }
      if (!useSpatialIndex && collection === undefined) {
        collection = new Collection(features);
      }
      if (features !== undefined) {
        this.addFeaturesInternal(features);
      }
      if (collection !== undefined) {
        this.bindFeaturesCollection_(collection);
      }

    }

    /**
     * Add a single feature to the source.  If you want to add a batch of features
     * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}
     * instead. A feature will not be added to the source if feature with
     * the same id is already there. The reason for this behavior is to avoid
     * feature duplication when using bbox or tile loading strategies.
     * Note: this also applies if an {@link module:ol/Collection} is used for features,
     * meaning that if a feature with a duplicate id is added in the collection, it will
     * be removed from it right away.
     * @param {import("../Feature.js").default<Geometry>} feature Feature to add.
     * @api
     */
    addFeature(feature) {
      this.addFeatureInternal(feature);
      this.changed();
    }


    /**
     * Add a feature without firing a `change` event.
     * @param {import("../Feature.js").default<Geometry>} feature Feature.
     * @protected
     */
    addFeatureInternal(feature) {
      const featureKey = getUid(feature);

      if (!this.addToIndex_(featureKey, feature)) {
        if (this.featuresCollection_) {
          this.featuresCollection_.remove(feature);
        }
        return;
      }

      this.setupChangeEvents_(featureKey, feature);

      const geometry = feature.getGeometry();
      if (geometry) {
        const extent = geometry.getExtent();
        if (this.featuresRtree_) {
          this.featuresRtree_.insert(extent, feature);
        }
      } else {
        this.nullGeometryFeatures_[featureKey] = feature;
      }

      this.dispatchEvent(
        new VectorSourceEvent(VectorEventType.ADDFEATURE, feature));
    }


    /**
     * @param {string} featureKey Unique identifier for the feature.
     * @param {import("../Feature.js").default<Geometry>} feature The feature.
     * @private
     */
    setupChangeEvents_(featureKey, feature) {
      this.featureChangeKeys_[featureKey] = [
        listen(feature, EventType.CHANGE,
          this.handleFeatureChange_, this),
        listen(feature, ObjectEventType.PROPERTYCHANGE,
          this.handleFeatureChange_, this)
      ];
    }


    /**
     * @param {string} featureKey Unique identifier for the feature.
     * @param {import("../Feature.js").default<Geometry>} feature The feature.
     * @return {boolean} The feature is "valid", in the sense that it is also a
     *     candidate for insertion into the Rtree.
     * @private
     */
    addToIndex_(featureKey, feature) {
      let valid = true;
      const id = feature.getId();
      if (id !== undefined) {
        if (!(id.toString() in this.idIndex_)) {
          this.idIndex_[id.toString()] = feature;
        } else {
          valid = false;
        }
      }
      if (valid) {
        assert(!(featureKey in this.uidIndex_),
          30); // The passed `feature` was already added to the source
        this.uidIndex_[featureKey] = feature;
      }
      return valid;
    }


    /**
     * Add a batch of features to the source.
     * @param {Array<import("../Feature.js").default<Geometry>>} features Features to add.
     * @api
     */
    addFeatures(features) {
      this.addFeaturesInternal(features);
      this.changed();
    }


    /**
     * Add features without firing a `change` event.
     * @param {Array<import("../Feature.js").default<Geometry>>} features Features.
     * @protected
     */
    addFeaturesInternal(features) {
      const extents = [];
      const newFeatures = [];
      const geometryFeatures = [];

      for (let i = 0, length = features.length; i < length; i++) {
        const feature = features[i];
        const featureKey = getUid(feature);
        if (this.addToIndex_(featureKey, feature)) {
          newFeatures.push(feature);
        }
      }

      for (let i = 0, length = newFeatures.length; i < length; i++) {
        const feature = newFeatures[i];
        const featureKey = getUid(feature);
        this.setupChangeEvents_(featureKey, feature);

        const geometry = feature.getGeometry();
        if (geometry) {
          const extent = geometry.getExtent();
          extents.push(extent);
          geometryFeatures.push(feature);
        } else {
          this.nullGeometryFeatures_[featureKey] = feature;
        }
      }
      if (this.featuresRtree_) {
        this.featuresRtree_.load(extents, geometryFeatures);
      }

      for (let i = 0, length = newFeatures.length; i < length; i++) {
        this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i]));
      }
    }


    /**
     * @param {!Collection<import("../Feature.js").default<Geometry>>} collection Collection.
     * @private
     */
    bindFeaturesCollection_(collection) {
      let modifyingCollection = false;
      listen(this, VectorEventType.ADDFEATURE,
        /**
         * @param {VectorSourceEvent<Geometry>} evt The vector source event
         */
        function(evt) {
          if (!modifyingCollection) {
            modifyingCollection = true;
            collection.push(evt.feature);
            modifyingCollection = false;
          }
        });
      listen(this, VectorEventType.REMOVEFEATURE,
        /**
         * @param {VectorSourceEvent<Geometry>} evt The vector source event
         */
        function(evt) {
          if (!modifyingCollection) {
            modifyingCollection = true;
            collection.remove(evt.feature);
            modifyingCollection = false;
          }
        });
      listen(collection, CollectionEventType.ADD,
        /**
         * @param {import("../Collection.js").CollectionEvent} evt The collection event
         */
        function(evt) {
          if (!modifyingCollection) {
            modifyingCollection = true;
            this.addFeature(/** @type {import("../Feature.js").default<Geometry>} */ (evt.element));
            modifyingCollection = false;
          }
        }, this);
      listen(collection, CollectionEventType.REMOVE,
        /**
         * @param {import("../Collection.js").CollectionEvent} evt The collection event
         */
        function(evt) {
          if (!modifyingCollection) {
            modifyingCollection = true;
            this.removeFeature(/** @type {import("../Feature.js").default<Geometry>} */ (evt.element));
            modifyingCollection = false;
          }
        }, this);
      this.featuresCollection_ = collection;
    }


    /**
     * Remove all features from the source.
     * @param {boolean=} opt_fast Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#removefeature} events.
     * @api
     */
    clear(opt_fast) {
      if (opt_fast) {
        for (const featureId in this.featureChangeKeys_) {
          const keys = this.featureChangeKeys_[featureId];
          keys.forEach(unlistenByKey);
        }
        if (!this.featuresCollection_) {
          this.featureChangeKeys_ = {};
          this.idIndex_ = {};
          this.uidIndex_ = {};
        }
      } else {
        if (this.featuresRtree_) {
          this.featuresRtree_.forEach(this.removeFeatureInternal.bind(this));
          for (const id in this.nullGeometryFeatures_) {
            this.removeFeatureInternal(this.nullGeometryFeatures_[id]);
          }
        }
      }
      if (this.featuresCollection_) {
        this.featuresCollection_.clear();
      }

      if (this.featuresRtree_) {
        this.featuresRtree_.clear();
      }
      this.nullGeometryFeatures_ = {};

      const clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);
      this.dispatchEvent(clearEvent);
      this.changed();
    }


    /**
     * Iterate through all features on the source, calling the provided callback
     * with each one.  If the callback returns any "truthy" value, iteration will
     * stop and the function will return the same value.
     * Note: this function only iterate through the feature that have a defined geometry.
     *
     * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
     *     on the source.  Return a truthy value to stop iteration.
     * @return {T|undefined} The return value from the last call to the callback.
     * @template T
     * @api
     */
    forEachFeature(callback) {
      if (this.featuresRtree_) {
        return this.featuresRtree_.forEach(callback);
      } else if (this.featuresCollection_) {
        this.featuresCollection_.forEach(callback);
      }
    }


    /**
     * Iterate through all features whose geometries contain the provided
     * coordinate, calling the callback with each feature.  If the callback returns
     * a "truthy" value, iteration will stop and the function will return the same
     * value.
     *
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
     *     whose goemetry contains the provided coordinate.
     * @return {T|undefined} The return value from the last call to the callback.
     * @template T
     */
    forEachFeatureAtCoordinateDirect(coordinate, callback) {
      const extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];
      return this.forEachFeatureInExtent(extent, function(feature) {
        const geometry = feature.getGeometry();
        if (geometry.intersectsCoordinate(coordinate)) {
          return callback(feature);
        } else {
          return undefined;
        }
      });
    }


    /**
     * Iterate through all features whose bounding box intersects the provided
     * extent (note that the feature's geometry may not intersect the extent),
     * calling the callback with each feature.  If the callback returns a "truthy"
     * value, iteration will stop and the function will return the same value.
     *
     * If you are interested in features whose geometry intersects an extent, call
     * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.
     *
     * When `useSpatialIndex` is set to false, this method will loop through all
     * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.
     *
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
     *     whose bounding box intersects the provided extent.
     * @return {T|undefined} The return value from the last call to the callback.
     * @template T
     * @api
     */
    forEachFeatureInExtent(extent, callback) {
      if (this.featuresRtree_) {
        return this.featuresRtree_.forEachInExtent(extent, callback);
      } else if (this.featuresCollection_) {
        this.featuresCollection_.forEach(callback);
      }
    }


    /**
     * Iterate through all features whose geometry intersects the provided extent,
     * calling the callback with each feature.  If the callback returns a "truthy"
     * value, iteration will stop and the function will return the same value.
     *
     * If you only want to test for bounding box intersection, call the
     * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.
     *
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
     *     whose geometry intersects the provided extent.
     * @return {T|undefined} The return value from the last call to the callback.
     * @template T
     * @api
     */
    forEachFeatureIntersectingExtent(extent, callback) {
      return this.forEachFeatureInExtent(extent,
        /**
         * @param {import("../Feature.js").default<Geometry>} feature Feature.
         * @return {T|undefined} The return value from the last call to the callback.
         */
        function(feature) {
          const geometry = feature.getGeometry();
          if (geometry.intersectsExtent(extent)) {
            const result = callback(feature);
            if (result) {
              return result;
            }
          }
        });
    }


    /**
     * Get the features collection associated with this source. Will be `null`
     * unless the source was configured with `useSpatialIndex` set to `false`, or
     * with an {@link module:ol/Collection} as `features`.
     * @return {Collection<import("../Feature.js").default<Geometry>>} The collection of features.
     * @api
     */
    getFeaturesCollection() {
      return this.featuresCollection_;
    }


    /**
     * Get all features on the source in random order.
     * @return {Array<import("../Feature.js").default<Geometry>>} Features.
     * @api
     */
    getFeatures() {
      let features;
      if (this.featuresCollection_) {
        features = this.featuresCollection_.getArray();
      } else if (this.featuresRtree_) {
        features = this.featuresRtree_.getAll();
        if (!isEmpty(this.nullGeometryFeatures_)) {
          extend$1(features, getValues(this.nullGeometryFeatures_));
        }
      }
      return (
        /** @type {Array<import("../Feature.js").default<Geometry>>} */ (features)
      );
    }


    /**
     * Get all features whose geometry intersects the provided coordinate.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @return {Array<import("../Feature.js").default<Geometry>>} Features.
     * @api
     */
    getFeaturesAtCoordinate(coordinate) {
      const features = [];
      this.forEachFeatureAtCoordinateDirect(coordinate, function(feature) {
        features.push(feature);
      });
      return features;
    }


    /**
     * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of
     * all features intersecting the given extent in random order (so it may include
     * features whose geometries do not intersect the extent).
     *
     * This method is not available when the source is configured with
     * `useSpatialIndex` set to `false`.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {Array<import("../Feature.js").default<Geometry>>} Features.
     * @api
     */
    getFeaturesInExtent(extent) {
      return this.featuresRtree_.getInExtent(extent);
    }


    /**
     * Get the closest feature to the provided coordinate.
     *
     * This method is not available when the source is configured with
     * `useSpatialIndex` set to `false`.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {function(import("../Feature.js").default<Geometry>):boolean=} opt_filter Feature filter function.
     *     The filter function will receive one argument, the {@link module:ol/Feature feature}
     *     and it should return a boolean value. By default, no filtering is made.
     * @return {import("../Feature.js").default<Geometry>} Closest feature.
     * @api
     */
    getClosestFeatureToCoordinate(coordinate, opt_filter) {
      // Find the closest feature using branch and bound.  We start searching an
      // infinite extent, and find the distance from the first feature found.  This
      // becomes the closest feature.  We then compute a smaller extent which any
      // closer feature must intersect.  We continue searching with this smaller
      // extent, trying to find a closer feature.  Every time we find a closer
      // feature, we update the extent being searched so that any even closer
      // feature must intersect it.  We continue until we run out of features.
      const x = coordinate[0];
      const y = coordinate[1];
      let closestFeature = null;
      const closestPoint = [NaN, NaN];
      let minSquaredDistance = Infinity;
      const extent = [-Infinity, -Infinity, Infinity, Infinity];
      const filter = opt_filter ? opt_filter : TRUE;
      this.featuresRtree_.forEachInExtent(extent,
        /**
         * @param {import("../Feature.js").default<Geometry>} feature Feature.
         */
        function(feature) {
          if (filter(feature)) {
            const geometry = feature.getGeometry();
            const previousMinSquaredDistance = minSquaredDistance;
            minSquaredDistance = geometry.closestPointXY(
              x, y, closestPoint, minSquaredDistance);
            if (minSquaredDistance < previousMinSquaredDistance) {
              closestFeature = feature;
              // This is sneaky.  Reduce the extent that it is currently being
              // searched while the R-Tree traversal using this same extent object
              // is still in progress.  This is safe because the new extent is
              // strictly contained by the old extent.
              const minDistance = Math.sqrt(minSquaredDistance);
              extent[0] = x - minDistance;
              extent[1] = y - minDistance;
              extent[2] = x + minDistance;
              extent[3] = y + minDistance;
            }
          }
        });
      return closestFeature;
    }


    /**
     * Get the extent of the features currently in the source.
     *
     * This method is not available when the source is configured with
     * `useSpatialIndex` set to `false`.
     * @param {import("../extent.js").Extent=} opt_extent Destination extent. If provided, no new extent
     *     will be created. Instead, that extent's coordinates will be overwritten.
     * @return {import("../extent.js").Extent} Extent.
     * @api
     */
    getExtent(opt_extent) {
      return this.featuresRtree_.getExtent(opt_extent);
    }


    /**
     * Get a feature by its identifier (the value returned by feature.getId()).
     * Note that the index treats string and numeric identifiers as the same.  So
     * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.
     *
     * @param {string|number} id Feature identifier.
     * @return {import("../Feature.js").default<Geometry>} The feature (or `null` if not found).
     * @api
     */
    getFeatureById(id) {
      const feature = this.idIndex_[id.toString()];
      return feature !== undefined ? feature : null;
    }


    /**
     * Get a feature by its internal unique identifier (using `getUid`).
     *
     * @param {string} uid Feature identifier.
     * @return {import("../Feature.js").default<Geometry>} The feature (or `null` if not found).
     */
    getFeatureByUid(uid) {
      const feature = this.uidIndex_[uid];
      return feature !== undefined ? feature : null;
    }


    /**
     * Get the format associated with this source.
     *
     * @return {import("../format/Feature.js").default|undefined} The feature format.
     * @api
     */
    getFormat() {
      return this.format_;
    }


    /**
     * @return {boolean} The source can have overlapping geometries.
     */
    getOverlaps() {
      return this.overlaps_;
    }


    /**
     * Get the url associated with this source.
     *
     * @return {string|import("../featureloader.js").FeatureUrlFunction|undefined} The url.
     * @api
     */
    getUrl() {
      return this.url_;
    }


    /**
     * @param {Event} event Event.
     * @private
     */
    handleFeatureChange_(event) {
      const feature = /** @type {import("../Feature.js").default<Geometry>} */ (event.target);
      const featureKey = getUid(feature);
      const geometry = feature.getGeometry();
      if (!geometry) {
        if (!(featureKey in this.nullGeometryFeatures_)) {
          if (this.featuresRtree_) {
            this.featuresRtree_.remove(feature);
          }
          this.nullGeometryFeatures_[featureKey] = feature;
        }
      } else {
        const extent = geometry.getExtent();
        if (featureKey in this.nullGeometryFeatures_) {
          delete this.nullGeometryFeatures_[featureKey];
          if (this.featuresRtree_) {
            this.featuresRtree_.insert(extent, feature);
          }
        } else {
          if (this.featuresRtree_) {
            this.featuresRtree_.update(extent, feature);
          }
        }
      }
      const id = feature.getId();
      if (id !== undefined) {
        const sid = id.toString();
        if (this.idIndex_[sid] !== feature) {
          this.removeFromIdIndex_(feature);
          this.idIndex_[sid] = feature;
        }
      } else {
        this.removeFromIdIndex_(feature);
        this.uidIndex_[featureKey] = feature;
      }
      this.changed();
      this.dispatchEvent(new VectorSourceEvent(
        VectorEventType.CHANGEFEATURE, feature));
    }

    /**
     * Returns true if the feature is contained within the source.
     * @param {import("../Feature.js").default<Geometry>} feature Feature.
     * @return {boolean} Has feature.
     * @api
     */
    hasFeature(feature) {
      const id = feature.getId();
      if (id !== undefined) {
        return id in this.idIndex_;
      } else {
        return getUid(feature) in this.uidIndex_;
      }
    }

    /**
     * @return {boolean} Is empty.
     */
    isEmpty() {
      return this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_);
    }


    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {import("../proj/Projection.js").default} projection Projection.
     */
    loadFeatures(extent, resolution, projection) {
      const loadedExtentsRtree = this.loadedExtentsRtree_;
      const extentsToLoad = this.strategy_(extent, resolution);
      this.loading = false;
      for (let i = 0, ii = extentsToLoad.length; i < ii; ++i) {
        const extentToLoad = extentsToLoad[i];
        const alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad,
          /**
           * @param {{extent: import("../extent.js").Extent}} object Object.
           * @return {boolean} Contains.
           */
          function(object) {
            return containsExtent(object.extent, extentToLoad);
          });
        if (!alreadyLoaded) {
          this.loader_.call(this, extentToLoad, resolution, projection);
          loadedExtentsRtree.insert(extentToLoad, {extent: extentToLoad.slice()});
          this.loading = this.loader_ !== VOID;
        }
      }
    }

    /**
     * @inheritDoc
     */
    refresh() {
      this.clear(true);
      this.loadedExtentsRtree_.clear();
      super.refresh();
    }


    /**
     * Remove an extent from the list of loaded extents.
     * @param {import("../extent.js").Extent} extent Extent.
     * @api
     */
    removeLoadedExtent(extent) {
      const loadedExtentsRtree = this.loadedExtentsRtree_;
      let obj;
      loadedExtentsRtree.forEachInExtent(extent, function(object) {
        if (equals(object.extent, extent)) {
          obj = object;
          return true;
        }
      });
      if (obj) {
        loadedExtentsRtree.remove(obj);
      }
    }


    /**
     * Remove a single feature from the source.  If you want to remove all features
     * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method
     * instead.
     * @param {import("../Feature.js").default<Geometry>} feature Feature to remove.
     * @api
     */
    removeFeature(feature) {
      const featureKey = getUid(feature);
      if (featureKey in this.nullGeometryFeatures_) {
        delete this.nullGeometryFeatures_[featureKey];
      } else {
        if (this.featuresRtree_) {
          this.featuresRtree_.remove(feature);
        }
      }
      this.removeFeatureInternal(feature);
      this.changed();
    }


    /**
     * Remove feature without firing a `change` event.
     * @param {import("../Feature.js").default<Geometry>} feature Feature.
     * @protected
     */
    removeFeatureInternal(feature) {
      const featureKey = getUid(feature);
      this.featureChangeKeys_[featureKey].forEach(unlistenByKey);
      delete this.featureChangeKeys_[featureKey];
      const id = feature.getId();
      if (id !== undefined) {
        delete this.idIndex_[id.toString()];
      }
      delete this.uidIndex_[featureKey];
      this.dispatchEvent(new VectorSourceEvent(
        VectorEventType.REMOVEFEATURE, feature));
    }


    /**
     * Remove a feature from the id index.  Called internally when the feature id
     * may have changed.
     * @param {import("../Feature.js").default<Geometry>} feature The feature.
     * @return {boolean} Removed the feature from the index.
     * @private
     */
    removeFromIdIndex_(feature) {
      let removed = false;
      for (const id in this.idIndex_) {
        if (this.idIndex_[id] === feature) {
          delete this.idIndex_[id];
          removed = true;
          break;
        }
      }
      return removed;
    }


    /**
     * Set the new loader of the source. The next render cycle will use the
     * new loader.
     * @param {import("../featureloader.js").FeatureLoader} loader The loader to set.
     * @api
     */
    setLoader(loader) {
      this.loader_ = loader;
    }

    /**
     * Points the source to a new url. The next render cycle will use the new url.
     * @param {string|import("../featureloader.js").FeatureUrlFunction} url Url.
     * @api
     */
    setUrl(url) {
      assert(this.format_, 7); // `format` must be set when `url` is set
      this.setLoader(xhr(url, this.format_));
    }

  }

  /**
   * @module ol/geom/flat/geodesic
   */


  /**
   * @param {function(number): import("../../coordinate.js").Coordinate} interpolate Interpolate function.
   * @param {import("../../proj.js").TransformFunction} transform Transform from longitude/latitude to
   *     projected coordinates.
   * @param {number} squaredTolerance Squared tolerance.
   * @return {Array<number>} Flat coordinates.
   */
  function line(interpolate, transform, squaredTolerance) {
    // FIXME reduce garbage generation
    // FIXME optimize stack operations

    /** @type {Array<number>} */
    const flatCoordinates = [];

    let geoA = interpolate(0);
    let geoB = interpolate(1);

    let a = transform(geoA);
    let b = transform(geoB);

    /** @type {Array<import("../../coordinate.js").Coordinate>} */
    const geoStack = [geoB, geoA];
    /** @type {Array<import("../../coordinate.js").Coordinate>} */
    const stack = [b, a];
    /** @type {Array<number>} */
    const fractionStack = [1, 0];

    /** @type {!Object<string, boolean>} */
    const fractions = {};

    let maxIterations = 1e5;
    let geoM, m, fracA, fracB, fracM, key;

    while (--maxIterations > 0 && fractionStack.length > 0) {
      // Pop the a coordinate off the stack
      fracA = fractionStack.pop();
      geoA = geoStack.pop();
      a = stack.pop();
      // Add the a coordinate if it has not been added yet
      key = fracA.toString();
      if (!(key in fractions)) {
        flatCoordinates.push(a[0], a[1]);
        fractions[key] = true;
      }
      // Pop the b coordinate off the stack
      fracB = fractionStack.pop();
      geoB = geoStack.pop();
      b = stack.pop();
      // Find the m point between the a and b coordinates
      fracM = (fracA + fracB) / 2;
      geoM = interpolate(fracM);
      m = transform(geoM);
      if (squaredSegmentDistance(m[0], m[1], a[0], a[1],
        b[0], b[1]) < squaredTolerance) {
        // If the m point is sufficiently close to the straight line, then we
        // discard it.  Just use the b coordinate and move on to the next line
        // segment.
        flatCoordinates.push(b[0], b[1]);
        key = fracB.toString();
        fractions[key] = true;
      } else {
        // Otherwise, we need to subdivide the current line segment.  Split it
        // into two and push the two line segments onto the stack.
        fractionStack.push(fracB, fracM, fracM, fracA);
        stack.push(b, m, m, a);
        geoStack.push(geoB, geoM, geoM, geoA);
      }
    }

    return flatCoordinates;
  }


  /**
   * Generate a meridian (line at constant longitude).
   * @param {number} lon Longitude.
   * @param {number} lat1 Latitude 1.
   * @param {number} lat2 Latitude 2.
   * @param {import("../../proj/Projection.js").default} projection Projection.
   * @param {number} squaredTolerance Squared tolerance.
   * @return {Array<number>} Flat coordinates.
   */
  function meridian(lon, lat1, lat2, projection, squaredTolerance) {
    const epsg4326Projection = get$2('EPSG:4326');
    return line(
      /**
       * @param {number} frac Fraction.
       * @return {import("../../coordinate.js").Coordinate} Coordinate.
       */
      function(frac) {
        return [lon, lat1 + ((lat2 - lat1) * frac)];
      },
      getTransform(epsg4326Projection, projection), squaredTolerance);
  }


  /**
   * Generate a parallel (line at constant latitude).
   * @param {number} lat Latitude.
   * @param {number} lon1 Longitude 1.
   * @param {number} lon2 Longitude 2.
   * @param {import("../../proj/Projection.js").default} projection Projection.
   * @param {number} squaredTolerance Squared tolerance.
   * @return {Array<number>} Flat coordinates.
   */
  function parallel(lat, lon1, lon2, projection, squaredTolerance) {
    const epsg4326Projection = get$2('EPSG:4326');
    return line(
      /**
       * @param {number} frac Fraction.
       * @return {import("../../coordinate.js").Coordinate} Coordinate.
       */
      function(frac) {
        return [lon1 + ((lon2 - lon1) * frac), lat];
      },
      getTransform(epsg4326Projection, projection), squaredTolerance);
  }

  /**
   * @module ol/layer/Graticule
   */


  /**
   * @type {Stroke}
   * @private
   * @const
   */
  const DEFAULT_STROKE_STYLE = new Stroke({
    color: 'rgba(0,0,0,0.2)'
  });

  /**
   * @type {Array<number>}
   * @private
   */
  const INTERVALS = [
    90, 45, 30, 20, 10, 5, 2, 1, 0.5, 0.2, 0.1, 0.05, 0.01, 0.005, 0.002, 0.001
  ];

  /**
   * @typedef {Object} GraticuleLabelDataType
   * @property {Point} geom
   * @property {string} text
   */


  /**
   * @typedef {Object} Options
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [maxLines=100] The maximum number of meridians and
   * parallels from the center of the map. The default value of 100 means that at
   * most 200 meridians and 200 parallels will be displayed. The default value is
   * appropriate for conformal projections like Spherical Mercator. If you
   * increase the value, more lines will be drawn and the drawing performance will
   * decrease.
   * @property {Stroke} [strokeStyle='rgba(0,0,0,0.2)'] The
   * stroke style to use for drawing the graticule. If not provided, a not fully
   * opaque black will be used.
   * @property {number} [targetSize=100] The target size of the graticule cells,
   * in pixels.
   * @property {boolean} [showLabels=false] Render a label with the respective
   * latitude/longitude for each graticule line.
   * @property {function(number):string} [lonLabelFormatter] Label formatter for
   * longitudes. This function is called with the longitude as argument, and
   * should return a formatted string representing the longitude. By default,
   * labels are formatted as degrees, minutes, seconds and hemisphere.
   * @property {function(number):string} [latLabelFormatter] Label formatter for
   * latitudes. This function is called with the latitude as argument, and
   * should return a formatted string representing the latitude. By default,
   * labels are formatted as degrees, minutes, seconds and hemisphere.
   * @property {number} [lonLabelPosition=0] Longitude label position in fractions
   * (0..1) of view extent. 0 means at the bottom of the viewport, 1 means at the
   * top.
   * @property {number} [latLabelPosition=1] Latitude label position in fractions
   * (0..1) of view extent. 0 means at the left of the viewport, 1 means at the
   * right.
   * @property {Text} [lonLabelStyle] Longitude label text
   * style. If not provided, the following style will be used:
   * ```js
   * new Text({
   *   font: '12px Calibri,sans-serif',
   *   textBaseline: 'bottom',
   *   fill: new Fill({
   *     color: 'rgba(0,0,0,1)'
   *   }),
   *   stroke: new Stroke({
   *     color: 'rgba(255,255,255,1)',
   *     width: 3
   *   })
   * });
   * ```
   * Note that the default's `textBaseline` configuration will not work well for
   * `lonLabelPosition` configurations that position labels close to the top of
   * the viewport.
   * @property {Text} [latLabelStyle] Latitude label text style.
   * If not provided, the following style will be used:
   * ```js
   * new Text({
   *   font: '12px Calibri,sans-serif',
   *   textAlign: 'end',
   *   fill: new Fill({
   *     color: 'rgba(0,0,0,1)'
   *   }),
   *   stroke: Stroke({
   *     color: 'rgba(255,255,255,1)',
   *     width: 3
   *   })
   * });
   * ```
   * Note that the default's `textAlign` configuration will not work well for
   * `latLabelPosition` configurations that position labels close to the left of
   * the viewport.
   * @property {Array<number>} [intervals=[90, 45, 30, 20, 10, 5, 2, 1, 0.5, 0.2, 0.1, 0.05, 0.01, 0.005, 0.002, 0.001]]
   * Intervals (in degrees) for the graticule. Example to limit graticules to 30 and 10 degrees intervals:
   * ```js
   * [30, 10]
   * ```
   * @property {boolean} [wrapX=true] Whether to repeat the graticule horizontally.
   */


  /**
   * @classdesc
   * Layer that renders a grid for a coordinate system.
   *
   * @fires import("../render/Event.js").RenderEvent
   * @api
   */
  class Graticule extends VectorLayer {
    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {
      const options = opt_options ? opt_options : {};

      const baseOptions = assign({
        updateWhileAnimating: true,
        updateWhileInteracting: true,
        renderBuffer: 0
      }, options);

      delete baseOptions.maxLines;
      delete baseOptions.strokeStyle;
      delete baseOptions.targetSize;
      delete baseOptions.showLabels;
      delete baseOptions.lonLabelFormatter;
      delete baseOptions.latLabelFormatter;
      delete baseOptions.lonLabelPosition;
      delete baseOptions.latLabelPosition;
      delete baseOptions.lonLabelStyle;
      delete baseOptions.latLabelStyle;
      delete baseOptions.intervals;
      super(baseOptions);

      /**
       * @type {import("../proj/Projection.js").default}
       */
      this.projection_ = null;

      /**
       * @type {number}
       * @private
       */
      this.maxLat_ = Infinity;

      /**
       * @type {number}
       * @private
       */
      this.maxLon_ = Infinity;

      /**
       * @type {number}
       * @private
       */
      this.minLat_ = -Infinity;

      /**
       * @type {number}
       * @private
       */
      this.minLon_ = -Infinity;

      /**
       * @type {number}
       * @private
       */
      this.maxLatP_ = Infinity;

      /**
       * @type {number}
       * @private
       */
      this.maxLonP_ = Infinity;

      /**
       * @type {number}
       * @private
       */
      this.minLatP_ = -Infinity;

      /**
       * @type {number}
       * @private
       */
      this.minLonP_ = -Infinity;

      /**
       * @type {number}
       * @private
       */
      this.targetSize_ = options.targetSize !== undefined ? options.targetSize : 100;

      /**
       * @type {number}
       * @private
       */
      this.maxLines_ = options.maxLines !== undefined ? options.maxLines : 100;

      /**
       * @type {Array<LineString>}
       * @private
       */
      this.meridians_ = [];

      /**
       * @type {Array<LineString>}
       * @private
       */
      this.parallels_ = [];

      /**
       * @type {Stroke}
       * @private
       */
      this.strokeStyle_ = options.strokeStyle !== undefined ? options.strokeStyle : DEFAULT_STROKE_STYLE;

      /**
       * @type {import("../proj.js").TransformFunction|undefined}
       * @private
       */
      this.fromLonLatTransform_ = undefined;

      /**
       * @type {import("../proj.js").TransformFunction|undefined}
       * @private
       */
      this.toLonLatTransform_ = undefined;

      /**
       * @type {import("../coordinate.js").Coordinate}
       * @private
       */
      this.projectionCenterLonLat_ = null;

      /**
       * @type {Array<GraticuleLabelDataType>}
       * @private
       */
      this.meridiansLabels_ = null;

      /**
       * @type {Array<GraticuleLabelDataType>}
       * @private
       */
      this.parallelsLabels_ = null;

      if (options.showLabels) {

        /**
         * @type {null|function(number):string}
         * @private
         */
        this.lonLabelFormatter_ = options.lonLabelFormatter == undefined ?
          degreesToStringHDMS.bind(this, 'EW') : options.lonLabelFormatter;

        /**
         * @type {function(number):string}
         * @private
         */
        this.latLabelFormatter_ = options.latLabelFormatter == undefined ?
          degreesToStringHDMS.bind(this, 'NS') : options.latLabelFormatter;

        /**
         * Longitude label position in fractions (0..1) of view extent. 0 means
         * bottom, 1 means top.
         * @type {number}
         * @private
         */
        this.lonLabelPosition_ = options.lonLabelPosition == undefined ? 0 :
          options.lonLabelPosition;

        /**
         * Latitude Label position in fractions (0..1) of view extent. 0 means left, 1
         * means right.
         * @type {number}
         * @private
         */
        this.latLabelPosition_ = options.latLabelPosition == undefined ? 1 :
          options.latLabelPosition;

        /**
         * @type {Object.<string,Style>}
         * @private
         */
        this.lonLabelStyleCache_ = {};

        /**
         * @private
         * @param {import("../Feature").default} feature Feature
         * @return {Style} style
         */
        this.lonLabelStyle_ = function(feature) {
          const label = feature.get('graticule_label');
          if (!this.lonLabelStyleCache_[label]) {
            this.lonLabelStyleCache_[label] = new Style$1({
              text: options.lonLabelStyle !== undefined ? options.lonLabelStyle :
                new Text({
                  text: label,
                  font: '12px Calibri,sans-serif',
                  textBaseline: 'bottom',
                  fill: new Fill({
                    color: 'rgba(0,0,0,1)'
                  }),
                  stroke: new Stroke({
                    color: 'rgba(255,255,255,1)',
                    width: 3
                  })
                })
            });
          }
          return this.lonLabelStyleCache_[label];
        }.bind(this);

        /**
         * @type {Object.<string,Style>}
         * @private
         */
        this.latLabelStyleCache_ = {};

        /**
         * @private
         * @param {import("../Feature").default} feature Feature
         * @return {Style} style
         */
        this.latLabelStyle_ = function(feature) {
          const label = feature.get('graticule_label');
          if (!this.latLabelStyleCache_[label]) {
            this.latLabelStyleCache_[label] = new Style$1({
              text: options.latLabelStyle !== undefined ? options.latLabelStyle :
                new Text({
                  text: label,
                  font: '12px Calibri,sans-serif',
                  textAlign: 'right',
                  fill: new Fill({
                    color: 'rgba(0,0,0,1)'
                  }),
                  stroke: new Stroke({
                    color: 'rgba(255,255,255,1)',
                    width: 3
                  })
                })
            });
          }
          return this.latLabelStyleCache_[label];
        }.bind(this);

        this.meridiansLabels_ = [];
        this.parallelsLabels_ = [];
      }

      /**
       * @type {Array<number>}
       * @private
       */
      this.intervals_ = options.intervals !== undefined ? options.intervals : INTERVALS;

      // use a source with a custom loader for lines & text
      this.setSource(
        new VectorSource({
          loader: this.loaderFunction.bind(this),
          strategy: bbox,
          features: new Collection(),
          overlaps: false,
          useSpatialIndex: false,
          wrapX: options.wrapX
        })
      );

      /**
       * feature pool to use when updating graticule
       * @type {Array<Feature>}
       * @private
       */
      this.featurePool_ = [];

      /**
       * @type {Style}
       * @private
       */
      this.lineStyle_ = new Style$1({
        stroke: this.strokeStyle_
      });

      /**
       * @type {import("../extent.js").Extent}
       */
      this.renderedExtent_ = null;

      this.setRenderOrder(null);

      this.tmpExtent_ = null;
    }

    /**
     * Update geometries in the source based on current view
     * @param {import("../extent").Extent} extent Extent
     * @param {number} resolution Resolution
     * @param {import("../proj/Projection.js").default} projection Projection
     */
    loaderFunction(extent, resolution, projection) {
      const source = this.getSource();

      // only consider the intersection between our own extent & the requested one
      const layerExtent = this.getExtent() || [-Infinity, -Infinity, Infinity, Infinity];
      const renderExtent = getIntersection(layerExtent, extent, this.tmpExtent_);

      // we should not keep track of loaded extents
      setTimeout(function() {
        source.removeLoadedExtent(extent);
      }, 0);

      if (this.renderedExtent_ && equals(this.renderedExtent_, renderExtent)) {
        return;
      }
      this.renderedExtent_ = renderExtent;

      // bail out if nothing to render
      if (isEmpty$1(renderExtent)) {
        return;
      }

      // update projection info
      const center = getCenter(renderExtent);
      const squaredTolerance = resolution * resolution / 4;

      const updateProjectionInfo = !this.projection_ ||
        !equivalent(this.projection_, projection);

      if (updateProjectionInfo) {
        this.updateProjectionInfo_(projection);
      }

      this.createGraticule_(renderExtent, center, resolution, squaredTolerance);

      // first make sure we have enough features in the pool
      let featureCount = this.meridians_.length + this.parallels_.length;
      if (this.meridiansLabels_) {
        featureCount += this.meridiansLabels_.length;
      }
      if (this.parallelsLabels_) {
        featureCount += this.parallelsLabels_.length;
      }

      let feature;
      while (featureCount > this.featurePool_.length) {
        feature = new Feature();
        this.featurePool_.push(feature);
      }

      const featuresColl = source.getFeaturesCollection();
      featuresColl.clear();
      let poolIndex = 0;

      // add features for the lines & labels
      let i, l;
      for (i = 0, l = this.meridians_.length; i < l; ++i) {
        feature = this.featurePool_[poolIndex++];
        feature.setGeometry(this.meridians_[i]);
        feature.setStyle(this.lineStyle_);
        featuresColl.push(feature);
      }
      for (i = 0, l = this.parallels_.length; i < l; ++i) {
        feature = this.featurePool_[poolIndex++];
        feature.setGeometry(this.parallels_[i]);
        feature.setStyle(this.lineStyle_);
        featuresColl.push(feature);
      }
      let labelData;
      if (this.meridiansLabels_) {
        for (i = 0, l = this.meridiansLabels_.length; i < l; ++i) {
          labelData = this.meridiansLabels_[i];
          feature = this.featurePool_[poolIndex++];
          feature.setGeometry(labelData.geom);
          feature.setStyle(this.lonLabelStyle_);
          feature.set('graticule_label', labelData.text);
          featuresColl.push(feature);
        }
      }
      if (this.parallelsLabels_) {
        for (i = 0, l = this.parallelsLabels_.length; i < l; ++i) {
          labelData = this.parallelsLabels_[i];
          feature = this.featurePool_[poolIndex++];
          feature.setGeometry(labelData.geom);
          feature.setStyle(this.latLabelStyle_);
          feature.set('graticule_label', labelData.text);
          featuresColl.push(feature);
        }
      }
    }

    /**
     * @param {number} lon Longitude.
     * @param {number} minLat Minimal latitude.
     * @param {number} maxLat Maximal latitude.
     * @param {number} squaredTolerance Squared tolerance.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} index Index.
     * @return {number} Index.
     * @private
     */
    addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, index) {
      const lineString = this.getMeridian_(lon, minLat, maxLat, squaredTolerance, index);
      if (intersects(lineString.getExtent(), extent)) {
        if (this.meridiansLabels_) {
          const textPoint = this.getMeridianPoint_(lineString, extent, index);
          this.meridiansLabels_[index] = {
            geom: textPoint,
            text: this.lonLabelFormatter_(lon)
          };
        }
        this.meridians_[index++] = lineString;
      }
      return index;
    }

    /**
     * @param {number} lat Latitude.
     * @param {number} minLon Minimal longitude.
     * @param {number} maxLon Maximal longitude.
     * @param {number} squaredTolerance Squared tolerance.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} index Index.
     * @return {number} Index.
     * @private
     */
    addParallel_(lat, minLon, maxLon, squaredTolerance, extent, index) {
      const lineString = this.getParallel_(lat, minLon, maxLon, squaredTolerance, index);
      if (intersects(lineString.getExtent(), extent)) {
        if (this.parallelsLabels_) {
          const textPoint = this.getParallelPoint_(lineString, extent, index);
          this.parallelsLabels_[index] = {
            geom: textPoint,
            text: this.latLabelFormatter_(lat)
          };
        }
        this.parallels_[index++] = lineString;
      }
      return index;
    }

    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {import("../coordinate.js").Coordinate} center Center.
     * @param {number} resolution Resolution.
     * @param {number} squaredTolerance Squared tolerance.
     * @private
     */
    createGraticule_(extent, center, resolution, squaredTolerance) {
      const interval = this.getInterval_(resolution);
      if (interval == -1) {
        this.meridians_.length = this.parallels_.length = 0;
        if (this.meridiansLabels_) {
          this.meridiansLabels_.length = 0;
        }
        if (this.parallelsLabels_) {
          this.parallelsLabels_.length = 0;
        }
        return;
      }

      const centerLonLat = this.toLonLatTransform_(center);
      let centerLon = centerLonLat[0];
      let centerLat = centerLonLat[1];
      const maxLines = this.maxLines_;
      let cnt, idx, lat, lon;

      let validExtent = [
        Math.max(extent[0], this.minLonP_),
        Math.max(extent[1], this.minLatP_),
        Math.min(extent[2], this.maxLonP_),
        Math.min(extent[3], this.maxLatP_)
      ];

      validExtent = transformExtent(validExtent, this.projection_, 'EPSG:4326');
      const maxLat = validExtent[3];
      const maxLon = validExtent[2];
      const minLat = validExtent[1];
      const minLon = validExtent[0];

      // Create meridians

      centerLon = Math.floor(centerLon / interval) * interval;
      lon = clamp(centerLon, this.minLon_, this.maxLon_);

      idx = this.addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, 0);

      cnt = 0;
      while (lon != this.minLon_ && cnt++ < maxLines) {
        lon = Math.max(lon - interval, this.minLon_);
        idx = this.addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, idx);
      }

      lon = clamp(centerLon, this.minLon_, this.maxLon_);

      cnt = 0;
      while (lon != this.maxLon_ && cnt++ < maxLines) {
        lon = Math.min(lon + interval, this.maxLon_);
        idx = this.addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, idx);
      }

      this.meridians_.length = idx;
      if (this.meridiansLabels_) {
        this.meridiansLabels_.length = idx;
      }

      // Create parallels

      centerLat = Math.floor(centerLat / interval) * interval;
      lat = clamp(centerLat, this.minLat_, this.maxLat_);

      idx = this.addParallel_(lat, minLon, maxLon, squaredTolerance, extent, 0);

      cnt = 0;
      while (lat != this.minLat_ && cnt++ < maxLines) {
        lat = Math.max(lat - interval, this.minLat_);
        idx = this.addParallel_(lat, minLon, maxLon, squaredTolerance, extent, idx);
      }

      lat = clamp(centerLat, this.minLat_, this.maxLat_);

      cnt = 0;
      while (lat != this.maxLat_ && cnt++ < maxLines) {
        lat = Math.min(lat + interval, this.maxLat_);
        idx = this.addParallel_(lat, minLon, maxLon, squaredTolerance, extent, idx);
      }

      this.parallels_.length = idx;
      if (this.parallelsLabels_) {
        this.parallelsLabels_.length = idx;
      }

    }

    /**
     * @param {number} resolution Resolution.
     * @return {number} The interval in degrees.
     * @private
     */
    getInterval_(resolution) {
      const centerLon = this.projectionCenterLonLat_[0];
      const centerLat = this.projectionCenterLonLat_[1];
      let interval = -1;
      const target = Math.pow(this.targetSize_ * resolution, 2);
      /** @type {Array<number>} **/
      const p1 = [];
      /** @type {Array<number>} **/
      const p2 = [];
      for (let i = 0, ii = this.intervals_.length; i < ii; ++i) {
        const delta = this.intervals_[i] / 2;
        p1[0] = centerLon - delta;
        p1[1] = centerLat - delta;
        p2[0] = centerLon + delta;
        p2[1] = centerLat + delta;
        this.fromLonLatTransform_(p1, p1);
        this.fromLonLatTransform_(p2, p2);
        const dist = Math.pow(p2[0] - p1[0], 2) + Math.pow(p2[1] - p1[1], 2);
        if (dist <= target) {
          break;
        }
        interval = this.intervals_[i];
      }
      return interval;
    }

    /**
     * @param {number} lon Longitude.
     * @param {number} minLat Minimal latitude.
     * @param {number} maxLat Maximal latitude.
     * @param {number} squaredTolerance Squared tolerance.
     * @return {LineString} The meridian line string.
     * @param {number} index Index.
     * @private
     */
    getMeridian_(lon, minLat, maxLat, squaredTolerance, index) {
      const flatCoordinates = meridian(lon, minLat, maxLat, this.projection_, squaredTolerance);
      let lineString = this.meridians_[index];
      if (!lineString) {
        lineString = this.meridians_[index] = new LineString(flatCoordinates, GeometryLayout.XY);
      } else {
        lineString.setFlatCoordinates(GeometryLayout.XY, flatCoordinates);
        lineString.changed();
      }
      return lineString;
    }

    /**
     * @param {LineString} lineString Meridian
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} index Index.
     * @return {Point} Meridian point.
     * @private
     */
    getMeridianPoint_(lineString, extent, index) {
      const flatCoordinates = lineString.getFlatCoordinates();
      const clampedBottom = Math.max(extent[1], flatCoordinates[1]);
      const clampedTop = Math.min(extent[3], flatCoordinates[flatCoordinates.length - 1]);
      const lat = clamp(
        extent[1] + Math.abs(extent[1] - extent[3]) * this.lonLabelPosition_,
        clampedBottom, clampedTop);
      const coordinate = [flatCoordinates[0], lat];
      let point;
      if (index in this.meridiansLabels_) {
        point = this.meridiansLabels_[index].geom;
        point.setCoordinates(coordinate);
      } else {
        point = new Point(coordinate);
      }
      return point;
    }

    /**
     * Get the list of meridians.  Meridians are lines of equal longitude.
     * @return {Array<LineString>} The meridians.
     * @api
     */
    getMeridians() {
      return this.meridians_;
    }

    /**
     * @param {number} lat Latitude.
     * @param {number} minLon Minimal longitude.
     * @param {number} maxLon Maximal longitude.
     * @param {number} squaredTolerance Squared tolerance.
     * @return {LineString} The parallel line string.
     * @param {number} index Index.
     * @private
     */
    getParallel_(lat, minLon, maxLon, squaredTolerance, index) {
      const flatCoordinates = parallel(lat, minLon, maxLon, this.projection_, squaredTolerance);
      let lineString = this.parallels_[index];
      if (!lineString) {
        lineString = new LineString(flatCoordinates, GeometryLayout.XY);
      } else {
        lineString.setFlatCoordinates(GeometryLayout.XY, flatCoordinates);
        lineString.changed();
      }
      return lineString;
    }


    /**
     * @param {LineString} lineString Parallels.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} index Index.
     * @return {Point} Parallel point.
     * @private
     */
    getParallelPoint_(lineString, extent, index) {
      const flatCoordinates = lineString.getFlatCoordinates();
      const clampedLeft = Math.max(extent[0], flatCoordinates[0]);
      const clampedRight = Math.min(extent[2], flatCoordinates[flatCoordinates.length - 2]);
      const lon = clamp(
        extent[0] + Math.abs(extent[0] - extent[2]) * this.latLabelPosition_,
        clampedLeft, clampedRight);
      const coordinate = [lon, flatCoordinates[1]];
      let point;
      if (index in this.parallelsLabels_) {
        point = this.parallelsLabels_[index].geom;
        point.setCoordinates(coordinate);
      } else {
        point = new Point(coordinate);
      }
      return point;
    }

    /**
     * Get the list of parallels.  Parallels are lines of equal latitude.
     * @return {Array<LineString>} The parallels.
     * @api
     */
    getParallels() {
      return this.parallels_;
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @private
     */
    updateProjectionInfo_(projection) {
      const epsg4326Projection = get$2('EPSG:4326');

      const worldExtent = projection.getWorldExtent();
      const worldExtentP = transformExtent(worldExtent, epsg4326Projection, projection);

      this.maxLat_ = worldExtent[3];
      this.maxLon_ = worldExtent[2];
      this.minLat_ = worldExtent[1];
      this.minLon_ = worldExtent[0];

      this.maxLatP_ = worldExtentP[3];
      this.maxLonP_ = worldExtentP[2];
      this.minLatP_ = worldExtentP[1];
      this.minLonP_ = worldExtentP[0];

      this.fromLonLatTransform_ = getTransform(epsg4326Projection, projection);

      this.toLonLatTransform_ = getTransform(projection, epsg4326Projection);

      this.projectionCenterLonLat_ = this.toLonLatTransform_(getCenter(projection.getExtent()));

      this.projection_ = projection;
    }
  }

  /**
   * @module ol/ImageBase
   */

  /**
   * @abstract
   */
  class ImageBase extends Target {

    /**
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {number|undefined} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("./ImageState.js").default} state State.
     */
    constructor(extent, resolution, pixelRatio, state) {

      super();

      /**
       * @protected
       * @type {import("./extent.js").Extent}
       */
      this.extent = extent;

      /**
       * @private
       * @type {number}
       */
      this.pixelRatio_ = pixelRatio;

      /**
       * @protected
       * @type {number|undefined}
       */
      this.resolution = resolution;

      /**
       * @protected
       * @type {import("./ImageState.js").default}
       */
      this.state = state;

    }

    /**
     * @protected
     */
    changed() {
      this.dispatchEvent(EventType.CHANGE);
    }

    /**
     * @return {import("./extent.js").Extent} Extent.
     */
    getExtent() {
      return this.extent;
    }

    /**
     * @abstract
     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
     */
    getImage() {
      return abstract();
    }

    /**
     * @return {number} PixelRatio.
     */
    getPixelRatio() {
      return this.pixelRatio_;
    }

    /**
     * @return {number} Resolution.
     */
    getResolution() {
      return /** @type {number} */ (this.resolution);
    }

    /**
     * @return {import("./ImageState.js").default} State.
     */
    getState() {
      return this.state;
    }

    /**
     * Load not yet loaded URI.
     * @abstract
     */
    load() {
      abstract();
    }
  }

  /**
   * @module ol/has
   */

  const ua = typeof navigator !== 'undefined' ?
    navigator.userAgent.toLowerCase() : '';

  /**
   * User agent string says we are dealing with Firefox as browser.
   * @type {boolean}
   */
  const FIREFOX = ua.indexOf('firefox') !== -1;

  /**
   * User agent string says we are dealing with Safari as browser.
   * @type {boolean}
   */
  const SAFARI = ua.indexOf('safari') !== -1 && ua.indexOf('chrom') == -1;

  /**
   * User agent string says we are dealing with a WebKit engine.
   * @type {boolean}
   */
  const WEBKIT = ua.indexOf('webkit') !== -1 && ua.indexOf('edge') == -1;

  /**
   * User agent string says we are dealing with a Mac as platform.
   * @type {boolean}
   */
  const MAC = ua.indexOf('macintosh') !== -1;


  /**
   * The ratio between physical pixels and device-independent pixels
   * (dips) on the device (`window.devicePixelRatio`).
   * @const
   * @type {number}
   * @api
   */
  const DEVICE_PIXEL_RATIO = window.devicePixelRatio || 1;

  /**
   * Image.prototype.decode() is supported.
   * @type {boolean}
   */
  const IMAGE_DECODE = typeof Image !== 'undefined' && Image.prototype.decode;

  /**
   * @module ol/Image
   */


  /**
   * A function that takes an {@link module:ol/Image~Image} for the image and a
   * `{string}` for the src as arguments. It is supposed to make it so the
   * underlying image {@link module:ol/Image~Image#getImage} is assigned the
   * content specified by the src. If not specified, the default is
   *
   *     function(image, src) {
   *       image.getImage().src = src;
   *     }
   *
   * Providing a custom `imageLoadFunction` can be useful to load images with
   * post requests or - in general - through XHR requests, where the src of the
   * image element would be set to a data URI when the content is loaded.
   *
   * @typedef {function(ImageWrapper, string): void} LoadFunction
   * @api
   */


  class ImageWrapper extends ImageBase {

    /**
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {number|undefined} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {string} src Image source URI.
     * @param {?string} crossOrigin Cross origin.
     * @param {LoadFunction} imageLoadFunction Image load function.
     */
    constructor(extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction) {

      super(extent, resolution, pixelRatio, ImageState.IDLE);

      /**
       * @private
       * @type {string}
       */
      this.src_ = src;

      /**
       * @private
       * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}
       */
      this.image_ = new Image();
      if (crossOrigin !== null) {
        this.image_.crossOrigin = crossOrigin;
      }

      /**
       * @private
       * @type {function():void}
       */
      this.unlisten_ = null;

      /**
       * @protected
       * @type {ImageState}
       */
      this.state = ImageState.IDLE;

      /**
       * @private
       * @type {LoadFunction}
       */
      this.imageLoadFunction_ = imageLoadFunction;

    }

    /**
     * @inheritDoc
     * @api
     */
    getImage() {
      return this.image_;
    }

    /**
     * Tracks loading or read errors.
     *
     * @private
     */
    handleImageError_() {
      this.state = ImageState.ERROR;
      this.unlistenImage_();
      this.changed();
    }

    /**
     * Tracks successful image load.
     *
     * @private
     */
    handleImageLoad_() {
      if (this.resolution === undefined) {
        this.resolution = getHeight(this.extent) / this.image_.height;
      }
      this.state = ImageState.LOADED;
      this.unlistenImage_();
      this.changed();
    }

    /**
     * Load the image or retry if loading previously failed.
     * Loading is taken care of by the tile queue, and calling this method is
     * only needed for preloading or for reloading in case of an error.
     * @override
     * @api
     */
    load() {
      if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {
        this.state = ImageState.LOADING;
        this.changed();
        this.imageLoadFunction_(this, this.src_);
        this.unlisten_ = listenImage(
          this.image_,
          this.handleImageLoad_.bind(this),
          this.handleImageError_.bind(this)
        );
      }
    }

    /**
     * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.
     */
    setImage(image) {
      this.image_ = image;
    }

    /**
     * Discards event handlers which listen for load completion or errors.
     *
     * @private
     */
    unlistenImage_() {
      if (this.unlisten_) {
        this.unlisten_();
        this.unlisten_ = null;
      }
    }
  }

  /**
   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image element.
   * @param {function():any} loadHandler Load callback function.
   * @param {function():any} errorHandler Error callback function.
   * @return {function():void} Callback to stop listening.
   */
  function listenImage(image, loadHandler, errorHandler) {
    const img = /** @type {HTMLImageElement} */ (image);

    if (IMAGE_DECODE) {
      const promise = img.decode();
      let listening = true;
      const unlisten = function() {
        listening = false;
      };
      promise.then(function() {
        if (listening) {
          loadHandler();
        }
      }).catch(function(error) {
        if (listening) {
          // FIXME: Unconditionally call errorHandler() when this bug is fixed upstream:
          //        https://bugs.webkit.org/show_bug.cgi?id=198527
          if (error.name === 'EncodingError' && error.message === 'Invalid image type.') {
            loadHandler();
          } else {
            errorHandler();
          }
        }
      });
      return unlisten;
    }

    const listenerKeys = [
      listenOnce(img, EventType.LOAD, loadHandler),
      listenOnce(img, EventType.ERROR, errorHandler)
    ];
    return function unlisten() {
      listenerKeys.forEach(unlistenByKey);
    };
  }

  /**
   * @module ol/ImageCanvas
   */


  /**
   * A function that is called to trigger asynchronous canvas drawing.  It is
   * called with a "done" callback that should be called when drawing is done.
   * If any error occurs during drawing, the "done" callback should be called with
   * that error.
   *
   * @typedef {function(function(Error=): void): void} Loader
   */


  class ImageCanvas extends ImageBase {

    /**
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {HTMLCanvasElement} canvas Canvas.
     * @param {Loader=} opt_loader Optional loader function to
     *     support asynchronous canvas drawing.
     */
    constructor(extent, resolution, pixelRatio, canvas, opt_loader) {

      const state = opt_loader !== undefined ? ImageState.IDLE : ImageState.LOADED;

      super(extent, resolution, pixelRatio, state);

      /**
       * Optional canvas loader function.
       * @type {?Loader}
       * @private
       */
      this.loader_ = opt_loader !== undefined ? opt_loader : null;

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.canvas_ = canvas;

      /**
       * @private
       * @type {Error}
       */
      this.error_ = null;

    }

    /**
     * Get any error associated with asynchronous rendering.
     * @return {Error} Any error that occurred during rendering.
     */
    getError() {
      return this.error_;
    }

    /**
     * Handle async drawing complete.
     * @param {Error=} err Any error during drawing.
     * @private
     */
    handleLoad_(err) {
      if (err) {
        this.error_ = err;
        this.state = ImageState.ERROR;
      } else {
        this.state = ImageState.LOADED;
      }
      this.changed();
    }

    /**
     * @inheritDoc
     */
    load() {
      if (this.state == ImageState.IDLE) {
        this.state = ImageState.LOADING;
        this.changed();
        this.loader_(this.handleLoad_.bind(this));
      }
    }

    /**
     * @return {HTMLCanvasElement} Canvas element.
     */
    getImage() {
      return this.canvas_;
    }
  }

  /**
   * @module ol/TileState
   */

  /**
   * @enum {number}
   */
  var TileState = {
    IDLE: 0,
    LOADING: 1,
    LOADED: 2,
    /**
     * Indicates that tile loading failed
     * @type {number}
     */
    ERROR: 3,
    EMPTY: 4,
    ABORT: 5
  };

  /**
   * @module ol/easing
   */


  /**
   * Start slow and speed up.
   * @param {number} t Input between 0 and 1.
   * @return {number} Output between 0 and 1.
   * @api
   */
  function easeIn(t) {
    return Math.pow(t, 3);
  }


  /**
   * Start fast and slow down.
   * @param {number} t Input between 0 and 1.
   * @return {number} Output between 0 and 1.
   * @api
   */
  function easeOut(t) {
    return 1 - easeIn(1 - t);
  }


  /**
   * Start slow, speed up, and then slow down again.
   * @param {number} t Input between 0 and 1.
   * @return {number} Output between 0 and 1.
   * @api
   */
  function inAndOut(t) {
    return 3 * t * t - 2 * t * t * t;
  }


  /**
   * Maintain a constant speed over time.
   * @param {number} t Input between 0 and 1.
   * @return {number} Output between 0 and 1.
   * @api
   */
  function linear(t) {
    return t;
  }

  /**
   * @module ol/Tile
   */


  /**
   * A function that takes an {@link module:ol/Tile} for the tile and a
   * `{string}` for the url as arguments. The default is
   * ```js
   * source.setTileLoadFunction(function(tile, src) {
   *   tile.getImage().src = src;
   * });
   * ```
   * For more fine grained control, the load function can use fetch or XMLHttpRequest and involve
   * error handling:
   *
   * ```js
   * import TileState from 'ol/TileState';
   *
   * source.setTileLoadFunction(function(tile, src) {
   *   var xhr = new XMLHttpRequest();
   *   xhr.responseType = 'blob';
   *   xhr.addEventListener('loadend', function (evt) {
   *     var data = this.response;
   *     if (data !== undefined) {
   *       tile.getImage().src = URL.createObjectURL(data);
   *     } else {
   *       tile.setState(TileState.ERROR);
   *     }
   *   });
   *   xhr.addEventListener('error', function () {
   *     tile.setState(TileState.ERROR);
   *   });
   *   xhr.open('GET', src);
   *   xhr.send();
   * });
   * ```
   *
   * @typedef {function(Tile, string): void} LoadFunction
   * @api
   */

  /**
   * {@link module:ol/source/Tile~Tile} sources use a function of this type to get
   * the url that provides a tile for a given tile coordinate.
   *
   * This function takes an {@link module:ol/tilecoord~TileCoord} for the tile
   * coordinate, a `{number}` representing the pixel ratio and a
   * {@link module:ol/proj/Projection} for the projection  as arguments
   * and returns a `{string}` representing the tile URL, or undefined if no tile
   * should be requested for the passed tile coordinate.
   *
   * @typedef {function(import("./tilecoord.js").TileCoord, number,
   *           import("./proj/Projection.js").default): (string|undefined)} UrlFunction
   * @api
   */


  /**
   * @typedef {Object} Options
   * @property {number} [transition=250] A duration for tile opacity
   * transitions in milliseconds. A duration of 0 disables the opacity transition.
   * @api
   */


  /**
   * @classdesc
   * Base class for tiles.
   *
   * @abstract
   */
  class Tile extends Target {

    /**
     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {TileState} state State.
     * @param {Options=} opt_options Tile options.
     */
    constructor(tileCoord, state, opt_options) {
      super();

      const options = opt_options ? opt_options : {};

      /**
       * @type {import("./tilecoord.js").TileCoord}
       */
      this.tileCoord = tileCoord;

      /**
       * @protected
       * @type {TileState}
       */
      this.state = state;

      /**
       * An "interim" tile for this tile. The interim tile may be used while this
       * one is loading, for "smooth" transitions when changing params/dimensions
       * on the source.
       * @type {Tile}
       */
      this.interimTile = null;

      /**
       * The tile is available at the highest possible resolution. Subclasses can
       * set this to `false` initially. Tile load listeners will not be
       * unregistered before this is set to `true` and a `#changed()` is called.
       * @type {boolean}
       */
      this.hifi = true;

      /**
       * A key assigned to the tile. This is used by the tile source to determine
       * if this tile can effectively be used, or if a new tile should be created
       * and this one be used as an interim tile for this new tile.
       * @type {string}
       */
      this.key = '';

      /**
       * The duration for the opacity transition.
       * @type {number}
       */
      this.transition_ = options.transition === undefined ? 250 : options.transition;

      /**
       * Lookup of start times for rendering transitions.  If the start time is
       * equal to -1, the transition is complete.
       * @type {Object<string, number>}
       */
      this.transitionStarts_ = {};

    }

    /**
     * @protected
     */
    changed() {
      this.dispatchEvent(EventType.CHANGE);
    }

    /**
     * @return {string} Key.
     */
    getKey() {
      return this.key + '/' + this.tileCoord;
    }

    /**
     * Get the interim tile most suitable for rendering using the chain of interim
     * tiles. This corresponds to the  most recent tile that has been loaded, if no
     * such tile exists, the original tile is returned.
     * @return {!Tile} Best tile for rendering.
     */
    getInterimTile() {
      if (!this.interimTile) {
        //empty chain
        return this;
      }
      let tile = this.interimTile;

      // find the first loaded tile and return it. Since the chain is sorted in
      // decreasing order of creation time, there is no need to search the remainder
      // of the list (all those tiles correspond to older requests and will be
      // cleaned up by refreshInterimChain)
      do {
        if (tile.getState() == TileState.LOADED) {
          // Show tile immediately instead of fading it in after loading, because
          // the interim tile is in place already
          this.transition_ = 0;
          return tile;
        }
        tile = tile.interimTile;
      } while (tile);

      // we can not find a better tile
      return this;
    }

    /**
     * Goes through the chain of interim tiles and discards sections of the chain
     * that are no longer relevant.
     */
    refreshInterimChain() {
      if (!this.interimTile) {
        return;
      }

      let tile = this.interimTile;
      let prev = /** @type {Tile} */ (this);

      do {
        if (tile.getState() == TileState.LOADED) {
          //we have a loaded tile, we can discard the rest of the list
          //we would could abort any LOADING tile request
          //older than this tile (i.e. any LOADING tile following this entry in the chain)
          tile.interimTile = null;
          break;
        } else if (tile.getState() == TileState.LOADING) {
          //keep this LOADING tile any loaded tiles later in the chain are
          //older than this tile, so we're still interested in the request
          prev = tile;
        } else if (tile.getState() == TileState.IDLE) {
          //the head of the list is the most current tile, we don't need
          //to start any other requests for this chain
          prev.interimTile = tile.interimTile;
        } else {
          prev = tile;
        }
        tile = prev.interimTile;
      } while (tile);
    }

    /**
     * Get the tile coordinate for this tile.
     * @return {import("./tilecoord.js").TileCoord} The tile coordinate.
     * @api
     */
    getTileCoord() {
      return this.tileCoord;
    }

    /**
     * @return {TileState} State.
     */
    getState() {
      return this.state;
    }

    /**
     * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,
     * it is important to set the state correctly to {@link module:ol/TileState~ERROR}
     * when the tile cannot be loaded. Otherwise the tile cannot be removed from
     * the tile queue and will block other requests.
     * @param {TileState} state State.
     * @api
     */
    setState(state) {
      this.state = state;
      this.changed();
    }

    /**
     * Load the image or retry if loading previously failed.
     * Loading is taken care of by the tile queue, and calling this method is
     * only needed for preloading or for reloading in case of an error.
     * @abstract
     * @api
     */
    load() {
      abstract();
    }

    /**
     * Get the alpha value for rendering.
     * @param {string} id An id for the renderer.
     * @param {number} time The render frame time.
     * @return {number} A number between 0 and 1.
     */
    getAlpha(id, time) {
      if (!this.transition_) {
        return 1;
      }

      let start = this.transitionStarts_[id];
      if (!start) {
        start = time;
        this.transitionStarts_[id] = start;
      } else if (start === -1) {
        return 1;
      }

      const delta = time - start + (1000 / 60); // avoid rendering at 0
      if (delta >= this.transition_) {
        return 1;
      }
      return easeIn(delta / this.transition_);
    }

    /**
     * Determine if a tile is in an alpha transition.  A tile is considered in
     * transition if tile.getAlpha() has not yet been called or has been called
     * and returned 1.
     * @param {string} id An id for the renderer.
     * @return {boolean} The tile is in transition.
     */
    inTransition(id) {
      if (!this.transition_) {
        return false;
      }
      return this.transitionStarts_[id] !== -1;
    }

    /**
     * Mark a transition as complete.
     * @param {string} id An id for the renderer.
     */
    endTransition(id) {
      if (this.transition_) {
        this.transitionStarts_[id] = -1;
      }
    }
  }

  /**
   * @module ol/ImageTile
   */


  class ImageTile extends Tile {

    /**
     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {TileState} state State.
     * @param {string} src Image source URI.
     * @param {?string} crossOrigin Cross origin.
     * @param {import("./Tile.js").LoadFunction} tileLoadFunction Tile load function.
     * @param {import("./Tile.js").Options=} opt_options Tile options.
     */
    constructor(tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) {

      super(tileCoord, state, opt_options);

      /**
       * @private
       * @type {?string}
       */
      this.crossOrigin_ = crossOrigin;

      /**
       * Image URI
       *
       * @private
       * @type {string}
       */
      this.src_ = src;

      /**
       * @private
       * @type {HTMLImageElement|HTMLCanvasElement}
       */
      this.image_ = new Image();
      if (crossOrigin !== null) {
        this.image_.crossOrigin = crossOrigin;
      }

      /**
       * @private
       * @type {function():void}
       */
      this.unlisten_ = null;

      /**
       * @private
       * @type {import("./Tile.js").LoadFunction}
       */
      this.tileLoadFunction_ = tileLoadFunction;

    }

    /**
     * @inheritDoc
     */
    disposeInternal() {
      if (this.state == TileState.LOADING) {
        this.unlistenImage_();
        this.image_ = getBlankImage();
      }
      if (this.interimTile) {
        this.interimTile.dispose();
      }
      this.state = TileState.ABORT;
      this.changed();
      super.disposeInternal();
    }

    /**
     * Get the HTML image element for this tile (may be a Canvas, Image, or Video).
     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
     * @api
     */
    getImage() {
      return this.image_;
    }

    /**
     * @inheritDoc
     */
    getKey() {
      return this.src_;
    }

    /**
     * Tracks loading or read errors.
     *
     * @private
     */
    handleImageError_() {
      this.state = TileState.ERROR;
      this.unlistenImage_();
      this.image_ = getBlankImage();
      this.changed();
    }

    /**
     * Tracks successful image load.
     *
     * @private
     */
    handleImageLoad_() {
      const image = /** @type {HTMLImageElement} */ (this.image_);
      if (image.naturalWidth && image.naturalHeight) {
        this.state = TileState.LOADED;
      } else {
        this.state = TileState.EMPTY;
      }
      this.unlistenImage_();
      this.changed();
    }

    /**
     * @inheritDoc
     * @api
     */
    load() {
      if (this.state == TileState.ERROR) {
        this.state = TileState.IDLE;
        this.image_ = new Image();
        if (this.crossOrigin_ !== null) {
          this.image_.crossOrigin = this.crossOrigin_;
        }
      }
      if (this.state == TileState.IDLE) {
        this.state = TileState.LOADING;
        this.changed();
        this.tileLoadFunction_(this, this.src_);
        this.unlisten_ = listenImage(
          this.image_,
          this.handleImageLoad_.bind(this),
          this.handleImageError_.bind(this)
        );
      }
    }

    /**
     * Discards event handlers which listen for load completion or errors.
     *
     * @private
     */
    unlistenImage_() {
      if (this.unlisten_) {
        this.unlisten_();
        this.unlisten_ = null;
      }
    }
  }


  /**
   * Get a 1-pixel blank image.
   * @return {HTMLCanvasElement} Blank image.
   */
  function getBlankImage() {
    const ctx = createCanvasContext2D(1, 1);
    ctx.fillStyle = 'rgba(0,0,0,0)';
    ctx.fillRect(0, 0, 1, 1);
    return ctx.canvas;
  }

  /**
   * @module ol/Kinetic
   */

  /**
   * @classdesc
   * Implementation of inertial deceleration for map movement.
   *
   * @api
   */
  class Kinetic {

    /**
     * @param {number} decay Rate of decay (must be negative).
     * @param {number} minVelocity Minimum velocity (pixels/millisecond).
     * @param {number} delay Delay to consider to calculate the kinetic
     *     initial values (milliseconds).
     */
    constructor(decay, minVelocity, delay) {

      /**
       * @private
       * @type {number}
       */
      this.decay_ = decay;

      /**
       * @private
       * @type {number}
       */
      this.minVelocity_ = minVelocity;

      /**
       * @private
       * @type {number}
       */
      this.delay_ = delay;

      /**
       * @private
       * @type {Array<number>}
       */
      this.points_ = [];

      /**
       * @private
       * @type {number}
       */
      this.angle_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.initialVelocity_ = 0;
    }

    /**
     * FIXME empty description for jsdoc
     */
    begin() {
      this.points_.length = 0;
      this.angle_ = 0;
      this.initialVelocity_ = 0;
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     */
    update(x, y) {
      this.points_.push(x, y, Date.now());
    }

    /**
     * @return {boolean} Whether we should do kinetic animation.
     */
    end() {
      if (this.points_.length < 6) {
        // at least 2 points are required (i.e. there must be at least 6 elements
        // in the array)
        return false;
      }
      const delay = Date.now() - this.delay_;
      const lastIndex = this.points_.length - 3;
      if (this.points_[lastIndex + 2] < delay) {
        // the last tracked point is too old, which means that the user stopped
        // panning before releasing the map
        return false;
      }

      // get the first point which still falls into the delay time
      let firstIndex = lastIndex - 3;
      while (firstIndex > 0 && this.points_[firstIndex + 2] > delay) {
        firstIndex -= 3;
      }

      const duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2];
      // we don't want a duration of 0 (divide by zero)
      // we also make sure the user panned for a duration of at least one frame
      // (1/60s) to compute sane displacement values
      if (duration < 1000 / 60) {
        return false;
      }

      const dx = this.points_[lastIndex] - this.points_[firstIndex];
      const dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];
      this.angle_ = Math.atan2(dy, dx);
      this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;
      return this.initialVelocity_ > this.minVelocity_;
    }

    /**
     * @return {number} Total distance travelled (pixels).
     */
    getDistance() {
      return (this.minVelocity_ - this.initialVelocity_) / this.decay_;
    }

    /**
     * @return {number} Angle of the kinetic panning animation (radians).
     */
    getAngle() {
      return this.angle_;
    }
  }

  /**
   * @module ol/MapEvent
   */

  /**
   * @classdesc
   * Events emitted as map events are instances of this type.
   * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map event.
   */
  class MapEvent extends Event {

    /**
     * @param {string} type Event type.
     * @param {import("./PluggableMap.js").default} map Map.
     * @param {?import("./PluggableMap.js").FrameState=} opt_frameState Frame state.
     */
    constructor(type, map, opt_frameState) {

      super(type);

      /**
       * The map where the event occurred.
       * @type {import("./PluggableMap.js").default}
       * @api
       */
      this.map = map;

      /**
       * The frame state at the time of the event.
       * @type {?import("./PluggableMap.js").FrameState}
       * @api
       */
      this.frameState = opt_frameState !== undefined ? opt_frameState : null;

    }

  }

  /**
   * @module ol/MapBrowserEvent
   */

  /**
   * @classdesc
   * Events emitted as map browser events are instances of this type.
   * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map browser event.
   */
  class MapBrowserEvent extends MapEvent {

    /**
     * @param {string} type Event type.
     * @param {import("./PluggableMap.js").default} map Map.
     * @param {Event} browserEvent Browser event.
     * @param {boolean=} opt_dragging Is the map currently being dragged?
     * @param {?import("./PluggableMap.js").FrameState=} opt_frameState Frame state.
     */
    constructor(type, map, browserEvent, opt_dragging, opt_frameState) {

      super(type, map, opt_frameState);

      /**
       * The original browser event.
       * @const
       * @type {Event}
       * @api
       */
      this.originalEvent = browserEvent;

      /**
       * The map pixel relative to the viewport corresponding to the original browser event.
       * @type {import("./pixel.js").Pixel}
       * @api
       */
      this.pixel = map.getEventPixel(browserEvent);

      /**
       * The coordinate in view projection corresponding to the original browser event.
       * @type {import("./coordinate.js").Coordinate}
       * @api
       */
      this.coordinate = map.getCoordinateFromPixel(this.pixel);

      /**
       * Indicates if the map is currently being dragged. Only set for
       * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.
       *
       * @type {boolean}
       * @api
       */
      this.dragging = opt_dragging !== undefined ? opt_dragging : false;

    }

    /**
     * Prevents the default browser action.
     * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.
     * @override
     * @api
     */
    preventDefault() {
      super.preventDefault();
      this.originalEvent.preventDefault();
    }

    /**
     * Prevents further propagation of the current event.
     * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.
     * @override
     * @api
     */
    stopPropagation() {
      super.stopPropagation();
      this.originalEvent.stopPropagation();
    }
  }

  /**
   * @module ol/MapBrowserEventType
   */

  /**
   * Constants for event names.
   * @enum {string}
   */
  var MapBrowserEventType = {

    /**
     * A true single click with no dragging and no double click. Note that this
     * event is delayed by 250 ms to ensure that it is not a double click.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#singleclick
     * @api
     */
    SINGLECLICK: 'singleclick',

    /**
     * A click with no dragging. A double click will fire two of this.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#click
     * @api
     */
    CLICK: EventType.CLICK,

    /**
     * A true double click, with no dragging.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#dblclick
     * @api
     */
    DBLCLICK: EventType.DBLCLICK,

    /**
     * Triggered when a pointer is dragged.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointerdrag
     * @api
     */
    POINTERDRAG: 'pointerdrag',

    /**
     * Triggered when a pointer is moved. Note that on touch devices this is
     * triggered when the map is panned, so is not the same as mousemove.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointermove
     * @api
     */
    POINTERMOVE: 'pointermove',

    POINTERDOWN: 'pointerdown',
    POINTERUP: 'pointerup',
    POINTEROVER: 'pointerover',
    POINTEROUT: 'pointerout',
    POINTERENTER: 'pointerenter',
    POINTERLEAVE: 'pointerleave',
    POINTERCANCEL: 'pointercancel'
  };

  /**
   * @module ol/MapBrowserPointerEvent
   */

  class MapBrowserPointerEvent extends MapBrowserEvent {

    /**
     * @param {string} type Event type.
     * @param {import("./PluggableMap.js").default} map Map.
     * @param {import("./pointer/PointerEvent.js").default} pointerEvent Pointer event.
     * @param {boolean=} opt_dragging Is the map currently being dragged?
     * @param {?import("./PluggableMap.js").FrameState=} opt_frameState Frame state.
     */
    constructor(type, map, pointerEvent, opt_dragging, opt_frameState) {

      super(type, map, pointerEvent.originalEvent, opt_dragging, opt_frameState);

      /**
       * @const
       * @type {import("./pointer/PointerEvent.js").default}
       */
      this.pointerEvent = pointerEvent;

    }

  }

  /**
   * @module ol/pointer/EventType
   */

  /**
   * Constants for event names.
   * @enum {string}
   */
  var PointerEventType = {
    POINTERMOVE: 'pointermove',
    POINTERDOWN: 'pointerdown',
    POINTERUP: 'pointerup',
    POINTEROVER: 'pointerover',
    POINTEROUT: 'pointerout',
    POINTERENTER: 'pointerenter',
    POINTERLEAVE: 'pointerleave',
    POINTERCANCEL: 'pointercancel'
  };

  /**
   * @module ol/pointer/EventSource
   */

  class EventSource {

    /**
     * @param {import("./PointerEventHandler.js").default} dispatcher Event handler.
     * @param {!Object<string, function(Event): void>} mapping Event mapping.
     */
    constructor(dispatcher, mapping) {

      /**
       * @type {import("./PointerEventHandler.js").default}
       */
      this.dispatcher = dispatcher;

      /**
       * @private
       * @const
       * @type {!Object<string, function(Event): void>}
       */
      this.mapping_ = mapping;
    }

    /**
     * List of events supported by this source.
     * @return {Array<string>} Event names
     */
    getEvents() {
      return Object.keys(this.mapping_);
    }

    /**
     * Returns the handler that should handle a given event type.
     * @param {string} eventType The event type.
     * @return {function(Event)} Handler
     */
    getHandlerForEvent(eventType) {
      return this.mapping_[eventType];
    }

  }

  /**
   * @module ol/pointer/MouseSource
   */


  /**
   * @type {number}
   */
  const POINTER_ID = 1;


  /**
   * @type {string}
   */
  const POINTER_TYPE = 'mouse';


  /**
   * Radius around touchend that swallows mouse events.
   *
   * @type {number}
   */
  const DEDUP_DIST = 25;

  /**
   * Handler for `mousedown`.
   *
   * @this {MouseSource}
   * @param {MouseEvent} inEvent The in event.
   */
  function mousedown(inEvent) {
    if (!this.isEventSimulatedFromTouch_(inEvent)) {
      // TODO(dfreedman) workaround for some elements not sending mouseup
      // http://crbug/149091
      if (POINTER_ID.toString() in this.pointerMap) {
        this.cancel(inEvent);
      }
      const e = prepareEvent(inEvent, this.dispatcher);
      this.pointerMap[POINTER_ID.toString()] = inEvent;
      this.dispatcher.down(e, inEvent);
    }
  }

  /**
   * Handler for `mousemove`.
   *
   * @this {MouseSource}
   * @param {MouseEvent} inEvent The in event.
   */
  function mousemove(inEvent) {
    if (!this.isEventSimulatedFromTouch_(inEvent)) {
      const e = prepareEvent(inEvent, this.dispatcher);
      this.dispatcher.move(e, inEvent);
    }
  }

  /**
   * Handler for `mouseup`.
   *
   * @this {MouseSource}
   * @param {MouseEvent} inEvent The in event.
   */
  function mouseup(inEvent) {
    if (!this.isEventSimulatedFromTouch_(inEvent)) {
      const p = this.pointerMap[POINTER_ID.toString()];

      if (p && p.button === inEvent.button) {
        const e = prepareEvent(inEvent, this.dispatcher);
        this.dispatcher.up(e, inEvent);
        this.cleanupMouse();
      }
    }
  }

  /**
   * Handler for `mouseover`.
   *
   * @this {MouseSource}
   * @param {MouseEvent} inEvent The in event.
   */
  function mouseover(inEvent) {
    if (!this.isEventSimulatedFromTouch_(inEvent)) {
      const e = prepareEvent(inEvent, this.dispatcher);
      this.dispatcher.enterOver(e, inEvent);
    }
  }

  /**
   * Handler for `mouseout`.
   *
   * @this {MouseSource}
   * @param {MouseEvent} inEvent The in event.
   */
  function mouseout(inEvent) {
    if (!this.isEventSimulatedFromTouch_(inEvent)) {
      const e = prepareEvent(inEvent, this.dispatcher);
      this.dispatcher.leaveOut(e, inEvent);
    }
  }


  class MouseSource extends EventSource {

    /**
     * @param {import("./PointerEventHandler.js").default} dispatcher Event handler.
     */
    constructor(dispatcher) {
      const mapping = {
        'mousedown': mousedown,
        'mousemove': mousemove,
        'mouseup': mouseup,
        'mouseover': mouseover,
        'mouseout': mouseout
      };
      super(dispatcher, mapping);

      /**
       * @const
       * @type {!Object<string, Event|Object>}
       */
      this.pointerMap = dispatcher.pointerMap;

      /**
       * @const
       * @type {Array<import("../pixel.js").Pixel>}
       */
      this.lastTouches = [];
    }

    /**
     * Detect if a mouse event was simulated from a touch by
     * checking if previously there was a touch event at the
     * same position.
     *
     * FIXME - Known problem with the native Android browser on
     * Samsung GT-I9100 (Android 4.1.2):
     * In case the page is scrolled, this function does not work
     * correctly when a canvas is used (WebGL or canvas renderer).
     * Mouse listeners on canvas elements (for this browser), create
     * two mouse events: One 'good' and one 'bad' one (on other browsers or
     * when a div is used, there is only one event). For the 'bad' one,
     * clientX/clientY and also pageX/pageY are wrong when the page
     * is scrolled. Because of that, this function can not detect if
     * the events were simulated from a touch event. As result, a
     * pointer event at a wrong position is dispatched, which confuses
     * the map interactions.
     * It is unclear, how one can get the correct position for the event
     * or detect that the positions are invalid.
     *
     * @private
     * @param {MouseEvent} inEvent The in event.
     * @return {boolean} True, if the event was generated by a touch.
     */
    isEventSimulatedFromTouch_(inEvent) {
      const lts = this.lastTouches;
      const x = inEvent.clientX;
      const y = inEvent.clientY;
      for (let i = 0, l = lts.length, t; i < l && (t = lts[i]); i++) {
        // simulated mouse events will be swallowed near a primary touchend
        const dx = Math.abs(x - t[0]);
        const dy = Math.abs(y - t[1]);
        if (dx <= DEDUP_DIST && dy <= DEDUP_DIST) {
          return true;
        }
      }
      return false;
    }

    /**
     * Dispatches a `pointercancel` event.
     *
     * @param {Event} inEvent The in event.
     */
    cancel(inEvent) {
      const e = prepareEvent(inEvent, this.dispatcher);
      this.dispatcher.cancel(e, inEvent);
      this.cleanupMouse();
    }

    /**
     * Remove the mouse from the list of active pointers.
     */
    cleanupMouse() {
      delete this.pointerMap[POINTER_ID.toString()];
    }
  }


  /**
   * Creates a copy of the original event that will be used
   * for the fake pointer event.
   *
   * @param {Event} inEvent The in event.
   * @param {import("./PointerEventHandler.js").default} dispatcher Event handler.
   * @return {Object} The copied event.
   */
  function prepareEvent(inEvent, dispatcher) {
    const e = dispatcher.cloneEvent(inEvent, inEvent);

    // forward mouse preventDefault
    const pd = e.preventDefault;
    e.preventDefault = function() {
      inEvent.preventDefault();
      pd();
    };

    e.pointerId = POINTER_ID;
    e.isPrimary = true;
    e.pointerType = POINTER_TYPE;

    return e;
  }

  /**
   * @module ol/pointer/MsSource
   */


  /**
   * @const
   * @type {Array<string>}
   */
  const POINTER_TYPES = [
    '',
    'unavailable',
    'touch',
    'pen',
    'mouse'
  ];

  /**
   * Handler for `msPointerDown`.
   *
   * @this {MsSource}
   * @param {MSPointerEvent} inEvent The in event.
   */
  function msPointerDown(inEvent) {
    this.pointerMap[inEvent.pointerId.toString()] = inEvent;
    const e = this.prepareEvent_(inEvent);
    this.dispatcher.down(e, inEvent);
  }

  /**
   * Handler for `msPointerMove`.
   *
   * @this {MsSource}
   * @param {MSPointerEvent} inEvent The in event.
   */
  function msPointerMove(inEvent) {
    const e = this.prepareEvent_(inEvent);
    this.dispatcher.move(e, inEvent);
  }

  /**
   * Handler for `msPointerUp`.
   *
   * @this {MsSource}
   * @param {MSPointerEvent} inEvent The in event.
   */
  function msPointerUp(inEvent) {
    const e = this.prepareEvent_(inEvent);
    this.dispatcher.up(e, inEvent);
    this.cleanup(inEvent.pointerId);
  }

  /**
   * Handler for `msPointerOut`.
   *
   * @this {MsSource}
   * @param {MSPointerEvent} inEvent The in event.
   */
  function msPointerOut(inEvent) {
    const e = this.prepareEvent_(inEvent);
    this.dispatcher.leaveOut(e, inEvent);
  }

  /**
   * Handler for `msPointerOver`.
   *
   * @this {MsSource}
   * @param {MSPointerEvent} inEvent The in event.
   */
  function msPointerOver(inEvent) {
    const e = this.prepareEvent_(inEvent);
    this.dispatcher.enterOver(e, inEvent);
  }

  /**
   * Handler for `msPointerCancel`.
   *
   * @this {MsSource}
   * @param {MSPointerEvent} inEvent The in event.
   */
  function msPointerCancel(inEvent) {
    const e = this.prepareEvent_(inEvent);
    this.dispatcher.cancel(e, inEvent);
    this.cleanup(inEvent.pointerId);
  }

  /**
   * Handler for `msLostPointerCapture`.
   *
   * @this {MsSource}
   * @param {MSPointerEvent} inEvent The in event.
   */
  function msLostPointerCapture(inEvent) {
    const e = this.dispatcher.makeEvent('lostpointercapture', inEvent, inEvent);
    this.dispatcher.dispatchEvent(e);
  }

  /**
   * Handler for `msGotPointerCapture`.
   *
   * @this {MsSource}
   * @param {MSPointerEvent} inEvent The in event.
   */
  function msGotPointerCapture(inEvent) {
    const e = this.dispatcher.makeEvent('gotpointercapture', inEvent, inEvent);
    this.dispatcher.dispatchEvent(e);
  }

  class MsSource extends EventSource {

    /**
     * @param {import("./PointerEventHandler.js").default} dispatcher Event handler.
     */
    constructor(dispatcher) {
      const mapping = {
        'MSPointerDown': msPointerDown,
        'MSPointerMove': msPointerMove,
        'MSPointerUp': msPointerUp,
        'MSPointerOut': msPointerOut,
        'MSPointerOver': msPointerOver,
        'MSPointerCancel': msPointerCancel,
        'MSGotPointerCapture': msGotPointerCapture,
        'MSLostPointerCapture': msLostPointerCapture
      };
      super(dispatcher, mapping);

      /**
       * @const
       * @type {!Object<string, MSPointerEvent|Object>}
       */
      this.pointerMap = dispatcher.pointerMap;
    }

    /**
     * Creates a copy of the original event that will be used
     * for the fake pointer event.
     *
     * @private
     * @param {MSPointerEvent} inEvent The in event.
     * @return {Object} The copied event.
     */
    prepareEvent_(inEvent) {
      /** @type {MSPointerEvent|Object} */
      let e = inEvent;
      if (typeof inEvent.pointerType === 'number') {
        e = this.dispatcher.cloneEvent(inEvent, inEvent);
        e.pointerType = POINTER_TYPES[inEvent.pointerType];
      }

      return e;
    }

    /**
     * Remove this pointer from the list of active pointers.
     * @param {number} pointerId Pointer identifier.
     */
    cleanup(pointerId) {
      delete this.pointerMap[pointerId.toString()];
    }

  }

  /**
   * @module ol/pointer/NativeSource
   */

  /**
   * Handler for `pointerdown`.
   *
   * @this {NativeSource}
   * @param {Event} inEvent The in event.
   */
  function pointerDown(inEvent) {
    this.dispatcher.fireNativeEvent(inEvent);
  }

  /**
   * Handler for `pointermove`.
   *
   * @this {NativeSource}
   * @param {Event} inEvent The in event.
   */
  function pointerMove(inEvent) {
    this.dispatcher.fireNativeEvent(inEvent);
  }

  /**
   * Handler for `pointerup`.
   *
   * @this {NativeSource}
   * @param {Event} inEvent The in event.
   */
  function pointerUp(inEvent) {
    this.dispatcher.fireNativeEvent(inEvent);
  }

  /**
   * Handler for `pointerout`.
   *
   * @this {NativeSource}
   * @param {Event} inEvent The in event.
   */
  function pointerOut(inEvent) {
    this.dispatcher.fireNativeEvent(inEvent);
  }

  /**
   * Handler for `pointerover`.
   *
   * @this {NativeSource}
   * @param {Event} inEvent The in event.
   */
  function pointerOver(inEvent) {
    this.dispatcher.fireNativeEvent(inEvent);
  }

  /**
   * Handler for `pointercancel`.
   *
   * @this {NativeSource}
   * @param {Event} inEvent The in event.
   */
  function pointerCancel(inEvent) {
    this.dispatcher.fireNativeEvent(inEvent);
  }

  /**
   * Handler for `lostpointercapture`.
   *
   * @this {NativeSource}
   * @param {Event} inEvent The in event.
   */
  function lostPointerCapture(inEvent) {
    this.dispatcher.fireNativeEvent(inEvent);
  }

  /**
   * Handler for `gotpointercapture`.
   *
   * @this {NativeSource}
   * @param {Event} inEvent The in event.
   */
  function gotPointerCapture(inEvent) {
    this.dispatcher.fireNativeEvent(inEvent);
  }

  class NativeSource extends EventSource {

    /**
     * @param {import("./PointerEventHandler.js").default} dispatcher Event handler.
     */
    constructor(dispatcher) {
      const mapping = {
        'pointerdown': pointerDown,
        'pointermove': pointerMove,
        'pointerup': pointerUp,
        'pointerout': pointerOut,
        'pointerover': pointerOver,
        'pointercancel': pointerCancel,
        'gotpointercapture': gotPointerCapture,
        'lostpointercapture': lostPointerCapture
      };
      super(dispatcher, mapping);
    }

  }

  /**
   * @module ol/pointer/PointerEvent
   */


  /**
   * Is the `buttons` property supported?
   * @type {boolean}
   */
  let HAS_BUTTONS = false;


  class PointerEvent extends Event {

    /**
     * A class for pointer events.
     *
     * This class is used as an abstraction for mouse events,
     * touch events and even native pointer events.
     *
     * @param {string} type The type of the event to create.
     * @param {Event} originalEvent The event.
     * @param {Object<string, ?>=} opt_eventDict An optional dictionary of
     *    initial event properties.
     */
    constructor(type, originalEvent, opt_eventDict) {
      super(type);

      /**
       * @const
       * @type {Event}
       */
      this.originalEvent = originalEvent;

      const eventDict = opt_eventDict ? opt_eventDict : {};

      /**
       * @type {number}
       */
      this.buttons = getButtons(eventDict);

      /**
       * @type {number}
       */
      this.pressure = getPressure(eventDict, this.buttons);

      // MouseEvent related properties

      /**
       * @type {boolean}
       */
      this.bubbles = 'bubbles' in eventDict ? eventDict['bubbles'] : false;

      /**
       * @type {boolean}
       */
      this.cancelable = 'cancelable' in eventDict ? eventDict['cancelable'] : false;

      /**
       * @type {Object}
       */
      this.view = 'view' in eventDict ? eventDict['view'] : null;

      /**
       * @type {number}
       */
      this.detail = 'detail' in eventDict ? eventDict['detail'] : null;

      /**
       * @type {number}
       */
      this.screenX = 'screenX' in eventDict ? eventDict['screenX'] : 0;

      /**
       * @type {number}
       */
      this.screenY = 'screenY' in eventDict ? eventDict['screenY'] : 0;

      /**
       * @type {number}
       */
      this.clientX = 'clientX' in eventDict ? eventDict['clientX'] : 0;

      /**
       * @type {number}
       */
      this.clientY = 'clientY' in eventDict ? eventDict['clientY'] : 0;

      /**
       * @type {boolean}
       */
      this.ctrlKey = 'ctrlKey' in eventDict ? eventDict['ctrlKey'] : false;

      /**
       * @type {boolean}
       */
      this.altKey = 'altKey' in eventDict ? eventDict['altKey'] : false;

      /**
       * @type {boolean}
       */
      this.shiftKey = 'shiftKey' in eventDict ? eventDict['shiftKey'] : false;

      /**
       * @type {boolean}
       */
      this.metaKey = 'metaKey' in eventDict ? eventDict['metaKey'] : false;

      /**
       * @type {number}
       */
      this.button = 'button' in eventDict ? eventDict['button'] : 0;

      /**
       * @type {Node}
       */
      this.relatedTarget = 'relatedTarget' in eventDict ?
        eventDict['relatedTarget'] : null;

      // PointerEvent related properties

      /**
       * @const
       * @type {number}
       */
      this.pointerId = 'pointerId' in eventDict ? eventDict['pointerId'] : 0;

      /**
       * @type {number}
       */
      this.width = 'width' in eventDict ? eventDict['width'] : 0;

      /**
       * @type {number}
       */
      this.height = 'height' in eventDict ? eventDict['height'] : 0;

      /**
       * @type {number}
       */
      this.tiltX = 'tiltX' in eventDict ? eventDict['tiltX'] : 0;

      /**
       * @type {number}
       */
      this.tiltY = 'tiltY' in eventDict ? eventDict['tiltY'] : 0;

      /**
       * @type {string}
       */
      this.pointerType = 'pointerType' in eventDict ? eventDict['pointerType'] : '';

      /**
       * @type {number}
       */
      this.hwTimestamp = 'hwTimestamp' in eventDict ? eventDict['hwTimestamp'] : 0;

      /**
       * @type {boolean}
       */
      this.isPrimary = 'isPrimary' in eventDict ? eventDict['isPrimary'] : false;

      // keep the semantics of preventDefault
      if (originalEvent.preventDefault) {
        this.preventDefault = function() {
          originalEvent.preventDefault();
        };
      }
    }

  }


  /**
   * @param {Object<string, ?>} eventDict The event dictionary.
   * @return {number} Button indicator.
   */
  function getButtons(eventDict) {
    // According to the w3c spec,
    // http://www.w3.org/TR/DOM-Level-3-Events/#events-MouseEvent-button
    // MouseEvent.button == 0 can mean either no mouse button depressed, or the
    // left mouse button depressed.
    //
    // As of now, the only way to distinguish between the two states of
    // MouseEvent.button is by using the deprecated MouseEvent.which property, as
    // this maps mouse buttons to positive integers > 0, and uses 0 to mean that
    // no mouse button is held.
    //
    // MouseEvent.which is derived from MouseEvent.button at MouseEvent creation,
    // but initMouseEvent does not expose an argument with which to set
    // MouseEvent.which. Calling initMouseEvent with a buttonArg of 0 will set
    // MouseEvent.button == 0 and MouseEvent.which == 1, breaking the expectations
    // of app developers.
    //
    // The only way to propagate the correct state of MouseEvent.which and
    // MouseEvent.button to a new MouseEvent.button == 0 and MouseEvent.which == 0
    // is to call initMouseEvent with a buttonArg value of -1.
    //
    // This is fixed with DOM Level 4's use of buttons
    let buttons;
    if (eventDict.buttons || HAS_BUTTONS) {
      buttons = eventDict.buttons;
    } else {
      switch (eventDict.which) {
        case 1: buttons = 1; break;
        case 2: buttons = 4; break;
        case 3: buttons = 2; break;
        default: buttons = 0;
      }
    }
    return buttons;
  }


  /**
   * @param {Object<string, ?>} eventDict The event dictionary.
   * @param {number} buttons Button indicator.
   * @return {number} The pressure.
   */
  function getPressure(eventDict, buttons) {
    // Spec requires that pointers without pressure specified use 0.5 for down
    // state and 0 for up state.
    let pressure = 0;
    if (eventDict.pressure) {
      pressure = eventDict.pressure;
    } else {
      pressure = buttons ? 0.5 : 0;
    }
    return pressure;
  }


  /**
   * Checks if the `buttons` property is supported.
   */
  (function() {
    try {
      const ev = new MouseEvent('click', {buttons: 1});
      HAS_BUTTONS = ev.buttons === 1;
    } catch (e) {
      // pass
    }
  })();

  /**
   * @module ol/pointer/TouchSource
   */


  /**
   * @type {number}
   */
  const CLICK_COUNT_TIMEOUT = 200;

  /**
   * @type {string}
   */
  const POINTER_TYPE$1 = 'touch';

  /**
   * Handler for `touchstart`, triggers `pointerover`,
   * `pointerenter` and `pointerdown` events.
   *
   * @this {TouchSource}
   * @param {TouchEvent} inEvent The in event.
   */
  function touchstart(inEvent) {
    this.vacuumTouches_(inEvent);
    this.setPrimaryTouch_(inEvent.changedTouches[0]);
    this.dedupSynthMouse_(inEvent);
    this.clickCount_++;
    this.processTouches_(inEvent, this.overDown_);
  }

  /**
   * Handler for `touchmove`.
   *
   * @this {TouchSource}
   * @param {TouchEvent} inEvent The in event.
   */
  function touchmove(inEvent) {
    this.processTouches_(inEvent, this.moveOverOut_);
  }

  /**
   * Handler for `touchend`, triggers `pointerup`,
   * `pointerout` and `pointerleave` events.
   *
   * @this {TouchSource}
   * @param {TouchEvent} inEvent The event.
   */
  function touchend(inEvent) {
    this.dedupSynthMouse_(inEvent);
    this.processTouches_(inEvent, this.upOut_);
  }

  /**
   * Handler for `touchcancel`, triggers `pointercancel`,
   * `pointerout` and `pointerleave` events.
   *
   * @this {TouchSource}
   * @param {TouchEvent} inEvent The in event.
   */
  function touchcancel(inEvent) {
    this.processTouches_(inEvent, this.cancelOut_);
  }


  class TouchSource extends EventSource {

    /**
     * @param {import("./PointerEventHandler.js").default} dispatcher The event handler.
     * @param {import("./MouseSource.js").default} mouseSource Mouse source.
     */
    constructor(dispatcher, mouseSource) {
      const mapping = {
        'touchstart': touchstart,
        'touchmove': touchmove,
        'touchend': touchend,
        'touchcancel': touchcancel
      };
      super(dispatcher, mapping);

      /**
       * @const
       * @type {!Object<string, Event|Object>}
       */
      this.pointerMap = dispatcher.pointerMap;

      /**
       * @const
       * @type {import("./MouseSource.js").default}
       */
      this.mouseSource = mouseSource;

      /**
       * @private
       * @type {number|undefined}
       */
      this.firstTouchId_ = undefined;

      /**
       * @private
       * @type {number}
       */
      this.clickCount_ = 0;

      /**
       * @private
       * @type {?}
       */
      this.resetId_;

      /**
       * Mouse event timeout: This should be long enough to
       * ignore compat mouse events made by touch.
       * @private
       * @type {number}
       */
      this.dedupTimeout_ = 2500;
    }

    /**
     * @private
     * @param {Touch} inTouch The in touch.
     * @return {boolean} True, if this is the primary touch.
     */
    isPrimaryTouch_(inTouch) {
      return this.firstTouchId_ === inTouch.identifier;
    }

    /**
     * Set primary touch if there are no pointers, or the only pointer is the mouse.
     * @param {Touch} inTouch The in touch.
     * @private
     */
    setPrimaryTouch_(inTouch) {
      const count = Object.keys(this.pointerMap).length;
      if (count === 0 || (count === 1 && POINTER_ID.toString() in this.pointerMap)) {
        this.firstTouchId_ = inTouch.identifier;
        this.cancelResetClickCount_();
      }
    }

    /**
     * @private
     * @param {PointerEvent} inPointer The in pointer object.
     */
    removePrimaryPointer_(inPointer) {
      if (inPointer.isPrimary) {
        this.firstTouchId_ = undefined;
        this.resetClickCount_();
      }
    }

    /**
     * @private
     */
    resetClickCount_() {
      this.resetId_ = setTimeout(
        this.resetClickCountHandler_.bind(this),
        CLICK_COUNT_TIMEOUT);
    }

    /**
     * @private
     */
    resetClickCountHandler_() {
      this.clickCount_ = 0;
      this.resetId_ = undefined;
    }

    /**
     * @private
     */
    cancelResetClickCount_() {
      if (this.resetId_ !== undefined) {
        clearTimeout(this.resetId_);
      }
    }

    /**
     * @private
     * @param {TouchEvent} browserEvent Browser event
     * @param {Touch} inTouch Touch event
     * @return {PointerEvent} A pointer object.
     */
    touchToPointer_(browserEvent, inTouch) {
      const e = this.dispatcher.cloneEvent(browserEvent, inTouch);
      // Spec specifies that pointerId 1 is reserved for Mouse.
      // Touch identifiers can start at 0.
      // Add 2 to the touch identifier for compatibility.
      e.pointerId = inTouch.identifier + 2;
      // TODO: check if this is necessary?
      //e.target = findTarget(e);
      e.bubbles = true;
      e.cancelable = true;
      e.detail = this.clickCount_;
      e.button = 0;
      e.buttons = 1;
      e.width = inTouch.radiusX || 0;
      e.height = inTouch.radiusY || 0;
      e.pressure = inTouch.force || 0.5;
      e.isPrimary = this.isPrimaryTouch_(inTouch);
      e.pointerType = POINTER_TYPE$1;

      // make sure that the properties that are different for
      // each `Touch` object are not copied from the BrowserEvent object
      e.clientX = inTouch.clientX;
      e.clientY = inTouch.clientY;
      e.screenX = inTouch.screenX;
      e.screenY = inTouch.screenY;

      return e;
    }

    /**
     * @private
     * @param {TouchEvent} inEvent Touch event
     * @param {function(TouchEvent, PointerEvent): void} inFunction In function.
     */
    processTouches_(inEvent, inFunction) {
      const touches = Array.prototype.slice.call(inEvent.changedTouches);
      const count = touches.length;
      function preventDefault() {
        inEvent.preventDefault();
      }
      for (let i = 0; i < count; ++i) {
        const pointer = this.touchToPointer_(inEvent, touches[i]);
        // forward touch preventDefaults
        pointer.preventDefault = preventDefault;
        inFunction.call(this, inEvent, pointer);
      }
    }

    /**
     * @private
     * @param {TouchList} touchList The touch list.
     * @param {number} searchId Search identifier.
     * @return {boolean} True, if the `Touch` with the given id is in the list.
     */
    findTouch_(touchList, searchId) {
      const l = touchList.length;
      for (let i = 0; i < l; i++) {
        const touch = touchList[i];
        if (touch.identifier === searchId) {
          return true;
        }
      }
      return false;
    }

    /**
     * In some instances, a touchstart can happen without a touchend. This
     * leaves the pointermap in a broken state.
     * Therefore, on every touchstart, we remove the touches that did not fire a
     * touchend event.
     * To keep state globally consistent, we fire a pointercancel for
     * this "abandoned" touch
     *
     * @private
     * @param {TouchEvent} inEvent The in event.
     */
    vacuumTouches_(inEvent) {
      const touchList = inEvent.touches;
      // pointerMap.getCount() should be < touchList.length here,
      // as the touchstart has not been processed yet.
      const keys = Object.keys(this.pointerMap);
      const count = keys.length;
      if (count >= touchList.length) {
        const d = [];
        for (let i = 0; i < count; ++i) {
          const key = Number(keys[i]);
          const value = this.pointerMap[key];
          // Never remove pointerId == 1, which is mouse.
          // Touch identifiers are 2 smaller than their pointerId, which is the
          // index in pointermap.
          if (key != POINTER_ID && !this.findTouch_(touchList, key - 2)) {
            d.push(value.out);
          }
        }
        for (let i = 0; i < d.length; ++i) {
          this.cancelOut_(inEvent, d[i]);
        }
      }
    }

    /**
     * @private
     * @param {TouchEvent} browserEvent The event.
     * @param {PointerEvent} inPointer The in pointer object.
     */
    overDown_(browserEvent, inPointer) {
      this.pointerMap[inPointer.pointerId] = {
        target: inPointer.target,
        out: inPointer,
        outTarget: inPointer.target
      };
      this.dispatcher.over(inPointer, browserEvent);
      this.dispatcher.enter(inPointer, browserEvent);
      this.dispatcher.down(inPointer, browserEvent);
    }

    /**
     * @private
     * @param {TouchEvent} browserEvent The event.
     * @param {PointerEvent} inPointer The in pointer.
     */
    moveOverOut_(browserEvent, inPointer) {
      const event = inPointer;
      const pointer = this.pointerMap[event.pointerId];
      // a finger drifted off the screen, ignore it
      if (!pointer) {
        return;
      }
      const outEvent = pointer.out;
      const outTarget = pointer.outTarget;
      this.dispatcher.move(event, browserEvent);
      if (outEvent && outTarget !== event.target) {
        outEvent.relatedTarget = event.target;
        /** @type {Object} */ (event).relatedTarget = outTarget;
        // recover from retargeting by shadow
        outEvent.target = outTarget;
        if (event.target) {
          this.dispatcher.leaveOut(outEvent, browserEvent);
          this.dispatcher.enterOver(event, browserEvent);
        } else {
          // clean up case when finger leaves the screen
          /** @type {Object} */ (event).target = outTarget;
          /** @type {Object} */ (event).relatedTarget = null;
          this.cancelOut_(browserEvent, event);
        }
      }
      pointer.out = event;
      pointer.outTarget = event.target;
    }

    /**
     * @private
     * @param {TouchEvent} browserEvent An event.
     * @param {PointerEvent} inPointer The inPointer object.
     */
    upOut_(browserEvent, inPointer) {
      this.dispatcher.up(inPointer, browserEvent);
      this.dispatcher.out(inPointer, browserEvent);
      this.dispatcher.leave(inPointer, browserEvent);
      this.cleanUpPointer_(inPointer);
    }

    /**
     * @private
     * @param {TouchEvent} browserEvent The event.
     * @param {PointerEvent} inPointer The in pointer.
     */
    cancelOut_(browserEvent, inPointer) {
      this.dispatcher.cancel(inPointer, browserEvent);
      this.dispatcher.out(inPointer, browserEvent);
      this.dispatcher.leave(inPointer, browserEvent);
      this.cleanUpPointer_(inPointer);
    }

    /**
     * @private
     * @param {PointerEvent} inPointer The inPointer object.
     */
    cleanUpPointer_(inPointer) {
      delete this.pointerMap[inPointer.pointerId];
      this.removePrimaryPointer_(inPointer);
    }

    /**
     * Prevent synth mouse events from creating pointer events.
     *
     * @private
     * @param {TouchEvent} inEvent The in event.
     */
    dedupSynthMouse_(inEvent) {
      const lts = this.mouseSource.lastTouches;
      const t = inEvent.changedTouches[0];
      // only the primary finger will synth mouse events
      if (this.isPrimaryTouch_(t)) {
        // remember x/y of last touch
        const lt = [t.clientX, t.clientY];
        lts.push(lt);

        setTimeout(function() {
          // remove touch after timeout
          remove(lts, lt);
        }, this.dedupTimeout_);
      }
    }
  }

  /**
   * @module ol/pointer/PointerEventHandler
   */


  /**
   * Properties to copy when cloning an event, with default values.
   * @type {Array<Array>}
   */
  const CLONE_PROPS = [
    // MouseEvent
    ['bubbles', false],
    ['cancelable', false],
    ['view', null],
    ['detail', null],
    ['screenX', 0],
    ['screenY', 0],
    ['clientX', 0],
    ['clientY', 0],
    ['ctrlKey', false],
    ['altKey', false],
    ['shiftKey', false],
    ['metaKey', false],
    ['button', 0],
    ['relatedTarget', null],
    // DOM Level 3
    ['buttons', 0],
    // PointerEvent
    ['pointerId', 0],
    ['width', 0],
    ['height', 0],
    ['pressure', 0],
    ['tiltX', 0],
    ['tiltY', 0],
    ['pointerType', ''],
    ['hwTimestamp', 0],
    ['isPrimary', false],
    // event instance
    ['type', ''],
    ['target', null],
    ['currentTarget', null],
    ['which', 0]
  ];


  class PointerEventHandler extends Target {

    /**
     * @param {Element|HTMLDocument} element Viewport element.
     */
    constructor(element) {
      super();

      /**
       * @const
       * @private
       * @type {Element|HTMLDocument}
       */
      this.element_ = element;

      /**
       * @const
       * @type {!Object<string, Event|Object>}
       */
      this.pointerMap = {};

      /**
       * @type {Object<string, function(Event): void>}
       * @private
       */
      this.eventMap_ = {};

      /**
       * @type {Array<import("./EventSource.js").default>}
       * @private
       */
      this.eventSourceList_ = [];

      this.registerSources();
    }

    /**
     * Set up the event sources (mouse, touch and native pointers)
     * that generate pointer events.
     */
    registerSources() {
      if ('PointerEvent' in window) {
        this.registerSource('native', new NativeSource(this));
      } else if (window.navigator.msPointerEnabled) {
        this.registerSource('ms', new MsSource(this));
      } else {
        const mouseSource = new MouseSource(this);
        this.registerSource('mouse', mouseSource);

        if ('ontouchstart' in window) {
          this.registerSource('touch', new TouchSource(this, mouseSource));
        }
      }

      // register events on the viewport element
      this.register_();
    }

    /**
     * Add a new event source that will generate pointer events.
     *
     * @param {string} name A name for the event source
     * @param {import("./EventSource.js").default} source The source event.
     */
    registerSource(name, source) {
      const s = source;
      const newEvents = s.getEvents();

      if (newEvents) {
        newEvents.forEach(function(e) {
          const handler = s.getHandlerForEvent(e);

          if (handler) {
            this.eventMap_[e] = handler.bind(s);
          }
        }.bind(this));
        this.eventSourceList_.push(s);
      }
    }

    /**
     * Set up the events for all registered event sources.
     * @private
     */
    register_() {
      const l = this.eventSourceList_.length;
      for (let i = 0; i < l; i++) {
        const eventSource = this.eventSourceList_[i];
        this.addEvents_(eventSource.getEvents());
      }
    }

    /**
     * Remove all registered events.
     * @private
     */
    unregister_() {
      const l = this.eventSourceList_.length;
      for (let i = 0; i < l; i++) {
        const eventSource = this.eventSourceList_[i];
        this.removeEvents_(eventSource.getEvents());
      }
    }

    /**
     * Calls the right handler for a new event.
     * @private
     * @param {Event} inEvent Browser event.
     */
    eventHandler_(inEvent) {
      const type = inEvent.type;
      const handler = this.eventMap_[type];
      if (handler) {
        handler(inEvent);
      }
    }

    /**
     * Setup listeners for the given events.
     * @private
     * @param {Array<string>} events List of events.
     */
    addEvents_(events) {
      events.forEach(function(eventName) {
        listen(this.element_, eventName, this.eventHandler_, this);
      }.bind(this));
    }

    /**
     * Unregister listeners for the given events.
     * @private
     * @param {Array<string>} events List of events.
     */
    removeEvents_(events) {
      events.forEach(function(e) {
        unlisten(this.element_, e, this.eventHandler_, this);
      }.bind(this));
    }

    /**
     * Returns a snapshot of inEvent, with writable properties.
     *
     * @param {Event} event Browser event.
     * @param {Event|Touch} inEvent An event that contains
     *    properties to copy.
     * @return {Object} An object containing shallow copies of
     *    `inEvent`'s properties.
     */
    cloneEvent(event, inEvent) {
      const eventCopy = {};
      for (let i = 0, ii = CLONE_PROPS.length; i < ii; i++) {
        const p = CLONE_PROPS[i][0];
        eventCopy[p] = event[p] || inEvent[p] || CLONE_PROPS[i][1];
      }

      return eventCopy;
    }

    // EVENTS


    /**
     * Triggers a 'pointerdown' event.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    down(data, event) {
      this.fireEvent(PointerEventType.POINTERDOWN, data, event);
    }

    /**
     * Triggers a 'pointermove' event.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    move(data, event) {
      this.fireEvent(PointerEventType.POINTERMOVE, data, event);
    }

    /**
     * Triggers a 'pointerup' event.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    up(data, event) {
      this.fireEvent(PointerEventType.POINTERUP, data, event);
    }

    /**
     * Triggers a 'pointerenter' event.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    enter(data, event) {
      data.bubbles = false;
      this.fireEvent(PointerEventType.POINTERENTER, data, event);
    }

    /**
     * Triggers a 'pointerleave' event.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    leave(data, event) {
      data.bubbles = false;
      this.fireEvent(PointerEventType.POINTERLEAVE, data, event);
    }

    /**
     * Triggers a 'pointerover' event.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    over(data, event) {
      data.bubbles = true;
      this.fireEvent(PointerEventType.POINTEROVER, data, event);
    }

    /**
     * Triggers a 'pointerout' event.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    out(data, event) {
      data.bubbles = true;
      this.fireEvent(PointerEventType.POINTEROUT, data, event);
    }

    /**
     * Triggers a 'pointercancel' event.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    cancel(data, event) {
      this.fireEvent(PointerEventType.POINTERCANCEL, data, event);
    }

    /**
     * Triggers a combination of 'pointerout' and 'pointerleave' events.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    leaveOut(data, event) {
      this.out(data, event);
      if (!this.contains_(data.target, data.relatedTarget)) {
        this.leave(data, event);
      }
    }

    /**
     * Triggers a combination of 'pointerover' and 'pointerevents' events.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    enterOver(data, event) {
      this.over(data, event);
      if (!this.contains_(data.target, data.relatedTarget)) {
        this.enter(data, event);
      }
    }

    /**
     * @private
     * @param {Element} container The container element.
     * @param {Element} contained The contained element.
     * @return {boolean} Returns true if the container element
     *   contains the other element.
     */
    contains_(container, contained) {
      if (!container || !contained) {
        return false;
      }
      return container.contains(contained);
    }

    // EVENT CREATION AND TRACKING
    /**
     * Creates a new Event of type `inType`, based on the information in
     * `data`.
     *
     * @param {string} inType A string representing the type of event to create.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     * @return {PointerEvent} A PointerEvent of type `inType`.
     */
    makeEvent(inType, data, event) {
      return new PointerEvent(inType, event, data);
    }

    /**
     * Make and dispatch an event in one call.
     * @param {string} inType A string representing the type of event.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    fireEvent(inType, data, event) {
      const e = this.makeEvent(inType, data, event);
      this.dispatchEvent(e);
    }

    /**
     * Creates a pointer event from a native pointer event
     * and dispatches this event.
     * @param {Event} event A platform event with a target.
     */
    fireNativeEvent(event) {
      const e = this.makeEvent(event.type, event, event);
      this.dispatchEvent(e);
    }

    /**
     * Wrap a native mouse event into a pointer event.
     * This proxy method is required for the legacy IE support.
     * @param {string} eventType The pointer event type.
     * @param {Event} event The event.
     * @return {PointerEvent} The wrapped event.
     */
    wrapMouseEvent(eventType, event) {
      const pointerEvent = this.makeEvent(
        eventType, prepareEvent(event, this), event);
      return pointerEvent;
    }

    /**
     * @inheritDoc
     */
    disposeInternal() {
      this.unregister_();
      super.disposeInternal();
    }
  }

  /**
   * @module ol/MapBrowserEventHandler
   */

  class MapBrowserEventHandler extends Target {

    /**
     * @param {import("./PluggableMap.js").default} map The map with the viewport to listen to events on.
     * @param {number=} moveTolerance The minimal distance the pointer must travel to trigger a move.
     */
    constructor(map, moveTolerance) {

      super();

      /**
       * This is the element that we will listen to the real events on.
       * @type {import("./PluggableMap.js").default}
       * @private
       */
      this.map_ = map;

      /**
       * @type {any}
       * @private
       */
      this.clickTimeoutId_;

      /**
       * @type {boolean}
       * @private
       */
      this.dragging_ = false;

      /**
       * @type {!Array<import("./events.js").EventsKey>}
       * @private
       */
      this.dragListenerKeys_ = [];

      /**
       * @type {number}
       * @private
       */
      this.moveTolerance_ = moveTolerance ?
        moveTolerance * DEVICE_PIXEL_RATIO : DEVICE_PIXEL_RATIO;

      /**
       * The most recent "down" type event (or null if none have occurred).
       * Set on pointerdown.
       * @type {import("./pointer/PointerEvent.js").default}
       * @private
       */
      this.down_ = null;

      const element = this.map_.getViewport();

      /**
       * @type {number}
       * @private
       */
      this.activePointers_ = 0;

      /**
       * @type {!Object<number, boolean>}
       * @private
       */
      this.trackedTouches_ = {};

      /**
       * Event handler which generates pointer events for
       * the viewport element.
       *
       * @type {PointerEventHandler}
       * @private
       */
      this.pointerEventHandler_ = new PointerEventHandler(element);

      /**
       * Event handler which generates pointer events for
       * the document (used when dragging).
       *
       * @type {PointerEventHandler}
       * @private
       */
      this.documentPointerEventHandler_ = null;

      /**
       * @type {?import("./events.js").EventsKey}
       * @private
       */
      this.pointerdownListenerKey_ = listen(this.pointerEventHandler_,
        PointerEventType.POINTERDOWN,
        this.handlePointerDown_, this);

      /**
       * @type {?import("./events.js").EventsKey}
       * @private
       */
      this.relayedListenerKey_ = listen(this.pointerEventHandler_,
        PointerEventType.POINTERMOVE,
        this.relayEvent_, this);

    }

    /**
     * @param {import("./pointer/PointerEvent.js").default} pointerEvent Pointer
     * event.
     * @private
     */
    emulateClick_(pointerEvent) {
      let newEvent = new MapBrowserPointerEvent(
        MapBrowserEventType.CLICK, this.map_, pointerEvent);
      this.dispatchEvent(newEvent);
      if (this.clickTimeoutId_ !== undefined) {
        // double-click
        clearTimeout(this.clickTimeoutId_);
        this.clickTimeoutId_ = undefined;
        newEvent = new MapBrowserPointerEvent(
          MapBrowserEventType.DBLCLICK, this.map_, pointerEvent);
        this.dispatchEvent(newEvent);
      } else {
        // click
        this.clickTimeoutId_ = setTimeout(function() {
          this.clickTimeoutId_ = undefined;
          const newEvent = new MapBrowserPointerEvent(
            MapBrowserEventType.SINGLECLICK, this.map_, pointerEvent);
          this.dispatchEvent(newEvent);
        }.bind(this), 250);
      }
    }

    /**
     * Keeps track on how many pointers are currently active.
     *
     * @param {import("./pointer/PointerEvent.js").default} pointerEvent Pointer
     * event.
     * @private
     */
    updateActivePointers_(pointerEvent) {
      const event = pointerEvent;

      if (event.type == MapBrowserEventType.POINTERUP ||
          event.type == MapBrowserEventType.POINTERCANCEL) {
        delete this.trackedTouches_[event.pointerId];
      } else if (event.type == MapBrowserEventType.POINTERDOWN) {
        this.trackedTouches_[event.pointerId] = true;
      }
      this.activePointers_ = Object.keys(this.trackedTouches_).length;
    }

    /**
     * @param {import("./pointer/PointerEvent.js").default} pointerEvent Pointer
     * event.
     * @private
     */
    handlePointerUp_(pointerEvent) {
      this.updateActivePointers_(pointerEvent);
      const newEvent = new MapBrowserPointerEvent(
        MapBrowserEventType.POINTERUP, this.map_, pointerEvent);
      this.dispatchEvent(newEvent);

      // We emulate click events on left mouse button click, touch contact, and pen
      // contact. isMouseActionButton returns true in these cases (evt.button is set
      // to 0).
      // See http://www.w3.org/TR/pointerevents/#button-states
      // We only fire click, singleclick, and doubleclick if nobody has called
      // event.stopPropagation() or event.preventDefault().
      if (!newEvent.propagationStopped && !this.dragging_ && this.isMouseActionButton_(pointerEvent)) {
        this.emulateClick_(this.down_);
      }

      if (this.activePointers_ === 0) {
        this.dragListenerKeys_.forEach(unlistenByKey);
        this.dragListenerKeys_.length = 0;
        this.dragging_ = false;
        this.down_ = null;
        this.documentPointerEventHandler_.dispose();
        this.documentPointerEventHandler_ = null;
      }
    }

    /**
     * @param {import("./pointer/PointerEvent.js").default} pointerEvent Pointer
     * event.
     * @return {boolean} If the left mouse button was pressed.
     * @private
     */
    isMouseActionButton_(pointerEvent) {
      return pointerEvent.button === 0;
    }

    /**
     * @param {import("./pointer/PointerEvent.js").default} pointerEvent Pointer
     * event.
     * @private
     */
    handlePointerDown_(pointerEvent) {
      this.updateActivePointers_(pointerEvent);
      const newEvent = new MapBrowserPointerEvent(
        MapBrowserEventType.POINTERDOWN, this.map_, pointerEvent);
      this.dispatchEvent(newEvent);

      this.down_ = pointerEvent;

      if (this.dragListenerKeys_.length === 0) {
        /* Set up a pointer event handler on the `document`,
         * which is required when the pointer is moved outside
         * the viewport when dragging.
         */
        this.documentPointerEventHandler_ =
            new PointerEventHandler(document);

        this.dragListenerKeys_.push(
          listen(this.documentPointerEventHandler_,
            MapBrowserEventType.POINTERMOVE,
            this.handlePointerMove_, this),
          listen(this.documentPointerEventHandler_,
            MapBrowserEventType.POINTERUP,
            this.handlePointerUp_, this),
          /* Note that the listener for `pointercancel is set up on
           * `pointerEventHandler_` and not `documentPointerEventHandler_` like
           * the `pointerup` and `pointermove` listeners.
           *
           * The reason for this is the following: `TouchSource.vacuumTouches_()`
           * issues `pointercancel` events, when there was no `touchend` for a
           * `touchstart`. Now, let's say a first `touchstart` is registered on
           * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.
           * But `documentPointerEventHandler_` doesn't know about the first
           * `touchstart`. If there is no `touchend` for the `touchstart`, we can
           * only receive a `touchcancel` from `pointerEventHandler_`, because it is
           * only registered there.
           */
          listen(this.pointerEventHandler_,
            MapBrowserEventType.POINTERCANCEL,
            this.handlePointerUp_, this)
        );
      }
    }

    /**
     * @param {import("./pointer/PointerEvent.js").default} pointerEvent Pointer
     * event.
     * @private
     */
    handlePointerMove_(pointerEvent) {
      // Between pointerdown and pointerup, pointermove events are triggered.
      // To avoid a 'false' touchmove event to be dispatched, we test if the pointer
      // moved a significant distance.
      if (this.isMoving_(pointerEvent)) {
        this.dragging_ = true;
        const newEvent = new MapBrowserPointerEvent(
          MapBrowserEventType.POINTERDRAG, this.map_, pointerEvent,
          this.dragging_);
        this.dispatchEvent(newEvent);
      }
    }

    /**
     * Wrap and relay a pointer event.  Note that this requires that the type
     * string for the MapBrowserPointerEvent matches the PointerEvent type.
     * @param {import("./pointer/PointerEvent.js").default} pointerEvent Pointer
     * event.
     * @private
     */
    relayEvent_(pointerEvent) {
      const dragging = !!(this.down_ && this.isMoving_(pointerEvent));
      this.dispatchEvent(new MapBrowserPointerEvent(
        pointerEvent.type, this.map_, pointerEvent, dragging));
    }

    /**
     * @param {import("./pointer/PointerEvent.js").default} pointerEvent Pointer
     * event.
     * @return {boolean} Is moving.
     * @private
     */
    isMoving_(pointerEvent) {
      return this.dragging_ ||
          Math.abs(pointerEvent.clientX - this.down_.clientX) > this.moveTolerance_ ||
          Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_;
    }

    /**
     * @inheritDoc
     */
    disposeInternal() {
      if (this.relayedListenerKey_) {
        unlistenByKey(this.relayedListenerKey_);
        this.relayedListenerKey_ = null;
      }
      if (this.pointerdownListenerKey_) {
        unlistenByKey(this.pointerdownListenerKey_);
        this.pointerdownListenerKey_ = null;
      }

      this.dragListenerKeys_.forEach(unlistenByKey);
      this.dragListenerKeys_.length = 0;

      if (this.documentPointerEventHandler_) {
        this.documentPointerEventHandler_.dispose();
        this.documentPointerEventHandler_ = null;
      }
      if (this.pointerEventHandler_) {
        this.pointerEventHandler_.dispose();
        this.pointerEventHandler_ = null;
      }
      super.disposeInternal();
    }
  }

  /**
   * @module ol/MapProperty
   */

  /**
   * @enum {string}
   */
  var MapProperty = {
    LAYERGROUP: 'layergroup',
    SIZE: 'size',
    TARGET: 'target',
    VIEW: 'view'
  };

  /**
   * @module ol/structs/PriorityQueue
   */


  /**
   * @type {number}
   */
  const DROP = Infinity;


  /**
   * @classdesc
   * Priority queue.
   *
   * The implementation is inspired from the Closure Library's Heap class and
   * Python's heapq module.
   *
   * See http://closure-library.googlecode.com/svn/docs/closure_goog_structs_heap.js.source.html
   * and http://hg.python.org/cpython/file/2.7/Lib/heapq.py.
   *
   * @template T
   */
  class PriorityQueue {

    /**
     * @param {function(T): number} priorityFunction Priority function.
     * @param {function(T): string} keyFunction Key function.
     */
    constructor(priorityFunction, keyFunction) {

      /**
       * @type {function(T): number}
       * @private
       */
      this.priorityFunction_ = priorityFunction;

      /**
       * @type {function(T): string}
       * @private
       */
      this.keyFunction_ = keyFunction;

      /**
       * @type {Array<T>}
       * @private
       */
      this.elements_ = [];

      /**
       * @type {Array<number>}
       * @private
       */
      this.priorities_ = [];

      /**
       * @type {!Object<string, boolean>}
       * @private
       */
      this.queuedElements_ = {};

    }

    /**
     * FIXME empty description for jsdoc
     */
    clear() {
      this.elements_.length = 0;
      this.priorities_.length = 0;
      clear(this.queuedElements_);
    }


    /**
     * Remove and return the highest-priority element. O(log N).
     * @return {T} Element.
     */
    dequeue() {
      const elements = this.elements_;
      const priorities = this.priorities_;
      const element = elements[0];
      if (elements.length == 1) {
        elements.length = 0;
        priorities.length = 0;
      } else {
        elements[0] = elements.pop();
        priorities[0] = priorities.pop();
        this.siftUp_(0);
      }
      const elementKey = this.keyFunction_(element);
      delete this.queuedElements_[elementKey];
      return element;
    }


    /**
     * Enqueue an element. O(log N).
     * @param {T} element Element.
     * @return {boolean} The element was added to the queue.
     */
    enqueue(element) {
      assert(!(this.keyFunction_(element) in this.queuedElements_),
        31); // Tried to enqueue an `element` that was already added to the queue
      const priority = this.priorityFunction_(element);
      if (priority != DROP) {
        this.elements_.push(element);
        this.priorities_.push(priority);
        this.queuedElements_[this.keyFunction_(element)] = true;
        this.siftDown_(0, this.elements_.length - 1);
        return true;
      }
      return false;
    }


    /**
     * @return {number} Count.
     */
    getCount() {
      return this.elements_.length;
    }


    /**
     * Gets the index of the left child of the node at the given index.
     * @param {number} index The index of the node to get the left child for.
     * @return {number} The index of the left child.
     * @private
     */
    getLeftChildIndex_(index) {
      return index * 2 + 1;
    }


    /**
     * Gets the index of the right child of the node at the given index.
     * @param {number} index The index of the node to get the right child for.
     * @return {number} The index of the right child.
     * @private
     */
    getRightChildIndex_(index) {
      return index * 2 + 2;
    }


    /**
     * Gets the index of the parent of the node at the given index.
     * @param {number} index The index of the node to get the parent for.
     * @return {number} The index of the parent.
     * @private
     */
    getParentIndex_(index) {
      return (index - 1) >> 1;
    }


    /**
     * Make this a heap. O(N).
     * @private
     */
    heapify_() {
      let i;
      for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {
        this.siftUp_(i);
      }
    }


    /**
     * @return {boolean} Is empty.
     */
    isEmpty() {
      return this.elements_.length === 0;
    }


    /**
     * @param {string} key Key.
     * @return {boolean} Is key queued.
     */
    isKeyQueued(key) {
      return key in this.queuedElements_;
    }


    /**
     * @param {T} element Element.
     * @return {boolean} Is queued.
     */
    isQueued(element) {
      return this.isKeyQueued(this.keyFunction_(element));
    }


    /**
     * @param {number} index The index of the node to move down.
     * @private
     */
    siftUp_(index) {
      const elements = this.elements_;
      const priorities = this.priorities_;
      const count = elements.length;
      const element = elements[index];
      const priority = priorities[index];
      const startIndex = index;

      while (index < (count >> 1)) {
        const lIndex = this.getLeftChildIndex_(index);
        const rIndex = this.getRightChildIndex_(index);

        const smallerChildIndex = rIndex < count &&
            priorities[rIndex] < priorities[lIndex] ?
          rIndex : lIndex;

        elements[index] = elements[smallerChildIndex];
        priorities[index] = priorities[smallerChildIndex];
        index = smallerChildIndex;
      }

      elements[index] = element;
      priorities[index] = priority;
      this.siftDown_(startIndex, index);
    }


    /**
     * @param {number} startIndex The index of the root.
     * @param {number} index The index of the node to move up.
     * @private
     */
    siftDown_(startIndex, index) {
      const elements = this.elements_;
      const priorities = this.priorities_;
      const element = elements[index];
      const priority = priorities[index];

      while (index > startIndex) {
        const parentIndex = this.getParentIndex_(index);
        if (priorities[parentIndex] > priority) {
          elements[index] = elements[parentIndex];
          priorities[index] = priorities[parentIndex];
          index = parentIndex;
        } else {
          break;
        }
      }
      elements[index] = element;
      priorities[index] = priority;
    }


    /**
     * FIXME empty description for jsdoc
     */
    reprioritize() {
      const priorityFunction = this.priorityFunction_;
      const elements = this.elements_;
      const priorities = this.priorities_;
      let index = 0;
      const n = elements.length;
      let element, i, priority;
      for (i = 0; i < n; ++i) {
        element = elements[i];
        priority = priorityFunction(element);
        if (priority == DROP) {
          delete this.queuedElements_[this.keyFunction_(element)];
        } else {
          priorities[index] = priority;
          elements[index++] = element;
        }
      }
      elements.length = index;
      priorities.length = index;
      this.heapify_();
    }

  }

  /**
   * @module ol/TileQueue
   */


  /**
   * @typedef {function(import("./Tile.js").default, string, import("./coordinate.js").Coordinate, number): number} PriorityFunction
   */


  class TileQueue extends PriorityQueue {

    /**
     * @param {PriorityFunction} tilePriorityFunction Tile priority function.
     * @param {function(): ?} tileChangeCallback Function called on each tile change event.
     */
    constructor(tilePriorityFunction, tileChangeCallback) {

      super(
        /**
         * @param {Array} element Element.
         * @return {number} Priority.
         */
        function(element) {
          return tilePriorityFunction.apply(null, element);
        },
        /**
         * @param {Array} element Element.
         * @return {string} Key.
         */
        function(element) {
          return (/** @type {import("./Tile.js").default} */ (element[0]).getKey());
        });

      /**
       * @private
       * @type {function(): ?}
       */
      this.tileChangeCallback_ = tileChangeCallback;

      /**
       * @private
       * @type {number}
       */
      this.tilesLoading_ = 0;

      /**
       * @private
       * @type {!Object<string,boolean>}
       */
      this.tilesLoadingKeys_ = {};

    }

    /**
     * @inheritDoc
     */
    enqueue(element) {
      const added = super.enqueue(element);
      if (added) {
        const tile = element[0];
        listen(tile, EventType.CHANGE, this.handleTileChange, this);
      }
      return added;
    }

    /**
     * @return {number} Number of tiles loading.
     */
    getTilesLoading() {
      return this.tilesLoading_;
    }

    /**
     * @param {import("./events/Event.js").default} event Event.
     * @protected
     */
    handleTileChange(event) {
      const tile = /** @type {import("./Tile.js").default} */ (event.target);
      const state = tile.getState();
      if (tile.hifi && state === TileState.LOADED || state === TileState.ERROR ||
          state === TileState.EMPTY || state === TileState.ABORT) {
        unlisten(tile, EventType.CHANGE, this.handleTileChange, this);
        const tileKey = tile.getKey();
        if (tileKey in this.tilesLoadingKeys_) {
          delete this.tilesLoadingKeys_[tileKey];
          --this.tilesLoading_;
        }
        this.tileChangeCallback_();
      }
    }

    /**
     * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.
     * @param {number} maxNewLoads Maximum number of new tiles to load.
     */
    loadMoreTiles(maxTotalLoading, maxNewLoads) {
      let newLoads = 0;
      let abortedTiles = false;
      let state, tile, tileKey;
      while (this.tilesLoading_ < maxTotalLoading && newLoads < maxNewLoads &&
             this.getCount() > 0) {
        tile = /** @type {import("./Tile.js").default} */ (this.dequeue()[0]);
        tileKey = tile.getKey();
        state = tile.getState();
        if (state === TileState.ABORT) {
          abortedTiles = true;
        } else if (state === TileState.IDLE && !(tileKey in this.tilesLoadingKeys_)) {
          this.tilesLoadingKeys_[tileKey] = true;
          ++this.tilesLoading_;
          ++newLoads;
          tile.load();
        }
      }
      if (newLoads === 0 && abortedTiles) {
        // Do not stop the render loop when all wanted tiles were aborted due to
        // a small, saturated tile cache.
        this.tileChangeCallback_();
      }
    }
  }

  /**
   * @module ol/tilegrid/common
   */

  /**
   * Default maximum zoom for default tile grids.
   * @type {number}
   */
  const DEFAULT_MAX_ZOOM = 42;

  /**
   * Default tile size.
   * @type {number}
   */
  const DEFAULT_TILE_SIZE = 256;

  /**
   * @module ol/centerconstraint
   */


  /**
   * @typedef {function((import("./coordinate.js").Coordinate|undefined), number, import("./size.js").Size, boolean=): (import("./coordinate.js").Coordinate|undefined)} Type
   */


  /**
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {boolean} onlyCenter If true, the constraint will only apply to the view center.
   * @param {boolean} smooth If true, the view will be able to go slightly out of the given extent
   * (only during interaction and animation).
   * @return {Type} The constraint.
   */
  function createExtent(extent, onlyCenter, smooth) {
    return (
      /**
       * @param {import("./coordinate.js").Coordinate|undefined} center Center.
       * @param {number} resolution Resolution.
       * @param {import("./size.js").Size} size Viewport size; unused if `onlyCenter` was specified.
       * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
       * @return {import("./coordinate.js").Coordinate|undefined} Center.
       */
      function(center, resolution, size, opt_isMoving) {
        if (center) {
          const viewWidth = onlyCenter ? 0 : size[0] * resolution;
          const viewHeight = onlyCenter ? 0 : size[1] * resolution;
          let minX = extent[0] + viewWidth / 2;
          let maxX = extent[2] - viewWidth / 2;
          let minY = extent[1] + viewHeight / 2;
          let maxY = extent[3] - viewHeight / 2;

          // note: when zooming out of bounds, min and max values for x and y may
          // end up inverted (min > max); this has to be accounted for
          if (minX > maxX) {
            minX = maxX = (maxX + minX) / 2;
          }
          if (minY > maxY) {
            minY = maxY = (maxY + minY) / 2;
          }

          let x = clamp(center[0], minX, maxX);
          let y = clamp(center[1], minY, maxY);
          const ratio = 30 * resolution;

          // during an interaction, allow some overscroll
          if (opt_isMoving && smooth) {
            x += -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) +
              ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);
            y += -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) +
              ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);
          }

          return [x, y];
        } else {
          return undefined;
        }
      }
    );
  }


  /**
   * @param {import("./coordinate.js").Coordinate=} center Center.
   * @return {import("./coordinate.js").Coordinate|undefined} Center.
   */
  function none(center) {
    return center;
  }

  /**
   * @module ol/resolutionconstraint
   */


  /**
   * @typedef {function((number|undefined), number, import("./size.js").Size, boolean=): (number|undefined)} Type
   */

  /**
   * Returns a modified resolution taking into acocunt the viewport size and maximum
   * allowed extent.
   * @param {number} resolution Resolution
   * @param {import("./extent.js").Extent=} maxExtent Maximum allowed extent.
   * @param {import("./size.js").Size} viewportSize Viewport size.
   * @return {number} Capped resolution.
   */
  function getViewportClampedResolution(resolution, maxExtent, viewportSize) {
    const xResolution = getWidth(maxExtent) / viewportSize[0];
    const yResolution = getHeight(maxExtent) / viewportSize[1];
    return Math.min(resolution, Math.min(xResolution, yResolution));
  }

  /**
   * Returns a modified resolution to be between maxResolution and minResolution while
   * still allowing the value to be slightly out of bounds.
   * Note: the computation is based on the logarithm function (ln):
   *  - at 1, ln(x) is 0
   *  - above 1, ln(x) keeps increasing but at a much slower pace than x
   * The final result is clamped to prevent getting too far away from bounds.
   * @param {number} resolution Resolution.
   * @param {number} maxResolution Max resolution.
   * @param {number} minResolution Min resolution.
   * @return {number} Smoothed resolution.
   */
  function getSmoothClampedResolution(resolution, maxResolution, minResolution) {
    let result = Math.min(resolution, maxResolution);
    const ratio = 50;

    result *= Math.log(1 + ratio * Math.max(0, resolution / maxResolution - 1)) / ratio + 1;
    if (minResolution) {
      result = Math.max(result, minResolution);
      result /= Math.log(1 + ratio * Math.max(0, minResolution / resolution - 1)) / ratio + 1;
    }
    return clamp(result, minResolution / 2, maxResolution * 2);
  }

  /**
   * @param {Array<number>} resolutions Resolutions.
   * @param {boolean=} opt_smooth If true, the view will be able to slightly exceed resolution limits. Default: true.
   * @param {import("./extent.js").Extent=} opt_maxExtent Maximum allowed extent.
   * @return {Type} Zoom function.
   */
  function createSnapToResolutions(resolutions, opt_smooth, opt_maxExtent) {
    return (
      /**
       * @param {number|undefined} resolution Resolution.
       * @param {number} direction Direction.
       * @param {import("./size.js").Size} size Viewport size.
       * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
       * @return {number|undefined} Resolution.
       */
      function(resolution, direction, size, opt_isMoving) {
        if (resolution !== undefined) {
          const maxResolution = resolutions[0];
          const minResolution = resolutions[resolutions.length - 1];
          const cappedMaxRes = opt_maxExtent ?
            getViewportClampedResolution(maxResolution, opt_maxExtent, size) :
            maxResolution;

          // during interacting or animating, allow intermediary values
          if (opt_isMoving) {
            const smooth = opt_smooth !== undefined ? opt_smooth : true;
            if (!smooth) {
              return clamp(resolution, minResolution, cappedMaxRes);
            }
            return getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);
          }

          const capped = Math.min(cappedMaxRes, resolution);
          const z = Math.floor(linearFindNearest(resolutions, capped, direction));
          return resolutions[z];
        } else {
          return undefined;
        }
      }
    );
  }


  /**
   * @param {number} power Power.
   * @param {number} maxResolution Maximum resolution.
   * @param {number=} opt_minResolution Minimum resolution.
   * @param {boolean=} opt_smooth If true, the view will be able to slightly exceed resolution limits. Default: true.
   * @param {import("./extent.js").Extent=} opt_maxExtent Maximum allowed extent.
   * @return {Type} Zoom function.
   */
  function createSnapToPower(power, maxResolution, opt_minResolution, opt_smooth, opt_maxExtent) {
    return (
      /**
       * @param {number|undefined} resolution Resolution.
       * @param {number} direction Direction.
       * @param {import("./size.js").Size} size Viewport size.
       * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
       * @return {number|undefined} Resolution.
       */
      function(resolution, direction, size, opt_isMoving) {
        if (resolution !== undefined) {
          const cappedMaxRes = opt_maxExtent ?
            getViewportClampedResolution(maxResolution, opt_maxExtent, size) :
            maxResolution;
          const minResolution = opt_minResolution !== undefined ? opt_minResolution : 0;

          // during interacting or animating, allow intermediary values
          if (opt_isMoving) {
            const smooth = opt_smooth !== undefined ? opt_smooth : true;
            if (!smooth) {
              return clamp(resolution, minResolution, cappedMaxRes);
            }
            return getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);
          }

          const offset = -direction * (0.5 - 1e-9) + 0.5;
          const capped = Math.min(cappedMaxRes, resolution);
          const zoomLevel = Math.floor(
            Math.log(maxResolution / capped) / Math.log(power) + offset);
          const newResolution = maxResolution / Math.pow(power, zoomLevel);
          return clamp(newResolution, minResolution, cappedMaxRes);
        } else {
          return undefined;
        }
      });
  }

  /**
   * @param {number} maxResolution Max resolution.
   * @param {number} minResolution Min resolution.
   * @param {boolean=} opt_smooth If true, the view will be able to slightly exceed resolution limits. Default: true.
   * @param {import("./extent.js").Extent=} opt_maxExtent Maximum allowed extent.
   * @return {Type} Zoom function.
   */
  function createMinMaxResolution(maxResolution, minResolution, opt_smooth, opt_maxExtent) {
    return (
      /**
       * @param {number|undefined} resolution Resolution.
       * @param {number} direction Direction.
       * @param {import("./size.js").Size} size Viewport size.
       * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
       * @return {number|undefined} Resolution.
       */
      function(resolution, direction, size, opt_isMoving) {
        if (resolution !== undefined) {
          const cappedMaxRes = opt_maxExtent ?
            getViewportClampedResolution(maxResolution, opt_maxExtent, size) :
            maxResolution;
          const smooth = opt_smooth !== undefined ? opt_smooth : true;

          if (!smooth || !opt_isMoving) {
            return clamp(resolution, minResolution, cappedMaxRes);
          }
          return getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);
        } else {
          return undefined;
        }
      }
    );
  }

  /**
   * @module ol/rotationconstraint
   */


  /**
   * @typedef {function((number|undefined), boolean=): (number|undefined)} Type
   */


  /**
   * @param {number|undefined} rotation Rotation.
   * @return {number|undefined} Rotation.
   */
  function disable(rotation) {
    if (rotation !== undefined) {
      return 0;
    } else {
      return undefined;
    }
  }


  /**
   * @param {number|undefined} rotation Rotation.
   * @return {number|undefined} Rotation.
   */
  function none$1(rotation) {
    if (rotation !== undefined) {
      return rotation;
    } else {
      return undefined;
    }
  }


  /**
   * @param {number} n N.
   * @return {Type} Rotation constraint.
   */
  function createSnapToN(n) {
    const theta = 2 * Math.PI / n;
    return (
      /**
       * @param {number|undefined} rotation Rotation.
       * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
       * @return {number|undefined} Rotation.
       */
      function(rotation, opt_isMoving) {
        if (opt_isMoving) {
          return rotation;
        }

        if (rotation !== undefined) {
          rotation = Math.floor(rotation / theta + 0.5) * theta;
          return rotation;
        } else {
          return undefined;
        }
      });
  }


  /**
   * @param {number=} opt_tolerance Tolerance.
   * @return {Type} Rotation constraint.
   */
  function createSnapToZero(opt_tolerance) {
    const tolerance = opt_tolerance || toRadians(5);
    return (
      /**
       * @param {number|undefined} rotation Rotation.
       * @param {boolean} opt_isMoving True if an interaction or animation is in progress.
       * @return {number|undefined} Rotation.
       */
      function(rotation, opt_isMoving) {
        if (opt_isMoving) {
          return rotation;
        }

        if (rotation !== undefined) {
          if (Math.abs(rotation) <= tolerance) {
            return 0;
          } else {
            return rotation;
          }
        } else {
          return undefined;
        }
      });
  }

  /**
   * @module ol/ViewProperty
   */

  /**
   * @enum {string}
   */
  var ViewProperty = {
    CENTER: 'center',
    RESOLUTION: 'resolution',
    ROTATION: 'rotation'
  };

  /**
   * @module ol/View
   */


  /**
   * An animation configuration
   *
   * @typedef {Object} Animation
   * @property {import("./coordinate.js").Coordinate} [sourceCenter]
   * @property {import("./coordinate.js").Coordinate} [targetCenter]
   * @property {number} [sourceResolution]
   * @property {number} [targetResolution]
   * @property {number} [sourceRotation]
   * @property {number} [targetRotation]
   * @property {import("./coordinate.js").Coordinate} [anchor]
   * @property {number} start
   * @property {number} duration
   * @property {boolean} complete
   * @property {function(number):number} easing
   * @property {function(boolean)} callback
   */


  /**
   * @typedef {Object} Constraints
   * @property {import("./centerconstraint.js").Type} center
   * @property {import("./resolutionconstraint.js").Type} resolution
   * @property {import("./rotationconstraint.js").Type} rotation
   */


  /**
   * @typedef {Object} FitOptions
   * @property {import("./size.js").Size} [size] The size in pixels of the box to fit
   * the extent into. Default is the current size of the first map in the DOM that
   * uses this view, or `[100, 100]` if no such map is found.
   * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be
   * cleared inside the view. Values in the array are top, right, bottom and left
   * padding.
   * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,
   * get the nearest extent instead of the closest that actually fits the view.
   * @property {number} [minResolution=0] Minimum resolution that we zoom to.
   * @property {number} [maxZoom] Maximum zoom level that we zoom to. If
   * `minResolution` is given, this property is ignored.
   * @property {number} [duration] The duration of the animation in milliseconds.
   * By default, there is no animation to the target extent.
   * @property {function(number):number} [easing] The easing function used during
   * the animation (defaults to {@link module:ol/easing~inAndOut}).
   * The function will be called for each frame with a number representing a
   * fraction of the animation's duration.  The function should return a number
   * between 0 and 1 representing the progress toward the destination state.
   * @property {function(boolean)} [callback] Function called when the view is in
   * its final position. The callback will be called with `true` if the animation
   * series completed on its own or `false` if it was cancelled.
   */


  /**
   * @typedef {Object} ViewOptions
   * @property {import("./coordinate.js").Coordinate} [center] The initial center for
   * the view. The coordinate system for the center is specified with the
   * `projection` option. Layer sources will not be fetched if this is not set,
   * but the center can be set later with {@link #setCenter}.
   * @property {boolean|number} [constrainRotation=true] Rotation constraint.
   * `false` means no constraint. `true` means no constraint, but snap to zero
   * near zero. A number constrains the rotation to that number of values. For
   * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.
   * @property {boolean} [enableRotation=true] Enable rotation.
   * If `false`, a rotation constraint that always sets the rotation to zero is
   * used. The `constrainRotation` option has no effect if `enableRotation` is
   * `false`.
   * @property {import("./extent.js").Extent} [extent] The extent that constrains the
   * view, in other words, nothing outside of this extent can be visible on the map.
   * @property {boolean} [constrainOnlyCenter=false] If true, the extent
   * constraint will only apply to the view center and not the whole extent.
   * @property {boolean} [smoothExtentConstraint=true] If true, the extent
   * constraint will be applied smoothly, i.e. allow the view to go slightly outside
   * of the given `extent`.
   * @property {number} [maxResolution] The maximum resolution used to determine
   * the resolution constraint. It is used together with `minResolution` (or
   * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way
   * that the projection's validity extent fits in a 256x256 px tile. If the
   * projection is Spherical Mercator (the default) then `maxResolution` defaults
   * to `40075016.68557849 / 256 = 156543.03392804097`.
   * @property {number} [minResolution] The minimum resolution used to determine
   * the resolution constraint.  It is used together with `maxResolution` (or
   * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29
   * zoom levels (with a factor of 2). If the projection is Spherical Mercator
   * (the default) then `minResolution` defaults to
   * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.
   * @property {number} [maxZoom=28] The maximum zoom level used to determine the
   * resolution constraint. It is used together with `minZoom` (or
   * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also
   * provided, it is given precedence over `maxZoom`.
   * @property {number} [minZoom=0] The minimum zoom level used to determine the
   * resolution constraint. It is used together with `maxZoom` (or
   * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also
   * provided, it is given precedence over `minZoom`.
   * @property {boolean} [multiWorld=false] No more than one world is visible.
   * @property {boolean} [constrainResolution=false] If true, the view will always
   * animate to the closest zoom level after an interaction; false means
   * intermediary zoom levels are allowed.
   * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution
   * min/max values will be applied smoothly, i. e. allow the view to exceed slightly
   * the given resolution or zoom bounds.
   * @property {import("./proj.js").ProjectionLike} [projection='EPSG:3857'] The
   * projection. The default is Spherical Mercator.
   * @property {number} [resolution] The initial resolution for the view. The
   * units are `projection` units per pixel (e.g. meters per pixel). An
   * alternative to setting this is to set `zoom`. Layer sources will not be
   * fetched if neither this nor `zoom` are defined, but they can be set later
   * with {@link #setZoom} or {@link #setResolution}.
   * @property {Array<number>} [resolutions] Resolutions to determine the
   * resolution constraint. If set the `maxResolution`, `minResolution`,
   * `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.
   * @property {number} [rotation=0] The initial rotation for the view in radians
   * (positive rotation clockwise, 0 means North).
   * @property {number} [zoom] Only used if `resolution` is not defined. Zoom
   * level used to calculate the initial resolution for the view.
   * @property {number} [zoomFactor=2] The zoom factor used to compute the
   * corresponding resolution.
   */


  /**
   * @typedef {Object} AnimationOptions
   * @property {import("./coordinate.js").Coordinate} [center] The center of the view at the end of
   * the animation.
   * @property {number} [zoom] The zoom level of the view at the end of the
   * animation. This takes precedence over `resolution`.
   * @property {number} [resolution] The resolution of the view at the end
   * of the animation.  If `zoom` is also provided, this option will be ignored.
   * @property {number} [rotation] The rotation of the view at the end of
   * the animation.
   * @property {import("./coordinate.js").Coordinate} [anchor] Optional anchor to remain fixed
   * during a rotation or resolution animation.
   * @property {number} [duration=1000] The duration of the animation in milliseconds.
   * @property {function(number):number} [easing] The easing function used
   * during the animation (defaults to {@link module:ol/easing~inAndOut}).
   * The function will be called for each frame with a number representing a
   * fraction of the animation's duration.  The function should return a number
   * between 0 and 1 representing the progress toward the destination state.
   */


  /**
   * @typedef {Object} State
   * @property {import("./coordinate.js").Coordinate} center
   * @property {import("./proj/Projection.js").default} projection
   * @property {number} resolution
   * @property {number} rotation
   * @property {number} zoom
   */


  /**
   * Default min zoom level for the map view.
   * @type {number}
   */
  const DEFAULT_MIN_ZOOM = 0;


  /**
   * @classdesc
   * A View object represents a simple 2D view of the map.
   *
   * This is the object to act upon to change the center, resolution,
   * and rotation of the map.
   *
   * A View has a `projection`. The projection determines the
   * coordinate system of the center, and its units determine the units of the
   * resolution (projection units per pixel). The default projection is
   * Spherical Mercator (EPSG:3857).
   *
   * ### The view states
   *
   * An View is determined by three states: `center`, `resolution`,
   * and `rotation`. Each state has a corresponding getter and setter, e.g.
   * `getCenter` and `setCenter` for the `center` state.
   *
   * The `zoom` state is actually not saved on the view: all computations
   * internally use the `resolution` state. Still, the `setZoom` and `getZoom`
   * methods are available, as well as `getResolutionForZoom` and
   * `getZoomForResolution` to switch from one system to the other.
   *
   * ### The constraints
   *
   * `setCenter`, `setResolution` and `setRotation` can be used to change the
   * states of the view, but any constraint defined in the constructor will
   * be applied along the way.
   *
   * A View object can have a *resolution constraint*, a *rotation constraint*
   * and a *center constraint*.
   *
   * The *resolution constraint* typically restricts min/max values and
   * snaps to specific resolutions. It is determined by the following
   * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.
   * If `resolutions` is set, the other three options are ignored. See
   * documentation for each option for more information. By default, the view
   * only has a min/max restriction and allow intermediary zoom levels when
   * pinch-zooming for example.
   *
   * The *rotation constraint* snaps to specific angles. It is determined
   * by the following options: `enableRotation` and `constrainRotation`.
   * By default rotation is allowed and its value is snapped to zero when approaching the
   * horizontal.
   *
   * The *center constraint* is determined by the `extent` option. By
   * default the view center is not constrained at all.
   *
   * ### Changing the view state
   *
   * It is important to note that `setZoom`, `setResolution`, `setCenter` and
   * `setRotation` are subject to the above mentioned constraints. As such, it
   * may sometimes not be possible to know in advance the resulting state of the
   * View. For example, calling `setResolution(10)` does not guarantee that
   * `getResolution()` will return `10`.
   *
   * A consequence of this is that, when applying a delta on the view state, one
   * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`
   * rather than the corresponding setters. This will let view do its internal
   * computations. Besides, the `adjust*` methods also take an `opt_anchor`
   * argument which allows specifying an origin for the transformation.
   *
   * ### Interacting with the view
   *
   * View constraints are usually only applied when the view is *at rest*, meaning that
   * no interaction or animation is ongoing. As such, if the user puts the view in a
   * state that is not equivalent to a constrained one (e.g. rotating the view when
   * the snap angle is 0), an animation will be triggered at the interaction end to
   * put back the view to a stable state;
   *
   * @api
   */
  class View extends BaseObject {

    /**
     * @param {ViewOptions=} opt_options View options.
     */
    constructor(opt_options) {
      super();

      const options = assign({}, opt_options);

      /**
       * @private
       * @type {Array<number>}
       */
      this.hints_ = [0, 0];

      /**
       * @private
       * @type {Array<Array<Animation>>}
       */
      this.animations_ = [];

      /**
       * @private
       * @type {number|undefined}
       */
      this.updateAnimationKey_;

      /**
       * @private
       * @const
       * @type {import("./proj/Projection.js").default}
       */
      this.projection_ = createProjection(options.projection, 'EPSG:3857');

      /**
       * @private
       * @type {import("./coordinate.js").Coordinate|undefined}
       */
      this.targetCenter_ = null;

      /**
       * @private
       * @type {number|undefined}
       */
      this.targetResolution_;

      /**
       * @private
       * @type {number|undefined}
       */
      this.targetRotation_;

      this.applyOptions_(options);
    }

    /**
     * Set up the view with the given options.
     * @param {ViewOptions} options View options.
     */
    applyOptions_(options) {

      /**
       * @type {Object<string, *>}
       */
      const properties = {};

      const resolutionConstraintInfo = createResolutionConstraint(options);

      /**
       * @private
       * @type {number}
       */
      this.maxResolution_ = resolutionConstraintInfo.maxResolution;

      /**
       * @private
       * @type {number}
       */
      this.minResolution_ = resolutionConstraintInfo.minResolution;

      /**
       * @private
       * @type {number}
       */
      this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;

      /**
       * @private
       * @type {Array<number>|undefined}
       */
      this.resolutions_ = options.resolutions;

      /**
       * @private
       * @type {number}
       */
      this.minZoom_ = resolutionConstraintInfo.minZoom;

      const centerConstraint = createCenterConstraint(options);
      const resolutionConstraint = resolutionConstraintInfo.constraint;
      const rotationConstraint = createRotationConstraint(options);

      /**
       * @private
       * @type {Constraints}
       */
      this.constraints_ = {
        center: centerConstraint,
        resolution: resolutionConstraint,
        rotation: rotationConstraint
      };

      this.setRotation(options.rotation !== undefined ? options.rotation : 0);
      this.setCenter(options.center !== undefined ? options.center : null);
      if (options.resolution !== undefined) {
        this.setResolution(options.resolution);
      } else if (options.zoom !== undefined) {
        this.setZoom(options.zoom);
      }
      this.resolveConstraints(0);

      this.setProperties(properties);


      /**
       * @private
       * @type {ViewOptions}
       */
      this.options_ = options;

    }

    /**
     * Get an updated version of the view options used to construct the view.  The
     * current resolution (or zoom), center, and rotation are applied to any stored
     * options.  The provided options can be used to apply new min/max zoom or
     * resolution limits.
     * @param {ViewOptions} newOptions New options to be applied.
     * @return {ViewOptions} New options updated with the current view state.
     */
    getUpdatedOptions_(newOptions) {
      const options = assign({}, this.options_);

      // preserve resolution (or zoom)
      if (options.resolution !== undefined) {
        options.resolution = this.getResolution();
      } else {
        options.zoom = this.getZoom();
      }

      // preserve center
      options.center = this.getCenter();

      // preserve rotation
      options.rotation = this.getRotation();

      return assign({}, options, newOptions);
    }

    /**
     * Animate the view.  The view's center, zoom (or resolution), and rotation
     * can be animated for smooth transitions between view states.  For example,
     * to animate the view to a new zoom level:
     *
     *     view.animate({zoom: view.getZoom() + 1});
     *
     * By default, the animation lasts one second and uses in-and-out easing.  You
     * can customize this behavior by including `duration` (in milliseconds) and
     * `easing` options (see {@link module:ol/easing}).
     *
     * To chain together multiple animations, call the method with multiple
     * animation objects.  For example, to first zoom and then pan:
     *
     *     view.animate({zoom: 10}, {center: [0, 0]});
     *
     * If you provide a function as the last argument to the animate method, it
     * will get called at the end of an animation series.  The callback will be
     * called with `true` if the animation series completed on its own or `false`
     * if it was cancelled.
     *
     * Animations are cancelled by user interactions (e.g. dragging the map) or by
     * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`
     * (or another method that calls one of these).
     *
     * @param {...(AnimationOptions|function(boolean): void)} var_args Animation
     *     options.  Multiple animations can be run in series by passing multiple
     *     options objects.  To run multiple animations in parallel, call the method
     *     multiple times.  An optional callback can be provided as a final
     *     argument.  The callback will be called with a boolean indicating whether
     *     the animation completed without being cancelled.
     * @api
     */
    animate(var_args) {
      if (this.isDef() && !this.getAnimating()) {
        this.resolveConstraints(0);
      }
      this.animate_.apply(this, arguments);
    }

    /**
     * @private
     * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.
     */
    animate_(var_args) {
      let animationCount = arguments.length;
      let callback;
      if (animationCount > 1 && typeof arguments[animationCount - 1] === 'function') {
        callback = arguments[animationCount - 1];
        --animationCount;
      }
      if (!this.isDef()) {
        // if view properties are not yet set, shortcut to the final state
        const state = arguments[animationCount - 1];
        if (state.center) {
          this.setCenter(state.center);
        }
        if (state.zoom !== undefined) {
          this.setZoom(state.zoom);
        }
        if (state.rotation !== undefined) {
          this.setRotation(state.rotation);
        }
        if (callback) {
          animationCallback(callback, true);
        }
        return;
      }
      let start = Date.now();
      let center = this.targetCenter_.slice();
      let resolution = this.targetResolution_;
      let rotation = this.targetRotation_;
      const series = [];
      for (let i = 0; i < animationCount; ++i) {
        const options = /** @type {AnimationOptions} */ (arguments[i]);

        const animation = {
          start: start,
          complete: false,
          anchor: options.anchor,
          duration: options.duration !== undefined ? options.duration : 1000,
          easing: options.easing || inAndOut,
          callback: callback
        };

        if (options.center) {
          animation.sourceCenter = center;
          animation.targetCenter = options.center.slice();
          center = animation.targetCenter;
        }

        if (options.zoom !== undefined) {
          animation.sourceResolution = resolution;
          animation.targetResolution = this.getResolutionForZoom(options.zoom);
          resolution = animation.targetResolution;
        } else if (options.resolution) {
          animation.sourceResolution = resolution;
          animation.targetResolution = options.resolution;
          resolution = animation.targetResolution;
        }

        if (options.rotation !== undefined) {
          animation.sourceRotation = rotation;
          const delta = modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;
          animation.targetRotation = rotation + delta;
          rotation = animation.targetRotation;
        }

        // check if animation is a no-op
        if (isNoopAnimation(animation)) {
          animation.complete = true;
          // we still push it onto the series for callback handling
        } else {
          start += animation.duration;
        }
        series.push(animation);
      }
      this.animations_.push(series);
      this.setHint(ViewHint.ANIMATING, 1);
      this.updateAnimations_();
    }

    /**
     * Determine if the view is being animated.
     * @return {boolean} The view is being animated.
     * @api
     */
    getAnimating() {
      return this.hints_[ViewHint.ANIMATING] > 0;
    }

    /**
     * Determine if the user is interacting with the view, such as panning or zooming.
     * @return {boolean} The view is being interacted with.
     * @api
     */
    getInteracting() {
      return this.hints_[ViewHint.INTERACTING] > 0;
    }

    /**
     * Cancel any ongoing animations.
     * @api
     */
    cancelAnimations() {
      this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);
      for (let i = 0, ii = this.animations_.length; i < ii; ++i) {
        const series = this.animations_[i];
        if (series[0].callback) {
          animationCallback(series[0].callback, false);
        }
      }
      this.animations_.length = 0;
    }

    /**
     * Update all animations.
     */
    updateAnimations_() {
      if (this.updateAnimationKey_ !== undefined) {
        cancelAnimationFrame(this.updateAnimationKey_);
        this.updateAnimationKey_ = undefined;
      }
      if (!this.getAnimating()) {
        return;
      }
      const now = Date.now();
      let more = false;
      for (let i = this.animations_.length - 1; i >= 0; --i) {
        const series = this.animations_[i];
        let seriesComplete = true;
        for (let j = 0, jj = series.length; j < jj; ++j) {
          const animation = series[j];
          if (animation.complete) {
            continue;
          }
          const elapsed = now - animation.start;
          let fraction = animation.duration > 0 ? elapsed / animation.duration : 1;
          if (fraction >= 1) {
            animation.complete = true;
            fraction = 1;
          } else {
            seriesComplete = false;
          }
          const progress = animation.easing(fraction);
          if (animation.sourceCenter) {
            const x0 = animation.sourceCenter[0];
            const y0 = animation.sourceCenter[1];
            const x1 = animation.targetCenter[0];
            const y1 = animation.targetCenter[1];
            const x = x0 + progress * (x1 - x0);
            const y = y0 + progress * (y1 - y0);
            this.targetCenter_ = [x, y];
          }
          if (animation.sourceResolution && animation.targetResolution) {
            const resolution = progress === 1 ?
              animation.targetResolution :
              animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);
            if (animation.anchor) {
              const size = this.getSizeFromViewport_(this.getRotation());
              const constrainedResolution = this.constraints_.resolution(resolution, 0, size, true);
              this.targetCenter_ = this.calculateCenterZoom(constrainedResolution, animation.anchor);
            }
            this.targetResolution_ = resolution;
            this.applyTargetState_(true);
          }
          if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {
            const rotation = progress === 1 ?
              modulo(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI :
              animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);
            if (animation.anchor) {
              const constrainedRotation = this.constraints_.rotation(rotation, true);
              this.targetCenter_ = this.calculateCenterRotate(constrainedRotation, animation.anchor);
            }
            this.targetRotation_ = rotation;
          }
          this.applyTargetState_(true);
          more = true;
          if (!animation.complete) {
            break;
          }
        }
        if (seriesComplete) {
          this.animations_[i] = null;
          this.setHint(ViewHint.ANIMATING, -1);
          const callback = series[0].callback;
          if (callback) {
            animationCallback(callback, true);
          }
        }
      }
      // prune completed series
      this.animations_ = this.animations_.filter(Boolean);
      if (more && this.updateAnimationKey_ === undefined) {
        this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_.bind(this));
      }
    }

    /**
     * @param {number} rotation Target rotation.
     * @param {import("./coordinate.js").Coordinate} anchor Rotation anchor.
     * @return {import("./coordinate.js").Coordinate|undefined} Center for rotation and anchor.
     */
    calculateCenterRotate(rotation, anchor) {
      let center;
      const currentCenter = this.getCenter();
      if (currentCenter !== undefined) {
        center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];
        rotate$2(center, rotation - this.getRotation());
        add$2(center, anchor);
      }
      return center;
    }

    /**
     * @param {number} resolution Target resolution.
     * @param {import("./coordinate.js").Coordinate} anchor Zoom anchor.
     * @return {import("./coordinate.js").Coordinate|undefined} Center for resolution and anchor.
     */
    calculateCenterZoom(resolution, anchor) {
      let center;
      const currentCenter = this.getCenter();
      const currentResolution = this.getResolution();
      if (currentCenter !== undefined && currentResolution !== undefined) {
        const x = anchor[0] - resolution * (anchor[0] - currentCenter[0]) / currentResolution;
        const y = anchor[1] - resolution * (anchor[1] - currentCenter[1]) / currentResolution;
        center = [x, y];
      }
      return center;
    }

    /**
     * @private
     * @param {number=} opt_rotation Take into account the rotation of the viewport when giving the size
     * @return {import("./size.js").Size} Viewport size or `[100, 100]` when no viewport is found.
     */
    getSizeFromViewport_(opt_rotation) {
      const size = [100, 100];
      const selector = '.ol-viewport[data-view="' + getUid(this) + '"]';
      const element = document.querySelector(selector);
      if (element) {
        const metrics = getComputedStyle(element);
        size[0] = parseInt(metrics.width, 10);
        size[1] = parseInt(metrics.height, 10);
      }
      if (opt_rotation) {
        const w = size[0];
        const h = size[1];
        size[0] = Math.abs(w * Math.cos(opt_rotation)) + Math.abs(h * Math.sin(opt_rotation));
        size[1] = Math.abs(w * Math.sin(opt_rotation)) + Math.abs(h * Math.cos(opt_rotation));
      }
      return size;
    }

    /**
     * Get the view center.
     * @return {import("./coordinate.js").Coordinate|undefined} The center of the view.
     * @observable
     * @api
     */
    getCenter() {
      return (
        /** @type {import("./coordinate.js").Coordinate|undefined} */ (this.get(ViewProperty.CENTER))
      );
    }

    /**
     * @return {Constraints} Constraints.
     */
    getConstraints() {
      return this.constraints_;
    }

    /**
     * @param {Array<number>=} opt_hints Destination array.
     * @return {Array<number>} Hint.
     */
    getHints(opt_hints) {
      if (opt_hints !== undefined) {
        opt_hints[0] = this.hints_[0];
        opt_hints[1] = this.hints_[1];
        return opt_hints;
      } else {
        return this.hints_.slice();
      }
    }

    /**
     * Calculate the extent for the current view state and the passed size.
     * The size is the pixel dimensions of the box into which the calculated extent
     * should fit. In most cases you want to get the extent of the entire map,
     * that is `map.getSize()`.
     * @param {import("./size.js").Size=} opt_size Box pixel size. If not provided, the size of the
     * first map that uses this view will be used.
     * @return {import("./extent.js").Extent} Extent.
     * @api
     */
    calculateExtent(opt_size) {
      const size = opt_size || this.getSizeFromViewport_();
      const center = /** @type {!import("./coordinate.js").Coordinate} */ (this.getCenter());
      assert(center, 1); // The view center is not defined
      const resolution = /** @type {!number} */ (this.getResolution());
      assert(resolution !== undefined, 2); // The view resolution is not defined
      const rotation = /** @type {!number} */ (this.getRotation());
      assert(rotation !== undefined, 3); // The view rotation is not defined

      return getForViewAndSize(center, resolution, rotation, size);
    }

    /**
     * Get the maximum resolution of the view.
     * @return {number} The maximum resolution of the view.
     * @api
     */
    getMaxResolution() {
      return this.maxResolution_;
    }

    /**
     * Get the minimum resolution of the view.
     * @return {number} The minimum resolution of the view.
     * @api
     */
    getMinResolution() {
      return this.minResolution_;
    }

    /**
     * Get the maximum zoom level for the view.
     * @return {number} The maximum zoom level.
     * @api
     */
    getMaxZoom() {
      return /** @type {number} */ (this.getZoomForResolution(this.minResolution_));
    }

    /**
     * Set a new maximum zoom level for the view.
     * @param {number} zoom The maximum zoom level.
     * @api
     */
    setMaxZoom(zoom) {
      this.applyOptions_(this.getUpdatedOptions_({maxZoom: zoom}));
    }

    /**
     * Get the minimum zoom level for the view.
     * @return {number} The minimum zoom level.
     * @api
     */
    getMinZoom() {
      return /** @type {number} */ (this.getZoomForResolution(this.maxResolution_));
    }

    /**
     * Set a new minimum zoom level for the view.
     * @param {number} zoom The minimum zoom level.
     * @api
     */
    setMinZoom(zoom) {
      this.applyOptions_(this.getUpdatedOptions_({minZoom: zoom}));
    }

    /**
     * Set whether the view shoud allow intermediary zoom levels.
     * @param {boolean} enabled Whether the resolution is constrained.
     * @api
     */
    setConstrainResolution(enabled) {
      this.applyOptions_(this.getUpdatedOptions_({constrainResolution: enabled}));
    }

    /**
     * Get the view projection.
     * @return {import("./proj/Projection.js").default} The projection of the view.
     * @api
     */
    getProjection() {
      return this.projection_;
    }

    /**
     * Get the view resolution.
     * @return {number|undefined} The resolution of the view.
     * @observable
     * @api
     */
    getResolution() {
      return /** @type {number|undefined} */ (this.get(ViewProperty.RESOLUTION));
    }

    /**
     * Get the resolutions for the view. This returns the array of resolutions
     * passed to the constructor of the View, or undefined if none were given.
     * @return {Array<number>|undefined} The resolutions of the view.
     * @api
     */
    getResolutions() {
      return this.resolutions_;
    }

    /**
     * Get the resolution for a provided extent (in map units) and size (in pixels).
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {import("./size.js").Size=} opt_size Box pixel size.
     * @return {number} The resolution at which the provided extent will render at
     *     the given size.
     * @api
     */
    getResolutionForExtent(extent, opt_size) {
      const size = opt_size || this.getSizeFromViewport_();
      const xResolution = getWidth(extent) / size[0];
      const yResolution = getHeight(extent) / size[1];
      return Math.max(xResolution, yResolution);
    }

    /**
     * Return a function that returns a value between 0 and 1 for a
     * resolution. Exponential scaling is assumed.
     * @param {number=} opt_power Power.
     * @return {function(number): number} Resolution for value function.
     */
    getResolutionForValueFunction(opt_power) {
      const power = opt_power || 2;
      const maxResolution = this.maxResolution_;
      const minResolution = this.minResolution_;
      const max = Math.log(maxResolution / minResolution) / Math.log(power);
      return (
        /**
         * @param {number} value Value.
         * @return {number} Resolution.
         */
        function(value) {
          const resolution = maxResolution / Math.pow(power, value * max);
          return resolution;
        });
    }

    /**
     * Get the view rotation.
     * @return {number} The rotation of the view in radians.
     * @observable
     * @api
     */
    getRotation() {
      return /** @type {number} */ (this.get(ViewProperty.ROTATION));
    }

    /**
     * Return a function that returns a resolution for a value between
     * 0 and 1. Exponential scaling is assumed.
     * @param {number=} opt_power Power.
     * @return {function(number): number} Value for resolution function.
     */
    getValueForResolutionFunction(opt_power) {
      const power = opt_power || 2;
      const maxResolution = this.maxResolution_;
      const minResolution = this.minResolution_;
      const max = Math.log(maxResolution / minResolution) / Math.log(power);
      return (
        /**
         * @param {number} resolution Resolution.
         * @return {number} Value.
         */
        function(resolution) {
          const value = (Math.log(maxResolution / resolution) / Math.log(power)) / max;
          return value;
        });
    }

    /**
     * @return {State} View state.
     */
    getState() {
      const center = /** @type {import("./coordinate.js").Coordinate} */ (this.getCenter());
      const projection = this.getProjection();
      const resolution = /** @type {number} */ (this.getResolution());
      const rotation = this.getRotation();
      return {
        center: center.slice(0),
        projection: projection !== undefined ? projection : null,
        resolution: resolution,
        rotation: rotation,
        zoom: this.getZoom()
      };
    }

    /**
     * Get the current zoom level. This method may return non-integer zoom levels
     * if the view does not constrain the resolution, or if an interaction or
     * animation is underway.
     * @return {number|undefined} Zoom.
     * @api
     */
    getZoom() {
      let zoom;
      const resolution = this.getResolution();
      if (resolution !== undefined) {
        zoom = this.getZoomForResolution(resolution);
      }
      return zoom;
    }

    /**
     * Get the zoom level for a resolution.
     * @param {number} resolution The resolution.
     * @return {number|undefined} The zoom level for the provided resolution.
     * @api
     */
    getZoomForResolution(resolution) {
      let offset = this.minZoom_ || 0;
      let max, zoomFactor;
      if (this.resolutions_) {
        const nearest = linearFindNearest(this.resolutions_, resolution, 1);
        offset = nearest;
        max = this.resolutions_[nearest];
        if (nearest == this.resolutions_.length - 1) {
          zoomFactor = 2;
        } else {
          zoomFactor = max / this.resolutions_[nearest + 1];
        }
      } else {
        max = this.maxResolution_;
        zoomFactor = this.zoomFactor_;
      }
      return offset + Math.log(max / resolution) / Math.log(zoomFactor);
    }

    /**
     * Get the resolution for a zoom level.
     * @param {number} zoom Zoom level.
     * @return {number} The view resolution for the provided zoom level.
     * @api
     */
    getResolutionForZoom(zoom) {
      if (this.resolutions_) {
        if (this.resolutions_.length <= 1) {
          return 0;
        }
        const baseLevel = clamp(Math.floor(zoom), 0, this.resolutions_.length - 2);
        const zoomFactor = this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];
        return this.resolutions_[baseLevel] / Math.pow(zoomFactor, clamp(zoom - baseLevel, 0, 1));
      } else {
        return this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_);
      }
    }

    /**
     * Fit the given geometry or extent based on the given map size and border.
     * The size is pixel dimensions of the box to fit the extent into.
     * In most cases you will want to use the map size, that is `map.getSize()`.
     * Takes care of the map angle.
     * @param {import("./geom/SimpleGeometry.js").default|import("./extent.js").Extent} geometryOrExtent The geometry or
     *     extent to fit the view to.
     * @param {FitOptions=} opt_options Options.
     * @api
     */
    fit(geometryOrExtent, opt_options) {
      const options = opt_options || {};
      let size = options.size;
      if (!size) {
        size = this.getSizeFromViewport_();
      }
      /** @type {import("./geom/SimpleGeometry.js").default} */
      let geometry;
      assert(Array.isArray(geometryOrExtent) || typeof /** @type {?} */ (geometryOrExtent).getSimplifiedGeometry === 'function',
        24); // Invalid extent or geometry provided as `geometry`
      if (Array.isArray(geometryOrExtent)) {
        assert(!isEmpty$1(geometryOrExtent),
          25); // Cannot fit empty extent provided as `geometry`
        geometry = fromExtent(geometryOrExtent);
      } else if (geometryOrExtent.getType() === GeometryType.CIRCLE) {
        geometryOrExtent = geometryOrExtent.getExtent();
        geometry = fromExtent(geometryOrExtent);
        geometry.rotate(this.getRotation(), getCenter(geometryOrExtent));
      } else {
        geometry = geometryOrExtent;
      }

      const padding = options.padding !== undefined ? options.padding : [0, 0, 0, 0];
      const nearest = options.nearest !== undefined ? options.nearest : false;
      let minResolution;
      if (options.minResolution !== undefined) {
        minResolution = options.minResolution;
      } else if (options.maxZoom !== undefined) {
        minResolution = this.getResolutionForZoom(options.maxZoom);
      } else {
        minResolution = 0;
      }
      const coords = geometry.getFlatCoordinates();

      // calculate rotated extent
      const rotation = this.getRotation();
      const cosAngle = Math.cos(-rotation);
      let sinAngle = Math.sin(-rotation);
      let minRotX = +Infinity;
      let minRotY = +Infinity;
      let maxRotX = -Infinity;
      let maxRotY = -Infinity;
      const stride = geometry.getStride();
      for (let i = 0, ii = coords.length; i < ii; i += stride) {
        const rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;
        const rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;
        minRotX = Math.min(minRotX, rotX);
        minRotY = Math.min(minRotY, rotY);
        maxRotX = Math.max(maxRotX, rotX);
        maxRotY = Math.max(maxRotY, rotY);
      }

      // calculate resolution
      let resolution = this.getResolutionForExtent(
        [minRotX, minRotY, maxRotX, maxRotY],
        [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]]);
      resolution = isNaN(resolution) ? minResolution :
        Math.max(resolution, minResolution);
      resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);

      // calculate center
      sinAngle = -sinAngle; // go back to original rotation
      let centerRotX = (minRotX + maxRotX) / 2;
      let centerRotY = (minRotY + maxRotY) / 2;
      centerRotX += (padding[1] - padding[3]) / 2 * resolution;
      centerRotY += (padding[0] - padding[2]) / 2 * resolution;
      const centerX = centerRotX * cosAngle - centerRotY * sinAngle;
      const centerY = centerRotY * cosAngle + centerRotX * sinAngle;
      const center = [centerX, centerY];
      const callback = options.callback ? options.callback : VOID;

      if (options.duration !== undefined) {
        this.animate_({
          resolution: resolution,
          center: this.getConstrainedCenter(center, resolution),
          duration: options.duration,
          easing: options.easing
        }, callback);
      } else {
        this.targetResolution_ = resolution;
        this.targetCenter_ = center;
        this.applyTargetState_(false, true);
        animationCallback(callback, true);
      }
    }

    /**
     * Center on coordinate and view position.
     * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("./size.js").Size} size Box pixel size.
     * @param {import("./pixel.js").Pixel} position Position on the view to center on.
     * @api
     */
    centerOn(coordinate, size, position) {
      // calculate rotated position
      const rotation = this.getRotation();
      const cosAngle = Math.cos(-rotation);
      let sinAngle = Math.sin(-rotation);
      let rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;
      let rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;
      const resolution = this.getResolution();
      rotX += (size[0] / 2 - position[0]) * resolution;
      rotY += (position[1] - size[1] / 2) * resolution;

      // go back to original angle
      sinAngle = -sinAngle; // go back to original rotation
      const centerX = rotX * cosAngle - rotY * sinAngle;
      const centerY = rotY * cosAngle + rotX * sinAngle;

      this.setCenter([centerX, centerY]);
    }

    /**
     * @return {boolean} Is defined.
     */
    isDef() {
      return !!this.getCenter() && this.getResolution() !== undefined;
    }

    /**
     * Adds relative coordinates to the center of the view. Any extent constraint will apply.
     * @param {import("./coordinate.js").Coordinate} deltaCoordinates Relative value to add.
     * @api
     */
    adjustCenter(deltaCoordinates) {
      const center = this.targetCenter_;
      this.setCenter([center[0] + deltaCoordinates[0], center[1] + deltaCoordinates[1]]);
    }

    /**
     * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution
     * constraint will apply.
     * @param {number} ratio The ratio to apply on the view resolution.
     * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
     * @observable
     * @api
     */
    adjustResolution(ratio, opt_anchor) {
      const isMoving = this.getAnimating() || this.getInteracting();
      const size = this.getSizeFromViewport_(this.getRotation());
      const newResolution = this.constraints_.resolution(this.targetResolution_ * ratio, 0, size, isMoving);

      if (opt_anchor !== undefined) {
        this.targetCenter_ = this.calculateCenterZoom(newResolution, opt_anchor);
      }

      this.targetResolution_ *= ratio;
      this.applyTargetState_();
    }

    /**
     * Adds a value to the view zoom level, optionally using an anchor. Any resolution
     * constraint will apply.
     * @param {number} delta Relative value to add to the zoom level.
     * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
     * @api
     */
    adjustZoom(delta, opt_anchor) {
      this.adjustResolution(Math.pow(this.zoomFactor_, -delta), opt_anchor);
    }

    /**
     * Adds a value to the view rotation, optionally using an anchor. Any rotation
     * constraint will apply.
     * @param {number} delta Relative value to add to the zoom rotation, in radians.
     * @param {import("./coordinate.js").Coordinate=} opt_anchor The rotation center.
     * @observable
     * @api
     */
    adjustRotation(delta, opt_anchor) {
      const isMoving = this.getAnimating() || this.getInteracting();
      const newRotation = this.constraints_.rotation(this.targetRotation_ + delta, isMoving);
      if (opt_anchor !== undefined) {
        this.targetCenter_ = this.calculateCenterRotate(newRotation, opt_anchor);
      }
      this.targetRotation_ += delta;
      this.applyTargetState_();
    }

    /**
     * Set the center of the current view. Any extent constraint will apply.
     * @param {import("./coordinate.js").Coordinate|undefined} center The center of the view.
     * @observable
     * @api
     */
    setCenter(center) {
      this.targetCenter_ = center;
      this.applyTargetState_();
    }

    /**
     * @param {ViewHint} hint Hint.
     * @param {number} delta Delta.
     * @return {number} New value.
     */
    setHint(hint, delta) {
      this.hints_[hint] += delta;
      this.changed();
      return this.hints_[hint];
    }

    /**
     * Set the resolution for this view. Any resolution constraint will apply.
     * @param {number|undefined} resolution The resolution of the view.
     * @observable
     * @api
     */
    setResolution(resolution) {
      this.targetResolution_ = resolution;
      this.applyTargetState_();
    }

    /**
     * Set the rotation for this view. Any rotation constraint will apply.
     * @param {number} rotation The rotation of the view in radians.
     * @observable
     * @api
     */
    setRotation(rotation) {
      this.targetRotation_ = rotation;
      this.applyTargetState_();
    }

    /**
     * Zoom to a specific zoom level. Any resolution constrain will apply.
     * @param {number} zoom Zoom level.
     * @api
     */
    setZoom(zoom) {
      this.setResolution(this.getResolutionForZoom(zoom));
    }

    /**
     * Recompute rotation/resolution/center based on target values.
     * Note: we have to compute rotation first, then resolution and center considering that
     * parameters can influence one another in case a view extent constraint is present.
     * @param {boolean=} opt_doNotCancelAnims Do not cancel animations.
     * @param {boolean=} opt_forceMoving Apply constraints as if the view is moving.
     * @private
     */
    applyTargetState_(opt_doNotCancelAnims, opt_forceMoving) {
      const isMoving = this.getAnimating() || this.getInteracting() || opt_forceMoving;

      // compute rotation
      const newRotation = this.constraints_.rotation(this.targetRotation_, isMoving);
      const size = this.getSizeFromViewport_(newRotation);
      const newResolution = this.constraints_.resolution(this.targetResolution_, 0, size, isMoving);
      const newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, isMoving);

      if (this.get(ViewProperty.ROTATION) !== newRotation) {
        this.set(ViewProperty.ROTATION, newRotation);
      }
      if (this.get(ViewProperty.RESOLUTION) !== newResolution) {
        this.set(ViewProperty.RESOLUTION, newResolution);
      }
      if (!this.get(ViewProperty.CENTER) || !equals$2(this.get(ViewProperty.CENTER), newCenter)) {
        this.set(ViewProperty.CENTER, newCenter);
      }

      if (this.getAnimating() && !opt_doNotCancelAnims) {
        this.cancelAnimations();
      }
    }

    /**
     * If any constraints need to be applied, an animation will be triggered.
     * This is typically done on interaction end.
     * Note: calling this with a duration of 0 will apply the constrained values straight away,
     * without animation.
     * @param {number=} opt_duration The animation duration in ms.
     * @param {number=} opt_resolutionDirection Which direction to zoom.
     * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
     */
    resolveConstraints(opt_duration, opt_resolutionDirection, opt_anchor) {
      const duration = opt_duration !== undefined ? opt_duration : 200;
      const direction = opt_resolutionDirection || 0;

      const newRotation = this.constraints_.rotation(this.targetRotation_);
      const size = this.getSizeFromViewport_(newRotation);
      const newResolution = this.constraints_.resolution(this.targetResolution_, direction, size);
      const newCenter = this.constraints_.center(this.targetCenter_, newResolution, size);

      if (duration === 0) {
        this.targetResolution_ = newResolution;
        this.targetRotation_ = newRotation;
        this.targetCenter_ = newCenter;
        this.applyTargetState_();
        return;
      }

      if (this.getResolution() !== newResolution ||
        this.getRotation() !== newRotation ||
        !this.getCenter() ||
        !equals$2(this.getCenter(), newCenter)) {

        if (this.getAnimating()) {
          this.cancelAnimations();
        }

        this.animate_({
          rotation: newRotation,
          center: newCenter,
          resolution: newResolution,
          duration: duration,
          easing: easeOut,
          anchor: opt_anchor
        });
      }
    }

    /**
     * Notify the View that an interaction has started.
     * The view state will be resolved to a stable one if needed
     * (depending on its constraints).
     * @api
     */
    beginInteraction() {
      this.resolveConstraints(0);

      this.setHint(ViewHint.INTERACTING, 1);
    }

    /**
     * Notify the View that an interaction has ended. The view state will be resolved
     * to a stable one if needed (depending on its constraints).
     * @param {number=} opt_duration Animation duration in ms.
     * @param {number=} opt_resolutionDirection Which direction to zoom.
     * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
     * @api
     */
    endInteraction(opt_duration, opt_resolutionDirection, opt_anchor) {
      this.setHint(ViewHint.INTERACTING, -1);

      this.resolveConstraints(opt_duration, opt_resolutionDirection, opt_anchor);
    }

    /**
     * Get a valid position for the view center according to the current constraints.
     * @param {import("./coordinate.js").Coordinate|undefined} targetCenter Target center position.
     * @param {number=} opt_targetResolution Target resolution. If not supplied, the current one will be used.
     * This is useful to guess a valid center position at a different zoom level.
     * @return {import("./coordinate.js").Coordinate|undefined} Valid center position.
     */
    getConstrainedCenter(targetCenter, opt_targetResolution) {
      const size = this.getSizeFromViewport_(this.getRotation());
      return this.constraints_.center(targetCenter, opt_targetResolution || this.getResolution(), size);
    }

    /**
     * Get a valid zoom level according to the current view constraints.
     * @param {number|undefined} targetZoom Target zoom.
     * @param {number=} opt_direction Direction. Default is `0`. Specify `-1` or `1` to return
     * the available value respectively lower or greater than the target one. Leaving `0` will simply choose
     * the nearest available value.
     * @return {number|undefined} Valid zoom level.
     */
    getConstrainedZoom(targetZoom, opt_direction) {
      const targetRes = this.getResolutionForZoom(targetZoom);
      return this.getZoomForResolution(this.getConstrainedResolution(targetRes));
    }

    /**
     * Get a valid resolution according to the current view constraints.
     * @param {number|undefined} targetResolution Target resolution.
     * @param {number=} opt_direction Direction. Default is `0`. Specify `-1` or `1` to return
     * the available value respectively lower or greater than the target one. Leaving `0` will simply choose
     * the nearest available value.
     * @return {number|undefined} Valid resolution.
     */
    getConstrainedResolution(targetResolution, opt_direction) {
      const direction = opt_direction || 0;
      const size = this.getSizeFromViewport_(this.getRotation());

      return this.constraints_.resolution(targetResolution, direction, size);
    }
  }


  /**
   * @param {Function} callback Callback.
   * @param {*} returnValue Return value.
   */
  function animationCallback(callback, returnValue) {
    setTimeout(function() {
      callback(returnValue);
    }, 0);
  }


  /**
   * @param {ViewOptions} options View options.
   * @return {import("./centerconstraint.js").Type} The constraint.
   */
  function createCenterConstraint(options) {
    if (options.extent !== undefined) {
      const smooth = options.smoothExtentConstraint !== undefined ? options.smoothExtentConstraint : true;
      return createExtent(options.extent, options.constrainOnlyCenter, smooth);
    }

    const projection = createProjection(options.projection, 'EPSG:3857');
    if (options.multiWorld !== true && projection.isGlobal()) {
      const extent = projection.getExtent().slice();
      extent[0] = -Infinity;
      extent[2] = Infinity;
      return createExtent(extent, false, false);
    }

    return none;
  }


  /**
   * @param {ViewOptions} options View options.
   * @return {{constraint: import("./resolutionconstraint.js").Type, maxResolution: number,
   *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.
   */
  function createResolutionConstraint(options) {
    let resolutionConstraint;
    let maxResolution;
    let minResolution;

    // TODO: move these to be ol constants
    // see https://github.com/openlayers/openlayers/issues/2076
    const defaultMaxZoom = 28;
    const defaultZoomFactor = 2;

    let minZoom = options.minZoom !== undefined ?
      options.minZoom : DEFAULT_MIN_ZOOM;

    let maxZoom = options.maxZoom !== undefined ?
      options.maxZoom : defaultMaxZoom;

    const zoomFactor = options.zoomFactor !== undefined ?
      options.zoomFactor : defaultZoomFactor;

    const multiWorld = options.multiWorld !== undefined ?
      options.multiWorld : false;

    const smooth =
        options.smoothResolutionConstraint !== undefined ? options.smoothResolutionConstraint : true;

    if (options.resolutions !== undefined) {
      const resolutions = options.resolutions;
      maxResolution = resolutions[minZoom];
      minResolution = resolutions[maxZoom] !== undefined ?
        resolutions[maxZoom] : resolutions[resolutions.length - 1];

      if (options.constrainResolution) {
        resolutionConstraint = createSnapToResolutions(resolutions, smooth,
          !options.constrainOnlyCenter && options.extent);
      } else {
        resolutionConstraint = createMinMaxResolution(maxResolution, minResolution, smooth,
          !options.constrainOnlyCenter && options.extent);
      }
    } else {
      // calculate the default min and max resolution
      const projection = createProjection(options.projection, 'EPSG:3857');
      const extent = projection.getExtent();
      const size = !extent ?
        // use an extent that can fit the whole world if need be
        360 * METERS_PER_UNIT[Units.DEGREES] /
              projection.getMetersPerUnit() :
        Math.max(getWidth(extent), getHeight(extent));

      const defaultMaxResolution = size / DEFAULT_TILE_SIZE / Math.pow(
        defaultZoomFactor, DEFAULT_MIN_ZOOM);

      const defaultMinResolution = defaultMaxResolution / Math.pow(
        defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);

      // user provided maxResolution takes precedence
      maxResolution = options.maxResolution;
      if (maxResolution !== undefined) {
        minZoom = 0;
      } else {
        maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);
      }

      // user provided minResolution takes precedence
      minResolution = options.minResolution;
      if (minResolution === undefined) {
        if (options.maxZoom !== undefined) {
          if (options.maxResolution !== undefined) {
            minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);
          } else {
            minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);
          }
        } else {
          minResolution = defaultMinResolution;
        }
      }

      // given discrete zoom levels, minResolution may be different than provided
      maxZoom = minZoom + Math.floor(
        Math.log(maxResolution / minResolution) / Math.log(zoomFactor));
      minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);

      if (options.constrainResolution) {
        resolutionConstraint = createSnapToPower(
          zoomFactor, maxResolution, minResolution, smooth,
          !options.constrainOnlyCenter && options.extent);
      } else {
        let constrainOnlyCenter = options.constrainOnlyCenter;
        let extent = options.extent;
        if (!multiWorld && !extent && projection.isGlobal()) {
          constrainOnlyCenter = false;
          extent = projection.getExtent();
        }
        resolutionConstraint = createMinMaxResolution(maxResolution, minResolution, smooth,
          !constrainOnlyCenter && extent);
      }
    }
    return {constraint: resolutionConstraint, maxResolution: maxResolution,
      minResolution: minResolution, minZoom: minZoom, zoomFactor: zoomFactor};
  }


  /**
   * @param {ViewOptions} options View options.
   * @return {import("./rotationconstraint.js").Type} Rotation constraint.
   */
  function createRotationConstraint(options) {
    const enableRotation = options.enableRotation !== undefined ?
      options.enableRotation : true;
    if (enableRotation) {
      const constrainRotation = options.constrainRotation;
      if (constrainRotation === undefined || constrainRotation === true) {
        return createSnapToZero();
      } else if (constrainRotation === false) {
        return none$1;
      } else if (typeof constrainRotation === 'number') {
        return createSnapToN(constrainRotation);
      } else {
        return none$1;
      }
    } else {
      return disable;
    }
  }


  /**
   * Determine if an animation involves no view change.
   * @param {Animation} animation The animation.
   * @return {boolean} The animation involves no view change.
   */
  function isNoopAnimation(animation) {
    if (animation.sourceCenter && animation.targetCenter) {
      if (!equals$2(animation.sourceCenter, animation.targetCenter)) {
        return false;
      }
    }
    if (animation.sourceResolution !== animation.targetResolution) {
      return false;
    }
    if (animation.sourceRotation !== animation.targetRotation) {
      return false;
    }
    return true;
  }

  /**
   * @module ol/layer/Group
   */


  /**
   * @typedef {Object} Options
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {Array<import("./Base.js").default>|import("../Collection.js").default<import("./Base.js").default>} [layers] Child layers.
   */


  /**
   * @enum {string}
   * @private
   */
  const Property$4 = {
    LAYERS: 'layers'
  };


  /**
   * @classdesc
   * A {@link module:ol/Collection~Collection} of layers that are handled together.
   *
   * A generic `change` event is triggered when the group/Collection changes.
   *
   * @api
   */
  class LayerGroup extends BaseLayer {
    /**
     * @param {Options=} opt_options Layer options.
     */
    constructor(opt_options) {

      const options = opt_options || {};
      const baseOptions = /** @type {Options} */ (assign({}, options));
      delete baseOptions.layers;

      let layers = options.layers;

      super(baseOptions);

      /**
       * @private
       * @type {Array<import("../events.js").EventsKey>}
       */
      this.layersListenerKeys_ = [];

      /**
       * @private
       * @type {Object<string, Array<import("../events.js").EventsKey>>}
       */
      this.listenerKeys_ = {};

      listen(this,
        getChangeEventType(Property$4.LAYERS),
        this.handleLayersChanged_, this);

      if (layers) {
        if (Array.isArray(layers)) {
          layers = new Collection(layers.slice(), {unique: true});
        } else {
          assert(typeof /** @type {?} */ (layers).getArray === 'function',
            43); // Expected `layers` to be an array or a `Collection`
        }
      } else {
        layers = new Collection(undefined, {unique: true});
      }

      this.setLayers(layers);

    }

    /**
     * @private
     */
    handleLayerChange_() {
      this.changed();
    }

    /**
     * @private
     */
    handleLayersChanged_() {
      this.layersListenerKeys_.forEach(unlistenByKey);
      this.layersListenerKeys_.length = 0;

      const layers = this.getLayers();
      this.layersListenerKeys_.push(
        listen(layers, CollectionEventType.ADD, this.handleLayersAdd_, this),
        listen(layers, CollectionEventType.REMOVE, this.handleLayersRemove_, this)
      );

      for (const id in this.listenerKeys_) {
        this.listenerKeys_[id].forEach(unlistenByKey);
      }
      clear(this.listenerKeys_);

      const layersArray = layers.getArray();
      for (let i = 0, ii = layersArray.length; i < ii; i++) {
        const layer = layersArray[i];
        this.listenerKeys_[getUid(layer)] = [
          listen(layer, ObjectEventType.PROPERTYCHANGE, this.handleLayerChange_, this),
          listen(layer, EventType.CHANGE, this.handleLayerChange_, this)
        ];
      }

      this.changed();
    }

    /**
     * @param {import("../Collection.js").CollectionEvent} collectionEvent CollectionEvent.
     * @private
     */
    handleLayersAdd_(collectionEvent) {
      const layer = /** @type {import("./Base.js").default} */ (collectionEvent.element);
      this.listenerKeys_[getUid(layer)] = [
        listen(layer, ObjectEventType.PROPERTYCHANGE, this.handleLayerChange_, this),
        listen(layer, EventType.CHANGE, this.handleLayerChange_, this)
      ];
      this.changed();
    }

    /**
     * @param {import("../Collection.js").CollectionEvent} collectionEvent CollectionEvent.
     * @private
     */
    handleLayersRemove_(collectionEvent) {
      const layer = /** @type {import("./Base.js").default} */ (collectionEvent.element);
      const key = getUid(layer);
      this.listenerKeys_[key].forEach(unlistenByKey);
      delete this.listenerKeys_[key];
      this.changed();
    }

    /**
     * Returns the {@link module:ol/Collection collection} of {@link module:ol/layer/Layer~Layer layers}
     * in this group.
     * @return {!import("../Collection.js").default<import("./Base.js").default>} Collection of
     *   {@link module:ol/layer/Base layers} that are part of this group.
     * @observable
     * @api
     */
    getLayers() {
      return (
        /** @type {!import("../Collection.js").default<import("./Base.js").default>} */ (this.get(Property$4.LAYERS))
      );
    }

    /**
     * Set the {@link module:ol/Collection collection} of {@link module:ol/layer/Layer~Layer layers}
     * in this group.
     * @param {!import("../Collection.js").default<import("./Base.js").default>} layers Collection of
     *   {@link module:ol/layer/Base layers} that are part of this group.
     * @observable
     * @api
     */
    setLayers(layers) {
      this.set(Property$4.LAYERS, layers);
    }

    /**
     * @inheritDoc
     */
    getLayersArray(opt_array) {
      const array = opt_array !== undefined ? opt_array : [];
      this.getLayers().forEach(function(layer) {
        layer.getLayersArray(array);
      });
      return array;
    }

    /**
     * @inheritDoc
     */
    getLayerStatesArray(opt_states) {
      const states = opt_states !== undefined ? opt_states : [];

      const pos = states.length;

      this.getLayers().forEach(function(layer) {
        layer.getLayerStatesArray(states);
      });

      const ownLayerState = this.getLayerState();
      for (let i = pos, ii = states.length; i < ii; i++) {
        const layerState = states[i];
        layerState.opacity *= ownLayerState.opacity;
        layerState.visible = layerState.visible && ownLayerState.visible;
        layerState.maxResolution = Math.min(
          layerState.maxResolution, ownLayerState.maxResolution);
        layerState.minResolution = Math.max(
          layerState.minResolution, ownLayerState.minResolution);
        if (ownLayerState.extent !== undefined) {
          if (layerState.extent !== undefined) {
            layerState.extent = getIntersection(layerState.extent, ownLayerState.extent);
          } else {
            layerState.extent = ownLayerState.extent;
          }
        }
      }

      return states;
    }

    /**
     * @inheritDoc
     */
    getSourceState() {
      return SourceState.READY;
    }
  }

  /**
   * @module ol/size
   */


  /**
   * An array of numbers representing a size: `[width, height]`.
   * @typedef {Array<number>} Size
   * @api
   */


  /**
   * Returns a buffered size.
   * @param {Size} size Size.
   * @param {number} num The amount by which to buffer.
   * @param {Size=} opt_size Optional reusable size array.
   * @return {Size} The buffered size.
   */
  function buffer$1(size, num, opt_size) {
    if (opt_size === undefined) {
      opt_size = [0, 0];
    }
    opt_size[0] = size[0] + 2 * num;
    opt_size[1] = size[1] + 2 * num;
    return opt_size;
  }


  /**
   * Determines if a size has a positive area.
   * @param {Size} size The size to test.
   * @return {boolean} The size has a positive area.
   */
  function hasArea(size) {
    return size[0] > 0 && size[1] > 0;
  }


  /**
   * Returns a size scaled by a ratio. The result will be an array of integers.
   * @param {Size} size Size.
   * @param {number} ratio Ratio.
   * @param {Size=} opt_size Optional reusable size array.
   * @return {Size} The scaled size.
   */
  function scale$3(size, ratio, opt_size) {
    if (opt_size === undefined) {
      opt_size = [0, 0];
    }
    opt_size[0] = (size[0] * ratio + 0.5) | 0;
    opt_size[1] = (size[1] * ratio + 0.5) | 0;
    return opt_size;
  }


  /**
   * Returns an `Size` array for the passed in number (meaning: square) or
   * `Size` array.
   * (meaning: non-square),
   * @param {number|Size} size Width and height.
   * @param {Size=} opt_size Optional reusable size array.
   * @return {Size} Size.
   * @api
   */
  function toSize(size, opt_size) {
    if (Array.isArray(size)) {
      return size;
    } else {
      if (opt_size === undefined) {
        opt_size = [size, size];
      } else {
        opt_size[0] = opt_size[1] = /** @type {number} */ (size);
      }
      return opt_size;
    }
  }

  /**
   * @module ol/PluggableMap
   */


  /**
   * State of the current frame. Only `pixelRatio`, `time` and `viewState` should
   * be used in applications.
   * @typedef {Object} FrameState
   * @property {number} pixelRatio The pixel ratio of the frame.
   * @property {number} time The time when rendering of the frame was requested.
   * @property {import("./View.js").State} viewState The state of the current view.
   * @property {boolean} animate
   * @property {import("./transform.js").Transform} coordinateToPixelTransform
   * @property {null|import("./extent.js").Extent} extent
   * @property {Array<DeclutterItems>} declutterItems
   * @property {import("./coordinate.js").Coordinate} focus
   * @property {number} index
   * @property {Array<import("./layer/Layer.js").State>} layerStatesArray
   * @property {number} layerIndex
   * @property {import("./transform.js").Transform} pixelToCoordinateTransform
   * @property {Array<PostRenderFunction>} postRenderFunctions
   * @property {import("./size.js").Size} size
   * @property {!Object<string, boolean>} skippedFeatureUids
   * @property {TileQueue} tileQueue
   * @property {!Object<string, Object<string, boolean>>} usedTiles
   * @property {Array<number>} viewHints
   * @property {!Object<string, Object<string, boolean>>} wantedTiles
   */


  /**
   * @typedef {Object} DeclutterItems
   * @property {Array<*>} items Declutter items of an executor.
   * @property {number} opacity Layer opacity.
   */


  /**
   * @typedef {function(PluggableMap, ?FrameState): any} PostRenderFunction
   */


  /**
   * @typedef {Object} AtPixelOptions
   * @property {undefined|function(import("./layer/Layer.js").default): boolean} [layerFilter] Layer filter
   * function. The filter function will receive one argument, the
   * {@link module:ol/layer/Layer layer-candidate} and it should return a boolean value.
   * Only layers which are visible and for which this function returns `true`
   * will be tested for features. By default, all visible layers will be tested.
   * @property {number} [hitTolerance=0] Hit-detection tolerance in pixels. Pixels
   * inside the radius around the given position will be checked for features.
   */


  /**
   * @typedef {Object} MapOptionsInternal
   * @property {Collection<import("./control/Control.js").default>} [controls]
   * @property {Collection<import("./interaction/Interaction.js").default>} [interactions]
   * @property {HTMLElement|Document} keyboardEventTarget
   * @property {Collection<import("./Overlay.js").default>} overlays
   * @property {Object<string, *>} values
   */


  /**
   * Object literal with config options for the map.
   * @typedef {Object} MapOptions
   * @property {Collection<import("./control/Control.js").default>|Array<import("./control/Control.js").default>} [controls]
   * Controls initially added to the map. If not specified,
   * {@link module:ol/control~defaults} is used.
   * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between
   * physical pixels and device-independent pixels (dips) on the device.
   * @property {Collection<import("./interaction/Interaction.js").default>|Array<import("./interaction/Interaction.js").default>} [interactions]
   * Interactions that are initially added to the map. If not specified,
   * {@link module:ol/interaction~defaults} is used.
   * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to
   * listen to keyboard events on. This determines when the `KeyboardPan` and
   * `KeyboardZoom` interactions trigger. For example, if this option is set to
   * `document` the keyboard interactions will always trigger. If this option is
   * not specified, the element the library listens to keyboard events on is the
   * map target (i.e. the user-provided div for the map). If this is not
   * `document`, the target element needs to be focused for key events to be
   * emitted, requiring that the target element has a `tabindex` attribute.
   * @property {Array<import("./layer/Base.js").default>|Collection<import("./layer/Base.js").default>|LayerGroup} [layers]
   * Layers. If this is not defined, a map with no layers will be rendered. Note
   * that layers are rendered in the order supplied, so if you want, for example,
   * a vector layer to appear on top of a tile layer, it must come after the tile
   * layer.
   * @property {number} [maxTilesLoading=16] Maximum number tiles to load
   * simultaneously.
   * @property {number} [moveTolerance=1] The minimum distance in pixels the
   * cursor must move to be detected as a map move event instead of a click.
   * Increasing this value can make it easier to click on the map.
   * @property {Collection<import("./Overlay.js").default>|Array<import("./Overlay.js").default>} [overlays]
   * Overlays initially added to the map. By default, no overlays are added.
   * @property {HTMLElement|string} [target] The container for the map, either the
   * element itself or the `id` of the element. If not specified at construction
   * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be
   * rendered.
   * @property {View} [view] The map's view.  No layer sources will be
   * fetched unless this is specified at construction time or through
   * {@link module:ol/Map~Map#setView}.
   */


  /**
   * @fires import("./MapBrowserEvent.js").MapBrowserEvent
   * @fires import("./MapEvent.js").MapEvent
   * @fires import("./render/Event.js").default#precompose
   * @fires import("./render/Event.js").default#postcompose
   * @fires import("./render/Event.js").default#rendercomplete
   * @api
   */
  class PluggableMap extends BaseObject {

    /**
     * @param {MapOptions} options Map options.
     */
    constructor(options) {

      super();

      const optionsInternal = createOptionsInternal(options);

      /**
       * @type {number}
       * @private
       */
      this.maxTilesLoading_ = options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;

      /**
       * @private
       * @type {number}
       */
      this.pixelRatio_ = options.pixelRatio !== undefined ?
        options.pixelRatio : DEVICE_PIXEL_RATIO;

      /**
       * @private
       * @type {number|undefined}
       */
      this.animationDelayKey_;

      /**
       * @private
       */
      this.animationDelay_ = function() {
        this.animationDelayKey_ = undefined;
        this.renderFrame_(Date.now());
      }.bind(this);

      /**
       * @private
       * @type {import("./transform.js").Transform}
       */
      this.coordinateToPixelTransform_ = create();

      /**
       * @private
       * @type {import("./transform.js").Transform}
       */
      this.pixelToCoordinateTransform_ = create();

      /**
       * @private
       * @type {number}
       */
      this.frameIndex_ = 0;

      /**
       * @private
       * @type {?FrameState}
       */
      this.frameState_ = null;

      /**
       * The extent at the previous 'moveend' event.
       * @private
       * @type {import("./extent.js").Extent}
       */
      this.previousExtent_ = null;

      /**
       * @private
       * @type {?import("./events.js").EventsKey}
       */
      this.viewPropertyListenerKey_ = null;

      /**
       * @private
       * @type {?import("./events.js").EventsKey}
       */
      this.viewChangeListenerKey_ = null;

      /**
       * @private
       * @type {Array<import("./events.js").EventsKey>}
       */
      this.layerGroupPropertyListenerKeys_ = null;

      /**
       * @private
       * @type {!HTMLElement}
       */
      this.viewport_ = document.createElement('div');
      this.viewport_.className = 'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');
      this.viewport_.style.position = 'relative';
      this.viewport_.style.overflow = 'hidden';
      this.viewport_.style.width = '100%';
      this.viewport_.style.height = '100%';
      // prevent page zoom on IE >= 10 browsers
      this.viewport_.style.msTouchAction = 'none';
      this.viewport_.style.touchAction = 'none';

      /**
       * @private
       * @type {!HTMLElement}
       */
      this.overlayContainer_ = document.createElement('div');
      this.overlayContainer_.style.position = 'absolute';
      this.overlayContainer_.style.zIndex = '0';
      this.overlayContainer_.style.width = '100%';
      this.overlayContainer_.style.height = '100%';
      this.overlayContainer_.className = 'ol-overlaycontainer';
      this.viewport_.appendChild(this.overlayContainer_);

      /**
       * @private
       * @type {!HTMLElement}
       */
      this.overlayContainerStopEvent_ = document.createElement('div');
      this.overlayContainerStopEvent_.style.position = 'absolute';
      this.overlayContainerStopEvent_.style.zIndex = '0';
      this.overlayContainerStopEvent_.style.width = '100%';
      this.overlayContainerStopEvent_.style.height = '100%';
      this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';
      this.viewport_.appendChild(this.overlayContainerStopEvent_);

      /**
       * @private
       * @type {MapBrowserEventHandler}
       */
      this.mapBrowserEventHandler_ = new MapBrowserEventHandler(this, options.moveTolerance);
      for (const key in MapBrowserEventType) {
        listen(this.mapBrowserEventHandler_, MapBrowserEventType[key],
          this.handleMapBrowserEvent, this);
      }

      /**
       * @private
       * @type {HTMLElement|Document}
       */
      this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;

      /**
       * @private
       * @type {Array<import("./events.js").EventsKey>}
       */
      this.keyHandlerKeys_ = null;

      listen(this.viewport_, EventType.CONTEXTMENU, this.handleBrowserEvent, this);
      listen(this.viewport_, EventType.WHEEL, this.handleBrowserEvent, this);
      listen(this.viewport_, EventType.MOUSEWHEEL, this.handleBrowserEvent, this);

      /**
       * @type {Collection<import("./control/Control.js").default>}
       * @protected
       */
      this.controls = optionsInternal.controls || new Collection();

      /**
       * @type {Collection<import("./interaction/Interaction.js").default>}
       * @protected
       */
      this.interactions = optionsInternal.interactions || new Collection();

      /**
       * @type {import("./events/Target.js").default}
       */
      this.labelCache_ = null;

      /**
       * @type {import("./events.js").EventsKey}
       */
      this.labelCacheListenerKey_;

      /**
       * @type {Collection<import("./Overlay.js").default>}
       * @private
       */
      this.overlays_ = optionsInternal.overlays;

      /**
       * A lookup of overlays by id.
       * @private
       * @type {Object<string, import("./Overlay.js").default>}
       */
      this.overlayIdIndex_ = {};

      /**
       * @type {import("./renderer/Map.js").default}
       * @private
       */
      this.renderer_ = null;

      /**
       * @type {function(Event): void|undefined}
       * @private
       */
      this.handleResize_;

      /**
       * @private
       * @type {import("./coordinate.js").Coordinate}
       */
      this.focus_ = null;

      /**
       * @private
       * @type {!Array<PostRenderFunction>}
       */
      this.postRenderFunctions_ = [];

      /**
       * @private
       * @type {TileQueue}
       */
      this.tileQueue_ = new TileQueue(
        this.getTilePriority.bind(this),
        this.handleTileChange_.bind(this));

      /**
       * Uids of features to skip at rendering time.
       * @type {Object<string, boolean>}
       * @private
       */
      this.skippedFeatureUids_ = {};

      listen(
        this, getChangeEventType(MapProperty.LAYERGROUP),
        this.handleLayerGroupChanged_, this);
      listen(this, getChangeEventType(MapProperty.VIEW),
        this.handleViewChanged_, this);
      listen(this, getChangeEventType(MapProperty.SIZE),
        this.handleSizeChanged_, this);
      listen(this, getChangeEventType(MapProperty.TARGET),
        this.handleTargetChanged_, this);

      // setProperties will trigger the rendering of the map if the map
      // is "defined" already.
      this.setProperties(optionsInternal.values);

      this.controls.forEach(
        /**
         * @param {import("./control/Control.js").default} control Control.
         * @this {PluggableMap}
         */
        (function(control) {
          control.setMap(this);
        }).bind(this));

      listen(this.controls, CollectionEventType.ADD,
        /**
         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
         */
        function(event) {
          event.element.setMap(this);
        }, this);

      listen(this.controls, CollectionEventType.REMOVE,
        /**
         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
         */
        function(event) {
          event.element.setMap(null);
        }, this);

      this.interactions.forEach(
        /**
         * @param {import("./interaction/Interaction.js").default} interaction Interaction.
         * @this {PluggableMap}
         */
        (function(interaction) {
          interaction.setMap(this);
        }).bind(this));

      listen(this.interactions, CollectionEventType.ADD,
        /**
         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
         */
        function(event) {
          event.element.setMap(this);
        }, this);

      listen(this.interactions, CollectionEventType.REMOVE,
        /**
         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
         */
        function(event) {
          event.element.setMap(null);
        }, this);

      this.overlays_.forEach(this.addOverlayInternal_.bind(this));

      listen(this.overlays_, CollectionEventType.ADD,
        /**
         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
         */
        function(event) {
          this.addOverlayInternal_(/** @type {import("./Overlay.js").default} */ (event.element));
        }, this);

      listen(this.overlays_, CollectionEventType.REMOVE,
        /**
         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
         */
        function(event) {
          const overlay = /** @type {import("./Overlay.js").default} */ (event.element);
          const id = overlay.getId();
          if (id !== undefined) {
            delete this.overlayIdIndex_[id.toString()];
          }
          event.element.setMap(null);
        }, this);

    }

    /**
     * @abstract
     * @return {import("./renderer/Map.js").default} The map renderer
     */
    createRenderer() {
      throw new Error('Use a map type that has a createRenderer method');
    }

    /**
     * Add the given control to the map.
     * @param {import("./control/Control.js").default} control Control.
     * @api
     */
    addControl(control) {
      this.getControls().push(control);
    }

    /**
     * Add the given interaction to the map. If you want to add an interaction
     * at another point of the collection use `getInteraction()` and the methods
     * available on {@link module:ol/Collection~Collection}. This can be used to
     * stop the event propagation from the handleEvent function. The interactions
     * get to handle the events in the reverse order of this collection.
     * @param {import("./interaction/Interaction.js").default} interaction Interaction to add.
     * @api
     */
    addInteraction(interaction) {
      this.getInteractions().push(interaction);
    }

    /**
     * Adds the given layer to the top of this map. If you want to add a layer
     * elsewhere in the stack, use `getLayers()` and the methods available on
     * {@link module:ol/Collection~Collection}.
     * @param {import("./layer/Base.js").default} layer Layer.
     * @api
     */
    addLayer(layer) {
      const layers = this.getLayerGroup().getLayers();
      layers.push(layer);
    }

    /**
     * Add the given overlay to the map.
     * @param {import("./Overlay.js").default} overlay Overlay.
     * @api
     */
    addOverlay(overlay) {
      this.getOverlays().push(overlay);
    }

    /**
     * This deals with map's overlay collection changes.
     * @param {import("./Overlay.js").default} overlay Overlay.
     * @private
     */
    addOverlayInternal_(overlay) {
      const id = overlay.getId();
      if (id !== undefined) {
        this.overlayIdIndex_[id.toString()] = overlay;
      }
      overlay.setMap(this);
    }

    /**
     *
     * @inheritDoc
     */
    disposeInternal() {
      this.mapBrowserEventHandler_.dispose();
      unlisten(this.viewport_, EventType.CONTEXTMENU, this.handleBrowserEvent, this);
      unlisten(this.viewport_, EventType.WHEEL, this.handleBrowserEvent, this);
      unlisten(this.viewport_, EventType.MOUSEWHEEL, this.handleBrowserEvent, this);
      if (this.handleResize_ !== undefined) {
        removeEventListener(EventType.RESIZE, this.handleResize_, false);
        this.handleResize_ = undefined;
      }
      this.setTarget(null);
      super.disposeInternal();
    }

    /**
     * Detect features that intersect a pixel on the viewport, and execute a
     * callback with each intersecting feature. Layers included in the detection can
     * be configured through the `layerFilter` option in `opt_options`.
     * @param {import("./pixel.js").Pixel} pixel Pixel.
     * @param {function(this: S, import("./Feature.js").FeatureLike,
     *     import("./layer/Layer.js").default): T} callback Feature callback. The callback will be
     *     called with two arguments. The first argument is one
     *     {@link module:ol/Feature feature} or
     *     {@link module:ol/render/Feature render feature} at the pixel, the second is
     *     the {@link module:ol/layer/Layer layer} of the feature and will be null for
     *     unmanaged layers. To stop detection, callback functions can return a
     *     truthy value.
     * @param {AtPixelOptions=} opt_options Optional options.
     * @return {T|undefined} Callback result, i.e. the return value of last
     * callback execution, or the first truthy callback return value.
     * @template S,T
     * @api
     */
    forEachFeatureAtPixel(pixel, callback, opt_options) {
      if (!this.frameState_) {
        return;
      }
      const coordinate = this.getCoordinateFromPixel(pixel);
      opt_options = opt_options !== undefined ? opt_options :
        /** @type {AtPixelOptions} */ ({});
      const hitTolerance = opt_options.hitTolerance !== undefined ?
        opt_options.hitTolerance * this.frameState_.pixelRatio : 0;
      const layerFilter = opt_options.layerFilter !== undefined ?
        opt_options.layerFilter : TRUE;
      return this.renderer_.forEachFeatureAtCoordinate(
        coordinate, this.frameState_, hitTolerance, callback, null,
        layerFilter, null);
    }

    /**
     * Get all features that intersect a pixel on the viewport.
     * @param {import("./pixel.js").Pixel} pixel Pixel.
     * @param {AtPixelOptions=} opt_options Optional options.
     * @return {Array<import("./Feature.js").FeatureLike>} The detected features or
     * `null` if none were found.
     * @api
     */
    getFeaturesAtPixel(pixel, opt_options) {
      let features = null;
      this.forEachFeatureAtPixel(pixel, function(feature) {
        if (!features) {
          features = [];
        }
        features.push(feature);
      }, opt_options);
      return features;
    }

    /**
     * Detect layers that have a color value at a pixel on the viewport, and
     * execute a callback with each matching layer. Layers included in the
     * detection can be configured through `opt_layerFilter`.
     * @param {import("./pixel.js").Pixel} pixel Pixel.
     * @param {function(this: S, import("./layer/Layer.js").default, (Uint8ClampedArray|Uint8Array)): T} callback
     *     Layer callback. This callback will receive two arguments: first is the
     *     {@link module:ol/layer/Layer layer}, second argument is an array representing
     *     [R, G, B, A] pixel values (0 - 255) and will be `null` for layer types
     *     that do not currently support this argument. To stop detection, callback
     *     functions can return a truthy value.
     * @param {AtPixelOptions=} opt_options Configuration options.
     * @return {T|undefined} Callback result, i.e. the return value of last
     * callback execution, or the first truthy callback return value.
     * @template S,T
     * @api
     */
    forEachLayerAtPixel(pixel, callback, opt_options) {
      if (!this.frameState_) {
        return;
      }
      const options = opt_options || /** @type {AtPixelOptions} */ ({});
      const hitTolerance = options.hitTolerance !== undefined ?
        opt_options.hitTolerance * this.frameState_.pixelRatio : 0;
      const layerFilter = options.layerFilter || TRUE;
      return this.renderer_.forEachLayerAtPixel(pixel, this.frameState_, hitTolerance, callback, layerFilter);
    }

    /**
     * Detect if features intersect a pixel on the viewport. Layers included in the
     * detection can be configured through `opt_layerFilter`.
     * @param {import("./pixel.js").Pixel} pixel Pixel.
     * @param {AtPixelOptions=} opt_options Optional options.
     * @return {boolean} Is there a feature at the given pixel?
     * @api
     */
    hasFeatureAtPixel(pixel, opt_options) {
      if (!this.frameState_) {
        return false;
      }
      const coordinate = this.getCoordinateFromPixel(pixel);
      opt_options = opt_options !== undefined ? opt_options :
        /** @type {AtPixelOptions} */ ({});
      const layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;
      const hitTolerance = opt_options.hitTolerance !== undefined ?
        opt_options.hitTolerance * this.frameState_.pixelRatio : 0;
      return this.renderer_.hasFeatureAtCoordinate(
        coordinate, this.frameState_, hitTolerance, layerFilter, null);
    }

    /**
     * Returns the coordinate in view projection for a browser event.
     * @param {Event} event Event.
     * @return {import("./coordinate.js").Coordinate} Coordinate.
     * @api
     */
    getEventCoordinate(event) {
      return this.getCoordinateFromPixel(this.getEventPixel(event));
    }

    /**
     * Returns the map pixel position for a browser event relative to the viewport.
     * @param {Event|TouchEvent} event Event.
     * @return {import("./pixel.js").Pixel} Pixel.
     * @api
     */
    getEventPixel(event) {
      const viewportPosition = this.viewport_.getBoundingClientRect();
      const eventPosition = 'changedTouches' in event ?
        /** @type {TouchEvent} */ (event).changedTouches[0] :
        /** @type {MouseEvent} */ (event);

      return [
        eventPosition.clientX - viewportPosition.left,
        eventPosition.clientY - viewportPosition.top
      ];
    }

    /**
     * Get the target in which this map is rendered.
     * Note that this returns what is entered as an option or in setTarget:
     * if that was an element, it returns an element; if a string, it returns that.
     * @return {HTMLElement|string|undefined} The Element or id of the Element that the
     *     map is rendered in.
     * @observable
     * @api
     */
    getTarget() {
      return /** @type {HTMLElement|string|undefined} */ (this.get(MapProperty.TARGET));
    }

    /**
     * Get the DOM element into which this map is rendered. In contrast to
     * `getTarget` this method always return an `Element`, or `null` if the
     * map has no target.
     * @return {HTMLElement} The element that the map is rendered in.
     * @api
     */
    getTargetElement() {
      const target = this.getTarget();
      if (target !== undefined) {
        return typeof target === 'string' ? document.getElementById(target) : target;
      } else {
        return null;
      }
    }

    /**
     * Get the coordinate for a given pixel.  This returns a coordinate in the
     * map view projection.
     * @param {import("./pixel.js").Pixel} pixel Pixel position in the map viewport.
     * @return {import("./coordinate.js").Coordinate} The coordinate for the pixel position.
     * @api
     */
    getCoordinateFromPixel(pixel) {
      const frameState = this.frameState_;
      if (!frameState) {
        return null;
      } else {
        return apply(frameState.pixelToCoordinateTransform, pixel.slice());
      }
    }

    /**
     * Get the map controls. Modifying this collection changes the controls
     * associated with the map.
     * @return {Collection<import("./control/Control.js").default>} Controls.
     * @api
     */
    getControls() {
      return this.controls;
    }

    /**
     * Get the map overlays. Modifying this collection changes the overlays
     * associated with the map.
     * @return {Collection<import("./Overlay.js").default>} Overlays.
     * @api
     */
    getOverlays() {
      return this.overlays_;
    }

    /**
     * Get an overlay by its identifier (the value returned by overlay.getId()).
     * Note that the index treats string and numeric identifiers as the same. So
     * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.
     * @param {string|number} id Overlay identifier.
     * @return {import("./Overlay.js").default} Overlay.
     * @api
     */
    getOverlayById(id) {
      const overlay = this.overlayIdIndex_[id.toString()];
      return overlay !== undefined ? overlay : null;
    }

    /**
     * Get the map interactions. Modifying this collection changes the interactions
     * associated with the map.
     *
     * Interactions are used for e.g. pan, zoom and rotate.
     * @return {Collection<import("./interaction/Interaction.js").default>} Interactions.
     * @api
     */
    getInteractions() {
      return this.interactions;
    }

    /**
     * Get the layergroup associated with this map.
     * @return {LayerGroup} A layer group containing the layers in this map.
     * @observable
     * @api
     */
    getLayerGroup() {
      return (
        /** @type {LayerGroup} */ (this.get(MapProperty.LAYERGROUP))
      );
    }

    /**
     * Get the collection of layers associated with this map.
     * @return {!Collection<import("./layer/Base.js").default>} Layers.
     * @api
     */
    getLayers() {
      const layers = this.getLayerGroup().getLayers();
      return layers;
    }

    /**
     * @return {boolean} Layers have sources that are still loading.
     */
    getLoading() {
      const layerStatesArray = this.getLayerGroup().getLayerStatesArray();
      for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {
        const layer = layerStatesArray[i].layer;
        const source = /** @type {import("./layer/Layer.js").default} */ (layer).getSource();
        if (source && source.loading) {
          return true;
        }
      }
      return false;
    }

    /**
     * Get the pixel for a coordinate.  This takes a coordinate in the map view
     * projection and returns the corresponding pixel.
     * @param {import("./coordinate.js").Coordinate} coordinate A map coordinate.
     * @return {import("./pixel.js").Pixel} A pixel position in the map viewport.
     * @api
     */
    getPixelFromCoordinate(coordinate) {
      const frameState = this.frameState_;
      if (!frameState) {
        return null;
      } else {
        return apply(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));
      }
    }

    /**
     * Get the map renderer.
     * @return {import("./renderer/Map.js").default} Renderer
     */
    getRenderer() {
      return this.renderer_;
    }

    /**
     * Get the size of this map.
     * @return {import("./size.js").Size|undefined} The size in pixels of the map in the DOM.
     * @observable
     * @api
     */
    getSize() {
      return (
        /** @type {import("./size.js").Size|undefined} */ (this.get(MapProperty.SIZE))
      );
    }

    /**
     * Get the view associated with this map. A view manages properties such as
     * center and resolution.
     * @return {View} The view that controls this map.
     * @observable
     * @api
     */
    getView() {
      return (
        /** @type {View} */ (this.get(MapProperty.VIEW))
      );
    }

    /**
     * Get the element that serves as the map viewport.
     * @return {HTMLElement} Viewport.
     * @api
     */
    getViewport() {
      return this.viewport_;
    }

    /**
     * Get the element that serves as the container for overlays.  Elements added to
     * this container will let mousedown and touchstart events through to the map,
     * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}
     * events.
     * @return {!HTMLElement} The map's overlay container.
     */
    getOverlayContainer() {
      return this.overlayContainer_;
    }

    /**
     * Get the element that serves as a container for overlays that don't allow
     * event propagation. Elements added to this container won't let mousedown and
     * touchstart events through to the map, so clicks and gestures on an overlay
     * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
     * @return {!HTMLElement} The map's overlay container that stops events.
     */
    getOverlayContainerStopEvent() {
      return this.overlayContainerStopEvent_;
    }

    /**
     * @param {import("./Tile.js").default} tile Tile.
     * @param {string} tileSourceKey Tile source key.
     * @param {import("./coordinate.js").Coordinate} tileCenter Tile center.
     * @param {number} tileResolution Tile resolution.
     * @return {number} Tile priority.
     */
    getTilePriority(tile, tileSourceKey, tileCenter, tileResolution) {
      // Filter out tiles at higher zoom levels than the current zoom level, or that
      // are outside the visible extent.
      const frameState = this.frameState_;
      if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {
        return DROP;
      }
      if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {
        return DROP;
      }
      // Prioritize the highest zoom level tiles closest to the focus.
      // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).
      // Within a zoom level, tiles are prioritized by the distance in pixels
      // between the center of the tile and the focus.  The factor of 65536 means
      // that the prioritization should behave as desired for tiles up to
      // 65536 * Math.log(2) = 45426 pixels from the focus.
      const deltaX = tileCenter[0] - frameState.focus[0];
      const deltaY = tileCenter[1] - frameState.focus[1];
      return 65536 * Math.log(tileResolution) +
          Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution;
    }

    /**
     * @param {Event} browserEvent Browser event.
     * @param {string=} opt_type Type.
     */
    handleBrowserEvent(browserEvent, opt_type) {
      const type = opt_type || browserEvent.type;
      const mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);
      this.handleMapBrowserEvent(mapBrowserEvent);
    }

    /**
     * @param {MapBrowserEvent} mapBrowserEvent The event to handle.
     */
    handleMapBrowserEvent(mapBrowserEvent) {
      if (!this.frameState_) {
        // With no view defined, we cannot translate pixels into geographical
        // coordinates so interactions cannot be used.
        return;
      }
      let target = mapBrowserEvent.originalEvent.target;
      while (target instanceof HTMLElement) {
        if (target.parentElement === this.overlayContainerStopEvent_) {
          return;
        }
        target = target.parentElement;
      }
      this.focus_ = mapBrowserEvent.coordinate;
      mapBrowserEvent.frameState = this.frameState_;
      const interactionsArray = this.getInteractions().getArray();
      if (this.dispatchEvent(mapBrowserEvent) !== false) {
        for (let i = interactionsArray.length - 1; i >= 0; i--) {
          const interaction = interactionsArray[i];
          if (!interaction.getActive()) {
            continue;
          }
          const cont = interaction.handleEvent(mapBrowserEvent);
          if (!cont) {
            break;
          }
        }
      }
    }

    /**
     * @protected
     */
    handlePostRender() {

      const frameState = this.frameState_;

      // Manage the tile queue
      // Image loads are expensive and a limited resource, so try to use them
      // efficiently:
      // * When the view is static we allow a large number of parallel tile loads
      //   to complete the frame as quickly as possible.
      // * When animating or interacting, image loads can cause janks, so we reduce
      //   the maximum number of loads per frame and limit the number of parallel
      //   tile loads to remain reactive to view changes and to reduce the chance of
      //   loading tiles that will quickly disappear from view.
      const tileQueue = this.tileQueue_;
      if (!tileQueue.isEmpty()) {
        let maxTotalLoading = this.maxTilesLoading_;
        let maxNewLoads = maxTotalLoading;
        if (frameState) {
          const hints = frameState.viewHints;
          if (hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING]) {
            const lowOnFrameBudget = !IMAGE_DECODE && Date.now() - frameState.time > 8;
            maxTotalLoading = lowOnFrameBudget ? 0 : 8;
            maxNewLoads = lowOnFrameBudget ? 0 : 2;
          }
        }
        if (tileQueue.getTilesLoading() < maxTotalLoading) {
          tileQueue.reprioritize(); // FIXME only call if view has changed
          tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);
        }
      }

      if (frameState && this.hasListener(RenderEventType.RENDERCOMPLETE) && !frameState.animate &&
          !this.tileQueue_.getTilesLoading() && !this.getLoading()) {
        this.renderer_.dispatchRenderEvent(RenderEventType.RENDERCOMPLETE, frameState);
      }

      const postRenderFunctions = this.postRenderFunctions_;
      for (let i = 0, ii = postRenderFunctions.length; i < ii; ++i) {
        postRenderFunctions[i](this, frameState);
      }
      postRenderFunctions.length = 0;
    }

    /**
     * @private
     */
    handleSizeChanged_() {
      if (this.getView()) {
        this.getView().resolveConstraints(0);
      }

      this.render();
    }

    /**
     * @private
     */
    handleTargetChanged_() {
      // target may be undefined, null, a string or an Element.
      // If it's a string we convert it to an Element before proceeding.
      // If it's not now an Element we remove the viewport from the DOM.
      // If it's an Element we append the viewport element to it.

      let targetElement;
      if (this.getTarget()) {
        targetElement = this.getTargetElement();
      }

      if (this.keyHandlerKeys_) {
        for (let i = 0, ii = this.keyHandlerKeys_.length; i < ii; ++i) {
          unlistenByKey(this.keyHandlerKeys_[i]);
        }
        this.keyHandlerKeys_ = null;
      }

      if (!targetElement) {
        if (this.renderer_) {
          this.renderer_.dispose();
          this.renderer_ = null;
        }
        if (this.animationDelayKey_) {
          cancelAnimationFrame(this.animationDelayKey_);
          this.animationDelayKey_ = undefined;
        }
        removeNode(this.viewport_);
        if (this.handleResize_ !== undefined) {
          removeEventListener(EventType.RESIZE, this.handleResize_, false);
          this.handleResize_ = undefined;
        }
      } else {
        targetElement.appendChild(this.viewport_);
        if (!this.renderer_) {
          this.renderer_ = this.createRenderer();
        }

        const keyboardEventTarget = !this.keyboardEventTarget_ ?
          targetElement : this.keyboardEventTarget_;
        this.keyHandlerKeys_ = [
          listen(keyboardEventTarget, EventType.KEYDOWN, this.handleBrowserEvent, this),
          listen(keyboardEventTarget, EventType.KEYPRESS, this.handleBrowserEvent, this)
        ];

        if (!this.handleResize_) {
          this.handleResize_ = this.updateSize.bind(this);
          window.addEventListener(EventType.RESIZE, this.handleResize_, false);
        }
      }

      this.updateSize();
      // updateSize calls setSize, so no need to call this.render
      // ourselves here.
    }

    /**
     * @private
     */
    handleTileChange_() {
      this.render();
    }

    /**
     * @private
     */
    handleViewPropertyChanged_() {
      this.render();
    }

    /**
     * @private
     */
    handleViewChanged_() {
      if (this.viewPropertyListenerKey_) {
        unlistenByKey(this.viewPropertyListenerKey_);
        this.viewPropertyListenerKey_ = null;
      }
      if (this.viewChangeListenerKey_) {
        unlistenByKey(this.viewChangeListenerKey_);
        this.viewChangeListenerKey_ = null;
      }
      const view = this.getView();
      if (view) {
        this.viewport_.setAttribute('data-view', getUid(view));
        this.viewPropertyListenerKey_ = listen(
          view, ObjectEventType.PROPERTYCHANGE,
          this.handleViewPropertyChanged_, this);
        this.viewChangeListenerKey_ = listen(
          view, EventType.CHANGE,
          this.handleViewPropertyChanged_, this);

        view.resolveConstraints(0);
      }
      this.render();
    }

    /**
     * @private
     */
    handleLayerGroupChanged_() {
      if (this.layerGroupPropertyListenerKeys_) {
        this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);
        this.layerGroupPropertyListenerKeys_ = null;
      }
      const layerGroup = this.getLayerGroup();
      if (layerGroup) {
        this.layerGroupPropertyListenerKeys_ = [
          listen(
            layerGroup, ObjectEventType.PROPERTYCHANGE,
            this.render, this),
          listen(
            layerGroup, EventType.CHANGE,
            this.render, this)
        ];
      }
      this.render();
    }

    /**
     * @return {boolean} Is rendered.
     */
    isRendered() {
      return !!this.frameState_;
    }

    /**
     * Requests an immediate render in a synchronous manner.
     * @api
     */
    renderSync() {
      if (this.animationDelayKey_) {
        cancelAnimationFrame(this.animationDelayKey_);
      }
      this.animationDelay_();
    }

    /**
     * Redraws all text after new fonts have loaded
     */
    redrawText() {
      const layerStates = this.getLayerGroup().getLayerStatesArray();
      for (let i = 0, ii = layerStates.length; i < ii; ++i) {
        const layer = layerStates[i].layer;
        if (layer.hasRenderer()) {
          layer.getRenderer().handleFontsChanged();
        }
      }
    }

    /**
     * Request a map rendering (at the next animation frame).
     * @api
     */
    render() {
      if (this.renderer_ && this.animationDelayKey_ === undefined) {
        this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);
      }
    }

    /**
     * Remove the given control from the map.
     * @param {import("./control/Control.js").default} control Control.
     * @return {import("./control/Control.js").default|undefined} The removed control (or undefined
     *     if the control was not found).
     * @api
     */
    removeControl(control) {
      return this.getControls().remove(control);
    }

    /**
     * Remove the given interaction from the map.
     * @param {import("./interaction/Interaction.js").default} interaction Interaction to remove.
     * @return {import("./interaction/Interaction.js").default|undefined} The removed interaction (or
     *     undefined if the interaction was not found).
     * @api
     */
    removeInteraction(interaction) {
      return this.getInteractions().remove(interaction);
    }

    /**
     * Removes the given layer from the map.
     * @param {import("./layer/Base.js").default} layer Layer.
     * @return {import("./layer/Base.js").default|undefined} The removed layer (or undefined if the
     *     layer was not found).
     * @api
     */
    removeLayer(layer) {
      const layers = this.getLayerGroup().getLayers();
      return layers.remove(layer);
    }

    /**
     * Remove the given overlay from the map.
     * @param {import("./Overlay.js").default} overlay Overlay.
     * @return {import("./Overlay.js").default|undefined} The removed overlay (or undefined
     *     if the overlay was not found).
     * @api
     */
    removeOverlay(overlay) {
      return this.getOverlays().remove(overlay);
    }

    /**
     * @param {number} time Time.
     * @private
     */
    renderFrame_(time) {
      let viewState;

      const size = this.getSize();
      const view = this.getView();
      const extent = createEmpty();
      const previousFrameState = this.frameState_;
      /** @type {?FrameState} */
      let frameState = null;
      if (size !== undefined && hasArea(size) && view && view.isDef()) {
        const viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);
        viewState = view.getState();
        frameState = {
          animate: false,
          coordinateToPixelTransform: this.coordinateToPixelTransform_,
          declutterItems: previousFrameState ? previousFrameState.declutterItems : [],
          extent: extent,
          focus: this.focus_ ? this.focus_ : viewState.center,
          index: this.frameIndex_++,
          layerIndex: 0,
          layerStatesArray: this.getLayerGroup().getLayerStatesArray(),
          pixelRatio: this.pixelRatio_,
          pixelToCoordinateTransform: this.pixelToCoordinateTransform_,
          postRenderFunctions: [],
          size: size,
          skippedFeatureUids: this.skippedFeatureUids_,
          tileQueue: this.tileQueue_,
          time: time,
          usedTiles: {},
          viewState: viewState,
          viewHints: viewHints,
          wantedTiles: {}
        };
      }

      if (frameState) {
        frameState.extent = getForViewAndSize(viewState.center,
          viewState.resolution, viewState.rotation, frameState.size, extent);
      }

      this.frameState_ = frameState;
      this.renderer_.renderFrame(frameState);

      if (frameState) {
        if (frameState.animate) {
          this.render();
        }
        Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);

        if (previousFrameState) {
          const moveStart = !this.previousExtent_ ||
                      (!isEmpty$1(this.previousExtent_) &&
                      !equals(frameState.extent, this.previousExtent_));
          if (moveStart) {
            this.dispatchEvent(
              new MapEvent(MapEventType.MOVESTART, this, previousFrameState));
            this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);
          }
        }

        const idle = this.previousExtent_ &&
            !frameState.viewHints[ViewHint.ANIMATING] &&
            !frameState.viewHints[ViewHint.INTERACTING] &&
            !equals(frameState.extent, this.previousExtent_);

        if (idle) {
          this.dispatchEvent(new MapEvent(MapEventType.MOVEEND, this, frameState));
          clone(frameState.extent, this.previousExtent_);
        }
      }

      this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));

      setTimeout(this.handlePostRender.bind(this), 0);

    }

    /**
     * Sets the layergroup of this map.
     * @param {LayerGroup} layerGroup A layer group containing the layers in this map.
     * @observable
     * @api
     */
    setLayerGroup(layerGroup) {
      this.set(MapProperty.LAYERGROUP, layerGroup);
    }

    /**
     * Set the size of this map.
     * @param {import("./size.js").Size|undefined} size The size in pixels of the map in the DOM.
     * @observable
     * @api
     */
    setSize(size) {
      this.set(MapProperty.SIZE, size);
    }

    /**
     * Set the target element to render this map into.
     * @param {HTMLElement|string|undefined} target The Element or id of the Element
     *     that the map is rendered in.
     * @observable
     * @api
     */
    setTarget(target) {
      this.set(MapProperty.TARGET, target);
    }

    /**
     * Set the view for this map.
     * @param {View} view The view that controls this map.
     * @observable
     * @api
     */
    setView(view) {
      this.set(MapProperty.VIEW, view);
    }

    /**
     * @param {import("./Feature.js").default} feature Feature.
     */
    skipFeature(feature) {
      this.skippedFeatureUids_[getUid(feature)] = true;
      this.render();
    }

    /**
     * Force a recalculation of the map viewport size.  This should be called when
     * third-party code changes the size of the map viewport.
     * @api
     */
    updateSize() {
      const targetElement = this.getTargetElement();

      if (!targetElement) {
        this.setSize(undefined);
      } else {
        const computedStyle = getComputedStyle(targetElement);
        this.setSize([
          targetElement.offsetWidth -
              parseFloat(computedStyle['borderLeftWidth']) -
              parseFloat(computedStyle['paddingLeft']) -
              parseFloat(computedStyle['paddingRight']) -
              parseFloat(computedStyle['borderRightWidth']),
          targetElement.offsetHeight -
              parseFloat(computedStyle['borderTopWidth']) -
              parseFloat(computedStyle['paddingTop']) -
              parseFloat(computedStyle['paddingBottom']) -
              parseFloat(computedStyle['borderBottomWidth'])
        ]);
      }
    }

    /**
     * @param {import("./Feature.js").default} feature Feature.
     */
    unskipFeature(feature) {
      delete this.skippedFeatureUids_[getUid(feature)];
      this.render();
    }
  }


  /**
   * @param {MapOptions} options Map options.
   * @return {MapOptionsInternal} Internal map options.
   */
  function createOptionsInternal(options) {

    /**
     * @type {HTMLElement|Document}
     */
    let keyboardEventTarget = null;
    if (options.keyboardEventTarget !== undefined) {
      keyboardEventTarget = typeof options.keyboardEventTarget === 'string' ?
        document.getElementById(options.keyboardEventTarget) :
        options.keyboardEventTarget;
    }

    /**
     * @type {Object<string, *>}
     */
    const values = {};

    const layerGroup = options.layers && typeof /** @type {?} */ (options.layers).getLayers === 'function' ?
      /** @type {LayerGroup} */ (options.layers) : new LayerGroup({layers: /** @type {Collection} */ (options.layers)});
    values[MapProperty.LAYERGROUP] = layerGroup;

    values[MapProperty.TARGET] = options.target;

    values[MapProperty.VIEW] = options.view !== undefined ?
      options.view : new View();

    let controls;
    if (options.controls !== undefined) {
      if (Array.isArray(options.controls)) {
        controls = new Collection(options.controls.slice());
      } else {
        assert(typeof /** @type {?} */ (options.controls).getArray === 'function',
          47); // Expected `controls` to be an array or an `import("./Collection.js").Collection`
        controls = /** @type {Collection} */ (options.controls);
      }
    }

    let interactions;
    if (options.interactions !== undefined) {
      if (Array.isArray(options.interactions)) {
        interactions = new Collection(options.interactions.slice());
      } else {
        assert(typeof /** @type {?} */ (options.interactions).getArray === 'function',
          48); // Expected `interactions` to be an array or an `import("./Collection.js").Collection`
        interactions = /** @type {Collection} */ (options.interactions);
      }
    }

    let overlays;
    if (options.overlays !== undefined) {
      if (Array.isArray(options.overlays)) {
        overlays = new Collection(options.overlays.slice());
      } else {
        assert(typeof /** @type {?} */ (options.overlays).getArray === 'function',
          49); // Expected `overlays` to be an array or an `import("./Collection.js").Collection`
        overlays = options.overlays;
      }
    } else {
      overlays = new Collection();
    }

    return {
      controls: controls,
      interactions: interactions,
      keyboardEventTarget: keyboardEventTarget,
      overlays: overlays,
      values: values
    };

  }

  /**
   * @module ol/control/Control
   */


  /**
   * @typedef {Object} Options
   * @property {HTMLElement} [element] The element is the control's
   * container element. This only needs to be specified if you're developing
   * a custom control.
   * @property {function(import("../MapEvent.js").default)} [render] Function called when
   * the control should be re-rendered. This is called in a `requestAnimationFrame`
   * callback.
   * @property {HTMLElement|string} [target] Specify a target if you want
   * the control to be rendered outside of the map's viewport.
   */


  /**
   * @classdesc
   * A control is a visible widget with a DOM element in a fixed position on the
   * screen. They can involve user input (buttons), or be informational only;
   * the position is determined using CSS. By default these are placed in the
   * container with CSS class name `ol-overlaycontainer-stopevent`, but can use
   * any outside DOM element.
   *
   * This is the base class for controls. You can use it for simple custom
   * controls by creating the element with listeners, creating an instance:
   * ```js
   * var myControl = new Control({element: myElement});
   * ```
   * and then adding this to the map.
   *
   * The main advantage of having this as a control rather than a simple separate
   * DOM element is that preventing propagation is handled for you. Controls
   * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.
   *
   * You can also extend this base for your own control class. See
   * examples/custom-controls for an example of how to do this.
   *
   * @api
   */
  class Control extends BaseObject {

    /**
     * @param {Options} options Control options.
     */
    constructor(options) {

      super();

      /**
       * @protected
       * @type {HTMLElement}
       */
      this.element = options.element ? options.element : null;

      /**
       * @private
       * @type {HTMLElement}
       */
      this.target_ = null;

      /**
       * @private
       * @type {import("../PluggableMap.js").default}
       */
      this.map_ = null;

      /**
       * @protected
       * @type {!Array<import("../events.js").EventsKey>}
       */
      this.listenerKeys = [];

      /**
       * @type {function(import("../MapEvent.js").default): void}
       */
      this.render = options.render ? options.render : VOID;

      if (options.target) {
        this.setTarget(options.target);
      }

    }

    /**
     * @inheritDoc
     */
    disposeInternal() {
      removeNode(this.element);
      super.disposeInternal();
    }

    /**
     * Get the map associated with this control.
     * @return {import("../PluggableMap.js").default} Map.
     * @api
     */
    getMap() {
      return this.map_;
    }

    /**
     * Remove the control from its current map and attach it to the new map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../PluggableMap.js").default} map Map.
     * @api
     */
    setMap(map) {
      if (this.map_) {
        removeNode(this.element);
      }
      for (let i = 0, ii = this.listenerKeys.length; i < ii; ++i) {
        unlistenByKey(this.listenerKeys[i]);
      }
      this.listenerKeys.length = 0;
      this.map_ = map;
      if (this.map_) {
        const target = this.target_ ?
          this.target_ : map.getOverlayContainerStopEvent();
        target.appendChild(this.element);
        if (this.render !== VOID) {
          this.listenerKeys.push(listen(map,
            MapEventType.POSTRENDER, this.render, this));
        }
        map.render();
      }
    }

    /**
     * This function is used to set a target element for the control. It has no
     * effect if it is called after the control has been added to the map (i.e.
     * after `setMap` is called on the control). If no `target` is set in the
     * options passed to the control constructor and if `setTarget` is not called
     * then the control is added to the map's overlay container.
     * @param {HTMLElement|string} target Target.
     * @api
     */
    setTarget(target) {
      this.target_ = typeof target === 'string' ?
        document.getElementById(target) :
        target;
    }
  }

  /**
   * @module ol/control/Attribution
   */


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-attribution'] CSS class name.
   * @property {HTMLElement|string} [target] Specify a target if you
   * want the control to be rendered outside of the map's
   * viewport.
   * @property {boolean} [collapsible] Specify if attributions can
   * be collapsed. If not specified, sources control this behavior with their
   * `attributionsCollapsible` setting.
   * @property {boolean} [collapsed=true] Specify if attributions should
   * be collapsed at startup.
   * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.
   * @property {string} [label='i'] Text label to use for the
   * collapsed attributions button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string|HTMLElement} [collapseLabel='»'] Text label to use
   * for the expanded attributions button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {function(import("../MapEvent.js").default)} [render] Function called when
   * the control should be re-rendered. This is called in a `requestAnimationFrame`
   * callback.
   */


  /**
   * @classdesc
   * Control to show all the attributions associated with the layer sources
   * in the map. This control is one of the default controls included in maps.
   * By default it will show in the bottom right portion of the map, but this can
   * be changed by using a css selector for `.ol-attribution`.
   *
   * @api
   */
  class Attribution extends Control {

    /**
     * @param {Options=} opt_options Attribution options.
     */
    constructor(opt_options) {

      const options = opt_options ? opt_options : {};

      super({
        element: document.createElement('div'),
        render: options.render || render,
        target: options.target
      });

      /**
       * @private
       * @type {HTMLElement}
       */
      this.ulElement_ = document.createElement('ul');

      /**
       * @private
       * @type {boolean}
       */
      this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;

      /**
       * @private
       * @type {boolean}
       */
      this.overrideCollapsible_ = options.collapsible !== undefined;

      /**
       * @private
       * @type {boolean}
       */
      this.collapsible_ = options.collapsible !== undefined ?
        options.collapsible : true;

      if (!this.collapsible_) {
        this.collapsed_ = false;
      }

      const className = options.className !== undefined ? options.className : 'ol-attribution';

      const tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Attributions';

      const collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\u00BB';

      if (typeof collapseLabel === 'string') {
        /**
         * @private
         * @type {HTMLElement}
         */
        this.collapseLabel_ = document.createElement('span');
        this.collapseLabel_.textContent = collapseLabel;
      } else {
        this.collapseLabel_ = collapseLabel;
      }

      const label = options.label !== undefined ? options.label : 'i';

      if (typeof label === 'string') {
        /**
         * @private
         * @type {HTMLElement}
         */
        this.label_ = document.createElement('span');
        this.label_.textContent = label;
      } else {
        this.label_ = label;
      }


      const activeLabel = (this.collapsible_ && !this.collapsed_) ?
        this.collapseLabel_ : this.label_;
      const button = document.createElement('button');
      button.setAttribute('type', 'button');
      button.title = tipLabel;
      button.appendChild(activeLabel);

      listen(button, EventType.CLICK, this.handleClick_, this);

      const cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL +
          (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +
          (this.collapsible_ ? '' : ' ol-uncollapsible');
      const element = this.element;
      element.className = cssClasses;
      element.appendChild(this.ulElement_);
      element.appendChild(button);

      /**
       * A list of currently rendered resolutions.
       * @type {Array<string>}
       * @private
       */
      this.renderedAttributions_ = [];

      /**
       * @private
       * @type {boolean}
       */
      this.renderedVisible_ = true;

    }

    /**
     * Collect a list of visible attributions and set the collapsible state.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @return {Array<string>} Attributions.
     * @private
     */
    collectSourceAttributions_(frameState) {
      /**
       * Used to determine if an attribution already exists.
       * @type {!Object<string, boolean>}
       */
      const lookup = {};

      /**
       * A list of visible attributions.
       * @type {Array<string>}
       */
      const visibleAttributions = [];

      const layerStatesArray = frameState.layerStatesArray;
      const resolution = frameState.viewState.resolution;
      for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {
        const layerState = layerStatesArray[i];
        if (!visibleAtResolution(layerState, resolution)) {
          continue;
        }

        const source = /** @type {import("../layer/Layer.js").default} */ (layerState.layer).getSource();
        if (!source) {
          continue;
        }

        const attributionGetter = source.getAttributions();
        if (!attributionGetter) {
          continue;
        }

        const attributions = attributionGetter(frameState);
        if (!attributions) {
          continue;
        }

        if (!this.overrideCollapsible_ && source.getAttributionsCollapsible() === false) {
          this.setCollapsible(false);
        }

        if (Array.isArray(attributions)) {
          for (let j = 0, jj = attributions.length; j < jj; ++j) {
            if (!(attributions[j] in lookup)) {
              visibleAttributions.push(attributions[j]);
              lookup[attributions[j]] = true;
            }
          }
        } else {
          if (!(attributions in lookup)) {
            visibleAttributions.push(attributions);
            lookup[attributions] = true;
          }
        }
      }
      return visibleAttributions;
    }

    /**
     * @private
     * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
     */
    updateElement_(frameState) {
      if (!frameState) {
        if (this.renderedVisible_) {
          this.element.style.display = 'none';
          this.renderedVisible_ = false;
        }
        return;
      }

      const attributions = this.collectSourceAttributions_(frameState);

      const visible = attributions.length > 0;
      if (this.renderedVisible_ != visible) {
        this.element.style.display = visible ? '' : 'none';
        this.renderedVisible_ = visible;
      }

      if (equals$1(attributions, this.renderedAttributions_)) {
        return;
      }

      removeChildren(this.ulElement_);

      // append the attributions
      for (let i = 0, ii = attributions.length; i < ii; ++i) {
        const element = document.createElement('li');
        element.innerHTML = attributions[i];
        this.ulElement_.appendChild(element);
      }

      this.renderedAttributions_ = attributions;
    }

    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */
    handleClick_(event) {
      event.preventDefault();
      this.handleToggle_();
    }

    /**
     * @private
     */
    handleToggle_() {
      this.element.classList.toggle(CLASS_COLLAPSED);
      if (this.collapsed_) {
        replaceNode(this.collapseLabel_, this.label_);
      } else {
        replaceNode(this.label_, this.collapseLabel_);
      }
      this.collapsed_ = !this.collapsed_;
    }

    /**
     * Return `true` if the attribution is collapsible, `false` otherwise.
     * @return {boolean} True if the widget is collapsible.
     * @api
     */
    getCollapsible() {
      return this.collapsible_;
    }

    /**
     * Set whether the attribution should be collapsible.
     * @param {boolean} collapsible True if the widget is collapsible.
     * @api
     */
    setCollapsible(collapsible) {
      if (this.collapsible_ === collapsible) {
        return;
      }
      this.collapsible_ = collapsible;
      this.element.classList.toggle('ol-uncollapsible');
      if (!collapsible && this.collapsed_) {
        this.handleToggle_();
      }
    }

    /**
     * Collapse or expand the attribution according to the passed parameter. Will
     * not do anything if the attribution isn't collapsible or if the current
     * collapsed state is already the one requested.
     * @param {boolean} collapsed True if the widget is collapsed.
     * @api
     */
    setCollapsed(collapsed) {
      if (!this.collapsible_ || this.collapsed_ === collapsed) {
        return;
      }
      this.handleToggle_();
    }

    /**
     * Return `true` when the attribution is currently collapsed or `false`
     * otherwise.
     * @return {boolean} True if the widget is collapsed.
     * @api
     */
    getCollapsed() {
      return this.collapsed_;
    }
  }


  /**
   * Update the attribution element.
   * @param {import("../MapEvent.js").default} mapEvent Map event.
   * @this {Attribution}
   * @api
   */
  function render(mapEvent) {
    this.updateElement_(mapEvent.frameState);
  }

  /**
   * @module ol/control/Rotate
   */


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-rotate'] CSS class name.
   * @property {string|HTMLElement} [label='⇧'] Text label to use for the rotate button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string} [tipLabel='Reset rotation'] Text label to use for the rotate tip.
   * @property {number} [duration=250] Animation duration in milliseconds.
   * @property {boolean} [autoHide=true] Hide the control when rotation is 0.
   * @property {function(import("../MapEvent.js").default)} [render] Function called when the control should
   * be re-rendered. This is called in a `requestAnimationFrame` callback.
   * @property {function()} [resetNorth] Function called when the control is clicked.
   * This will override the default `resetNorth`.
   * @property {HTMLElement|string} [target] Specify a target if you want the control to be
   * rendered outside of the map's viewport.
   */


  /**
   * @classdesc
   * A button control to reset rotation to 0.
   * To style this control use css selector `.ol-rotate`. A `.ol-hidden` css
   * selector is added to the button when the rotation is 0.
   *
   * @api
   */
  class Rotate extends Control {

    /**
     * @param {Options=} opt_options Rotate options.
     */
    constructor(opt_options) {

      const options = opt_options ? opt_options : {};

      super({
        element: document.createElement('div'),
        render: options.render || render$1,
        target: options.target
      });

      const className = options.className !== undefined ? options.className : 'ol-rotate';

      const label = options.label !== undefined ? options.label : '\u21E7';

      /**
       * @type {HTMLElement}
       * @private
       */
      this.label_ = null;

      if (typeof label === 'string') {
        this.label_ = document.createElement('span');
        this.label_.className = 'ol-compass';
        this.label_.textContent = label;
      } else {
        this.label_ = label;
        this.label_.classList.add('ol-compass');
      }

      const tipLabel = options.tipLabel ? options.tipLabel : 'Reset rotation';

      const button = document.createElement('button');
      button.className = className + '-reset';
      button.setAttribute('type', 'button');
      button.title = tipLabel;
      button.appendChild(this.label_);

      listen(button, EventType.CLICK, this.handleClick_, this);

      const cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
      const element = this.element;
      element.className = cssClasses;
      element.appendChild(button);

      this.callResetNorth_ = options.resetNorth ? options.resetNorth : undefined;

      /**
       * @type {number}
       * @private
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;

      /**
       * @type {boolean}
       * @private
       */
      this.autoHide_ = options.autoHide !== undefined ? options.autoHide : true;

      /**
       * @private
       * @type {number|undefined}
       */
      this.rotation_ = undefined;

      if (this.autoHide_) {
        this.element.classList.add(CLASS_HIDDEN);
      }

    }

    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */
    handleClick_(event) {
      event.preventDefault();
      if (this.callResetNorth_ !== undefined) {
        this.callResetNorth_();
      } else {
        this.resetNorth_();
      }
    }

    /**
     * @private
     */
    resetNorth_() {
      const map = this.getMap();
      const view = map.getView();
      if (!view) {
        // the map does not have a view, so we can't act
        // upon it
        return;
      }
      if (view.getRotation() !== undefined) {
        if (this.duration_ > 0) {
          view.animate({
            rotation: 0,
            duration: this.duration_,
            easing: easeOut
          });
        } else {
          view.setRotation(0);
        }
      }
    }
  }


  /**
   * Update the rotate control element.
   * @param {import("../MapEvent.js").default} mapEvent Map event.
   * @this {Rotate}
   * @api
   */
  function render$1(mapEvent) {
    const frameState = mapEvent.frameState;
    if (!frameState) {
      return;
    }
    const rotation = frameState.viewState.rotation;
    if (rotation != this.rotation_) {
      const transform = 'rotate(' + rotation + 'rad)';
      if (this.autoHide_) {
        const contains = this.element.classList.contains(CLASS_HIDDEN);
        if (!contains && rotation === 0) {
          this.element.classList.add(CLASS_HIDDEN);
        } else if (contains && rotation !== 0) {
          this.element.classList.remove(CLASS_HIDDEN);
        }
      }
      this.label_.style.transform = transform;
    }
    this.rotation_ = rotation;
  }

  /**
   * @module ol/control/Zoom
   */


  /**
   * @typedef {Object} Options
   * @property {number} [duration=250] Animation duration in milliseconds.
   * @property {string} [className='ol-zoom'] CSS class name.
   * @property {string|HTMLElement} [zoomInLabel='+'] Text label to use for the zoom-in
   * button. Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string|HTMLElement} [zoomOutLabel='-'] Text label to use for the zoom-out button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string} [zoomInTipLabel='Zoom in'] Text label to use for the button tip.
   * @property {string} [zoomOutTipLabel='Zoom out'] Text label to use for the button tip.
   * @property {number} [delta=1] The zoom delta applied on each click.
   * @property {HTMLElement|string} [target] Specify a target if you want the control to be
   * rendered outside of the map's viewport.
   */


  /**
   * @classdesc
   * A control with 2 buttons, one for zoom in and one for zoom out.
   * This control is one of the default controls of a map. To style this control
   * use css selectors `.ol-zoom-in` and `.ol-zoom-out`.
   *
   * @api
   */
  class Zoom extends Control {

    /**
     * @param {Options=} opt_options Zoom options.
     */
    constructor(opt_options) {

      const options = opt_options ? opt_options : {};

      super({
        element: document.createElement('div'),
        target: options.target
      });

      const className = options.className !== undefined ? options.className : 'ol-zoom';

      const delta = options.delta !== undefined ? options.delta : 1;

      const zoomInLabel = options.zoomInLabel !== undefined ? options.zoomInLabel : '+';
      const zoomOutLabel = options.zoomOutLabel !== undefined ? options.zoomOutLabel : '\u2212';

      const zoomInTipLabel = options.zoomInTipLabel !== undefined ?
        options.zoomInTipLabel : 'Zoom in';
      const zoomOutTipLabel = options.zoomOutTipLabel !== undefined ?
        options.zoomOutTipLabel : 'Zoom out';

      const inElement = document.createElement('button');
      inElement.className = className + '-in';
      inElement.setAttribute('type', 'button');
      inElement.title = zoomInTipLabel;
      inElement.appendChild(
        typeof zoomInLabel === 'string' ? document.createTextNode(zoomInLabel) : zoomInLabel
      );

      listen(inElement, EventType.CLICK, this.handleClick_.bind(this, delta));

      const outElement = document.createElement('button');
      outElement.className = className + '-out';
      outElement.setAttribute('type', 'button');
      outElement.title = zoomOutTipLabel;
      outElement.appendChild(
        typeof zoomOutLabel === 'string' ? document.createTextNode(zoomOutLabel) : zoomOutLabel
      );

      listen(outElement, EventType.CLICK, this.handleClick_.bind(this, -delta));

      const cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
      const element = this.element;
      element.className = cssClasses;
      element.appendChild(inElement);
      element.appendChild(outElement);

      /**
       * @type {number}
       * @private
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;

    }

    /**
     * @param {number} delta Zoom delta.
     * @param {MouseEvent} event The event to handle
     * @private
     */
    handleClick_(delta, event) {
      event.preventDefault();
      this.zoomByDelta_(delta);
    }

    /**
     * @param {number} delta Zoom delta.
     * @private
     */
    zoomByDelta_(delta) {
      const map = this.getMap();
      const view = map.getView();
      if (!view) {
        // the map does not have a view, so we can't act
        // upon it
        return;
      }
      const currentZoom = view.getZoom();
      if (currentZoom !== undefined) {
        const newZoom = view.getConstrainedZoom(currentZoom + delta);
        if (this.duration_ > 0) {
          if (view.getAnimating()) {
            view.cancelAnimations();
          }
          view.animate({
            zoom: newZoom,
            duration: this.duration_,
            easing: easeOut
          });
        } else {
          view.setZoom(newZoom);
        }
      }
    }
  }

  /**
   * @module ol/control/FullScreen
   */

  const events$1 = ['fullscreenchange', 'webkitfullscreenchange', 'MSFullscreenChange'];

  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-full-screen'] CSS class name.
   * @property {string|Text} [label='\u2922'] Text label to use for the button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string|Text} [labelActive='\u00d7'] Text label to use for the
   * button when full-screen is active.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.
   * @property {boolean} [keys=false] Full keyboard access.
   * @property {HTMLElement|string} [target] Specify a target if you want the
   * control to be rendered outside of the map's viewport.
   * @property {HTMLElement|string} [source] The element to be displayed
   * fullscreen. When not provided, the element containing the map viewport will
   * be displayed fullscreen.
   */


  /**
   * @classdesc
   * Provides a button that when clicked fills up the full screen with the map.
   * The full screen source element is by default the element containing the map viewport unless
   * overridden by providing the `source` option. In which case, the dom
   * element introduced using this parameter will be displayed in full screen.
   *
   * When in full screen mode, a close button is shown to exit full screen mode.
   * The [Fullscreen API](http://www.w3.org/TR/fullscreen/) is used to
   * toggle the map in full screen mode.
   *
   * @api
   */
  class FullScreen extends Control {

    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {

      const options = opt_options ? opt_options : {};

      super({
        element: document.createElement('div'),
        target: options.target
      });

      /**
       * @private
       * @type {string}
       */
      this.cssClassName_ = options.className !== undefined ? options.className :
        'ol-full-screen';

      const label = options.label !== undefined ? options.label : '\u2922';

      /**
       * @private
       * @type {Text}
       */
      this.labelNode_ = typeof label === 'string' ?
        document.createTextNode(label) : label;

      const labelActive = options.labelActive !== undefined ? options.labelActive : '\u00d7';

      /**
       * @private
       * @type {Text}
       */
      this.labelActiveNode_ = typeof labelActive === 'string' ?
        document.createTextNode(labelActive) : labelActive;

      /**
       * @private
       * @type {HTMLElement}
       */
      this.button_ = document.createElement('button');

      const tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';
      this.setClassName_(this.button_, isFullScreen());
      this.button_.setAttribute('type', 'button');
      this.button_.title = tipLabel;
      this.button_.appendChild(this.labelNode_);

      listen(this.button_, EventType.CLICK,
        this.handleClick_, this);

      const cssClasses = this.cssClassName_ + ' ' + CLASS_UNSELECTABLE +
          ' ' + CLASS_CONTROL + ' ' +
          (!isFullScreenSupported() ? CLASS_UNSUPPORTED : '');
      const element = this.element;
      element.className = cssClasses;
      element.appendChild(this.button_);

      /**
       * @private
       * @type {boolean}
       */
      this.keys_ = options.keys !== undefined ? options.keys : false;

      /**
       * @private
       * @type {HTMLElement|string|undefined}
       */
      this.source_ = options.source;

    }

    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */
    handleClick_(event) {
      event.preventDefault();
      this.handleFullScreen_();
    }

    /**
     * @private
     */
    handleFullScreen_() {
      if (!isFullScreenSupported()) {
        return;
      }
      const map = this.getMap();
      if (!map) {
        return;
      }
      if (isFullScreen()) {
        exitFullScreen();
      } else {
        let element;
        if (this.source_) {
          element = typeof this.source_ === 'string' ?
            document.getElementById(this.source_) :
            this.source_;
        } else {
          element = map.getTargetElement();
        }
        if (this.keys_) {
          requestFullScreenWithKeys(element);

        } else {
          requestFullScreen(element);
        }
      }
    }

    /**
     * @private
     */
    handleFullScreenChange_() {
      const map = this.getMap();
      if (isFullScreen()) {
        this.setClassName_(this.button_, true);
        replaceNode(this.labelActiveNode_, this.labelNode_);
      } else {
        this.setClassName_(this.button_, false);
        replaceNode(this.labelNode_, this.labelActiveNode_);
      }
      if (map) {
        map.updateSize();
      }
    }

    /**
     * @param {HTMLElement} element Target element
     * @param {boolean} fullscreen True if fullscreen class name should be active
     * @private
     */
    setClassName_(element, fullscreen) {
      const activeClassName = this.cssClassName_ + '-true';
      const inactiveClassName = this.cssClassName_ + '-false';
      const nextClassName = fullscreen ? activeClassName : inactiveClassName;
      element.classList.remove(activeClassName);
      element.classList.remove(inactiveClassName);
      element.classList.add(nextClassName);
    }

    /**
     * @inheritDoc
     * @api
     */
    setMap(map) {
      super.setMap(map);
      if (map) {
        for (let i = 0, ii = events$1.length; i < ii; ++i) {
          this.listenerKeys.push(
            listen(document, events$1[i], this.handleFullScreenChange_, this));
        }
      }
    }
  }


  /**
   * @return {boolean} Fullscreen is supported by the current platform.
   */
  function isFullScreenSupported() {
    const body = document.body;
    return !!(
      body.webkitRequestFullscreen ||
      (body.msRequestFullscreen && document.msFullscreenEnabled) ||
      (body.requestFullscreen && document.fullscreenEnabled)
    );
  }

  /**
   * @return {boolean} Element is currently in fullscreen.
   */
  function isFullScreen() {
    return !!(
      document.webkitIsFullScreen || document.msFullscreenElement || document.fullscreenElement
    );
  }

  /**
   * Request to fullscreen an element.
   * @param {HTMLElement} element Element to request fullscreen
   */
  function requestFullScreen(element) {
    if (element.requestFullscreen) {
      element.requestFullscreen();
    } else if (element.msRequestFullscreen) {
      element.msRequestFullscreen();
    } else if (element.webkitRequestFullscreen) {
      element.webkitRequestFullscreen();
    }
  }

  /**
   * Request to fullscreen an element with keyboard input.
   * @param {HTMLElement} element Element to request fullscreen
   */
  function requestFullScreenWithKeys(element) {
    if (element.webkitRequestFullscreen) {
      element.webkitRequestFullscreen();
    } else {
      requestFullScreen(element);
    }
  }

  /**
   * Exit fullscreen.
   */
  function exitFullScreen() {
    if (document.exitFullscreen) {
      document.exitFullscreen();
    } else if (document.msExitFullscreen) {
      document.msExitFullscreen();
    } else if (document.webkitExitFullscreen) {
      document.webkitExitFullscreen();
    }
  }

  /**
   * @module ol/control/MousePosition
   */


  /**
   * @type {string}
   */
  const PROJECTION = 'projection';

  /**
   * @type {string}
   */
  const COORDINATE_FORMAT = 'coordinateFormat';


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-mouse-position'] CSS class name.
   * @property {import("../coordinate.js").CoordinateFormat} [coordinateFormat] Coordinate format.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {function(import("../MapEvent.js").default)} [render] Function called when the
   * control should be re-rendered. This is called in a `requestAnimationFrame`
   * callback.
   * @property {HTMLElement|string} [target] Specify a target if you want the
   * control to be rendered outside of the map's viewport.
   * @property {string} [undefinedHTML='&#160;'] Markup to show when coordinates are not
   * available (e.g. when the pointer leaves the map viewport).  By default, the last position
   * will be replaced with `'&#160;'` (`&nbsp;`) when the pointer leaves the viewport.  To
   * retain the last rendered position, set this option to something falsey (like an empty
   * string `''`).
   */


  /**
   * @classdesc
   * A control to show the 2D coordinates of the mouse cursor. By default, these
   * are in the view projection, but can be in any supported projection.
   * By default the control is shown in the top right corner of the map, but this
   * can be changed by using the css selector `.ol-mouse-position`.
   *
   * On touch devices, which usually do not have a mouse cursor, the coordinates
   * of the currently touched position are shown.
   *
   * @api
   */
  class MousePosition extends Control {

    /**
     * @param {Options=} opt_options Mouse position options.
     */
    constructor(opt_options) {

      const options = opt_options ? opt_options : {};

      const element = document.createElement('div');
      element.className = options.className !== undefined ? options.className : 'ol-mouse-position';

      super({
        element: element,
        render: options.render || render$2,
        target: options.target
      });

      listen(this,
        getChangeEventType(PROJECTION),
        this.handleProjectionChanged_, this);

      if (options.coordinateFormat) {
        this.setCoordinateFormat(options.coordinateFormat);
      }
      if (options.projection) {
        this.setProjection(options.projection);
      }

      /**
       * @private
       * @type {string}
       */
      this.undefinedHTML_ = options.undefinedHTML !== undefined ? options.undefinedHTML : '&#160;';

      /**
       * @private
       * @type {boolean}
       */
      this.renderOnMouseOut_ = !!this.undefinedHTML_;

      /**
       * @private
       * @type {string}
       */
      this.renderedHTML_ = element.innerHTML;

      /**
       * @private
       * @type {import("../proj/Projection.js").default}
       */
      this.mapProjection_ = null;

      /**
       * @private
       * @type {?import("../proj.js").TransformFunction}
       */
      this.transform_ = null;

      /**
       * @private
       * @type {import("../pixel.js").Pixel}
       */
      this.lastMouseMovePixel_ = null;

    }

    /**
     * @private
     */
    handleProjectionChanged_() {
      this.transform_ = null;
    }

    /**
     * Return the coordinate format type used to render the current position or
     * undefined.
     * @return {import("../coordinate.js").CoordinateFormat|undefined} The format to render the current
     *     position in.
     * @observable
     * @api
     */
    getCoordinateFormat() {
      return (
        /** @type {import("../coordinate.js").CoordinateFormat|undefined} */ (this.get(COORDINATE_FORMAT))
      );
    }

    /**
     * Return the projection that is used to report the mouse position.
     * @return {import("../proj/Projection.js").default|undefined} The projection to report mouse
     *     position in.
     * @observable
     * @api
     */
    getProjection() {
      return (
        /** @type {import("../proj/Projection.js").default|undefined} */ (this.get(PROJECTION))
      );
    }

    /**
     * @param {Event} event Browser event.
     * @protected
     */
    handleMouseMove(event) {
      const map = this.getMap();
      this.lastMouseMovePixel_ = map.getEventPixel(event);
      this.updateHTML_(this.lastMouseMovePixel_);
    }

    /**
     * @param {Event} event Browser event.
     * @protected
     */
    handleMouseOut(event) {
      this.updateHTML_(null);
      this.lastMouseMovePixel_ = null;
    }

    /**
     * @inheritDoc
     * @api
     */
    setMap(map) {
      super.setMap(map);
      if (map) {
        const viewport = map.getViewport();
        this.listenerKeys.push(
          listen(viewport, EventType.MOUSEMOVE, this.handleMouseMove, this),
          listen(viewport, EventType.TOUCHSTART, this.handleMouseMove, this)
        );
        if (this.renderOnMouseOut_) {
          this.listenerKeys.push(
            listen(viewport, EventType.MOUSEOUT, this.handleMouseOut, this),
            listen(viewport, EventType.TOUCHEND, this.handleMouseOut, this)
          );
        }
      }
    }

    /**
     * Set the coordinate format type used to render the current position.
     * @param {import("../coordinate.js").CoordinateFormat} format The format to render the current
     *     position in.
     * @observable
     * @api
     */
    setCoordinateFormat(format) {
      this.set(COORDINATE_FORMAT, format);
    }

    /**
     * Set the projection that is used to report the mouse position.
     * @param {import("../proj.js").ProjectionLike} projection The projection to report mouse
     *     position in.
     * @observable
     * @api
     */
    setProjection(projection) {
      this.set(PROJECTION, get$2(projection));
    }

    /**
     * @param {?import("../pixel.js").Pixel} pixel Pixel.
     * @private
     */
    updateHTML_(pixel) {
      let html = this.undefinedHTML_;
      if (pixel && this.mapProjection_) {
        if (!this.transform_) {
          const projection = this.getProjection();
          if (projection) {
            this.transform_ = getTransformFromProjections(
              this.mapProjection_, projection);
          } else {
            this.transform_ = identityTransform;
          }
        }
        const map = this.getMap();
        const coordinate = map.getCoordinateFromPixel(pixel);
        if (coordinate) {
          this.transform_(coordinate, coordinate);
          const coordinateFormat = this.getCoordinateFormat();
          if (coordinateFormat) {
            html = coordinateFormat(coordinate);
          } else {
            html = coordinate.toString();
          }
        }
      }
      if (!this.renderedHTML_ || html !== this.renderedHTML_) {
        this.element.innerHTML = html;
        this.renderedHTML_ = html;
      }
    }
  }


  /**
   * Update the projection. Rendering of the coordinates is done in
   * `handleMouseMove` and `handleMouseUp`.
   * @param {import("../MapEvent.js").default} mapEvent Map event.
   * @this {MousePosition}
   * @api
   */
  function render$2(mapEvent) {
    const frameState = mapEvent.frameState;
    if (!frameState) {
      this.mapProjection_ = null;
    } else {
      if (this.mapProjection_ != frameState.viewState.projection) {
        this.mapProjection_ = frameState.viewState.projection;
        this.transform_ = null;
      }
    }
  }

  /**
   * @module ol/style/IconImageCache
   */

  /**
   * @classdesc
   * Singleton class. Available through {@link module:ol/style/IconImageCache~shared}.
   */
  class IconImageCache {
    constructor() {

      /**
      * @type {!Object<string, import("./IconImage.js").default>}
      * @private
      */
      this.cache_ = {};

      /**
      * @type {number}
      * @private
      */
      this.cacheSize_ = 0;

      /**
      * @type {number}
      * @private
      */
      this.maxCacheSize_ = 32;
    }

    /**
    * FIXME empty description for jsdoc
    */
    clear() {
      this.cache_ = {};
      this.cacheSize_ = 0;
    }

    /**
     * @return {boolean} Can expire cache.
     */
    canExpireCache() {
      return this.cacheSize_ > this.maxCacheSize_;
    }

    /**
    * FIXME empty description for jsdoc
    */
    expire() {
      if (this.canExpireCache()) {
        let i = 0;
        for (const key in this.cache_) {
          const iconImage = this.cache_[key];
          if ((i++ & 3) === 0 && !iconImage.hasListener()) {
            delete this.cache_[key];
            --this.cacheSize_;
          }
        }
      }
    }

    /**
    * @param {string} src Src.
    * @param {?string} crossOrigin Cross origin.
    * @param {import("../color.js").Color} color Color.
    * @return {import("./IconImage.js").default} Icon image.
    */
    get(src, crossOrigin, color) {
      const key = getKey(src, crossOrigin, color);
      return key in this.cache_ ? this.cache_[key] : null;
    }

    /**
    * @param {string} src Src.
    * @param {?string} crossOrigin Cross origin.
    * @param {import("../color.js").Color} color Color.
    * @param {import("./IconImage.js").default} iconImage Icon image.
    */
    set(src, crossOrigin, color, iconImage) {
      const key = getKey(src, crossOrigin, color);
      this.cache_[key] = iconImage;
      ++this.cacheSize_;
    }

    /**
    * Set the cache size of the icon cache. Default is `32`. Change this value when
    * your map uses more than 32 different icon images and you are not caching icon
    * styles on the application level.
    * @param {number} maxCacheSize Cache max size.
    * @api
    */
    setSize(maxCacheSize) {
      this.maxCacheSize_ = maxCacheSize;
      this.expire();
    }
  }


  /**
   * @param {string} src Src.
   * @param {?string} crossOrigin Cross origin.
   * @param {import("../color.js").Color} color Color.
   * @return {string} Cache key.
   */
  function getKey(src, crossOrigin, color) {
    const colorString = color ? asString(color) : 'null';
    return crossOrigin + ':' + src + ':' + colorString;
  }


  /**
   * The {@link module:ol/style/IconImageCache~IconImageCache} for
   * {@link module:ol/style/Icon~Icon} images.
   * @api
   */
  const shared = new IconImageCache();

  /**
   * @module ol/render/canvas/Immediate
   */

  /**
   * @classdesc
   * A concrete subclass of {@link module:ol/render/VectorContext} that implements
   * direct rendering of features and geometries to an HTML5 Canvas context.
   * Instances of this class are created internally by the library and
   * provided to application code as vectorContext member of the
   * {@link module:ol/render/Event~RenderEvent} object associated with postcompose, precompose and
   * render events emitted by layers and maps.
   */
  class CanvasImmediateRenderer extends VectorContext {
    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../../extent.js").Extent} extent Extent.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {number} viewRotation View rotation.
     */
    constructor(context, pixelRatio, extent, transform, viewRotation) {
      super();

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.context_ = context;

      /**
       * @private
       * @type {number}
       */
      this.pixelRatio_ = pixelRatio;

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.extent_ = extent;

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.transform_ = transform;

      /**
       * @private
       * @type {number}
       */
      this.viewRotation_ = viewRotation;

      /**
       * @private
       * @type {?import("../canvas.js").FillState}
       */
      this.contextFillState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").StrokeState}
       */
      this.contextStrokeState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").TextState}
       */
      this.contextTextState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").FillState}
       */
      this.fillState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").StrokeState}
       */
      this.strokeState_ = null;

      /**
       * @private
       * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
       */
      this.image_ = null;

      /**
       * @private
       * @type {number}
       */
      this.imageAnchorX_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageAnchorY_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageHeight_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageOpacity_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageOriginX_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageOriginY_ = 0;

      /**
       * @private
       * @type {boolean}
       */
      this.imageRotateWithView_ = false;

      /**
       * @private
       * @type {number}
       */
      this.imageRotation_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageScale_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageWidth_ = 0;

      /**
       * @private
       * @type {string}
       */
      this.text_ = '';

      /**
       * @private
       * @type {number}
       */
      this.textOffsetX_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.textOffsetY_ = 0;

      /**
       * @private
       * @type {boolean}
       */
      this.textRotateWithView_ = false;

      /**
       * @private
       * @type {number}
       */
      this.textRotation_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.textScale_ = 0;

      /**
       * @private
       * @type {?import("../canvas.js").FillState}
       */
      this.textFillState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").StrokeState}
       */
      this.textStrokeState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").TextState}
       */
      this.textState_ = null;

      /**
       * @private
       * @type {Array<number>}
       */
      this.pixelCoordinates_ = [];

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.tmpLocalTransform_ = create();

    }

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @private
     */
    drawImages_(flatCoordinates, offset, end, stride) {
      if (!this.image_) {
        return;
      }
      const pixelCoordinates = transform2D(
        flatCoordinates, offset, end, 2, this.transform_,
        this.pixelCoordinates_);
      const context = this.context_;
      const localTransform = this.tmpLocalTransform_;
      const alpha = context.globalAlpha;
      if (this.imageOpacity_ != 1) {
        context.globalAlpha = alpha * this.imageOpacity_;
      }
      let rotation = this.imageRotation_;
      if (this.imageRotateWithView_) {
        rotation += this.viewRotation_;
      }
      for (let i = 0, ii = pixelCoordinates.length; i < ii; i += 2) {
        const x = pixelCoordinates[i] - this.imageAnchorX_;
        const y = pixelCoordinates[i + 1] - this.imageAnchorY_;
        if (rotation !== 0 || this.imageScale_ != 1) {
          const centerX = x + this.imageAnchorX_;
          const centerY = y + this.imageAnchorY_;
          compose(localTransform,
            centerX, centerY,
            this.imageScale_, this.imageScale_,
            rotation,
            -centerX, -centerY);
          context.setTransform.apply(context, localTransform);
        }
        context.drawImage(this.image_, this.imageOriginX_, this.imageOriginY_,
          this.imageWidth_, this.imageHeight_, x, y,
          this.imageWidth_, this.imageHeight_);
      }
      if (rotation !== 0 || this.imageScale_ != 1) {
        context.setTransform(1, 0, 0, 1, 0, 0);
      }
      if (this.imageOpacity_ != 1) {
        context.globalAlpha = alpha;
      }
    }

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @private
     */
    drawText_(flatCoordinates, offset, end, stride) {
      if (!this.textState_ || this.text_ === '') {
        return;
      }
      if (this.textFillState_) {
        this.setContextFillState_(this.textFillState_);
      }
      if (this.textStrokeState_) {
        this.setContextStrokeState_(this.textStrokeState_);
      }
      this.setContextTextState_(this.textState_);
      const pixelCoordinates = transform2D(
        flatCoordinates, offset, end, stride, this.transform_,
        this.pixelCoordinates_);
      const context = this.context_;
      let rotation = this.textRotation_;
      if (this.textRotateWithView_) {
        rotation += this.viewRotation_;
      }
      for (; offset < end; offset += stride) {
        const x = pixelCoordinates[offset] + this.textOffsetX_;
        const y = pixelCoordinates[offset + 1] + this.textOffsetY_;
        if (rotation !== 0 || this.textScale_ != 1) {
          const localTransform = compose(this.tmpLocalTransform_,
            x, y,
            this.textScale_, this.textScale_,
            rotation,
            -x, -y);
          context.setTransform.apply(context, localTransform);
        }
        if (this.textStrokeState_) {
          context.strokeText(this.text_, x, y);
        }
        if (this.textFillState_) {
          context.fillText(this.text_, x, y);
        }
      }
      if (rotation !== 0 || this.textScale_ != 1) {
        context.setTransform(1, 0, 0, 1, 0, 0);
      }
    }

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {boolean} close Close.
     * @private
     * @return {number} end End.
     */
    moveToLineTo_(flatCoordinates, offset, end, stride, close) {
      const context = this.context_;
      const pixelCoordinates = transform2D(
        flatCoordinates, offset, end, stride, this.transform_,
        this.pixelCoordinates_);
      context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);
      let length = pixelCoordinates.length;
      if (close) {
        length -= 2;
      }
      for (let i = 2; i < length; i += 2) {
        context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);
      }
      if (close) {
        context.closePath();
      }
      return end;
    }

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @private
     * @return {number} End.
     */
    drawRings_(flatCoordinates, offset, ends, stride) {
      for (let i = 0, ii = ends.length; i < ii; ++i) {
        offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, true);
      }
      return offset;
    }

    /**
     * Render a circle geometry into the canvas.  Rendering is immediate and uses
     * the current fill and stroke styles.
     *
     * @param {import("../../geom/Circle.js").default} geometry Circle geometry.
     * @override
     * @api
     */
    drawCircle(geometry) {
      if (!intersects(this.extent_, geometry.getExtent())) {
        return;
      }
      if (this.fillState_ || this.strokeState_) {
        if (this.fillState_) {
          this.setContextFillState_(this.fillState_);
        }
        if (this.strokeState_) {
          this.setContextStrokeState_(this.strokeState_);
        }
        const pixelCoordinates = transformGeom2D(
          geometry, this.transform_, this.pixelCoordinates_);
        const dx = pixelCoordinates[2] - pixelCoordinates[0];
        const dy = pixelCoordinates[3] - pixelCoordinates[1];
        const radius = Math.sqrt(dx * dx + dy * dy);
        const context = this.context_;
        context.beginPath();
        context.arc(
          pixelCoordinates[0], pixelCoordinates[1], radius, 0, 2 * Math.PI);
        if (this.fillState_) {
          context.fill();
        }
        if (this.strokeState_) {
          context.stroke();
        }
      }
      if (this.text_ !== '') {
        this.drawText_(geometry.getCenter(), 0, 2, 2);
      }
    }

    /**
     * Set the rendering style.  Note that since this is an immediate rendering API,
     * any `zIndex` on the provided style will be ignored.
     *
     * @param {import("../../style/Style.js").default} style The rendering style.
     * @override
     * @api
     */
    setStyle(style) {
      this.setFillStrokeStyle(style.getFill(), style.getStroke());
      this.setImageStyle(style.getImage());
      this.setTextStyle(style.getText());
    }

    /**
     * Render a geometry into the canvas.  Call
     * {@link module:ol/render/canvas/Immediate#setStyle} first to set the rendering style.
     *
     * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry The geometry to render.
     * @override
     * @api
     */
    drawGeometry(geometry) {
      const type = geometry.getType();
      switch (type) {
        case GeometryType.POINT:
          this.drawPoint(/** @type {import("../../geom/Point.js").default} */ (geometry));
          break;
        case GeometryType.LINE_STRING:
          this.drawLineString(/** @type {import("../../geom/LineString.js").default} */ (geometry));
          break;
        case GeometryType.POLYGON:
          this.drawPolygon(/** @type {import("../../geom/Polygon.js").default} */ (geometry));
          break;
        case GeometryType.MULTI_POINT:
          this.drawMultiPoint(/** @type {import("../../geom/MultiPoint.js").default} */ (geometry));
          break;
        case GeometryType.MULTI_LINE_STRING:
          this.drawMultiLineString(/** @type {import("../../geom/MultiLineString.js").default} */ (geometry));
          break;
        case GeometryType.MULTI_POLYGON:
          this.drawMultiPolygon(/** @type {import("../../geom/MultiPolygon.js").default} */ (geometry));
          break;
        case GeometryType.GEOMETRY_COLLECTION:
          this.drawGeometryCollection(/** @type {import("../../geom/GeometryCollection.js").default} */ (geometry));
          break;
        case GeometryType.CIRCLE:
          this.drawCircle(/** @type {import("../../geom/Circle.js").default} */ (geometry));
          break;
      }
    }

    /**
     * Render a feature into the canvas.  Note that any `zIndex` on the provided
     * style will be ignored - features are rendered immediately in the order that
     * this method is called.  If you need `zIndex` support, you should be using an
     * {@link module:ol/layer/Vector~VectorLayer} instead.
     *
     * @param {import("../../Feature.js").default} feature Feature.
     * @param {import("../../style/Style.js").default} style Style.
     * @override
     * @api
     */
    drawFeature(feature, style) {
      const geometry = style.getGeometryFunction()(feature);
      if (!geometry || !intersects(this.extent_, geometry.getExtent())) {
        return;
      }
      this.setStyle(style);
      this.drawGeometry(geometry);
    }

    /**
     * Render a GeometryCollection to the canvas.  Rendering is immediate and
     * uses the current styles appropriate for each geometry in the collection.
     *
     * @param {import("../../geom/GeometryCollection.js").default} geometry Geometry collection.
     * @override
     */
    drawGeometryCollection(geometry) {
      const geometries = geometry.getGeometriesArray();
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        this.drawGeometry(geometries[i]);
      }
    }

    /**
     * Render a Point geometry into the canvas.  Rendering is immediate and uses
     * the current style.
     *
     * @param {import("../../geom/Point.js").default|import("../Feature.js").default} geometry Point geometry.
     * @override
     */
    drawPoint(geometry) {
      const flatCoordinates = geometry.getFlatCoordinates();
      const stride = geometry.getStride();
      if (this.image_) {
        this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);
      }
      if (this.text_ !== '') {
        this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);
      }
    }

    /**
     * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and
     * uses the current style.
     *
     * @param {import("../../geom/MultiPoint.js").default|import("../Feature.js").default} geometry MultiPoint geometry.
     * @override
     */
    drawMultiPoint(geometry) {
      const flatCoordinates = geometry.getFlatCoordinates();
      const stride = geometry.getStride();
      if (this.image_) {
        this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);
      }
      if (this.text_ !== '') {
        this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);
      }
    }

    /**
     * Render a LineString into the canvas.  Rendering is immediate and uses
     * the current style.
     *
     * @param {import("../../geom/LineString.js").default|import("../Feature.js").default} geometry LineString geometry.
     * @override
     */
    drawLineString(geometry) {
      if (!intersects(this.extent_, geometry.getExtent())) {
        return;
      }
      if (this.strokeState_) {
        this.setContextStrokeState_(this.strokeState_);
        const context = this.context_;
        const flatCoordinates = geometry.getFlatCoordinates();
        context.beginPath();
        this.moveToLineTo_(flatCoordinates, 0, flatCoordinates.length,
          geometry.getStride(), false);
        context.stroke();
      }
      if (this.text_ !== '') {
        const flatMidpoint = geometry.getFlatMidpoint();
        this.drawText_(flatMidpoint, 0, 2, 2);
      }
    }

    /**
     * Render a MultiLineString geometry into the canvas.  Rendering is immediate
     * and uses the current style.
     *
     * @param {import("../../geom/MultiLineString.js").default|import("../Feature.js").default} geometry MultiLineString geometry.
     * @override
     */
    drawMultiLineString(geometry) {
      const geometryExtent = geometry.getExtent();
      if (!intersects(this.extent_, geometryExtent)) {
        return;
      }
      if (this.strokeState_) {
        this.setContextStrokeState_(this.strokeState_);
        const context = this.context_;
        const flatCoordinates = geometry.getFlatCoordinates();
        let offset = 0;
        const ends = /** @type {Array<number>} */ (geometry.getEnds());
        const stride = geometry.getStride();
        context.beginPath();
        for (let i = 0, ii = ends.length; i < ii; ++i) {
          offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, false);
        }
        context.stroke();
      }
      if (this.text_ !== '') {
        const flatMidpoints = geometry.getFlatMidpoints();
        this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);
      }
    }

    /**
     * Render a Polygon geometry into the canvas.  Rendering is immediate and uses
     * the current style.
     *
     * @param {import("../../geom/Polygon.js").default|import("../Feature.js").default} geometry Polygon geometry.
     * @override
     */
    drawPolygon(geometry) {
      if (!intersects(this.extent_, geometry.getExtent())) {
        return;
      }
      if (this.strokeState_ || this.fillState_) {
        if (this.fillState_) {
          this.setContextFillState_(this.fillState_);
        }
        if (this.strokeState_) {
          this.setContextStrokeState_(this.strokeState_);
        }
        const context = this.context_;
        context.beginPath();
        this.drawRings_(geometry.getOrientedFlatCoordinates(),
          0, /** @type {Array<number>} */ (geometry.getEnds()), geometry.getStride());
        if (this.fillState_) {
          context.fill();
        }
        if (this.strokeState_) {
          context.stroke();
        }
      }
      if (this.text_ !== '') {
        const flatInteriorPoint = geometry.getFlatInteriorPoint();
        this.drawText_(flatInteriorPoint, 0, 2, 2);
      }
    }

    /**
     * Render MultiPolygon geometry into the canvas.  Rendering is immediate and
     * uses the current style.
     * @param {import("../../geom/MultiPolygon.js").default} geometry MultiPolygon geometry.
     * @override
     */
    drawMultiPolygon(geometry) {
      if (!intersects(this.extent_, geometry.getExtent())) {
        return;
      }
      if (this.strokeState_ || this.fillState_) {
        if (this.fillState_) {
          this.setContextFillState_(this.fillState_);
        }
        if (this.strokeState_) {
          this.setContextStrokeState_(this.strokeState_);
        }
        const context = this.context_;
        const flatCoordinates = geometry.getOrientedFlatCoordinates();
        let offset = 0;
        const endss = geometry.getEndss();
        const stride = geometry.getStride();
        context.beginPath();
        for (let i = 0, ii = endss.length; i < ii; ++i) {
          const ends = endss[i];
          offset = this.drawRings_(flatCoordinates, offset, ends, stride);
        }
        if (this.fillState_) {
          context.fill();
        }
        if (this.strokeState_) {
          context.stroke();
        }
      }
      if (this.text_ !== '') {
        const flatInteriorPoints = geometry.getFlatInteriorPoints();
        this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);
      }
    }

    /**
     * @param {import("../canvas.js").FillState} fillState Fill state.
     * @private
     */
    setContextFillState_(fillState) {
      const context = this.context_;
      const contextFillState = this.contextFillState_;
      if (!contextFillState) {
        context.fillStyle = fillState.fillStyle;
        this.contextFillState_ = {
          fillStyle: fillState.fillStyle
        };
      } else {
        if (contextFillState.fillStyle != fillState.fillStyle) {
          contextFillState.fillStyle = context.fillStyle = fillState.fillStyle;
        }
      }
    }

    /**
     * @param {import("../canvas.js").StrokeState} strokeState Stroke state.
     * @private
     */
    setContextStrokeState_(strokeState) {
      const context = this.context_;
      const contextStrokeState = this.contextStrokeState_;
      if (!contextStrokeState) {
        context.lineCap = strokeState.lineCap;
        if (context.setLineDash) {
          context.setLineDash(strokeState.lineDash);
          context.lineDashOffset = strokeState.lineDashOffset;
        }
        context.lineJoin = strokeState.lineJoin;
        context.lineWidth = strokeState.lineWidth;
        context.miterLimit = strokeState.miterLimit;
        context.strokeStyle = strokeState.strokeStyle;
        this.contextStrokeState_ = {
          lineCap: strokeState.lineCap,
          lineDash: strokeState.lineDash,
          lineDashOffset: strokeState.lineDashOffset,
          lineJoin: strokeState.lineJoin,
          lineWidth: strokeState.lineWidth,
          miterLimit: strokeState.miterLimit,
          strokeStyle: strokeState.strokeStyle
        };
      } else {
        if (contextStrokeState.lineCap != strokeState.lineCap) {
          contextStrokeState.lineCap = context.lineCap = strokeState.lineCap;
        }
        if (context.setLineDash) {
          if (!equals$1(contextStrokeState.lineDash, strokeState.lineDash)) {
            context.setLineDash(contextStrokeState.lineDash = strokeState.lineDash);
          }
          if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {
            contextStrokeState.lineDashOffset = context.lineDashOffset =
                strokeState.lineDashOffset;
          }
        }
        if (contextStrokeState.lineJoin != strokeState.lineJoin) {
          contextStrokeState.lineJoin = context.lineJoin = strokeState.lineJoin;
        }
        if (contextStrokeState.lineWidth != strokeState.lineWidth) {
          contextStrokeState.lineWidth = context.lineWidth = strokeState.lineWidth;
        }
        if (contextStrokeState.miterLimit != strokeState.miterLimit) {
          contextStrokeState.miterLimit = context.miterLimit =
              strokeState.miterLimit;
        }
        if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {
          contextStrokeState.strokeStyle = context.strokeStyle =
              strokeState.strokeStyle;
        }
      }
    }

    /**
     * @param {import("../canvas.js").TextState} textState Text state.
     * @private
     */
    setContextTextState_(textState) {
      const context = this.context_;
      const contextTextState = this.contextTextState_;
      const textAlign = textState.textAlign ?
        textState.textAlign : defaultTextAlign;
      if (!contextTextState) {
        context.font = textState.font;
        context.textAlign = /** @type {CanvasTextAlign} */ (textAlign);
        context.textBaseline = /** @type {CanvasTextBaseline} */ (textState.textBaseline);
        this.contextTextState_ = {
          font: textState.font,
          textAlign: textAlign,
          textBaseline: textState.textBaseline
        };
      } else {
        if (contextTextState.font != textState.font) {
          contextTextState.font = context.font = textState.font;
        }
        if (contextTextState.textAlign != textAlign) {
          contextTextState.textAlign = context.textAlign = /** @type {CanvasTextAlign} */ (textAlign);
        }
        if (contextTextState.textBaseline != textState.textBaseline) {
          contextTextState.textBaseline = context.textBaseline =
            /** @type {CanvasTextBaseline} */ (textState.textBaseline);
        }
      }
    }

    /**
     * Set the fill and stroke style for subsequent draw operations.  To clear
     * either fill or stroke styles, pass null for the appropriate parameter.
     *
     * @param {import("../../style/Fill.js").default} fillStyle Fill style.
     * @param {import("../../style/Stroke.js").default} strokeStyle Stroke style.
     * @override
     */
    setFillStrokeStyle(fillStyle, strokeStyle) {
      if (!fillStyle) {
        this.fillState_ = null;
      } else {
        const fillStyleColor = fillStyle.getColor();
        this.fillState_ = {
          fillStyle: asColorLike(fillStyleColor ?
            fillStyleColor : defaultFillStyle)
        };
      }
      if (!strokeStyle) {
        this.strokeState_ = null;
      } else {
        const strokeStyleColor = strokeStyle.getColor();
        const strokeStyleLineCap = strokeStyle.getLineCap();
        const strokeStyleLineDash = strokeStyle.getLineDash();
        const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
        const strokeStyleLineJoin = strokeStyle.getLineJoin();
        const strokeStyleWidth = strokeStyle.getWidth();
        const strokeStyleMiterLimit = strokeStyle.getMiterLimit();
        this.strokeState_ = {
          lineCap: strokeStyleLineCap !== undefined ?
            strokeStyleLineCap : defaultLineCap,
          lineDash: strokeStyleLineDash ?
            strokeStyleLineDash : defaultLineDash,
          lineDashOffset: strokeStyleLineDashOffset ?
            strokeStyleLineDashOffset : defaultLineDashOffset,
          lineJoin: strokeStyleLineJoin !== undefined ?
            strokeStyleLineJoin : defaultLineJoin,
          lineWidth: this.pixelRatio_ * (strokeStyleWidth !== undefined ?
            strokeStyleWidth : defaultLineWidth),
          miterLimit: strokeStyleMiterLimit !== undefined ?
            strokeStyleMiterLimit : defaultMiterLimit,
          strokeStyle: asColorLike(strokeStyleColor ?
            strokeStyleColor : defaultStrokeStyle)
        };
      }
    }

    /**
     * Set the image style for subsequent draw operations.  Pass null to remove
     * the image style.
     *
     * @param {import("../../style/Image.js").default} imageStyle Image style.
     * @override
     */
    setImageStyle(imageStyle) {
      if (!imageStyle) {
        this.image_ = null;
      } else {
        const imageAnchor = imageStyle.getAnchor();
        // FIXME pixel ratio
        const imageImage = imageStyle.getImage(1);
        const imageOrigin = imageStyle.getOrigin();
        const imageSize = imageStyle.getSize();
        this.imageAnchorX_ = imageAnchor[0];
        this.imageAnchorY_ = imageAnchor[1];
        this.imageHeight_ = imageSize[1];
        this.image_ = imageImage;
        this.imageOpacity_ = imageStyle.getOpacity();
        this.imageOriginX_ = imageOrigin[0];
        this.imageOriginY_ = imageOrigin[1];
        this.imageRotateWithView_ = imageStyle.getRotateWithView();
        this.imageRotation_ = imageStyle.getRotation();
        this.imageScale_ = imageStyle.getScale() * this.pixelRatio_;
        this.imageWidth_ = imageSize[0];
      }
    }

    /**
     * Set the text style for subsequent draw operations.  Pass null to
     * remove the text style.
     *
     * @param {import("../../style/Text.js").default} textStyle Text style.
     * @override
     */
    setTextStyle(textStyle) {
      if (!textStyle) {
        this.text_ = '';
      } else {
        const textFillStyle = textStyle.getFill();
        if (!textFillStyle) {
          this.textFillState_ = null;
        } else {
          const textFillStyleColor = textFillStyle.getColor();
          this.textFillState_ = {
            fillStyle: asColorLike(textFillStyleColor ?
              textFillStyleColor : defaultFillStyle)
          };
        }
        const textStrokeStyle = textStyle.getStroke();
        if (!textStrokeStyle) {
          this.textStrokeState_ = null;
        } else {
          const textStrokeStyleColor = textStrokeStyle.getColor();
          const textStrokeStyleLineCap = textStrokeStyle.getLineCap();
          const textStrokeStyleLineDash = textStrokeStyle.getLineDash();
          const textStrokeStyleLineDashOffset = textStrokeStyle.getLineDashOffset();
          const textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();
          const textStrokeStyleWidth = textStrokeStyle.getWidth();
          const textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();
          this.textStrokeState_ = {
            lineCap: textStrokeStyleLineCap !== undefined ?
              textStrokeStyleLineCap : defaultLineCap,
            lineDash: textStrokeStyleLineDash ?
              textStrokeStyleLineDash : defaultLineDash,
            lineDashOffset: textStrokeStyleLineDashOffset ?
              textStrokeStyleLineDashOffset : defaultLineDashOffset,
            lineJoin: textStrokeStyleLineJoin !== undefined ?
              textStrokeStyleLineJoin : defaultLineJoin,
            lineWidth: textStrokeStyleWidth !== undefined ?
              textStrokeStyleWidth : defaultLineWidth,
            miterLimit: textStrokeStyleMiterLimit !== undefined ?
              textStrokeStyleMiterLimit : defaultMiterLimit,
            strokeStyle: asColorLike(textStrokeStyleColor ?
              textStrokeStyleColor : defaultStrokeStyle)
          };
        }
        const textFont = textStyle.getFont();
        const textOffsetX = textStyle.getOffsetX();
        const textOffsetY = textStyle.getOffsetY();
        const textRotateWithView = textStyle.getRotateWithView();
        const textRotation = textStyle.getRotation();
        const textScale = textStyle.getScale();
        const textText = textStyle.getText();
        const textTextAlign = textStyle.getTextAlign();
        const textTextBaseline = textStyle.getTextBaseline();
        this.textState_ = {
          font: textFont !== undefined ?
            textFont : defaultFont,
          textAlign: textTextAlign !== undefined ?
            textTextAlign : defaultTextAlign,
          textBaseline: textTextBaseline !== undefined ?
            textTextBaseline : defaultTextBaseline
        };
        this.text_ = textText !== undefined ? textText : '';
        this.textOffsetX_ =
            textOffsetX !== undefined ? (this.pixelRatio_ * textOffsetX) : 0;
        this.textOffsetY_ =
            textOffsetY !== undefined ? (this.pixelRatio_ * textOffsetY) : 0;
        this.textRotateWithView_ = textRotateWithView !== undefined ? textRotateWithView : false;
        this.textRotation_ = textRotation !== undefined ? textRotation : 0;
        this.textScale_ = this.pixelRatio_ * (textScale !== undefined ?
          textScale : 1);
      }
    }
  }

  /**
   * @module ol/render
   */


  /**
   * @typedef {Object} State
   * @property {CanvasRenderingContext2D} context Canvas context that the layer is being rendered to.
   * @property {import("./Feature.js").FeatureLike} feature
   * @property {import("./geom/SimpleGeometry.js").default} geometry
   * @property {number} pixelRatio Pixel ratio used by the layer renderer.
   * @property {number} resolution Resolution that the render batch was created and optimized for.
   * This is not the view's resolution that is being rendered.
   * @property {number} rotation Rotation of the rendered layer in radians.
   */


  /**
   * A function to be used when sorting features before rendering.
   * It takes two instances of {@link module:ol/Feature} or
   * {@link module:ol/render/Feature} and returns a `{number}`.
   *
   * @typedef {function(import("./Feature.js").FeatureLike, import("./Feature.js").FeatureLike):number} OrderFunction
   */


  /**
   * @typedef {Object} ToContextOptions
   * @property {import("./size.js").Size} [size] Desired size of the canvas in css
   * pixels. When provided, both canvas and css size will be set according to the
   * `pixelRatio`. If not provided, the current canvas and css sizes will not be
   * altered.
   * @property {number} [pixelRatio=window.devicePixelRatio] Pixel ratio (canvas
   * pixel to css pixel ratio) for the canvas.
   */


  /**
   * Binds a Canvas Immediate API to a canvas context, to allow drawing geometries
   * to the context's canvas.
   *
   * The units for geometry coordinates are css pixels relative to the top left
   * corner of the canvas element.
   * ```js
   * import {toContext} from 'ol/render';
   * import Fill from 'ol/style/Fill';
   * import Polygon from 'ol/geom/Polygon';
   *
   * var canvas = document.createElement('canvas');
   * var render = toContext(canvas.getContext('2d'),
   *     { size: [100, 100] });
   * render.setFillStrokeStyle(new Fill({ color: blue }));
   * render.drawPolygon(
   *     new Polygon([[[0, 0], [100, 100], [100, 0], [0, 0]]]));
   * ```
   *
   * @param {CanvasRenderingContext2D} context Canvas context.
   * @param {ToContextOptions=} opt_options Options.
   * @return {CanvasImmediateRenderer} Canvas Immediate.
   * @api
   */
  function toContext(context, opt_options) {
    const canvas = context.canvas;
    const options = opt_options ? opt_options : {};
    const pixelRatio = options.pixelRatio || DEVICE_PIXEL_RATIO;
    const size = options.size;
    if (size) {
      canvas.width = size[0] * pixelRatio;
      canvas.height = size[1] * pixelRatio;
      canvas.style.width = size[0] + 'px';
      canvas.style.height = size[1] + 'px';
    }
    const extent = [0, 0, canvas.width, canvas.height];
    const transform = scale$1(create(), pixelRatio, pixelRatio);
    return new CanvasImmediateRenderer(context, pixelRatio, extent, transform, 0);
  }

  /**
   * Gets a vector context for drawing to the event's canvas.
   * @param {import("./render/Event.js").default} event Render event.
   * @returns {CanvasImmediateRenderer} Vector context.
   * @api
   */
  function getVectorContext(event) {
    const frameState = event.frameState;
    const transform = multiply(event.inversePixelTransform.slice(), frameState.coordinateToPixelTransform);
    return new CanvasImmediateRenderer(
      event.context, frameState.pixelRatio, frameState.extent, transform,
      frameState.viewState.rotation);
  }

  /**
   * Gets the pixel of the event's canvas context from the map viewport's CSS pixel.
   * @param {import("./render/Event.js").default} event Render event.
   * @param {import("./pixel.js").Pixel} pixel CSS pixel relative to the top-left
   * corner of the map viewport.
   * @returns {import("./pixel.js").Pixel} Pixel on the event's canvas context.
   * @api
   */
  function getRenderPixel(event, pixel) {
    const result = pixel.slice(0);
    apply(event.inversePixelTransform.slice(), result);
    return result;
  }

  /**
   * @param {import("./PluggableMap.js").FrameState} frameState Frame state.
   * @param {?} declutterTree Declutter tree.
   * @returns {?} Declutter tree.
   */
  function renderDeclutterItems(frameState, declutterTree) {
    if (declutterTree) {
      declutterTree.clear();
    }
    const items = frameState.declutterItems;
    for (let z = items.length - 1; z >= 0; --z) {
      const item = items[z];
      const zIndexItems = item.items;
      for (let i = 0, ii = zIndexItems.length; i < ii; i += 3) {
        declutterTree = zIndexItems[i].renderDeclutter(zIndexItems[i + 1], zIndexItems[i + 2], item.opacity, declutterTree);
      }
    }
    items.length = 0;
    return declutterTree;
  }

  var render$3 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    toContext: toContext,
    getVectorContext: getVectorContext,
    getRenderPixel: getRenderPixel,
    renderDeclutterItems: renderDeclutterItems
  });

  /**
   * @module ol/renderer/Map
   */

  /**
   * @abstract
   */
  class MapRenderer extends Disposable {

    /**
     * @param {import("../PluggableMap.js").default} map Map.
     */
    constructor(map) {
      super();

      /**
       * @private
       * @type {import("../PluggableMap.js").default}
       */
      this.map_ = map;

      /**
       * @private
       */
      this.declutterTree_ = null;

    }

    /**
     * @abstract
     * @param {import("../render/EventType.js").default} type Event type.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     */
    dispatchRenderEvent(type, frameState) {
      abstract();
    }

    /**
     * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
     * @protected
     */
    calculateMatrices2D(frameState) {
      const viewState = frameState.viewState;
      const coordinateToPixelTransform = frameState.coordinateToPixelTransform;
      const pixelToCoordinateTransform = frameState.pixelToCoordinateTransform;

      compose(coordinateToPixelTransform,
        frameState.size[0] / 2, frameState.size[1] / 2,
        1 / viewState.resolution, -1 / viewState.resolution,
        -viewState.rotation,
        -viewState.center[0], -viewState.center[1]);

      makeInverse(pixelToCoordinateTransform, coordinateToPixelTransform);
    }

    /**
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {function(this: S, import("../Feature.js").FeatureLike,
     *     import("../layer/Layer.js").default): T} callback Feature callback.
     * @param {S} thisArg Value to use as `this` when executing `callback`.
     * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
     *     function, only layers which are visible and for which this function
     *     returns `true` will be tested for features.  By default, all visible
     *     layers will be tested.
     * @param {U} thisArg2 Value to use as `this` when executing `layerFilter`.
     * @return {T|undefined} Callback result.
     * @template S,T,U
     */
    forEachFeatureAtCoordinate(
      coordinate,
      frameState,
      hitTolerance,
      callback,
      thisArg,
      layerFilter,
      thisArg2
    ) {
      let result;
      const viewState = frameState.viewState;
      const viewResolution = viewState.resolution;

      /**
       * @param {boolean} managed Managed layer.
       * @param {import("../Feature.js").FeatureLike} feature Feature.
       * @param {import("../layer/Layer.js").default} layer Layer.
       * @return {?} Callback result.
       */
      function forEachFeatureAtCoordinate(managed, feature, layer) {
        if (!(getUid(feature) in frameState.skippedFeatureUids && !managed)) {
          return callback.call(thisArg, feature, managed ? layer : null);
        }
      }

      const projection = viewState.projection;

      let translatedCoordinate = coordinate;
      if (projection.canWrapX()) {
        const projectionExtent = projection.getExtent();
        const worldWidth = getWidth(projectionExtent);
        const x = coordinate[0];
        if (x < projectionExtent[0] || x > projectionExtent[2]) {
          const worldsAway = Math.ceil((projectionExtent[0] - x) / worldWidth);
          translatedCoordinate = [x + worldWidth * worldsAway, coordinate[1]];
        }
      }

      const layerStates = frameState.layerStatesArray;
      const numLayers = layerStates.length;
      let declutteredFeatures;
      if (this.declutterTree_) {
        declutteredFeatures = this.declutterTree_.all().map(function(entry) {
          return entry.value;
        });
      }
      let i;
      for (i = numLayers - 1; i >= 0; --i) {
        const layerState = layerStates[i];
        const layer = /** @type {import("../layer/Layer.js").default} */ (layerState.layer);
        if (layer.hasRenderer() && visibleAtResolution(layerState, viewResolution) && layerFilter.call(thisArg2, layer)) {
          const layerRenderer = layer.getRenderer();
          const source = layer.getSource();
          if (layerRenderer && source) {
            const callback = forEachFeatureAtCoordinate.bind(null, layerState.managed);
            result = layerRenderer.forEachFeatureAtCoordinate(
              source.getWrapX() ? translatedCoordinate : coordinate,
              frameState, hitTolerance, callback, declutteredFeatures);
          }
          if (result) {
            return result;
          }
        }
      }
      return undefined;
    }

    /**
     * @abstract
     * @param {import("../pixel.js").Pixel} pixel Pixel.
     * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {function(this: S, import("../layer/Layer.js").default, (Uint8ClampedArray|Uint8Array)): T} callback Layer
     *     callback.
     * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
     *     function, only layers which are visible and for which this function
     *     returns `true` will be tested for features.  By default, all visible
     *     layers will be tested.
     * @return {T|undefined} Callback result.
     * @template S,T,U
     */
    forEachLayerAtPixel(pixel, frameState, hitTolerance, callback, layerFilter) {
      return abstract();
    }

    /**
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
     *     function, only layers which are visible and for which this function
     *     returns `true` will be tested for features.  By default, all visible
     *     layers will be tested.
     * @param {U} thisArg Value to use as `this` when executing `layerFilter`.
     * @return {boolean} Is there a feature at the given coordinate?
     * @template U
     */
    hasFeatureAtCoordinate(coordinate, frameState, hitTolerance, layerFilter, thisArg) {
      const hasFeature = this.forEachFeatureAtCoordinate(
        coordinate, frameState, hitTolerance, TRUE, this, layerFilter, thisArg);

      return hasFeature !== undefined;
    }

    /**
     * @return {import("../PluggableMap.js").default} Map.
     */
    getMap() {
      return this.map_;
    }

    /**
     * Render.
     * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
     */
    renderFrame(frameState) {
      this.declutterTree_ = renderDeclutterItems(frameState, this.declutterTree_);
    }

    /**
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @protected
     */
    scheduleExpireIconCache(frameState) {
      if (shared.canExpireCache()) {
        frameState.postRenderFunctions.push(expireIconCache);
      }
    }
  }


  /**
   * @param {import("../PluggableMap.js").default} map Map.
   * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
   */
  function expireIconCache(map, frameState) {
    shared.expire();
  }

  /**
   * @module ol/renderer/Composite
   */


  /**
   * @classdesc
   * Canvas map renderer.
   * @api
   */
  class CompositeMapRenderer extends MapRenderer {

    /**
     * @param {import("../PluggableMap.js").default} map Map.
     */
    constructor(map) {
      super(map);

      /**
       * @type {import("../events.js").EventsKey}
       */
      this.labelCacheKey_ = listen(labelCache, EventType.CLEAR, map.redrawText.bind(map));

      /**
       * @private
       * @type {HTMLDivElement}
       */
      this.element_ = document.createElement('div');
      const style = this.element_.style;
      style.position = 'absolute';
      style.width = '100%';
      style.height = '100%';
      style.zIndex = '0';

      this.element_.className = CLASS_UNSELECTABLE + ' ol-layers';

      const container = map.getViewport();
      container.insertBefore(this.element_, container.firstChild || null);

      /**
       * @private
       * @type {Array<HTMLElement>}
       */
      this.children_ = [];

      /**
       * @private
       * @type {boolean}
       */
      this.renderedVisible_ = true;
    }

    /**
     * @param {import("../render/EventType.js").default} type Event type.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     */
    dispatchRenderEvent(type, frameState) {
      const map = this.getMap();
      if (map.hasListener(type)) {
        const event = new RenderEvent(type, undefined, frameState);
        map.dispatchEvent(event);
      }
    }

    disposeInternal() {
      unlistenByKey(this.labelCacheKey_);
      super.disposeInternal();
    }

    /**
     * @inheritDoc
     */
    renderFrame(frameState) {
      if (!frameState) {
        if (this.renderedVisible_) {
          this.element_.style.display = 'none';
          this.renderedVisible_ = false;
        }
        return;
      }

      this.calculateMatrices2D(frameState);
      this.dispatchRenderEvent(RenderEventType.PRECOMPOSE, frameState);

      const layerStatesArray = frameState.layerStatesArray.sort(function(a, b) {
        return a.zIndex - b.zIndex;
      });
      const viewResolution = frameState.viewState.resolution;

      this.children_.length = 0;
      let hasOverlay = false;
      let previousElement = null;
      for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {
        const layerState = layerStatesArray[i];
        hasOverlay = hasOverlay || layerState.hasOverlay;
        frameState.layerIndex = i;
        if (!visibleAtResolution(layerState, viewResolution) ||
          (layerState.sourceState != SourceState.READY && layerState.sourceState != SourceState.UNDEFINED)) {
          continue;
        }

        const layer = layerState.layer;
        const element = layer.render(frameState, previousElement);
        if (!element) {
          continue;
        }
        if ((element !== previousElement || i == ii - 1) && element.childElementCount === 2 && !hasOverlay) {
          element.removeChild(element.lastElementChild);
        }
        if (element !== previousElement) {
          this.children_.push(element);
          hasOverlay = false;
          previousElement = element;
        }
      }
      super.renderFrame(frameState);

      replaceChildren(this.element_, this.children_);

      this.dispatchRenderEvent(RenderEventType.POSTCOMPOSE, frameState);

      if (!this.renderedVisible_) {
        this.element_.style.display = '';
        this.renderedVisible_ = true;
      }

      this.scheduleExpireIconCache(frameState);
    }

    /**
     * @inheritDoc
     */
    forEachLayerAtPixel(pixel, frameState, hitTolerance, callback, layerFilter) {
      const viewState = frameState.viewState;
      const viewResolution = viewState.resolution;

      const layerStates = frameState.layerStatesArray;
      const numLayers = layerStates.length;

      for (let i = numLayers - 1; i >= 0; --i) {
        const layerState = layerStates[i];
        const layer = layerState.layer;
        if (layer.hasRenderer() && visibleAtResolution(layerState, viewResolution) && layerFilter(layer)) {
          const layerRenderer = layer.getRenderer();
          const data = layerRenderer.getDataAtPixel(pixel, frameState, hitTolerance);
          if (data) {
            const result = callback(layer, data);
            if (result) {
              return result;
            }
          }
        }
      }
      return undefined;
    }

  }

  /**
   * @module ol/control/OverviewMap
   */


  /**
   * Maximum width and/or height extent ratio that determines when the overview
   * map should be zoomed out.
   * @type {number}
   */
  const MAX_RATIO = 0.75;


  /**
   * Minimum width and/or height extent ratio that determines when the overview
   * map should be zoomed in.
   * @type {number}
   */
  const MIN_RATIO = 0.1;


  class ControlledMap extends PluggableMap {
    createRenderer() {
      return new CompositeMapRenderer(this);
    }
  }


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-overviewmap'] CSS class name.
   * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).
   * @property {string|HTMLElement} [collapseLabel='«'] Text label to use for the
   * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.
   * @property {string|HTMLElement} [label='»'] Text label to use for the collapsed
   * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {Array<import("../layer/Layer.js").default>|import("../Collection.js").default<import("../layer/Layer.js").default>} [layers]
   * Layers for the overview map.
   * @property {function(import("../MapEvent.js").default)} [render] Function called when the control
   * should be re-rendered. This is called in a `requestAnimationFrame` callback.
   * @property {HTMLElement|string} [target] Specify a target if you want the control
   * to be rendered outside of the map's viewport.
   * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.
   * @property {import("../View.js").default} [view] Custom view for the overview map. If not provided,
   * a default view with an EPSG:3857 projection will be used.
   */


  /**
   * Create a new control with a map acting as an overview map for an other
   * defined map.
   *
   * @api
   */
  class OverviewMap extends Control {

    /**
     * @param {Options=} opt_options OverviewMap options.
     */
    constructor(opt_options) {

      const options = opt_options ? opt_options : {};

      super({
        element: document.createElement('div'),
        render: options.render || render$4,
        target: options.target
      });

      /**
       * @type {boolean}
       * @private
       */
      this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;

      /**
       * @private
       * @type {boolean}
       */
      this.collapsible_ = options.collapsible !== undefined ?
        options.collapsible : true;

      if (!this.collapsible_) {
        this.collapsed_ = false;
      }

      const className = options.className !== undefined ? options.className : 'ol-overviewmap';

      const tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Overview map';

      const collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\u00AB';

      if (typeof collapseLabel === 'string') {
        /**
         * @private
         * @type {HTMLElement}
         */
        this.collapseLabel_ = document.createElement('span');
        this.collapseLabel_.textContent = collapseLabel;
      } else {
        this.collapseLabel_ = collapseLabel;
      }

      const label = options.label !== undefined ? options.label : '\u00BB';


      if (typeof label === 'string') {
        /**
         * @private
         * @type {HTMLElement}
         */
        this.label_ = document.createElement('span');
        this.label_.textContent = label;
      } else {
        this.label_ = label;
      }

      const activeLabel = (this.collapsible_ && !this.collapsed_) ?
        this.collapseLabel_ : this.label_;
      const button = document.createElement('button');
      button.setAttribute('type', 'button');
      button.title = tipLabel;
      button.appendChild(activeLabel);

      listen(button, EventType.CLICK,
        this.handleClick_, this);

      /**
       * @type {HTMLElement}
       * @private
       */
      this.ovmapDiv_ = document.createElement('div');
      this.ovmapDiv_.className = 'ol-overviewmap-map';

      /**
       * @type {ControlledMap}
       * @private
       */
      this.ovmap_ = new ControlledMap({
        view: options.view
      });
      const ovmap = this.ovmap_;

      if (options.layers) {
        options.layers.forEach(function(layer) {
          ovmap.addLayer(layer);
        });
      }

      const box = document.createElement('div');
      box.className = 'ol-overviewmap-box';
      box.style.boxSizing = 'border-box';

      /**
       * @type {import("../Overlay.js").default}
       * @private
       */
      this.boxOverlay_ = new Overlay({
        position: [0, 0],
        positioning: OverlayPositioning.BOTTOM_LEFT,
        element: box
      });
      this.ovmap_.addOverlay(this.boxOverlay_);

      const cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL +
          (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +
          (this.collapsible_ ? '' : ' ol-uncollapsible');
      const element = this.element;
      element.className = cssClasses;
      element.appendChild(this.ovmapDiv_);
      element.appendChild(button);

      /* Interactive map */

      const scope = this;

      const overlay = this.boxOverlay_;
      const overlayBox = this.boxOverlay_.getElement();

      /* Functions definition */

      const computeDesiredMousePosition = function(mousePosition) {
        return {
          clientX: mousePosition.clientX - (overlayBox.offsetWidth / 2),
          clientY: mousePosition.clientY + (overlayBox.offsetHeight / 2)
        };
      };

      const move = function(event) {
        const position = /** @type {?} */ (computeDesiredMousePosition(event));
        const coordinates = ovmap.getEventCoordinate(/** @type {Event} */ (position));

        overlay.setPosition(coordinates);
      };

      const endMoving = function(event) {
        const coordinates = ovmap.getEventCoordinate(event);

        scope.getMap().getView().setCenter(coordinates);

        window.removeEventListener('mousemove', move);
        window.removeEventListener('mouseup', endMoving);
      };

      /* Binding */

      overlayBox.addEventListener('mousedown', function() {
        window.addEventListener('mousemove', move);
        window.addEventListener('mouseup', endMoving);
      });
    }

    /**
     * @inheritDoc
     * @api
     */
    setMap(map) {
      const oldMap = this.getMap();
      if (map === oldMap) {
        return;
      }
      if (oldMap) {
        const oldView = oldMap.getView();
        if (oldView) {
          this.unbindView_(oldView);
        }
        this.ovmap_.setTarget(null);
      }
      super.setMap(map);

      if (map) {
        this.ovmap_.setTarget(this.ovmapDiv_);
        this.listenerKeys.push(listen(
          map, ObjectEventType.PROPERTYCHANGE,
          this.handleMapPropertyChange_, this));

        const view = map.getView();
        if (view) {
          this.bindView_(view);
          if (view.isDef()) {
            this.ovmap_.updateSize();
            this.resetExtent_();
          }
        }
      }
    }

    /**
     * Handle map property changes.  This only deals with changes to the map's view.
     * @param {import("../Object.js").ObjectEvent} event The propertychange event.
     * @private
     */
    handleMapPropertyChange_(event) {
      if (event.key === MapProperty.VIEW) {
        const oldView = /** @type {import("../View.js").default} */ (event.oldValue);
        if (oldView) {
          this.unbindView_(oldView);
        }
        const newView = this.getMap().getView();
        this.bindView_(newView);
      }
    }

    /**
     * Register listeners for view property changes.
     * @param {import("../View.js").default} view The view.
     * @private
     */
    bindView_(view) {
      listen(view,
        getChangeEventType(ViewProperty.ROTATION),
        this.handleRotationChanged_, this);
    }

    /**
     * Unregister listeners for view property changes.
     * @param {import("../View.js").default} view The view.
     * @private
     */
    unbindView_(view) {
      unlisten(view,
        getChangeEventType(ViewProperty.ROTATION),
        this.handleRotationChanged_, this);
    }

    /**
     * Handle rotation changes to the main map.
     * TODO: This should rotate the extent rectrangle instead of the
     * overview map's view.
     * @private
     */
    handleRotationChanged_() {
      this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());
    }

    /**
     * Reset the overview map extent if the box size (width or
     * height) is less than the size of the overview map size times minRatio
     * or is greater than the size of the overview size times maxRatio.
     *
     * If the map extent was not reset, the box size can fits in the defined
     * ratio sizes. This method then checks if is contained inside the overview
     * map current extent. If not, recenter the overview map to the current
     * main map center location.
     * @private
     */
    validateExtent_() {
      const map = this.getMap();
      const ovmap = this.ovmap_;

      if (!map.isRendered() || !ovmap.isRendered()) {
        return;
      }

      const mapSize = /** @type {import("../size.js").Size} */ (map.getSize());

      const view = map.getView();
      const extent = view.calculateExtent(mapSize);

      const ovmapSize = /** @type {import("../size.js").Size} */ (ovmap.getSize());

      const ovview = ovmap.getView();
      const ovextent = ovview.calculateExtent(ovmapSize);

      const topLeftPixel =
          ovmap.getPixelFromCoordinate(getTopLeft(extent));
      const bottomRightPixel =
          ovmap.getPixelFromCoordinate(getBottomRight(extent));

      const boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);
      const boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);

      const ovmapWidth = ovmapSize[0];
      const ovmapHeight = ovmapSize[1];

      if (boxWidth < ovmapWidth * MIN_RATIO ||
          boxHeight < ovmapHeight * MIN_RATIO ||
          boxWidth > ovmapWidth * MAX_RATIO ||
          boxHeight > ovmapHeight * MAX_RATIO) {
        this.resetExtent_();
      } else if (!containsExtent(ovextent, extent)) {
        this.recenter_();
      }
    }

    /**
     * Reset the overview map extent to half calculated min and max ratio times
     * the extent of the main map.
     * @private
     */
    resetExtent_() {

      const map = this.getMap();
      const ovmap = this.ovmap_;

      const mapSize = /** @type {import("../size.js").Size} */ (map.getSize());

      const view = map.getView();
      const extent = view.calculateExtent(mapSize);

      const ovview = ovmap.getView();

      // get how many times the current map overview could hold different
      // box sizes using the min and max ratio, pick the step in the middle used
      // to calculate the extent from the main map to set it to the overview map,
      const steps = Math.log(
        MAX_RATIO / MIN_RATIO) / Math.LN2;
      const ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);
      scaleFromCenter(extent, ratio);
      ovview.fit(extent);
    }

    /**
     * Set the center of the overview map to the map center without changing its
     * resolution.
     * @private
     */
    recenter_() {
      const map = this.getMap();
      const ovmap = this.ovmap_;

      const view = map.getView();

      const ovview = ovmap.getView();

      ovview.setCenter(view.getCenter());
    }

    /**
     * Update the box using the main map extent
     * @private
     */
    updateBox_() {
      const map = this.getMap();
      const ovmap = this.ovmap_;

      if (!map.isRendered() || !ovmap.isRendered()) {
        return;
      }

      const mapSize = /** @type {import("../size.js").Size} */ (map.getSize());

      const view = map.getView();

      const ovview = ovmap.getView();

      const rotation = view.getRotation();

      const overlay = this.boxOverlay_;
      const box = this.boxOverlay_.getElement();
      const extent = view.calculateExtent(mapSize);
      const ovresolution = ovview.getResolution();
      const bottomLeft = getBottomLeft(extent);
      const topRight = getTopRight(extent);

      // set position using bottom left coordinates
      const rotateBottomLeft = this.calculateCoordinateRotate_(rotation, bottomLeft);
      overlay.setPosition(rotateBottomLeft);

      // set box size calculated from map extent size and overview map resolution
      if (box) {
        box.style.width = Math.abs((bottomLeft[0] - topRight[0]) / ovresolution) + 'px';
        box.style.height = Math.abs((topRight[1] - bottomLeft[1]) / ovresolution) + 'px';
      }
    }

    /**
     * @param {number} rotation Target rotation.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @return {import("../coordinate.js").Coordinate|undefined} Coordinate for rotation and center anchor.
     * @private
     */
    calculateCoordinateRotate_(rotation, coordinate) {
      let coordinateRotate;

      const map = this.getMap();
      const view = map.getView();

      const currentCenter = view.getCenter();

      if (currentCenter) {
        coordinateRotate = [
          coordinate[0] - currentCenter[0],
          coordinate[1] - currentCenter[1]
        ];
        rotate$2(coordinateRotate, rotation);
        add$2(coordinateRotate, currentCenter);
      }
      return coordinateRotate;
    }

    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */
    handleClick_(event) {
      event.preventDefault();
      this.handleToggle_();
    }

    /**
     * @private
     */
    handleToggle_() {
      this.element.classList.toggle(CLASS_COLLAPSED);
      if (this.collapsed_) {
        replaceNode(this.collapseLabel_, this.label_);
      } else {
        replaceNode(this.label_, this.collapseLabel_);
      }
      this.collapsed_ = !this.collapsed_;

      // manage overview map if it had not been rendered before and control
      // is expanded
      const ovmap = this.ovmap_;
      if (!this.collapsed_ && !ovmap.isRendered()) {
        ovmap.updateSize();
        this.resetExtent_();
        listenOnce(ovmap, MapEventType.POSTRENDER,
          function(event) {
            this.updateBox_();
          },
          this);
      }
    }

    /**
     * Return `true` if the overview map is collapsible, `false` otherwise.
     * @return {boolean} True if the widget is collapsible.
     * @api
     */
    getCollapsible() {
      return this.collapsible_;
    }

    /**
     * Set whether the overview map should be collapsible.
     * @param {boolean} collapsible True if the widget is collapsible.
     * @api
     */
    setCollapsible(collapsible) {
      if (this.collapsible_ === collapsible) {
        return;
      }
      this.collapsible_ = collapsible;
      this.element.classList.toggle('ol-uncollapsible');
      if (!collapsible && this.collapsed_) {
        this.handleToggle_();
      }
    }

    /**
     * Collapse or expand the overview map according to the passed parameter. Will
     * not do anything if the overview map isn't collapsible or if the current
     * collapsed state is already the one requested.
     * @param {boolean} collapsed True if the widget is collapsed.
     * @api
     */
    setCollapsed(collapsed) {
      if (!this.collapsible_ || this.collapsed_ === collapsed) {
        return;
      }
      this.handleToggle_();
    }

    /**
     * Determine if the overview map is collapsed.
     * @return {boolean} The overview map is collapsed.
     * @api
     */
    getCollapsed() {
      return this.collapsed_;
    }

    /**
     * Return the overview map.
     * @return {import("../PluggableMap.js").default} Overview map.
     * @api
     */
    getOverviewMap() {
      return this.ovmap_;
    }
  }


  /**
   * Update the overview map element.
   * @param {import("../MapEvent.js").default} mapEvent Map event.
   * @this {OverviewMap}
   * @api
   */
  function render$4(mapEvent) {
    this.validateExtent_();
    this.updateBox_();
  }

  /**
   * @module ol/control/ScaleLine
   */


  /**
   * @type {string}
   */
  const UNITS_PROP = 'units';

  /**
   * Units for the scale line. Supported values are `'degrees'`, `'imperial'`,
   * `'nautical'`, `'metric'`, `'us'`.
   * @enum {string}
   */
  const Units$1 = {
    DEGREES: 'degrees',
    IMPERIAL: 'imperial',
    NAUTICAL: 'nautical',
    METRIC: 'metric',
    US: 'us'
  };


  /**
   * @const
   * @type {Array<number>}
   */
  const LEADING_DIGITS = [1, 2, 5];


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-scale-line'] CSS Class name.
   * @property {number} [minWidth=64] Minimum width in pixels.
   * @property {function(import("../MapEvent.js").default)} [render] Function called when the control
   * should be re-rendered. This is called in a `requestAnimationFrame` callback.
   * @property {HTMLElement|string} [target] Specify a target if you want the control
   * to be rendered outside of the map's viewport.
   * @property {Units|string} [units='metric'] Units.
   * @property {boolean} [bar=false] Render scalebars instead of a line.
   * @property {number} [steps=4] Number of steps the scalebar should use. Use even numbers
   * for best results. Only applies when `bar` is `true`.
   * @property {boolean} [text=false] Render the text scale above of the scalebar. Only applies
   * when `bar` is `true`.
   */


  /**
   * @classdesc
   * A control displaying rough y-axis distances, calculated for the center of the
   * viewport. For conformal projections (e.g. EPSG:3857, the default view
   * projection in OpenLayers), the scale is valid for all directions.
   * No scale line will be shown when the y-axis distance of a pixel at the
   * viewport center cannot be calculated in the view projection.
   * By default the scale line will show in the bottom left portion of the map,
   * but this can be changed by using the css selector `.ol-scale-line`.
   * When specifying `bar` as `true`, a scalebar will be rendered instead
   * of a scaleline.
   *
   * @api
   */
  class ScaleLine extends Control {

    /**
     * @param {Options=} opt_options Scale line options.
     */
    constructor(opt_options) {

      const options = opt_options ? opt_options : {};

      const className = options.className !== undefined ? options.className :
        options.bar ? 'ol-scale-bar' : 'ol-scale-line';

      super({
        element: document.createElement('div'),
        render: options.render || render$5,
        target: options.target
      });

      /**
       * @private
       * @type {HTMLElement}
       */
      this.innerElement_ = document.createElement('div');
      this.innerElement_.className = className + '-inner';

      this.element.className = className + ' ' + CLASS_UNSELECTABLE;
      this.element.appendChild(this.innerElement_);

      /**
       * @private
       * @type {?import("../View.js").State}
       */
      this.viewState_ = null;

      /**
       * @private
       * @type {number}
       */
      this.minWidth_ = options.minWidth !== undefined ? options.minWidth : 64;

      /**
       * @private
       * @type {boolean}
       */
      this.renderedVisible_ = false;

      /**
       * @private
       * @type {number|undefined}
       */
      this.renderedWidth_ = undefined;

      /**
       * @private
       * @type {string}
       */
      this.renderedHTML_ = '';

      listen(
        this, getChangeEventType(UNITS_PROP),
        this.handleUnitsChanged_, this);

      this.setUnits(/** @type {Units} */ (options.units) || Units$1.METRIC);

      /**
       * @private
       * @type {boolean}
       */
      this.scaleBar_ = options.bar || false;

      /**
       * @private
       * @type {number}
       */
      this.scaleBarSteps_ = options.steps || 4;

      /**
       * @private
       * @type {boolean}
       */
      this.scaleBarText_ = options.text || false;

    }

    /**
     * Return the units to use in the scale line.
     * @return {Units} The units
     * to use in the scale line.
     * @observable
     * @api
     */
    getUnits() {
      return this.get(UNITS_PROP);
    }

    /**
     * @private
     */
    handleUnitsChanged_() {
      this.updateElement_();
    }

    /**
     * Set the units to use in the scale line.
     * @param {Units} units The units to use in the scale line.
     * @observable
     * @api
     */
    setUnits(units) {
      this.set(UNITS_PROP, units);
    }

    /**
     * @private
     */
    updateElement_() {
      const viewState = this.viewState_;

      if (!viewState) {
        if (this.renderedVisible_) {
          this.element.style.display = 'none';
          this.renderedVisible_ = false;
        }
        return;
      }

      const center = viewState.center;
      const projection = viewState.projection;
      const units = this.getUnits();
      const pointResolutionUnits = units == Units$1.DEGREES ?
        Units.DEGREES :
        Units.METERS;
      let pointResolution =
          getPointResolution(projection, viewState.resolution, center, pointResolutionUnits);

      let nominalCount = this.minWidth_ * pointResolution;
      let suffix = '';
      if (units == Units$1.DEGREES) {
        const metersPerDegree = METERS_PER_UNIT[Units.DEGREES];
        nominalCount *= metersPerDegree;
        if (nominalCount < metersPerDegree / 60) {
          suffix = '\u2033'; // seconds
          pointResolution *= 3600;
        } else if (nominalCount < metersPerDegree) {
          suffix = '\u2032'; // minutes
          pointResolution *= 60;
        } else {
          suffix = '\u00b0'; // degrees
        }
      } else if (units == Units$1.IMPERIAL) {
        if (nominalCount < 0.9144) {
          suffix = 'in';
          pointResolution /= 0.0254;
        } else if (nominalCount < 1609.344) {
          suffix = 'ft';
          pointResolution /= 0.3048;
        } else {
          suffix = 'mi';
          pointResolution /= 1609.344;
        }
      } else if (units == Units$1.NAUTICAL) {
        pointResolution /= 1852;
        suffix = 'nm';
      } else if (units == Units$1.METRIC) {
        if (nominalCount < 0.001) {
          suffix = 'μm';
          pointResolution *= 1000000;
        } else if (nominalCount < 1) {
          suffix = 'mm';
          pointResolution *= 1000;
        } else if (nominalCount < 1000) {
          suffix = 'm';
        } else {
          suffix = 'km';
          pointResolution /= 1000;
        }
      } else if (units == Units$1.US) {
        if (nominalCount < 0.9144) {
          suffix = 'in';
          pointResolution *= 39.37;
        } else if (nominalCount < 1609.344) {
          suffix = 'ft';
          pointResolution /= 0.30480061;
        } else {
          suffix = 'mi';
          pointResolution /= 1609.3472;
        }
      } else {
        assert(false, 33); // Invalid units
      }

      let i = 3 * Math.floor(
        Math.log(this.minWidth_ * pointResolution) / Math.log(10));
      let count, width, decimalCount;
      while (true) {
        decimalCount = Math.floor(i / 3);
        const decimal = Math.pow(10, decimalCount);
        count = LEADING_DIGITS[((i % 3) + 3) % 3] * decimal;
        width = Math.round(count / pointResolution);
        if (isNaN(width)) {
          this.element.style.display = 'none';
          this.renderedVisible_ = false;
          return;
        } else if (width >= this.minWidth_) {
          break;
        }
        ++i;
      }
      let html;
      if (this.scaleBar_) {
        html = this.createScaleBar(width, count, suffix);
      } else {
        html = count.toFixed(decimalCount < 0 ? -decimalCount : 0) + ' ' + suffix;
      }

      if (this.renderedHTML_ != html) {
        this.innerElement_.innerHTML = html;
        this.renderedHTML_ = html;
      }

      if (this.renderedWidth_ != width) {
        this.innerElement_.style.width = width + 'px';
        this.renderedWidth_ = width;
      }

      if (!this.renderedVisible_) {
        this.element.style.display = '';
        this.renderedVisible_ = true;
      }

    }

    /**
     * @private
     * @param {number} width The current width of the scalebar.
     * @param {number} scale The current scale.
     * @param {string} suffix The suffix to append to the scale text.
     * @returns {string} The stringified HTML of the scalebar.
     */
    createScaleBar(width, scale, suffix) {
      const mapScale = '1 : ' + Math.round(this.getScaleForResolution()).toLocaleString();
      const scaleSteps = [];
      const stepWidth = width / this.scaleBarSteps_;
      let backgroundColor = '#ffffff';
      for (let i = 0; i < this.scaleBarSteps_; i++) {
        if (i === 0) {
          // create the first marker at position 0
          scaleSteps.push(this.createMarker('absolute', i));
        }
        scaleSteps.push(
          '<div>' +
            '<div ' +
              'class="ol-scale-singlebar" ' +
              'style=' +
                '"width: ' + stepWidth + 'px;' +
                'background-color: ' + backgroundColor + ';"' +
            '>' +
            '</div>' +
            this.createMarker('relative', i) +
            /*render text every second step, except when only 2 steps */
            (i % 2 === 0 || this.scaleBarSteps_ === 2 ?
              this.createStepText(i, width, false, scale, suffix) :
              ''
            ) +
          '</div>'
        );
        if (i === this.scaleBarSteps_ - 1) {
          scaleSteps.push(this.createStepText(i + 1, width, true, scale, suffix));
        }
        // switch colors of steps between black and white
        if (backgroundColor === '#ffffff') {
          backgroundColor = '#000000';
        } else {
          backgroundColor = '#ffffff';
        }
      }

      let scaleBarText;
      if (this.scaleBarText_) {
        scaleBarText = '<div ' +
        'class="ol-scale-text" ' +
        'style="width: ' + width + 'px;">' +
        mapScale +
      '</div>';
      } else {
        scaleBarText = '';
      }
      const container = '<div ' +
        'style="display: flex;">' +
        scaleBarText +
        scaleSteps.join('') +
      '</div>';
      return container;
    }

    /**
     * Creates a marker at given position
     * @param {string} position - The position, absolute or relative
     * @param {number} i - The iterator
     * @returns {string} The stringified div containing the marker
     */
    createMarker(position, i) {
      const top = position === 'absolute' ? 3 : -10;
      return '<div ' +
          'class="ol-scale-step-marker" ' +
          'style="position: ' + position + ';' +
            'top: ' + top + 'px;"' +
        '></div>';
    }

    /**
     * Creates the label for a marker marker at given position
     * @param {number} i - The iterator
     * @param {number} width - The width the scalebar will currently use
     * @param {boolean} isLast - Flag indicating if we add the last step text
     * @param {number} scale - The current scale for the whole scalebar
     * @param {string} suffix - The suffix for the scale
     * @returns {string} The stringified div containing the step text
     */
    createStepText(i, width, isLast, scale, suffix) {
      const length = i === 0 ? 0 : Math.round((scale / this.scaleBarSteps_ * i) * 100) / 100;
      const lengthString = length + (i === 0 ? '' : ' ' + suffix);
      const margin = i === 0 ? -3 : width / this.scaleBarSteps_ * -1;
      const minWidth = i === 0 ? 0 : width / this.scaleBarSteps_ * 2;
      return '<div ' +
        'class="ol-scale-step-text" ' +
        'style="' +
          'margin-left: ' + margin + 'px;' +
          'text-align: ' + (i === 0 ? 'left' : 'center') + '; ' +
          'min-width: ' + minWidth + 'px;' +
          'left: ' + (isLast ? width + 'px' : 'unset') + ';"' +
        '>' +
        lengthString +
      '</div>';
    }

    /**
     * Returns the appropriate scale for the given resolution and units.
     * @return {number} The appropriate scale.
     */
    getScaleForResolution() {
      const resolution = this.getMap().getView().getResolution();
      const dpi = 25.4 / 0.28;
      const mpu = this.viewState_.projection.getMetersPerUnit();
      const inchesPerMeter = 39.37;
      return parseFloat(resolution.toString()) * mpu * inchesPerMeter * dpi;
    }
  }

  /**
   * Update the scale line element.
   * @param {import("../MapEvent.js").default} mapEvent Map event.
   * @this {ScaleLine}
   * @api
   */
  function render$5(mapEvent) {
    const frameState = mapEvent.frameState;
    if (!frameState) {
      this.viewState_ = null;
    } else {
      this.viewState_ = frameState.viewState;
    }
    this.updateElement_();
  }

  /**
   * @module ol/control/ZoomSlider
   */


  /**
   * The enum for available directions.
   *
   * @enum {number}
   */
  const Direction = {
    VERTICAL: 0,
    HORIZONTAL: 1
  };


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-zoomslider'] CSS class name.
   * @property {number} [duration=200] Animation duration in milliseconds.
   * @property {function(import("../MapEvent.js").default)} [render] Function called when the control
   * should be re-rendered. This is called in a `requestAnimationFrame` callback.
   */


  /**
   * @classdesc
   * A slider type of control for zooming.
   *
   * Example:
   *
   *     map.addControl(new ZoomSlider());
   *
   * @api
   */
  class ZoomSlider extends Control {

    /**
     * @param {Options=} opt_options Zoom slider options.
     */
    constructor(opt_options) {

      const options = opt_options ? opt_options : {};

      super({
        element: document.createElement('div'),
        render: options.render || render$6
      });

      /**
        * @type {!Array.<import("../events.js").EventsKey>}
        * @private
        */
      this.dragListenerKeys_ = [];

      /**
       * Will hold the current resolution of the view.
       *
       * @type {number|undefined}
       * @private
       */
      this.currentResolution_ = undefined;

      /**
       * The direction of the slider. Will be determined from actual display of the
       * container and defaults to Direction.VERTICAL.
       *
       * @type {Direction}
       * @private
       */
      this.direction_ = Direction.VERTICAL;

      /**
       * @type {boolean}
       * @private
       */
      this.dragging_;

      /**
       * @type {number}
       * @private
       */
      this.heightLimit_ = 0;

      /**
       * @type {number}
       * @private
       */
      this.widthLimit_ = 0;

      /**
       * @type {number|undefined}
       * @private
       */
      this.startX_;

      /**
       * @type {number|undefined}
       * @private
       */
      this.startY_;

      /**
       * The calculated thumb size (border box plus margins).  Set when initSlider_
       * is called.
       * @type {import("../size.js").Size}
       * @private
       */
      this.thumbSize_ = null;

      /**
       * Whether the slider is initialized.
       * @type {boolean}
       * @private
       */
      this.sliderInitialized_ = false;

      /**
       * @type {number}
       * @private
       */
      this.duration_ = options.duration !== undefined ? options.duration : 200;

      const className = options.className !== undefined ? options.className : 'ol-zoomslider';
      const thumbElement = document.createElement('button');
      thumbElement.setAttribute('type', 'button');
      thumbElement.className = className + '-thumb ' + CLASS_UNSELECTABLE;
      const containerElement = this.element;
      containerElement.className = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
      containerElement.appendChild(thumbElement);
      /**
       * @type {PointerEventHandler}
       * @private
       */
      this.dragger_ = new PointerEventHandler(containerElement);

      listen(this.dragger_, PointerEventType.POINTERDOWN,
        this.handleDraggerStart_, this);
      listen(this.dragger_, PointerEventType.POINTERMOVE,
        this.handleDraggerDrag_, this);
      listen(this.dragger_, PointerEventType.POINTERUP,
        this.handleDraggerEnd_, this);

      listen(containerElement, EventType.CLICK, this.handleContainerClick_, this);
      listen(thumbElement, EventType.CLICK, stopPropagation);
    }

    /**
     * @inheritDoc
     */
    disposeInternal() {
      this.dragger_.dispose();
      super.disposeInternal();
    }

    /**
     * @inheritDoc
     */
    setMap(map) {
      super.setMap(map);
      if (map) {
        map.render();
      }
    }

    /**
     * Initializes the slider element. This will determine and set this controls
     * direction_ and also constrain the dragging of the thumb to always be within
     * the bounds of the container.
     *
     * @private
     */
    initSlider_() {
      const container = this.element;
      const containerSize = {
        width: container.offsetWidth, height: container.offsetHeight
      };

      const thumb = /** @type {HTMLElement} */ (container.firstElementChild);
      const computedStyle = getComputedStyle(thumb);
      const thumbWidth = thumb.offsetWidth +
          parseFloat(computedStyle['marginRight']) +
          parseFloat(computedStyle['marginLeft']);
      const thumbHeight = thumb.offsetHeight +
          parseFloat(computedStyle['marginTop']) +
          parseFloat(computedStyle['marginBottom']);
      this.thumbSize_ = [thumbWidth, thumbHeight];

      if (containerSize.width > containerSize.height) {
        this.direction_ = Direction.HORIZONTAL;
        this.widthLimit_ = containerSize.width - thumbWidth;
      } else {
        this.direction_ = Direction.VERTICAL;
        this.heightLimit_ = containerSize.height - thumbHeight;
      }
      this.sliderInitialized_ = true;
    }

    /**
     * @param {MouseEvent} event The browser event to handle.
     * @private
     */
    handleContainerClick_(event) {
      const view = this.getMap().getView();

      const relativePosition = this.getRelativePosition_(
        event.offsetX - this.thumbSize_[0] / 2,
        event.offsetY - this.thumbSize_[1] / 2);

      const resolution = this.getResolutionForPosition_(relativePosition);
      const zoom = view.getConstrainedZoom(view.getZoomForResolution(resolution));

      view.animate({
        zoom: zoom,
        duration: this.duration_,
        easing: easeOut
      });
    }

    /**
     * Handle dragger start events.
     * @param {import("../pointer/PointerEvent.js").default} event The drag event.
     * @private
     */
    handleDraggerStart_(event) {
      if (!this.dragging_ && event.originalEvent.target === this.element.firstElementChild) {
        const element = /** @type {HTMLElement} */ (this.element.firstElementChild);
        this.getMap().getView().beginInteraction();
        this.startX_ = event.clientX - parseFloat(element.style.left);
        this.startY_ = event.clientY - parseFloat(element.style.top);
        this.dragging_ = true;

        if (this.dragListenerKeys_.length === 0) {
          const drag = this.handleDraggerDrag_;
          const end = this.handleDraggerEnd_;
          this.dragListenerKeys_.push(
            listen(document, EventType.MOUSEMOVE, drag, this),
            listen(document, PointerEventType.POINTERMOVE, drag, this),
            listen(document, EventType.MOUSEUP, end, this),
            listen(document, PointerEventType.POINTERUP, end, this)
          );
        }
      }
    }

    /**
     * Handle dragger drag events.
     *
     * @param {import("../pointer/PointerEvent.js").default} event The drag event.
     * @private
     */
    handleDraggerDrag_(event) {
      if (this.dragging_) {
        const deltaX = event.clientX - this.startX_;
        const deltaY = event.clientY - this.startY_;
        const relativePosition = this.getRelativePosition_(deltaX, deltaY);
        this.currentResolution_ = this.getResolutionForPosition_(relativePosition);
        this.getMap().getView().setResolution(this.currentResolution_);
      }
    }

    /**
     * Handle dragger end events.
     * @param {import("../pointer/PointerEvent.js").default} event The drag event.
     * @private
     */
    handleDraggerEnd_(event) {
      if (this.dragging_) {
        const view = this.getMap().getView();
        view.endInteraction();

        this.dragging_ = false;
        this.startX_ = undefined;
        this.startY_ = undefined;
        this.dragListenerKeys_.forEach(unlistenByKey);
        this.dragListenerKeys_.length = 0;
      }
    }

    /**
     * Positions the thumb inside its container according to the given resolution.
     *
     * @param {number} res The res.
     * @private
     */
    setThumbPosition_(res) {
      const position = this.getPositionForResolution_(res);
      const thumb = /** @type {HTMLElement} */ (this.element.firstElementChild);

      if (this.direction_ == Direction.HORIZONTAL) {
        thumb.style.left = this.widthLimit_ * position + 'px';
      } else {
        thumb.style.top = this.heightLimit_ * position + 'px';
      }
    }

    /**
     * Calculates the relative position of the thumb given x and y offsets.  The
     * relative position scales from 0 to 1.  The x and y offsets are assumed to be
     * in pixel units within the dragger limits.
     *
     * @param {number} x Pixel position relative to the left of the slider.
     * @param {number} y Pixel position relative to the top of the slider.
     * @return {number} The relative position of the thumb.
     * @private
     */
    getRelativePosition_(x, y) {
      let amount;
      if (this.direction_ === Direction.HORIZONTAL) {
        amount = x / this.widthLimit_;
      } else {
        amount = y / this.heightLimit_;
      }
      return clamp(amount, 0, 1);
    }

    /**
     * Calculates the corresponding resolution of the thumb given its relative
     * position (where 0 is the minimum and 1 is the maximum).
     *
     * @param {number} position The relative position of the thumb.
     * @return {number} The corresponding resolution.
     * @private
     */
    getResolutionForPosition_(position) {
      const fn = this.getMap().getView().getResolutionForValueFunction();
      return fn(1 - position);
    }

    /**
     * Determines the relative position of the slider for the given resolution.  A
     * relative position of 0 corresponds to the minimum view resolution.  A
     * relative position of 1 corresponds to the maximum view resolution.
     *
     * @param {number} res The resolution.
     * @return {number} The relative position value (between 0 and 1).
     * @private
     */
    getPositionForResolution_(res) {
      const fn = this.getMap().getView().getValueForResolutionFunction();
      return clamp(1 - fn(res), 0, 1);
    }
  }


  /**
   * Update the zoomslider element.
   * @param {import("../MapEvent.js").default} mapEvent Map event.
   * @this {ZoomSlider}
   * @api
   */
  function render$6(mapEvent) {
    if (!mapEvent.frameState) {
      return;
    }
    if (!this.sliderInitialized_) {
      this.initSlider_();
    }
    const res = mapEvent.frameState.viewState.resolution;
    this.currentResolution_ = res;
    this.setThumbPosition_(res);
  }

  /**
   * @module ol/control/ZoomToExtent
   */


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-zoom-extent'] Class name.
   * @property {HTMLElement|string} [target] Specify a target if you want the control
   * to be rendered outside of the map's viewport.
   * @property {string|HTMLElement} [label='E'] Text label to use for the button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string} [tipLabel='Fit to extent'] Text label to use for the button tip.
   * @property {import("../extent.js").Extent} [extent] The extent to zoom to. If undefined the validity
   * extent of the view projection is used.
   */


  /**
   * @classdesc
   * A button control which, when pressed, changes the map view to a specific
   * extent. To style this control use the css selector `.ol-zoom-extent`.
   *
   * @api
   */
  class ZoomToExtent extends Control {

    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {
      const options = opt_options ? opt_options : {};

      super({
        element: document.createElement('div'),
        target: options.target
      });

      /**
       * @type {import("../extent.js").Extent}
       * @protected
       */
      this.extent = options.extent ? options.extent : null;

      const className = options.className !== undefined ? options.className : 'ol-zoom-extent';

      const label = options.label !== undefined ? options.label : 'E';
      const tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Fit to extent';
      const button = document.createElement('button');
      button.setAttribute('type', 'button');
      button.title = tipLabel;
      button.appendChild(
        typeof label === 'string' ? document.createTextNode(label) : label
      );

      listen(button, EventType.CLICK, this.handleClick_, this);

      const cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
      const element = this.element;
      element.className = cssClasses;
      element.appendChild(button);
    }

    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */
    handleClick_(event) {
      event.preventDefault();
      this.handleZoomToExtent();
    }

    /**
     * @protected
     */
    handleZoomToExtent() {
      const map = this.getMap();
      const view = map.getView();
      const extent = !this.extent ? view.getProjection().getExtent() : this.extent;
      view.fit(extent);
    }
  }

  /**
   * @module ol/control
   */

  /**
   * @typedef {Object} DefaultsOptions
   * @property {boolean} [attribution=true] Include
   * {@link module:ol/control/Attribution~Attribution}.
   * @property {import("./control/Attribution.js").Options} [attributionOptions]
   * Options for {@link module:ol/control/Attribution~Attribution}.
   * @property {boolean} [rotate=true] Include
   * {@link module:ol/control/Rotate~Rotate}.
   * @property {import("./control/Rotate.js").Options} [rotateOptions] Options
   * for {@link module:ol/control/Rotate~Rotate}.
   * @property {boolean} [zoom] Include {@link module:ol/control/Zoom~Zoom}.
   * @property {import("./control/Zoom.js").Options} [zoomOptions] Options for
   * {@link module:ol/control/Zoom~Zoom}.
   * @api
   */


  /**
   * Set of controls included in maps by default. Unless configured otherwise,
   * this returns a collection containing an instance of each of the following
   * controls:
   * * {@link module:ol/control/Zoom~Zoom}
   * * {@link module:ol/control/Rotate~Rotate}
   * * {@link module:ol/control/Attribution~Attribution}
   *
   * @param {DefaultsOptions=} opt_options
   * Defaults options.
   * @return {Collection<import("./control/Control.js").default>}
   * Controls.
   * @api
   */
  function defaults(opt_options) {

    const options = opt_options ? opt_options : {};

    const controls = new Collection();

    const zoomControl = options.zoom !== undefined ? options.zoom : true;
    if (zoomControl) {
      controls.push(new Zoom(options.zoomOptions));
    }

    const rotateControl = options.rotate !== undefined ? options.rotate : true;
    if (rotateControl) {
      controls.push(new Rotate(options.rotateOptions));
    }

    const attributionControl = options.attribution !== undefined ?
      options.attribution : true;
    if (attributionControl) {
      controls.push(new Attribution(options.attributionOptions));
    }

    return controls;
  }

  var control = /*#__PURE__*/Object.freeze({
    __proto__: null,
    defaults: defaults,
    Attribution: Attribution,
    Control: Control,
    FullScreen: FullScreen,
    MousePosition: MousePosition,
    OverviewMap: OverviewMap,
    Rotate: Rotate,
    ScaleLine: ScaleLine,
    Zoom: Zoom,
    ZoomSlider: ZoomSlider,
    ZoomToExtent: ZoomToExtent
  });

  /**
   * @module ol/interaction/Property
   */

  /**
   * @enum {string}
   */
  var InteractionProperty = {
    ACTIVE: 'active'
  };

  /**
   * @module ol/interaction/Interaction
   */


  /**
   * Object literal with config options for interactions.
   * @typedef {Object} InteractionOptions
   * @property {function(import("../MapBrowserEvent.js").default):boolean} handleEvent
   * Method called by the map to notify the interaction that a browser event was
   * dispatched to the map. If the function returns a falsy value, propagation of
   * the event to other interactions in the map's interactions chain will be
   * prevented (this includes functions with no explicit return). The interactions
   * are traversed in reverse order of the interactions collection of the map.
   */


  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * User actions that change the state of the map. Some are similar to controls,
   * but are not associated with a DOM element.
   * For example, {@link module:ol/interaction/KeyboardZoom~KeyboardZoom} is
   * functionally the same as {@link module:ol/control/Zoom~Zoom}, but triggered
   * by a keyboard event not a button element event.
   * Although interactions do not have a DOM element, some of them do render
   * vectors and so are visible on the screen.
   * @api
   */
  class Interaction extends BaseObject {
    /**
     * @param {InteractionOptions} options Options.
     */
    constructor(options) {
      super();

      if (options.handleEvent) {
        this.handleEvent = options.handleEvent;
      }

      /**
       * @private
       * @type {import("../PluggableMap.js").default}
       */
      this.map_ = null;

      this.setActive(true);
    }

    /**
     * Return whether the interaction is currently active.
     * @return {boolean} `true` if the interaction is active, `false` otherwise.
     * @observable
     * @api
     */
    getActive() {
      return /** @type {boolean} */ (this.get(InteractionProperty.ACTIVE));
    }

    /**
     * Get the map associated with this interaction.
     * @return {import("../PluggableMap.js").default} Map.
     * @api
     */
    getMap() {
      return this.map_;
    }

    /**
     * Handles the {@link module:ol/MapBrowserEvent map browser event}.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     * @api
     */
    handleEvent(mapBrowserEvent) {
      return true;
    }

    /**
     * Activate or deactivate the interaction.
     * @param {boolean} active Active.
     * @observable
     * @api
     */
    setActive(active) {
      this.set(InteractionProperty.ACTIVE, active);
    }

    /**
     * Remove the interaction from its current map and attach it to the new map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../PluggableMap.js").default} map Map.
     */
    setMap(map) {
      this.map_ = map;
    }
  }


  /**
   * @param {import("../View.js").default} view View.
   * @param {import("../coordinate.js").Coordinate} delta Delta.
   * @param {number=} opt_duration Duration.
   */
  function pan(view, delta, opt_duration) {
    const currentCenter = view.getCenter();
    if (currentCenter) {
      const center = [currentCenter[0] + delta[0], currentCenter[1] + delta[1]];
      view.animate_({
        duration: opt_duration !== undefined ? opt_duration : 250,
        easing: linear,
        center: view.getConstrainedCenter(center)
      });
    }
  }

  /**
   * @param {import("../View.js").default} view View.
   * @param {number} delta Delta from previous zoom level.
   * @param {import("../coordinate.js").Coordinate=} opt_anchor Anchor coordinate.
   * @param {number=} opt_duration Duration.
   */
  function zoomByDelta(view, delta, opt_anchor, opt_duration) {
    const currentZoom = view.getZoom();

    if (currentZoom === undefined) {
      return;
    }

    const newZoom = view.getConstrainedZoom(currentZoom + delta);
    const newResolution = view.getResolutionForZoom(newZoom);

    if (view.getAnimating()) {
      view.cancelAnimations();
    }
    view.animate({
      resolution: newResolution,
      anchor: opt_anchor,
      duration: opt_duration !== undefined ? opt_duration : 250,
      easing: easeOut
    });
  }

  /**
   * @module ol/interaction/DoubleClickZoom
   */


  /**
   * @typedef {Object} Options
   * @property {number} [duration=250] Animation duration in milliseconds.
   * @property {number} [delta=1] The zoom delta applied on each double click.
   */


  /**
   * @classdesc
   * Allows the user to zoom by double-clicking on the map.
   * @api
   */
  class DoubleClickZoom extends Interaction {

    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {
      super({
        handleEvent: handleEvent
      });

      const options = opt_options ? opt_options : {};

      /**
       * @private
       * @type {number}
       */
      this.delta_ = options.delta ? options.delta : 1;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;

    }

  }


  /**
   * Handles the {@link module:ol/MapBrowserEvent map browser event} (if it was a
   * doubleclick) and eventually zooms the map.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} `false` to stop event propagation.
   * @this {DoubleClickZoom}
   */
  function handleEvent(mapBrowserEvent) {
    let stopEvent = false;
    if (mapBrowserEvent.type == MapBrowserEventType.DBLCLICK) {
      const browserEvent = /** @type {MouseEvent} */ (mapBrowserEvent.originalEvent);
      const map = mapBrowserEvent.map;
      const anchor = mapBrowserEvent.coordinate;
      const delta = browserEvent.shiftKey ? -this.delta_ : this.delta_;
      const view = map.getView();
      zoomByDelta(view, delta, anchor, this.duration_);
      mapBrowserEvent.preventDefault();
      stopEvent = true;
    }
    return !stopEvent;
  }

  /**
   * @module ol/events/condition
   */


  /**
   * A function that takes an {@link module:ol/MapBrowserEvent} and returns a
   * `{boolean}`. If the condition is met, true should be returned.
   *
   * @typedef {function(this: ?, import("../MapBrowserEvent.js").default): boolean} Condition
   */


  /**
   * Return `true` if only the alt-key is pressed, `false` otherwise (e.g. when
   * additionally the shift-key is pressed).
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if only the alt key is pressed.
   * @api
   */
  const altKeyOnly = function(mapBrowserEvent) {
    const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
    return (
      originalEvent.altKey &&
        !(originalEvent.metaKey || originalEvent.ctrlKey) &&
        !originalEvent.shiftKey);
  };


  /**
   * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise
   * (e.g. when additionally the platform-modifier-key is pressed).
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if only the alt and shift keys are pressed.
   * @api
   */
  const altShiftKeysOnly = function(mapBrowserEvent) {
    const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
    return (
      originalEvent.altKey &&
        !(originalEvent.metaKey || originalEvent.ctrlKey) &&
        originalEvent.shiftKey);
  };


  /**
   * Return `true` if the map has the focus. This condition requires a map target
   * element with a `tabindex` attribute, e.g. `<div id="map" tabindex="1">`.
   *
   * @param {import("../MapBrowserEvent.js").default} event Map browser event.
   * @return {boolean} The map has the focus.
   * @api
   */
  const focus = function(event) {
    return event.target.getTargetElement() === document.activeElement;
  };


  /**
   * Return always true.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True.
   * @api
   */
  const always = TRUE;


  /**
   * Return `true` if the event has an "action"-producing mouse button.
   *
   * By definition, this includes left-click on windows/linux, and left-click
   * without the ctrl key on Macs.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} The result.
   */
  const mouseActionButton = function(mapBrowserEvent) {
    const originalEvent = /** @type {MouseEvent} */ (mapBrowserEvent.originalEvent);
    return originalEvent.button == 0 &&
        !(WEBKIT && MAC && originalEvent.ctrlKey);
  };


  /**
   * Return always false.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} False.
   * @api
   */
  const never = FALSE;


  /**
   * Return `true` if the browser event is a `pointermove` event, `false`
   * otherwise.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the browser event is a `pointermove` event.
   * @api
   */
  const pointerMove$1 = function(mapBrowserEvent) {
    return mapBrowserEvent.type == 'pointermove';
  };


  /**
   * Return `true` if the event is a map `singleclick` event, `false` otherwise.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the event is a map `singleclick` event.
   * @api
   */
  const singleClick = function(mapBrowserEvent) {
    return mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK;
  };


  /**
   * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is
   * pressed.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True only if there no modifier keys are pressed.
   * @api
   */
  const noModifierKeys = function(mapBrowserEvent) {
    const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
    return (
      !originalEvent.altKey &&
        !(originalEvent.metaKey || originalEvent.ctrlKey) &&
        !originalEvent.shiftKey);
  };


  /**
   * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when
   * additionally the alt-key is pressed).
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if only the shift key is pressed.
   * @api
   */
  const shiftKeyOnly = function(mapBrowserEvent) {
    const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
    return (
      !originalEvent.altKey &&
        !(originalEvent.metaKey || originalEvent.ctrlKey) &&
        originalEvent.shiftKey);
  };


  /**
   * Return `true` if the target element is not editable, i.e. not a `<input>`-,
   * `<select>`- or `<textarea>`-element, `false` otherwise.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True only if the target element is not editable.
   * @api
   */
  const targetNotEditable = function(mapBrowserEvent) {
    const target = mapBrowserEvent.originalEvent.target;
    const tagName = /** @type {Element} */ (target).tagName;
    return (
      tagName !== 'INPUT' &&
        tagName !== 'SELECT' &&
        tagName !== 'TEXTAREA');
  };


  /**
   * Return `true` if the event originates from a mouse device.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the event originates from a mouse device.
   * @api
   */
  const mouseOnly = function(mapBrowserEvent) {
    const pointerEvent = /** @type {import("../MapBrowserPointerEvent").default} */ (mapBrowserEvent).pointerEvent;
    assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event
    // see http://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType
    return pointerEvent.pointerType == 'mouse';
  };

  /**
   * Return `true` if the event originates from a primary pointer in
   * contact with the surface or if the left mouse button is pressed.
   * See http://www.w3.org/TR/pointerevents/#button-states.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the event originates from a primary pointer.
   * @api
   */
  const primaryAction = function(mapBrowserEvent) {
    const pointerEvent = /** @type {import("../MapBrowserPointerEvent").default} */ (mapBrowserEvent).pointerEvent;
    assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event
    return pointerEvent.isPrimary && pointerEvent.button === 0;
  };

  /**
   * @module ol/interaction/Pointer
   */


  /**
   * @typedef {Object} Options
   * @property {function(import("../MapBrowserPointerEvent.js").default):boolean} [handleDownEvent]
   * Function handling "down" events. If the function returns `true` then a drag
   * sequence is started.
   * @property {function(import("../MapBrowserPointerEvent.js").default)} [handleDragEvent]
   * Function handling "drag" events. This function is called on "move" events
   * during a drag sequence.
   * @property {function(import("../MapBrowserEvent.js").default):boolean} [handleEvent]
   * Method called by the map to notify the interaction that a browser event was
   * dispatched to the map. The function may return `false` to prevent the
   * propagation of the event to other interactions in the map's interactions
   * chain.
   * @property {function(import("../MapBrowserPointerEvent.js").default)} [handleMoveEvent]
   * Function handling "move" events. This function is called on "move" events,
   * also during a drag sequence (so during a drag sequence both the
   * `handleDragEvent` function and this function are called).
   * @property {function(import("../MapBrowserPointerEvent.js").default):boolean} [handleUpEvent]
   *  Function handling "up" events. If the function returns `false` then the
   * current drag sequence is stopped.
   * @property {function(boolean):boolean} [stopDown]
   * Should the down event be propagated to other interactions, or should be
   * stopped?
   */


  /**
   * @classdesc
   * Base class that calls user-defined functions on `down`, `move` and `up`
   * events. This class also manages "drag sequences".
   *
   * When the `handleDownEvent` user function returns `true` a drag sequence is
   * started. During a drag sequence the `handleDragEvent` user function is
   * called on `move` events. The drag sequence ends when the `handleUpEvent`
   * user function is called and returns `false`.
   * @api
   */
  class PointerInteraction extends Interaction {
    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {

      const options = opt_options ? opt_options : {};

      super(/** @type {import("./Interaction.js").InteractionOptions} */ (options));

      if (options.handleDownEvent) {
        this.handleDownEvent = options.handleDownEvent;
      }

      if (options.handleDragEvent) {
        this.handleDragEvent = options.handleDragEvent;
      }

      if (options.handleMoveEvent) {
        this.handleMoveEvent = options.handleMoveEvent;
      }

      if (options.handleUpEvent) {
        this.handleUpEvent = options.handleUpEvent;
      }

      if (options.stopDown) {
        this.stopDown = options.stopDown;
      }

      /**
       * @type {boolean}
       * @protected
       */
      this.handlingDownUpSequence = false;

      /**
       * @type {!Object<string, import("../pointer/PointerEvent.js").default>}
       * @private
       */
      this.trackedPointers_ = {};

      /**
       * @type {Array<import("../pointer/PointerEvent.js").default>}
       * @protected
       */
      this.targetPointers = [];

    }

    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     * @protected
     */
    handleDownEvent(mapBrowserEvent) {
      return false;
    }

    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
     * @protected
     */
    handleDragEvent(mapBrowserEvent) {}

    /**
     * Handles the {@link module:ol/MapBrowserEvent map browser event} and may call into
     * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are
     * detected.
     * @override
     * @api
     */
    handleEvent(mapBrowserEvent) {
      if (!(/** @type {import("../MapBrowserPointerEvent.js").default} */ (mapBrowserEvent).pointerEvent)) {
        return true;
      }

      let stopEvent = false;
      this.updateTrackedPointers_(mapBrowserEvent);
      if (this.handlingDownUpSequence) {
        if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {
          this.handleDragEvent(mapBrowserEvent);
        } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {
          const handledUp = this.handleUpEvent(mapBrowserEvent);
          this.handlingDownUpSequence = handledUp && this.targetPointers.length > 0;
        }
      } else {
        if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {
          const handled = this.handleDownEvent(mapBrowserEvent);
          if (handled) {
            mapBrowserEvent.preventDefault();
          }
          this.handlingDownUpSequence = handled;
          stopEvent = this.stopDown(handled);
        } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {
          this.handleMoveEvent(mapBrowserEvent);
        }
      }
      return !stopEvent;
    }

    /**
     * Handle pointer move events.
     * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
     * @protected
     */
    handleMoveEvent(mapBrowserEvent) {}

    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     * @protected
     */
    handleUpEvent(mapBrowserEvent) {
      return false;
    }

    /**
     * This function is used to determine if "down" events should be propagated
     * to other interactions or should be stopped.
     * @param {boolean} handled Was the event handled by the interaction?
     * @return {boolean} Should the `down` event be stopped?
     */
    stopDown(handled) {
      return handled;
    }

    /**
     * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
     * @private
     */
    updateTrackedPointers_(mapBrowserEvent) {
      if (isPointerDraggingEvent(mapBrowserEvent)) {
        const event = mapBrowserEvent.pointerEvent;

        const id = event.pointerId.toString();
        if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {
          delete this.trackedPointers_[id];
        } else if (mapBrowserEvent.type ==
            MapBrowserEventType.POINTERDOWN) {
          this.trackedPointers_[id] = event;
        } else if (id in this.trackedPointers_) {
          // update only when there was a pointerdown event for this pointer
          this.trackedPointers_[id] = event;
        }
        this.targetPointers = getValues(this.trackedPointers_);
      }
    }

  }


  /**
   * @param {Array<import("../pointer/PointerEvent.js").default>} pointerEvents List of events.
   * @return {import("../pixel.js").Pixel} Centroid pixel.
   */
  function centroid(pointerEvents) {
    const length = pointerEvents.length;
    let clientX = 0;
    let clientY = 0;
    for (let i = 0; i < length; i++) {
      clientX += pointerEvents[i].clientX;
      clientY += pointerEvents[i].clientY;
    }
    return [clientX / length, clientY / length];
  }


  /**
   * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} Whether the event is a pointerdown, pointerdrag
   *     or pointerup event.
   */
  function isPointerDraggingEvent(mapBrowserEvent) {
    const type = mapBrowserEvent.type;
    return type === MapBrowserEventType.POINTERDOWN ||
      type === MapBrowserEventType.POINTERDRAG ||
      type === MapBrowserEventType.POINTERUP;
  }

  /**
   * @module ol/interaction/DragPan
   */


  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
   * to indicate whether that event should be handled.
   * Default is {@link module:ol/events/condition~noModifierKeys} and {@link module:ol/events/condition~primaryAction}.
   * @property {import("../Kinetic.js").default} [kinetic] Kinetic inertia to apply to the pan.
   */


  /**
   * @classdesc
   * Allows the user to pan the map by dragging the map.
   * @api
   */
  class DragPan extends PointerInteraction {
    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {

      super({
        stopDown: FALSE
      });

      const options = opt_options ? opt_options : {};

      /**
       * @private
       * @type {import("../Kinetic.js").default|undefined}
       */
      this.kinetic_ = options.kinetic;

      /**
       * @type {import("../pixel.js").Pixel}
       */
      this.lastCentroid = null;

      /**
       * @type {number}
       */
      this.lastPointersCount_;

      /**
       * @type {boolean}
       */
      this.panning_ = false;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : defaultCondition;

      /**
       * @private
       * @type {boolean}
       */
      this.noKinetic_ = false;

    }

    /**
     * @inheritDoc
     */
    handleDragEvent(mapBrowserEvent) {
      if (!this.panning_) {
        this.panning_ = true;
        this.getMap().getView().beginInteraction();
      }
      const targetPointers = this.targetPointers;
      const centroid$1 = centroid(targetPointers);
      if (targetPointers.length == this.lastPointersCount_) {
        if (this.kinetic_) {
          this.kinetic_.update(centroid$1[0], centroid$1[1]);
        }
        if (this.lastCentroid) {
          const delta = [
            this.lastCentroid[0] - centroid$1[0],
            centroid$1[1] - this.lastCentroid[1]
          ];
          const map = mapBrowserEvent.map;
          const view = map.getView();
          scale$2(delta, view.getResolution());
          rotate$2(delta, view.getRotation());
          view.adjustCenter(delta);
        }
      } else if (this.kinetic_) {
        // reset so we don't overestimate the kinetic energy after
        // after one finger down, tiny drag, second finger down
        this.kinetic_.begin();
      }
      this.lastCentroid = centroid$1;
      this.lastPointersCount_ = targetPointers.length;
    }

    /**
     * @inheritDoc
     */
    handleUpEvent(mapBrowserEvent) {
      const map = mapBrowserEvent.map;
      const view = map.getView();
      if (this.targetPointers.length === 0) {
        if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {
          const distance = this.kinetic_.getDistance();
          const angle = this.kinetic_.getAngle();
          const center = /** @type {!import("../coordinate.js").Coordinate} */ (view.getCenter());
          const centerpx = map.getPixelFromCoordinate(center);
          const dest = map.getCoordinateFromPixel([
            centerpx[0] - distance * Math.cos(angle),
            centerpx[1] - distance * Math.sin(angle)
          ]);
          view.animate({
            center: view.getConstrainedCenter(dest),
            duration: 500,
            easing: easeOut
          });
        }
        if (this.panning_) {
          this.panning_ = false;
          view.endInteraction();
        }
        return false;
      } else {
        if (this.kinetic_) {
          // reset so we don't overestimate the kinetic energy after
          // after one finger up, tiny drag, second finger up
          this.kinetic_.begin();
        }
        this.lastCentroid = null;
        return true;
      }
    }

    /**
     * @inheritDoc
     */
    handleDownEvent(mapBrowserEvent) {
      if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {
        const map = mapBrowserEvent.map;
        const view = map.getView();
        this.lastCentroid = null;
        // stop any current animation
        if (view.getAnimating()) {
          view.cancelAnimations();
        }
        if (this.kinetic_) {
          this.kinetic_.begin();
        }
        // No kinetic as soon as more than one pointer on the screen is
        // detected. This is to prevent nasty pans after pinch.
        this.noKinetic_ = this.targetPointers.length > 1;
        return true;
      } else {
        return false;
      }
    }
  }

  /**
   * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Browser event.
   * @return {boolean} Combined condition result.
   */
  function defaultCondition(mapBrowserEvent) {
    return noModifierKeys(mapBrowserEvent) && primaryAction(mapBrowserEvent);
  }

  /**
   * @module ol/interaction/DragRotate
   */


  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that takes an
   * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
   * to indicate whether that event should be handled.
   * Default is {@link module:ol/events/condition~altShiftKeysOnly}.
   * @property {number} [duration=250] Animation duration in milliseconds.
   */


  /**
   * @classdesc
   * Allows the user to rotate the map by clicking and dragging on the map,
   * normally combined with an {@link module:ol/events/condition} that limits
   * it to when the alt and shift keys are held down.
   *
   * This interaction is only supported for mouse devices.
   * @api
   */
  class DragRotate extends PointerInteraction {

    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {

      const options = opt_options ? opt_options : {};

      super({
        stopDown: FALSE
      });

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : altShiftKeysOnly;

      /**
       * @private
       * @type {number|undefined}
       */
      this.lastAngle_ = undefined;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;

    }

    /**
     * @inheritDoc
     */
    handleDragEvent(mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return;
      }

      const map = mapBrowserEvent.map;
      const view = map.getView();
      if (view.getConstraints().rotation === disable) {
        return;
      }
      const size = map.getSize();
      const offset = mapBrowserEvent.pixel;
      const theta =
          Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);
      if (this.lastAngle_ !== undefined) {
        const delta = theta - this.lastAngle_;
        view.adjustRotation(-delta);
      }
      this.lastAngle_ = theta;
    }


    /**
     * @inheritDoc
     */
    handleUpEvent(mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return true;
      }

      const map = mapBrowserEvent.map;
      const view = map.getView();
      view.endInteraction(this.duration_);
      return false;
    }


    /**
     * @inheritDoc
     */
    handleDownEvent(mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return false;
      }

      if (mouseActionButton(mapBrowserEvent) && this.condition_(mapBrowserEvent)) {
        const map = mapBrowserEvent.map;
        map.getView().beginInteraction();
        this.lastAngle_ = undefined;
        return true;
      } else {
        return false;
      }
    }
  }

  /**
   * @module ol/render/Box
   */

  class RenderBox extends Disposable {
    /**
     * @param {string} className CSS class name.
     */
    constructor(className) {
      super();

      /**
       * @type {import("../geom/Polygon.js").default}
       * @private
       */
      this.geometry_ = null;

      /**
       * @type {HTMLDivElement}
       * @private
       */
      this.element_ = document.createElement('div');
      this.element_.style.position = 'absolute';
      this.element_.className = 'ol-box ' + className;

      /**
       * @private
       * @type {import("../PluggableMap.js").default}
       */
      this.map_ = null;

      /**
       * @private
       * @type {import("../pixel.js").Pixel}
       */
      this.startPixel_ = null;

      /**
       * @private
       * @type {import("../pixel.js").Pixel}
       */
      this.endPixel_ = null;

    }

    /**
     * @inheritDoc
     */
    disposeInternal() {
      this.setMap(null);
    }

    /**
     * @private
     */
    render_() {
      const startPixel = this.startPixel_;
      const endPixel = this.endPixel_;
      const px = 'px';
      const style = this.element_.style;
      style.left = Math.min(startPixel[0], endPixel[0]) + px;
      style.top = Math.min(startPixel[1], endPixel[1]) + px;
      style.width = Math.abs(endPixel[0] - startPixel[0]) + px;
      style.height = Math.abs(endPixel[1] - startPixel[1]) + px;
    }

    /**
     * @param {import("../PluggableMap.js").default} map Map.
     */
    setMap(map) {
      if (this.map_) {
        this.map_.getOverlayContainer().removeChild(this.element_);
        const style = this.element_.style;
        style.left = style.top = style.width = style.height = 'inherit';
      }
      this.map_ = map;
      if (this.map_) {
        this.map_.getOverlayContainer().appendChild(this.element_);
      }
    }

    /**
     * @param {import("../pixel.js").Pixel} startPixel Start pixel.
     * @param {import("../pixel.js").Pixel} endPixel End pixel.
     */
    setPixels(startPixel, endPixel) {
      this.startPixel_ = startPixel;
      this.endPixel_ = endPixel;
      this.createOrUpdateGeometry();
      this.render_();
    }

    /**
     * Creates or updates the cached geometry.
     */
    createOrUpdateGeometry() {
      const startPixel = this.startPixel_;
      const endPixel = this.endPixel_;
      const pixels = [
        startPixel,
        [startPixel[0], endPixel[1]],
        endPixel,
        [endPixel[0], startPixel[1]]
      ];
      const coordinates = pixels.map(this.map_.getCoordinateFromPixel, this.map_);
      // close the polygon
      coordinates[4] = coordinates[0].slice();
      if (!this.geometry_) {
        this.geometry_ = new Polygon([coordinates]);
      } else {
        this.geometry_.setCoordinates([coordinates]);
      }
    }

    /**
     * @return {import("../geom/Polygon.js").default} Geometry.
     */
    getGeometry() {
      return this.geometry_;
    }
  }

  /**
   * @module ol/interaction/DragBox
   */


  /**
   * A function that takes a {@link module:ol/MapBrowserEvent} and two
   * {@link module:ol/pixel~Pixel}s and returns a `{boolean}`. If the condition is met,
   * true should be returned.
   * @typedef {function(this: ?, import("../MapBrowserEvent.js").default, import("../pixel.js").Pixel, import("../pixel.js").Pixel):boolean} EndCondition
   */


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-dragbox'] CSS class name for styling the box.
   * @property {import("../events/condition.js").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
   * to indicate whether that event should be handled.
   * Default is {@link ol/events/condition~always}.
   * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the default
   * `boxEndCondition` function.
   * @property {EndCondition} [boxEndCondition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two
   * {@link module:ol/pixel~Pixel}s to indicate whether a `boxend` event should be fired.
   * Default is `true` if the area of the box is bigger than the `minArea` option.
   * @property {function(this:DragBox, import("../MapBrowserEvent.js").default)} [onBoxEnd] Code to execute just
   * before `boxend` is fired.
   */


  /**
   * @enum {string}
   */
  const DragBoxEventType = {
    /**
     * Triggered upon drag box start.
     * @event DragBoxEvent#boxstart
     * @api
     */
    BOXSTART: 'boxstart',

    /**
     * Triggered on drag when box is active.
     * @event DragBoxEvent#boxdrag
     * @api
     */
    BOXDRAG: 'boxdrag',

    /**
     * Triggered upon drag box end.
     * @event DragBoxEvent#boxend
     * @api
     */
    BOXEND: 'boxend'
  };


  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/DragBox~DragBox} instances are instances of
   * this type.
   */
  class DragBoxEvent extends Event {

    /**
     * @param {string} type The event type.
     * @param {import("../coordinate.js").Coordinate} coordinate The event coordinate.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Originating event.
     */
    constructor(type, coordinate, mapBrowserEvent) {
      super(type);

      /**
       * The coordinate of the drag event.
       * @const
       * @type {import("../coordinate.js").Coordinate}
       * @api
       */
      this.coordinate = coordinate;

      /**
       * @const
       * @type {import("../MapBrowserEvent.js").default}
       * @api
       */
      this.mapBrowserEvent = mapBrowserEvent;

    }

  }


  /**
   * @classdesc
   * Allows the user to draw a vector box by clicking and dragging on the map,
   * normally combined with an {@link module:ol/events/condition} that limits
   * it to when the shift or other key is held down. This is used, for example,
   * for zooming to a specific area of the map
   * (see {@link module:ol/interaction/DragZoom~DragZoom} and
   * {@link module:ol/interaction/DragRotateAndZoom}).
   *
   * This interaction is only supported for mouse devices.
   *
   * @fires DragBoxEvent
   * @api
   */
  class DragBox extends PointerInteraction {
    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {

      super();

      const options = opt_options ? opt_options : {};

      /**
       * @type {import("../render/Box.js").default}
       * @private
       */
      this.box_ = new RenderBox(options.className || 'ol-dragbox');

      /**
       * @type {number}
       * @private
       */
      this.minArea_ = options.minArea !== undefined ? options.minArea : 64;

      /**
       * Function to execute just before `onboxend` is fired
       * @type {function(this:DragBox, import("../MapBrowserEvent.js").default): void}
       * @private
       */
      this.onBoxEnd_ = options.onBoxEnd ? options.onBoxEnd : VOID;

      /**
       * @type {import("../pixel.js").Pixel}
       * @private
       */
      this.startPixel_ = null;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : always;

      /**
       * @private
       * @type {EndCondition}
       */
      this.boxEndCondition_ = options.boxEndCondition ?
        options.boxEndCondition : this.defaultBoxEndCondition;
    }

    /**
     * The default condition for determining whether the boxend event
     * should fire.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent The originating MapBrowserEvent
     *     leading to the box end.
     * @param {import("../pixel.js").Pixel} startPixel The starting pixel of the box.
     * @param {import("../pixel.js").Pixel} endPixel The end pixel of the box.
     * @return {boolean} Whether or not the boxend condition should be fired.
     */
    defaultBoxEndCondition(mapBrowserEvent, startPixel, endPixel) {
      const width = endPixel[0] - startPixel[0];
      const height = endPixel[1] - startPixel[1];
      return width * width + height * height >= this.minArea_;
    }

    /**
     * Returns geometry of last drawn box.
     * @return {import("../geom/Polygon.js").default} Geometry.
     * @api
     */
    getGeometry() {
      return this.box_.getGeometry();
    }

    /**
     * @inheritDoc
     */
    handleDragEvent(mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return;
      }

      this.box_.setPixels(this.startPixel_, mapBrowserEvent.pixel);

      this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXDRAG,
        mapBrowserEvent.coordinate, mapBrowserEvent));
    }

    /**
     * @inheritDoc
     */
    handleUpEvent(mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return true;
      }

      this.box_.setMap(null);

      if (this.boxEndCondition_(mapBrowserEvent, this.startPixel_, mapBrowserEvent.pixel)) {
        this.onBoxEnd_(mapBrowserEvent);
        this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXEND,
          mapBrowserEvent.coordinate, mapBrowserEvent));
      }
      return false;
    }

    /**
     * @inheritDoc
     */
    handleDownEvent(mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return false;
      }

      if (mouseActionButton(mapBrowserEvent) &&
          this.condition_(mapBrowserEvent)) {
        this.startPixel_ = mapBrowserEvent.pixel;
        this.box_.setMap(mapBrowserEvent.map);
        this.box_.setPixels(this.startPixel_, this.startPixel_);
        this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXSTART,
          mapBrowserEvent.coordinate, mapBrowserEvent));
        return true;
      } else {
        return false;
      }
    }
  }

  /**
   * @module ol/interaction/DragZoom
   */


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-dragzoom'] CSS class name for styling the
   * box.
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled.
   * Default is {@link module:ol/events/condition~shiftKeyOnly}.
   * @property {number} [duration=200] Animation duration in milliseconds.
   * @property {boolean} [out=false] Use interaction for zooming out.
   * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the parent default
   * `boxEndCondition` function.
   */


  /**
   * @classdesc
   * Allows the user to zoom the map by clicking and dragging on the map,
   * normally combined with an {@link module:ol/events/condition} that limits
   * it to when a key, shift by default, is held down.
   *
   * To change the style of the box, use CSS and the `.ol-dragzoom` selector, or
   * your custom one configured with `className`.
   * @api
   */
  class DragZoom extends DragBox {
    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {
      const options = opt_options ? opt_options : {};

      const condition = options.condition ? options.condition : shiftKeyOnly;

      super({
        condition: condition,
        className: options.className || 'ol-dragzoom',
        minArea: options.minArea,
        onBoxEnd: onBoxEnd
      });

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 200;

      /**
       * @private
       * @type {boolean}
       */
      this.out_ = options.out !== undefined ? options.out : false;
    }
  }


  /**
   * @this {DragZoom}
   */
  function onBoxEnd() {
    const map = this.getMap();
    const view = /** @type {!import("../View.js").default} */ (map.getView());
    const size = /** @type {!import("../size.js").Size} */ (map.getSize());
    let extent = this.getGeometry().getExtent();

    if (this.out_) {
      const mapExtent = view.calculateExtent(size);
      const boxPixelExtent = createOrUpdateFromCoordinates([
        map.getPixelFromCoordinate(getBottomLeft(extent)),
        map.getPixelFromCoordinate(getTopRight(extent))]);
      const factor = view.getResolutionForExtent(boxPixelExtent, size);

      scaleFromCenter(mapExtent, 1 / factor);
      extent = mapExtent;
    }

    const resolution = view.getConstrainedResolution(view.getResolutionForExtent(extent, size));
    const center = view.getConstrainedCenter(getCenter(extent), resolution);

    view.animate({
      resolution: resolution,
      center: center,
      duration: this.duration_,
      easing: easeOut
    });
  }

  /**
   * @module ol/events/KeyCode
   */

  /**
   * @enum {number}
   * @const
   */
  var KeyCode = {
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40
  };

  /**
   * @module ol/interaction/KeyboardPan
   */


  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. Default is
   * {@link module:ol/events/condition~noModifierKeys} and
   * {@link module:ol/events/condition~targetNotEditable}.
   * @property {number} [duration=100] Animation duration in milliseconds.
   * @property {number} [pixelDelta=128] The amount of pixels to pan on each key
   * press.
   */


  /**
   * @classdesc
   * Allows the user to pan the map using keyboard arrows.
   * Note that, although this interaction is by default included in maps,
   * the keys can only be used when browser focus is on the element to which
   * the keyboard events are attached. By default, this is the map div,
   * though you can change this with the `keyboardEventTarget` in
   * {@link module:ol/Map~Map}. `document` never loses focus but, for any other
   * element, focus will have to be on, and returned to, this element if the keys
   * are to function.
   * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.
   * @api
   */
  class KeyboardPan extends Interaction {
    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {

      super({
        handleEvent: handleEvent$1
      });

      const options = opt_options || {};

      /**
       * @private
       * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Browser event.
       * @return {boolean} Combined condition result.
       */
      this.defaultCondition_ = function(mapBrowserEvent) {
        return noModifierKeys(mapBrowserEvent) &&
          targetNotEditable(mapBrowserEvent);
      };

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition !== undefined ?
        options.condition : this.defaultCondition_;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 100;

      /**
       * @private
       * @type {number}
       */
      this.pixelDelta_ = options.pixelDelta !== undefined ?
        options.pixelDelta : 128;

    }

  }


  /**
   * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a
   * `KeyEvent`, and decides the direction to pan to (if an arrow key was
   * pressed).
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} `false` to stop event propagation.
   * @this {KeyboardPan}
   */
  function handleEvent$1(mapBrowserEvent) {
    let stopEvent = false;
    if (mapBrowserEvent.type == EventType.KEYDOWN) {
      const keyEvent = /** @type {KeyboardEvent} */ (mapBrowserEvent.originalEvent);
      const keyCode = keyEvent.keyCode;
      if (this.condition_(mapBrowserEvent) &&
          (keyCode == KeyCode.DOWN ||
          keyCode == KeyCode.LEFT ||
          keyCode == KeyCode.RIGHT ||
          keyCode == KeyCode.UP)) {
        const map = mapBrowserEvent.map;
        const view = map.getView();
        const mapUnitsDelta = view.getResolution() * this.pixelDelta_;
        let deltaX = 0, deltaY = 0;
        if (keyCode == KeyCode.DOWN) {
          deltaY = -mapUnitsDelta;
        } else if (keyCode == KeyCode.LEFT) {
          deltaX = -mapUnitsDelta;
        } else if (keyCode == KeyCode.RIGHT) {
          deltaX = mapUnitsDelta;
        } else {
          deltaY = mapUnitsDelta;
        }
        const delta = [deltaX, deltaY];
        rotate$2(delta, view.getRotation());
        pan(view, delta, this.duration_);
        mapBrowserEvent.preventDefault();
        stopEvent = true;
      }
    }
    return !stopEvent;
  }

  /**
   * @module ol/interaction/KeyboardZoom
   */


  /**
   * @typedef {Object} Options
   * @property {number} [duration=100] Animation duration in milliseconds.
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. Default is
   * {@link module:ol/events/condition~targetNotEditable}.
   * @property {number} [delta=1] The zoom level delta on each key press.
   */


  /**
   * @classdesc
   * Allows the user to zoom the map using keyboard + and -.
   * Note that, although this interaction is by default included in maps,
   * the keys can only be used when browser focus is on the element to which
   * the keyboard events are attached. By default, this is the map div,
   * though you can change this with the `keyboardEventTarget` in
   * {@link module:ol/Map~Map}. `document` never loses focus but, for any other
   * element, focus will have to be on, and returned to, this element if the keys
   * are to function.
   * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.
   * @api
   */
  class KeyboardZoom extends Interaction {
    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {

      super({
        handleEvent: handleEvent$2
      });

      const options = opt_options ? opt_options : {};

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : targetNotEditable;

      /**
       * @private
       * @type {number}
       */
      this.delta_ = options.delta ? options.delta : 1;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 100;

    }

  }


  /**
   * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a
   * `KeyEvent`, and decides whether to zoom in or out (depending on whether the
   * key pressed was '+' or '-').
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} `false` to stop event propagation.
   * @this {KeyboardZoom}
   */
  function handleEvent$2(mapBrowserEvent) {
    let stopEvent = false;
    if (mapBrowserEvent.type == EventType.KEYDOWN ||
        mapBrowserEvent.type == EventType.KEYPRESS) {
      const keyEvent = /** @type {KeyboardEvent} */ (mapBrowserEvent.originalEvent);
      const charCode = keyEvent.charCode;
      if (this.condition_(mapBrowserEvent) &&
          (charCode == '+'.charCodeAt(0) || charCode == '-'.charCodeAt(0))) {
        const map = mapBrowserEvent.map;
        const delta = (charCode == '+'.charCodeAt(0)) ? this.delta_ : -this.delta_;
        const view = map.getView();
        zoomByDelta(view, delta, undefined, this.duration_);
        mapBrowserEvent.preventDefault();
        stopEvent = true;
      }
    }
    return !stopEvent;
  }

  /**
   * @module ol/interaction/MouseWheelZoom
   */


  /**
   * @enum {string}
   */
  const Mode = {
    TRACKPAD: 'trackpad',
    WHEEL: 'wheel'
  };


  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. Default is
   * {@link module:ol/events/condition~always}.
   * @property {number} [maxDelta=1] Maximum mouse wheel delta.
   * @property {number} [duration=250] Animation duration in milliseconds.
   * @property {number} [timeout=80] Mouse wheel timeout duration in milliseconds.
   * @property {boolean} [useAnchor=true] Enable zooming using the mouse's
   * location as the anchor. When set to `false`, zooming in and out will zoom to
   * the center of the screen instead of zooming on the mouse's location.
   */


  /**
   * @classdesc
   * Allows the user to zoom the map by scrolling the mouse wheel.
   * @api
   */
  class MouseWheelZoom extends Interaction {
    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {

      const options = opt_options ? opt_options : {};

      super(/** @type {import("./Interaction.js").InteractionOptions} */ (options));

      /**
       * @private
       * @type {number}
       */
      this.totalDelta_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.lastDelta_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = options.maxDelta !== undefined ? options.maxDelta : 1;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;

      /**
       * @private
       * @type {number}
       */
      this.timeout_ = options.timeout !== undefined ? options.timeout : 80;

      /**
       * @private
       * @type {boolean}
       */
      this.useAnchor_ = options.useAnchor !== undefined ? options.useAnchor : true;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : always;

      /**
       * @private
       * @type {?import("../coordinate.js").Coordinate}
       */
      this.lastAnchor_ = null;

      /**
       * @private
       * @type {number|undefined}
       */
      this.startTime_ = undefined;

      /**
       * @private
       * @type {?}
       */
      this.timeoutId_;

      /**
       * @private
       * @type {Mode|undefined}
       */
      this.mode_ = undefined;

      /**
       * Trackpad events separated by this delay will be considered separate
       * interactions.
       * @type {number}
       */
      this.trackpadEventGap_ = 400;

      /**
       * @type {?}
       */
      this.trackpadTimeoutId_;

      /**
       * The number of delta values per zoom level
       * @private
       * @type {number}
       */
      this.trackpadDeltaPerZoom_ = 300;

    }

    /**
     * @private
     */
    endInteraction_() {
      this.trackpadTimeoutId_ = undefined;
      const view = this.getMap().getView();
      view.endInteraction(undefined, Math.sign(this.lastDelta_), this.lastAnchor_);
    }

    /**
     * Handles the {@link module:ol/MapBrowserEvent map browser event} (if it was a mousewheel-event) and eventually
     * zooms the map.
     * @override
     */
    handleEvent(mapBrowserEvent) {
      if (!this.condition_(mapBrowserEvent)) {
        return true;
      }
      const type = mapBrowserEvent.type;
      if (type !== EventType.WHEEL && type !== EventType.MOUSEWHEEL) {
        return true;
      }

      mapBrowserEvent.preventDefault();

      const map = mapBrowserEvent.map;
      const wheelEvent = /** @type {WheelEvent} */ (mapBrowserEvent.originalEvent);

      if (this.useAnchor_) {
        this.lastAnchor_ = mapBrowserEvent.coordinate;
      }

      // Delta normalisation inspired by
      // https://github.com/mapbox/mapbox-gl-js/blob/001c7b9/js/ui/handler/scroll_zoom.js
      let delta;
      if (mapBrowserEvent.type == EventType.WHEEL) {
        delta = wheelEvent.deltaY;
        if (FIREFOX &&
            wheelEvent.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {
          delta /= DEVICE_PIXEL_RATIO;
        }
        if (wheelEvent.deltaMode === WheelEvent.DOM_DELTA_LINE) {
          delta *= 40;
        }
      } else if (mapBrowserEvent.type == EventType.MOUSEWHEEL) {
        delta = -wheelEvent.wheelDeltaY;
        if (SAFARI) {
          delta /= 3;
        }
      }

      if (delta === 0) {
        return false;
      } else {
        this.lastDelta_ = delta;
      }

      const now = Date.now();

      if (this.startTime_ === undefined) {
        this.startTime_ = now;
      }

      if (!this.mode_ || now - this.startTime_ > this.trackpadEventGap_) {
        this.mode_ = Math.abs(delta) < 4 ?
          Mode.TRACKPAD :
          Mode.WHEEL;
      }

      if (this.mode_ === Mode.TRACKPAD) {
        const view = map.getView();
        if (this.trackpadTimeoutId_) {
          clearTimeout(this.trackpadTimeoutId_);
        } else {
          view.beginInteraction();
        }
        this.trackpadTimeoutId_ = setTimeout(this.endInteraction_.bind(this), this.trackpadEventGap_);
        view.adjustZoom(-delta / this.trackpadDeltaPerZoom_, this.lastAnchor_);
        this.startTime_ = now;
        return false;
      }

      this.totalDelta_ += delta;

      const timeLeft = Math.max(this.timeout_ - (now - this.startTime_), 0);

      clearTimeout(this.timeoutId_);
      this.timeoutId_ = setTimeout(this.handleWheelZoom_.bind(this, map), timeLeft);

      return false;
    }

    /**
     * @private
     * @param {import("../PluggableMap.js").default} map Map.
     */
    handleWheelZoom_(map) {
      const view = map.getView();
      if (view.getAnimating()) {
        view.cancelAnimations();
      }
      const delta = clamp(this.totalDelta_, -this.maxDelta_, this.maxDelta_);
      zoomByDelta(view, -delta, this.lastAnchor_, this.duration_);
      this.mode_ = undefined;
      this.totalDelta_ = 0;
      this.lastAnchor_ = null;
      this.startTime_ = undefined;
      this.timeoutId_ = undefined;
    }

    /**
     * Enable or disable using the mouse's location as an anchor when zooming
     * @param {boolean} useAnchor true to zoom to the mouse's location, false
     * to zoom to the center of the map
     * @api
     */
    setMouseAnchor(useAnchor) {
      this.useAnchor_ = useAnchor;
      if (!useAnchor) {
        this.lastAnchor_ = null;
      }
    }
  }

  /**
   * @module ol/interaction/PinchRotate
   */


  /**
   * @typedef {Object} Options
   * @property {number} [duration=250] The duration of the animation in
   * milliseconds.
   * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.
   */


  /**
   * @classdesc
   * Allows the user to rotate the map by twisting with two fingers
   * on a touch screen.
   * @api
   */
  class PinchRotate extends PointerInteraction {
    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {

      const options = opt_options ? opt_options : {};

      const pointerOptions = /** @type {import("./Pointer.js").Options} */ (options);

      if (!pointerOptions.stopDown) {
        pointerOptions.stopDown = FALSE;
      }

      super(pointerOptions);

      /**
       * @private
       * @type {import("../coordinate.js").Coordinate}
       */
      this.anchor_ = null;

      /**
       * @private
       * @type {number|undefined}
       */
      this.lastAngle_ = undefined;

      /**
       * @private
       * @type {boolean}
       */
      this.rotating_ = false;

      /**
       * @private
       * @type {number}
       */
      this.rotationDelta_ = 0.0;

      /**
       * @private
       * @type {number}
       */
      this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;

    }

    /**
     * @inheritDoc
     */
    handleDragEvent(mapBrowserEvent) {
      let rotationDelta = 0.0;

      const touch0 = this.targetPointers[0];
      const touch1 = this.targetPointers[1];

      // angle between touches
      const angle = Math.atan2(
        touch1.clientY - touch0.clientY,
        touch1.clientX - touch0.clientX);

      if (this.lastAngle_ !== undefined) {
        const delta = angle - this.lastAngle_;
        this.rotationDelta_ += delta;
        if (!this.rotating_ &&
            Math.abs(this.rotationDelta_) > this.threshold_) {
          this.rotating_ = true;
        }
        rotationDelta = delta;
      }
      this.lastAngle_ = angle;

      const map = mapBrowserEvent.map;
      const view = map.getView();
      if (view.getConstraints().rotation === disable) {
        return;
      }

      // rotate anchor point.
      // FIXME: should be the intersection point between the lines:
      //     touch0,touch1 and previousTouch0,previousTouch1
      const viewportPosition = map.getViewport().getBoundingClientRect();
      const centroid$1 = centroid(this.targetPointers);
      centroid$1[0] -= viewportPosition.left;
      centroid$1[1] -= viewportPosition.top;
      this.anchor_ = map.getCoordinateFromPixel(centroid$1);

      // rotate
      if (this.rotating_) {
        map.render();
        view.adjustRotation(rotationDelta, this.anchor_);
      }
    }

    /**
     * @inheritDoc
     */
    handleUpEvent(mapBrowserEvent) {
      if (this.targetPointers.length < 2) {
        const map = mapBrowserEvent.map;
        const view = map.getView();
        view.endInteraction(this.duration_);
        return false;
      } else {
        return true;
      }
    }

    /**
     * @inheritDoc
     */
    handleDownEvent(mapBrowserEvent) {
      if (this.targetPointers.length >= 2) {
        const map = mapBrowserEvent.map;
        this.anchor_ = null;
        this.lastAngle_ = undefined;
        this.rotating_ = false;
        this.rotationDelta_ = 0.0;
        if (!this.handlingDownUpSequence) {
          map.getView().beginInteraction();
        }
        return true;
      } else {
        return false;
      }
    }
  }

  /**
   * @module ol/interaction/PinchZoom
   */


  /**
   * @typedef {Object} Options
   * @property {number} [duration=400] Animation duration in milliseconds.
   */


  /**
   * @classdesc
   * Allows the user to zoom the map by pinching with two fingers
   * on a touch screen.
   * @api
   */
  class PinchZoom extends PointerInteraction {
    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {

      const options = opt_options ? opt_options : {};

      const pointerOptions = /** @type {import("./Pointer.js").Options} */ (options);

      if (!pointerOptions.stopDown) {
        pointerOptions.stopDown = FALSE;
      }

      super(pointerOptions);

      /**
       * @private
       * @type {import("../coordinate.js").Coordinate}
       */
      this.anchor_ = null;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 400;

      /**
       * @private
       * @type {number|undefined}
       */
      this.lastDistance_ = undefined;

      /**
       * @private
       * @type {number}
       */
      this.lastScaleDelta_ = 1;

    }

    /**
     * @inheritDoc
     */
    handleDragEvent(mapBrowserEvent) {
      let scaleDelta = 1.0;

      const touch0 = this.targetPointers[0];
      const touch1 = this.targetPointers[1];
      const dx = touch0.clientX - touch1.clientX;
      const dy = touch0.clientY - touch1.clientY;

      // distance between touches
      const distance = Math.sqrt(dx * dx + dy * dy);

      if (this.lastDistance_ !== undefined) {
        scaleDelta = this.lastDistance_ / distance;
      }
      this.lastDistance_ = distance;


      const map = mapBrowserEvent.map;
      const view = map.getView();

      if (scaleDelta != 1.0) {
        this.lastScaleDelta_ = scaleDelta;
      }

      // scale anchor point.
      const viewportPosition = map.getViewport().getBoundingClientRect();
      const centroid$1 = centroid(this.targetPointers);
      centroid$1[0] -= viewportPosition.left;
      centroid$1[1] -= viewportPosition.top;
      this.anchor_ = map.getCoordinateFromPixel(centroid$1);

      // scale, bypass the resolution constraint
      map.render();
      view.adjustResolution(scaleDelta, this.anchor_);
    }

    /**
     * @inheritDoc
     */
    handleUpEvent(mapBrowserEvent) {
      if (this.targetPointers.length < 2) {
        const map = mapBrowserEvent.map;
        const view = map.getView();
        const direction = this.lastScaleDelta_ > 1 ? 1 : -1;
        view.endInteraction(this.duration_, direction);
        return false;
      } else {
        return true;
      }
    }

    /**
     * @inheritDoc
     */
    handleDownEvent(mapBrowserEvent) {
      if (this.targetPointers.length >= 2) {
        const map = mapBrowserEvent.map;
        this.anchor_ = null;
        this.lastDistance_ = undefined;
        this.lastScaleDelta_ = 1;
        if (!this.handlingDownUpSequence) {
          map.getView().beginInteraction();
        }
        return true;
      } else {
        return false;
      }
    }
  }

  /**
   * @module ol/interaction/DragAndDrop
   */


  /**
   * @typedef {Object} Options
   * @property {Array<typeof import("../format/Feature.js").default>} [formatConstructors] Format constructors.
   * @property {import("../source/Vector.js").default} [source] Optional vector source where features will be added.  If a source is provided
   * all existing features will be removed and new features will be added when
   * they are dropped on the target.  If you want to add features to a vector
   * source without removing the existing features (append only), instead of
   * providing the source option listen for the "addfeatures" event.
   * @property {import("../proj.js").ProjectionLike} [projection] Target projection. By default, the map's view's projection is used.
   * @property {HTMLElement} [target] The element that is used as the drop target, default is the viewport element.
   */


  /**
   * @enum {string}
   */
  const DragAndDropEventType = {
    /**
     * Triggered when features are added
     * @event DragAndDropEvent#addfeatures
     * @api
     */
    ADD_FEATURES: 'addfeatures'
  };


  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/DragAndDrop~DragAndDrop} instances are instances
   * of this type.
   */
  class DragAndDropEvent extends Event {

    /**
     * @param {DragAndDropEventType} type Type.
     * @param {File} file File.
     * @param {Array<import("../Feature.js").default>=} opt_features Features.
     * @param {import("../proj/Projection.js").default=} opt_projection Projection.
     */
    constructor(type, file, opt_features, opt_projection) {

      super(type);

      /**
       * The features parsed from dropped data.
       * @type {Array<import("../Feature.js").FeatureLike>|undefined}
       * @api
       */
      this.features = opt_features;

      /**
       * The dropped file.
       * @type {File}
       * @api
       */
      this.file = file;

      /**
       * The feature projection.
       * @type {import("../proj/Projection.js").default|undefined}
       * @api
       */
      this.projection = opt_projection;

    }

  }


  /**
   * @classdesc
   * Handles input of vector data by drag and drop.
   * @api
   *
   * @fires DragAndDropEvent
   */
  class DragAndDrop extends Interaction {
    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {

      const options = opt_options ? opt_options : {};

      super({
        handleEvent: TRUE
      });

      /**
       * @private
       * @type {Array<typeof import("../format/Feature.js").default>}
       */
      this.formatConstructors_ = options.formatConstructors ?
        options.formatConstructors : [];

      /**
       * @private
       * @type {import("../proj/Projection.js").default}
       */
      this.projection_ = options.projection ?
        get$2(options.projection) : null;

      /**
       * @private
       * @type {Array<import("../events.js").EventsKey>}
       */
      this.dropListenKeys_ = null;

      /**
       * @private
       * @type {import("../source/Vector.js").default}
       */
      this.source_ = options.source || null;

      /**
       * @private
       * @type {HTMLElement}
       */
      this.target = options.target ? options.target : null;

    }

    /**
     * @param {File} file File.
     * @param {Event} event Load event.
     * @private
     */
    handleResult_(file, event) {
      const result = event.target.result;
      const map = this.getMap();
      let projection = this.projection_;
      if (!projection) {
        const view = map.getView();
        projection = view.getProjection();
      }

      const formatConstructors = this.formatConstructors_;
      let features = [];
      for (let i = 0, ii = formatConstructors.length; i < ii; ++i) {
        const format = new formatConstructors[i]();
        features = this.tryReadFeatures_(format, result, {
          featureProjection: projection
        });
        if (features && features.length > 0) {
          break;
        }
      }
      if (this.source_) {
        this.source_.clear();
        this.source_.addFeatures(features);
      }
      this.dispatchEvent(
        new DragAndDropEvent(
          DragAndDropEventType.ADD_FEATURES, file,
          features, projection));
    }

    /**
     * @private
     */
    registerListeners_() {
      const map = this.getMap();
      if (map) {
        const dropArea = this.target ? this.target : map.getViewport();
        this.dropListenKeys_ = [
          listen(dropArea, EventType.DROP, handleDrop, this),
          listen(dropArea, EventType.DRAGENTER, handleStop, this),
          listen(dropArea, EventType.DRAGOVER, handleStop, this),
          listen(dropArea, EventType.DROP, handleStop, this)
        ];
      }
    }

    /**
     * @inheritDoc
     */
    setActive(active) {
      super.setActive(active);
      if (active) {
        this.registerListeners_();
      } else {
        this.unregisterListeners_();
      }
    }

    /**
     * @inheritDoc
     */
    setMap(map) {
      this.unregisterListeners_();
      super.setMap(map);
      if (this.getActive()) {
        this.registerListeners_();
      }
    }

    /**
     * @param {import("../format/Feature.js").default} format Format.
     * @param {string} text Text.
     * @param {import("../format/Feature.js").ReadOptions} options Read options.
     * @private
     * @return {Array<import("../Feature.js").FeatureLike>} Features.
     */
    tryReadFeatures_(format, text, options) {
      try {
        return format.readFeatures(text, options);
      } catch (e) {
        return null;
      }
    }

    /**
     * @private
     */
    unregisterListeners_() {
      if (this.dropListenKeys_) {
        this.dropListenKeys_.forEach(unlistenByKey);
        this.dropListenKeys_ = null;
      }
    }
  }


  /**
   * @param {DragEvent} event Event.
   * @this {DragAndDrop}
   */
  function handleDrop(event) {
    const files = event.dataTransfer.files;
    for (let i = 0, ii = files.length; i < ii; ++i) {
      const file = files.item(i);
      const reader = new FileReader();
      reader.addEventListener(EventType.LOAD, this.handleResult_.bind(this, file));
      reader.readAsText(file);
    }
  }


  /**
   * @param {DragEvent} event Event.
   */
  function handleStop(event) {
    event.stopPropagation();
    event.preventDefault();
    event.dataTransfer.dropEffect = 'copy';
  }

  /**
   * @module ol/interaction/DragRotateAndZoom
   */


  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled.
   * Default is {@link module:ol/events/condition~shiftKeyOnly}.
   * @property {number} [duration=400] Animation duration in milliseconds.
   */


  /**
   * @classdesc
   * Allows the user to zoom and rotate the map by clicking and dragging
   * on the map.  By default, this interaction is limited to when the shift
   * key is held down.
   *
   * This interaction is only supported for mouse devices.
   *
   * And this interaction is not included in the default interactions.
   * @api
   */
  class DragRotateAndZoom extends PointerInteraction {

    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {

      const options = opt_options ? opt_options : {};

      super(/** @type {import("./Pointer.js").Options} */ (options));

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : shiftKeyOnly;

      /**
       * @private
       * @type {number|undefined}
       */
      this.lastAngle_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.lastMagnitude_ = undefined;

      /**
       * @private
       * @type {number}
       */
      this.lastScaleDelta_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 400;

    }

    /**
     * @inheritDoc
     */
    handleDragEvent(mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return;
      }

      const map = mapBrowserEvent.map;
      const size = map.getSize();
      const offset = mapBrowserEvent.pixel;
      const deltaX = offset[0] - size[0] / 2;
      const deltaY = size[1] / 2 - offset[1];
      const theta = Math.atan2(deltaY, deltaX);
      const magnitude = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
      const view = map.getView();
      if (this.lastAngle_ !== undefined) {
        const angleDelta = this.lastAngle_ - theta;
        view.adjustRotation(angleDelta);
      }
      this.lastAngle_ = theta;
      if (this.lastMagnitude_ !== undefined) {
        view.adjustResolution(this.lastMagnitude_ / magnitude);
      }
      if (this.lastMagnitude_ !== undefined) {
        this.lastScaleDelta_ = this.lastMagnitude_ / magnitude;
      }
      this.lastMagnitude_ = magnitude;
    }

    /**
     * @inheritDoc
     */
    handleUpEvent(mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return true;
      }

      const map = mapBrowserEvent.map;
      const view = map.getView();
      const direction = this.lastScaleDelta_ > 1 ? 1 : -1;
      view.endInteraction(this.duration_, direction);
      this.lastScaleDelta_ = 0;
      return false;
    }

    /**
     * @inheritDoc
     */
    handleDownEvent(mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return false;
      }

      if (this.condition_(mapBrowserEvent)) {
        mapBrowserEvent.map.getView().beginInteraction();
        this.lastAngle_ = undefined;
        this.lastMagnitude_ = undefined;
        return true;
      } else {
        return false;
      }
    }
  }

  /**
   * @module ol/geom/Circle
   */


  /**
   * @classdesc
   * Circle geometry.
   *
   * @api
   */
  class Circle extends SimpleGeometry {

    /**
     * @param {!import("../coordinate.js").Coordinate} center Center.
     *     For internal use, flat coordinates in combination with `opt_layout` and no
     *     `opt_radius` are also accepted.
     * @param {number=} opt_radius Radius.
     * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
     */
    constructor(center, opt_radius, opt_layout) {
      super();
      if (opt_layout !== undefined && opt_radius === undefined) {
        this.setFlatCoordinates(opt_layout, center);
      } else {
        const radius = opt_radius ? opt_radius : 0;
        this.setCenterAndRadius(center, radius, opt_layout);
      }
    }

    /**
     * Make a complete copy of the geometry.
     * @return {!Circle} Clone.
     * @override
     * @api
     */
    clone() {
      return new Circle(this.flatCoordinates.slice(), undefined, this.layout);
    }

    /**
     * @inheritDoc
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      const flatCoordinates = this.flatCoordinates;
      const dx = x - flatCoordinates[0];
      const dy = y - flatCoordinates[1];
      const squaredDistance = dx * dx + dy * dy;
      if (squaredDistance < minSquaredDistance) {
        if (squaredDistance === 0) {
          for (let i = 0; i < this.stride; ++i) {
            closestPoint[i] = flatCoordinates[i];
          }
        } else {
          const delta = this.getRadius() / Math.sqrt(squaredDistance);
          closestPoint[0] = flatCoordinates[0] + delta * dx;
          closestPoint[1] = flatCoordinates[1] + delta * dy;
          for (let i = 2; i < this.stride; ++i) {
            closestPoint[i] = flatCoordinates[i];
          }
        }
        closestPoint.length = this.stride;
        return squaredDistance;
      } else {
        return minSquaredDistance;
      }
    }

    /**
     * @inheritDoc
     */
    containsXY(x, y) {
      const flatCoordinates = this.flatCoordinates;
      const dx = x - flatCoordinates[0];
      const dy = y - flatCoordinates[1];
      return dx * dx + dy * dy <= this.getRadiusSquared_();
    }

    /**
     * Return the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.
     * @return {import("../coordinate.js").Coordinate} Center.
     * @api
     */
    getCenter() {
      return this.flatCoordinates.slice(0, this.stride);
    }

    /**
     * @inheritDoc
     */
    computeExtent(extent) {
      const flatCoordinates = this.flatCoordinates;
      const radius = flatCoordinates[this.stride] - flatCoordinates[0];
      return createOrUpdate(
        flatCoordinates[0] - radius, flatCoordinates[1] - radius,
        flatCoordinates[0] + radius, flatCoordinates[1] + radius,
        extent);
    }

    /**
     * Return the radius of the circle.
     * @return {number} Radius.
     * @api
     */
    getRadius() {
      return Math.sqrt(this.getRadiusSquared_());
    }

    /**
     * @private
     * @return {number} Radius squared.
     */
    getRadiusSquared_() {
      const dx = this.flatCoordinates[this.stride] - this.flatCoordinates[0];
      const dy = this.flatCoordinates[this.stride + 1] - this.flatCoordinates[1];
      return dx * dx + dy * dy;
    }

    /**
     * @inheritDoc
     * @api
     */
    getType() {
      return GeometryType.CIRCLE;
    }

    /**
     * @inheritDoc
     * @api
     */
    intersectsExtent(extent) {
      const circleExtent = this.getExtent();
      if (intersects(extent, circleExtent)) {
        const center = this.getCenter();

        if (extent[0] <= center[0] && extent[2] >= center[0]) {
          return true;
        }
        if (extent[1] <= center[1] && extent[3] >= center[1]) {
          return true;
        }

        return forEachCorner(extent, this.intersectsCoordinate.bind(this));
      }
      return false;

    }

    /**
     * Set the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.
     * @param {import("../coordinate.js").Coordinate} center Center.
     * @api
     */
    setCenter(center) {
      const stride = this.stride;
      const radius = this.flatCoordinates[stride] - this.flatCoordinates[0];
      const flatCoordinates = center.slice();
      flatCoordinates[stride] = flatCoordinates[0] + radius;
      for (let i = 1; i < stride; ++i) {
        flatCoordinates[stride + i] = center[i];
      }
      this.setFlatCoordinates(this.layout, flatCoordinates);
      this.changed();
    }

    /**
     * Set the center (as {@link module:ol/coordinate~Coordinate coordinate}) and the radius (as
     * number) of the circle.
     * @param {!import("../coordinate.js").Coordinate} center Center.
     * @param {number} radius Radius.
     * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
     * @api
     */
    setCenterAndRadius(center, radius, opt_layout) {
      this.setLayout(opt_layout, center, 0);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      /** @type {Array<number>} */
      const flatCoordinates = this.flatCoordinates;
      let offset = deflateCoordinate(
        flatCoordinates, 0, center, this.stride);
      flatCoordinates[offset++] = flatCoordinates[0] + radius;
      for (let i = 1, ii = this.stride; i < ii; ++i) {
        flatCoordinates[offset++] = flatCoordinates[i];
      }
      flatCoordinates.length = offset;
      this.changed();
    }

    /**
     * @inheritDoc
     */
    getCoordinates() {
      return null;
    }

    /**
     * @inheritDoc
     */
    setCoordinates(coordinates, opt_layout) {}

    /**
     * Set the radius of the circle. The radius is in the units of the projection.
     * @param {number} radius Radius.
     * @api
     */
    setRadius(radius) {
      this.flatCoordinates[this.stride] = this.flatCoordinates[0] + radius;
      this.changed();
    }

    /**
     * @inheritDoc
     * @api
     */
    rotate(angle, anchor) {
      const center = this.getCenter();
      const stride = this.getStride();
      this.setCenter(rotate(center, 0, center.length, stride, angle, anchor, center));
      this.changed();
    }

    /**
     * @inheritDoc
     * @api
     */
    translate(deltaX, deltaY) {
      const center = this.getCenter();
      const stride = this.getStride();
      this.setCenter(translate(center, 0, center.length, stride, deltaX, deltaY, center));
      this.changed();
    }

  }


  /**
   * Transform each coordinate of the circle from one coordinate reference system
   * to another. The geometry is modified in place.
   * If you do not want the geometry modified in place, first clone() it and
   * then use this function on the clone.
   *
   * Internally a circle is currently represented by two points: the center of
   * the circle `[cx, cy]`, and the point to the right of the circle
   * `[cx + r, cy]`. This `transform` function just transforms these two points.
   * So the resulting geometry is also a circle, and that circle does not
   * correspond to the shape that would be obtained by transforming every point
   * of the original circle.
   *
   * @param {import("../proj.js").ProjectionLike} source The current projection.  Can be a
   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
   * @param {import("../proj.js").ProjectionLike} destination The desired projection.  Can be a
   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
   * @return {Circle} This geometry.  Note that original geometry is
   *     modified in place.
   * @function
   * @api
   */
  Circle.prototype.transform;

  /**
   * @module ol/geom/MultiLineString
   */

  /**
   * @classdesc
   * Multi-linestring geometry.
   *
   * @api
   */
  class MultiLineString extends SimpleGeometry {

    /**
     * @param {Array<Array<import("../coordinate.js").Coordinate>|LineString>|Array<number>} coordinates
     *     Coordinates or LineString geometries. (For internal use, flat coordinates in
     *     combination with `opt_layout` and `opt_ends` are also accepted.)
     * @param {GeometryLayout=} opt_layout Layout.
     * @param {Array<number>=} opt_ends Flat coordinate ends for internal use.
     */
    constructor(coordinates, opt_layout, opt_ends) {

      super();

      /**
       * @type {Array<number>}
       * @private
       */
      this.ends_ = [];

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDeltaRevision_ = -1;

      if (Array.isArray(coordinates[0])) {
        this.setCoordinates(/** @type {Array<Array<import("../coordinate.js").Coordinate>>} */ (coordinates), opt_layout);
      } else if (opt_layout !== undefined && opt_ends) {
        this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
        this.ends_ = opt_ends;
      } else {
        let layout = this.getLayout();
        const lineStrings = /** @type {Array<LineString>} */ (coordinates);
        const flatCoordinates = [];
        const ends = [];
        for (let i = 0, ii = lineStrings.length; i < ii; ++i) {
          const lineString = lineStrings[i];
          if (i === 0) {
            layout = lineString.getLayout();
          }
          extend$1(flatCoordinates, lineString.getFlatCoordinates());
          ends.push(flatCoordinates.length);
        }
        this.setFlatCoordinates(layout, flatCoordinates);
        this.ends_ = ends;
      }

    }

    /**
     * Append the passed linestring to the multilinestring.
     * @param {LineString} lineString LineString.
     * @api
     */
    appendLineString(lineString) {
      if (!this.flatCoordinates) {
        this.flatCoordinates = lineString.getFlatCoordinates().slice();
      } else {
        extend$1(this.flatCoordinates, lineString.getFlatCoordinates().slice());
      }
      this.ends_.push(this.flatCoordinates.length);
      this.changed();
    }

    /**
     * Make a complete copy of the geometry.
     * @return {!MultiLineString} Clone.
     * @override
     * @api
     */
    clone() {
      return new MultiLineString(this.flatCoordinates.slice(), this.layout, this.ends_.slice());
    }

    /**
     * @inheritDoc
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      if (this.maxDeltaRevision_ != this.getRevision()) {
        this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(
          this.flatCoordinates, 0, this.ends_, this.stride, 0));
        this.maxDeltaRevision_ = this.getRevision();
      }
      return assignClosestArrayPoint(
        this.flatCoordinates, 0, this.ends_, this.stride,
        this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);
    }

    /**
     * Returns the coordinate at `m` using linear interpolation, or `null` if no
     * such coordinate exists.
     *
     * `opt_extrapolate` controls extrapolation beyond the range of Ms in the
     * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first
     * M will return the first coordinate and Ms greater than the last M will
     * return the last coordinate.
     *
     * `opt_interpolate` controls interpolation between consecutive LineStrings
     * within the MultiLineString. If `opt_interpolate` is `true` the coordinates
     * will be linearly interpolated between the last coordinate of one LineString
     * and the first coordinate of the next LineString.  If `opt_interpolate` is
     * `false` then the function will return `null` for Ms falling between
     * LineStrings.
     *
     * @param {number} m M.
     * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.
     * @param {boolean=} opt_interpolate Interpolate. Default is `false`.
     * @return {import("../coordinate.js").Coordinate} Coordinate.
     * @api
     */
    getCoordinateAtM(m, opt_extrapolate, opt_interpolate) {
      if ((this.layout != GeometryLayout.XYM &&
           this.layout != GeometryLayout.XYZM) ||
          this.flatCoordinates.length === 0) {
        return null;
      }
      const extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;
      const interpolate = opt_interpolate !== undefined ? opt_interpolate : false;
      return lineStringsCoordinateAtM(this.flatCoordinates, 0,
        this.ends_, this.stride, m, extrapolate, interpolate);
    }

    /**
     * Return the coordinates of the multilinestring.
     * @return {Array<Array<import("../coordinate.js").Coordinate>>} Coordinates.
     * @override
     * @api
     */
    getCoordinates() {
      return inflateCoordinatesArray(
        this.flatCoordinates, 0, this.ends_, this.stride);
    }

    /**
     * @return {Array<number>} Ends.
     */
    getEnds() {
      return this.ends_;
    }

    /**
     * Return the linestring at the specified index.
     * @param {number} index Index.
     * @return {LineString} LineString.
     * @api
     */
    getLineString(index) {
      if (index < 0 || this.ends_.length <= index) {
        return null;
      }
      return new LineString(this.flatCoordinates.slice(
        index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);
    }

    /**
     * Return the linestrings of this multilinestring.
     * @return {Array<LineString>} LineStrings.
     * @api
     */
    getLineStrings() {
      const flatCoordinates = this.flatCoordinates;
      const ends = this.ends_;
      const layout = this.layout;
      /** @type {Array<LineString>} */
      const lineStrings = [];
      let offset = 0;
      for (let i = 0, ii = ends.length; i < ii; ++i) {
        const end = ends[i];
        const lineString = new LineString(flatCoordinates.slice(offset, end), layout);
        lineStrings.push(lineString);
        offset = end;
      }
      return lineStrings;
    }

    /**
     * @return {Array<number>} Flat midpoints.
     */
    getFlatMidpoints() {
      const midpoints = [];
      const flatCoordinates = this.flatCoordinates;
      let offset = 0;
      const ends = this.ends_;
      const stride = this.stride;
      for (let i = 0, ii = ends.length; i < ii; ++i) {
        const end = ends[i];
        const midpoint = interpolatePoint(
          flatCoordinates, offset, end, stride, 0.5);
        extend$1(midpoints, midpoint);
        offset = end;
      }
      return midpoints;
    }

    /**
     * @inheritDoc
     */
    getSimplifiedGeometryInternal(squaredTolerance) {
      const simplifiedFlatCoordinates = [];
      const simplifiedEnds = [];
      simplifiedFlatCoordinates.length = douglasPeuckerArray(
        this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance,
        simplifiedFlatCoordinates, 0, simplifiedEnds);
      return new MultiLineString(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);
    }

    /**
     * @inheritDoc
     * @api
     */
    getType() {
      return GeometryType.MULTI_LINE_STRING;
    }

    /**
     * @inheritDoc
     * @api
     */
    intersectsExtent(extent) {
      return intersectsLineStringArray(
        this.flatCoordinates, 0, this.ends_, this.stride, extent);
    }

    /**
     * Set the coordinates of the multilinestring.
     * @param {!Array<Array<import("../coordinate.js").Coordinate>>} coordinates Coordinates.
     * @param {GeometryLayout=} opt_layout Layout.
     * @override
     * @api
     */
    setCoordinates(coordinates, opt_layout) {
      this.setLayout(opt_layout, coordinates, 2);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      const ends = deflateCoordinatesArray(
        this.flatCoordinates, 0, coordinates, this.stride, this.ends_);
      this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];
      this.changed();
    }
  }

  /**
   * @module ol/geom/MultiPoint
   */

  /**
   * @classdesc
   * Multi-point geometry.
   *
   * @api
   */
  class MultiPoint extends SimpleGeometry {

    /**
     * @param {Array<import("../coordinate.js").Coordinate>|Array<number>} coordinates Coordinates.
     *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.
     * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
     */
    constructor(coordinates, opt_layout) {
      super();
      if (opt_layout && !Array.isArray(coordinates[0])) {
        this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
      } else {
        this.setCoordinates(/** @type {Array<import("../coordinate.js").Coordinate>} */ (coordinates), opt_layout);
      }
    }

    /**
     * Append the passed point to this multipoint.
     * @param {Point} point Point.
     * @api
     */
    appendPoint(point) {
      if (!this.flatCoordinates) {
        this.flatCoordinates = point.getFlatCoordinates().slice();
      } else {
        extend$1(this.flatCoordinates, point.getFlatCoordinates());
      }
      this.changed();
    }

    /**
     * Make a complete copy of the geometry.
     * @return {!MultiPoint} Clone.
     * @override
     * @api
     */
    clone() {
      const multiPoint = new MultiPoint(this.flatCoordinates.slice(), this.layout);
      return multiPoint;
    }

    /**
     * @inheritDoc
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      const flatCoordinates = this.flatCoordinates;
      const stride = this.stride;
      for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
        const squaredDistance$1 = squaredDistance(
          x, y, flatCoordinates[i], flatCoordinates[i + 1]);
        if (squaredDistance$1 < minSquaredDistance) {
          minSquaredDistance = squaredDistance$1;
          for (let j = 0; j < stride; ++j) {
            closestPoint[j] = flatCoordinates[i + j];
          }
          closestPoint.length = stride;
        }
      }
      return minSquaredDistance;
    }

    /**
     * Return the coordinates of the multipoint.
     * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
     * @override
     * @api
     */
    getCoordinates() {
      return inflateCoordinates(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
    }

    /**
     * Return the point at the specified index.
     * @param {number} index Index.
     * @return {Point} Point.
     * @api
     */
    getPoint(index) {
      const n = !this.flatCoordinates ? 0 : this.flatCoordinates.length / this.stride;
      if (index < 0 || n <= index) {
        return null;
      }
      return new Point(this.flatCoordinates.slice(
        index * this.stride, (index + 1) * this.stride), this.layout);
    }

    /**
     * Return the points of this multipoint.
     * @return {Array<Point>} Points.
     * @api
     */
    getPoints() {
      const flatCoordinates = this.flatCoordinates;
      const layout = this.layout;
      const stride = this.stride;
      /** @type {Array<Point>} */
      const points = [];
      for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
        const point = new Point(flatCoordinates.slice(i, i + stride), layout);
        points.push(point);
      }
      return points;
    }

    /**
     * @inheritDoc
     * @api
     */
    getType() {
      return GeometryType.MULTI_POINT;
    }

    /**
     * @inheritDoc
     * @api
     */
    intersectsExtent(extent) {
      const flatCoordinates = this.flatCoordinates;
      const stride = this.stride;
      for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
        const x = flatCoordinates[i];
        const y = flatCoordinates[i + 1];
        if (containsXY(extent, x, y)) {
          return true;
        }
      }
      return false;
    }

    /**
     * Set the coordinates of the multipoint.
     * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
     * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
     * @override
     * @api
     */
    setCoordinates(coordinates, opt_layout) {
      this.setLayout(opt_layout, coordinates, 1);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      this.flatCoordinates.length = deflateCoordinates(
        this.flatCoordinates, 0, coordinates, this.stride);
      this.changed();
    }
  }

  /**
   * @module ol/geom/flat/center
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @return {Array<number>} Flat centers.
   */
  function linearRingss$1(flatCoordinates, offset, endss, stride) {
    const flatCenters = [];
    let extent = createEmpty();
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      extent = createOrUpdateFromFlatCoordinates(flatCoordinates, offset, ends[0], stride);
      flatCenters.push((extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2);
      offset = ends[ends.length - 1];
    }
    return flatCenters;
  }

  /**
   * @module ol/geom/MultiPolygon
   */

  /**
   * @classdesc
   * Multi-polygon geometry.
   *
   * @api
   */
  class MultiPolygon extends SimpleGeometry {

    /**
     * @param {Array<Array<Array<import("../coordinate.js").Coordinate>>|Polygon>|Array<number>} coordinates Coordinates.
     *     For internal use, flat coordinates in combination with `opt_layout` and `opt_endss` are also accepted.
     * @param {GeometryLayout=} opt_layout Layout.
     * @param {Array<Array<number>>=} opt_endss Array of ends for internal use with flat coordinates.
     */
    constructor(coordinates, opt_layout, opt_endss) {

      super();

      /**
       * @type {Array<Array<number>>}
       * @private
       */
      this.endss_ = [];

      /**
       * @private
       * @type {number}
       */
      this.flatInteriorPointsRevision_ = -1;

      /**
       * @private
       * @type {Array<number>}
       */
      this.flatInteriorPoints_ = null;

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDeltaRevision_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.orientedRevision_ = -1;

      /**
       * @private
       * @type {Array<number>}
       */
      this.orientedFlatCoordinates_ = null;

      if (!opt_endss && !Array.isArray(coordinates[0])) {
        let layout = this.getLayout();
        const polygons = /** @type {Array<Polygon>} */ (coordinates);
        const flatCoordinates = [];
        const endss = [];
        for (let i = 0, ii = polygons.length; i < ii; ++i) {
          const polygon = polygons[i];
          if (i === 0) {
            layout = polygon.getLayout();
          }
          const offset = flatCoordinates.length;
          const ends = polygon.getEnds();
          for (let j = 0, jj = ends.length; j < jj; ++j) {
            ends[j] += offset;
          }
          extend$1(flatCoordinates, polygon.getFlatCoordinates());
          endss.push(ends);
        }
        opt_layout = layout;
        coordinates = flatCoordinates;
        opt_endss = endss;
      }
      if (opt_layout !== undefined && opt_endss) {
        this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
        this.endss_ = opt_endss;
      } else {
        this.setCoordinates(/** @type {Array<Array<Array<import("../coordinate.js").Coordinate>>>} */ (coordinates),
          opt_layout);
      }

    }

    /**
     * Append the passed polygon to this multipolygon.
     * @param {Polygon} polygon Polygon.
     * @api
     */
    appendPolygon(polygon) {
      /** @type {Array<number>} */
      let ends;
      if (!this.flatCoordinates) {
        this.flatCoordinates = polygon.getFlatCoordinates().slice();
        ends = polygon.getEnds().slice();
        this.endss_.push();
      } else {
        const offset = this.flatCoordinates.length;
        extend$1(this.flatCoordinates, polygon.getFlatCoordinates());
        ends = polygon.getEnds().slice();
        for (let i = 0, ii = ends.length; i < ii; ++i) {
          ends[i] += offset;
        }
      }
      this.endss_.push(ends);
      this.changed();
    }

    /**
     * Make a complete copy of the geometry.
     * @return {!MultiPolygon} Clone.
     * @override
     * @api
     */
    clone() {
      const len = this.endss_.length;
      const newEndss = new Array(len);
      for (let i = 0; i < len; ++i) {
        newEndss[i] = this.endss_[i].slice();
      }

      return new MultiPolygon(
        this.flatCoordinates.slice(), this.layout, newEndss);
    }

    /**
     * @inheritDoc
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      if (this.maxDeltaRevision_ != this.getRevision()) {
        this.maxDelta_ = Math.sqrt(multiArrayMaxSquaredDelta(
          this.flatCoordinates, 0, this.endss_, this.stride, 0));
        this.maxDeltaRevision_ = this.getRevision();
      }
      return assignClosestMultiArrayPoint(
        this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride,
        this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
    }

    /**
     * @inheritDoc
     */
    containsXY(x, y) {
      return linearRingssContainsXY(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, x, y);
    }

    /**
     * Return the area of the multipolygon on projected plane.
     * @return {number} Area (on projected plane).
     * @api
     */
    getArea() {
      return linearRingss(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride);
    }

    /**
     * Get the coordinate array for this geometry.  This array has the structure
     * of a GeoJSON coordinate array for multi-polygons.
     *
     * @param {boolean=} opt_right Orient coordinates according to the right-hand
     *     rule (counter-clockwise for exterior and clockwise for interior rings).
     *     If `false`, coordinates will be oriented according to the left-hand rule
     *     (clockwise for exterior and counter-clockwise for interior rings).
     *     By default, coordinate orientation will depend on how the geometry was
     *     constructed.
     * @return {Array<Array<Array<import("../coordinate.js").Coordinate>>>} Coordinates.
     * @override
     * @api
     */
    getCoordinates(opt_right) {
      let flatCoordinates;
      if (opt_right !== undefined) {
        flatCoordinates = this.getOrientedFlatCoordinates().slice();
        orientLinearRingsArray(
          flatCoordinates, 0, this.endss_, this.stride, opt_right);
      } else {
        flatCoordinates = this.flatCoordinates;
      }

      return inflateMultiCoordinatesArray(
        flatCoordinates, 0, this.endss_, this.stride);
    }

    /**
     * @return {Array<Array<number>>} Endss.
     */
    getEndss() {
      return this.endss_;
    }

    /**
     * @return {Array<number>} Flat interior points.
     */
    getFlatInteriorPoints() {
      if (this.flatInteriorPointsRevision_ != this.getRevision()) {
        const flatCenters = linearRingss$1(
          this.flatCoordinates, 0, this.endss_, this.stride);
        this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(
          this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride,
          flatCenters);
        this.flatInteriorPointsRevision_ = this.getRevision();
      }
      return this.flatInteriorPoints_;
    }

    /**
     * Return the interior points as {@link module:ol/geom/MultiPoint multipoint}.
     * @return {MultiPoint} Interior points as XYM coordinates, where M is
     * the length of the horizontal intersection that the point belongs to.
     * @api
     */
    getInteriorPoints() {
      return new MultiPoint(this.getFlatInteriorPoints().slice(), GeometryLayout.XYM);
    }

    /**
     * @return {Array<number>} Oriented flat coordinates.
     */
    getOrientedFlatCoordinates() {
      if (this.orientedRevision_ != this.getRevision()) {
        const flatCoordinates = this.flatCoordinates;
        if (linearRingssAreOriented(
          flatCoordinates, 0, this.endss_, this.stride)) {
          this.orientedFlatCoordinates_ = flatCoordinates;
        } else {
          this.orientedFlatCoordinates_ = flatCoordinates.slice();
          this.orientedFlatCoordinates_.length =
              orientLinearRingsArray(
                this.orientedFlatCoordinates_, 0, this.endss_, this.stride);
        }
        this.orientedRevision_ = this.getRevision();
      }
      return this.orientedFlatCoordinates_;
    }

    /**
     * @inheritDoc
     */
    getSimplifiedGeometryInternal(squaredTolerance) {
      const simplifiedFlatCoordinates = [];
      const simplifiedEndss = [];
      simplifiedFlatCoordinates.length = quantizeMultiArray(
        this.flatCoordinates, 0, this.endss_, this.stride,
        Math.sqrt(squaredTolerance),
        simplifiedFlatCoordinates, 0, simplifiedEndss);
      return new MultiPolygon(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEndss);
    }

    /**
     * Return the polygon at the specified index.
     * @param {number} index Index.
     * @return {Polygon} Polygon.
     * @api
     */
    getPolygon(index) {
      if (index < 0 || this.endss_.length <= index) {
        return null;
      }
      let offset;
      if (index === 0) {
        offset = 0;
      } else {
        const prevEnds = this.endss_[index - 1];
        offset = prevEnds[prevEnds.length - 1];
      }
      const ends = this.endss_[index].slice();
      const end = ends[ends.length - 1];
      if (offset !== 0) {
        for (let i = 0, ii = ends.length; i < ii; ++i) {
          ends[i] -= offset;
        }
      }
      return new Polygon(this.flatCoordinates.slice(offset, end), this.layout, ends);
    }

    /**
     * Return the polygons of this multipolygon.
     * @return {Array<Polygon>} Polygons.
     * @api
     */
    getPolygons() {
      const layout = this.layout;
      const flatCoordinates = this.flatCoordinates;
      const endss = this.endss_;
      const polygons = [];
      let offset = 0;
      for (let i = 0, ii = endss.length; i < ii; ++i) {
        const ends = endss[i].slice();
        const end = ends[ends.length - 1];
        if (offset !== 0) {
          for (let j = 0, jj = ends.length; j < jj; ++j) {
            ends[j] -= offset;
          }
        }
        const polygon = new Polygon(flatCoordinates.slice(offset, end), layout, ends);
        polygons.push(polygon);
        offset = end;
      }
      return polygons;
    }

    /**
     * @inheritDoc
     * @api
     */
    getType() {
      return GeometryType.MULTI_POLYGON;
    }

    /**
     * @inheritDoc
     * @api
     */
    intersectsExtent(extent) {
      return intersectsLinearRingMultiArray(
        this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, extent);
    }

    /**
     * Set the coordinates of the multipolygon.
     * @param {!Array<Array<Array<import("../coordinate.js").Coordinate>>>} coordinates Coordinates.
     * @param {GeometryLayout=} opt_layout Layout.
     * @override
     * @api
     */
    setCoordinates(coordinates, opt_layout) {
      this.setLayout(opt_layout, coordinates, 3);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      const endss = deflateMultiCoordinatesArray(
        this.flatCoordinates, 0, coordinates, this.stride, this.endss_);
      if (endss.length === 0) {
        this.flatCoordinates.length = 0;
      } else {
        const lastEnds = endss[endss.length - 1];
        this.flatCoordinates.length = lastEnds.length === 0 ?
          0 : lastEnds[lastEnds.length - 1];
      }
      this.changed();
    }
  }

  /**
   * @module ol/interaction/Draw
   */


  /**
   * @typedef {Object} Options
   * @property {GeometryType} type Geometry type of
   * the geometries being drawn with this instance.
   * @property {number} [clickTolerance=6] The maximum distance in pixels between
   * "down" and "up" for a "up" event to be considered a "click" event and
   * actually add a point/vertex to the geometry being drawn.  The default of `6`
   * was chosen for the draw interaction to behave correctly on mouse as well as
   * on touch devices.
   * @property {import("../Collection.js").default<Feature>} [features]
   * Destination collection for the drawn features.
   * @property {VectorSource} [source] Destination source for
   * the drawn features.
   * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown
   * before the current vertex can be dragged to its exact position.
   * @property {number} [snapTolerance=12] Pixel distance for snapping to the
   * drawing finish.
   * @property {boolean} [stopClick=false] Stop click, singleclick, and
   * doubleclick events from firing during drawing.
   * @property {number} [maxPoints] The number of points that can be drawn before
   * a polygon ring or line string is finished. By default there is no
   * restriction.
   * @property {number} [minPoints] The number of points that must be drawn
   * before a polygon ring or line string can be finished. Default is `3` for
   * polygon rings and `2` for line strings.
   * @property {import("../events/condition.js").Condition} [finishCondition] A function
   * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether the drawing can be finished.
   * @property {import("../style/Style.js").StyleLike} [style]
   * Style for sketch features.
   * @property {GeometryFunction} [geometryFunction]
   * Function that is called when a geometry's coordinates are updated.
   * @property {string} [geometryName] Geometry name to use for features created
   * by the draw interaction.
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled.
   * By default {@link module:ol/events/condition~noModifierKeys}, i.e. a click,
   * adds a vertex or deactivates freehand drawing.
   * @property {boolean} [freehand=false] Operate in freehand mode for lines,
   * polygons, and circles.  This makes the interaction always operate in freehand
   * mode and takes precedence over any `freehandCondition` option.
   * @property {import("../events/condition.js").Condition} [freehandCondition]
   * Condition that activates freehand drawing for lines and polygons. This
   * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and
   * returns a boolean to indicate whether that event should be handled. The
   * default is {@link module:ol/events/condition~shiftKeyOnly}, meaning that the
   * Shift key activates freehand drawing.
   * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch
   * overlay.
   */


  /**
   * Coordinate type when drawing points.
   * @typedef {import("../coordinate.js").Coordinate} PointCoordType
   */


  /**
   * Coordinate type when drawing lines.
   * @typedef {Array<import("../coordinate.js").Coordinate>} LineCoordType
   */


  /**
   * Coordinate type when drawing polygons.
   * @typedef {Array<Array<import("../coordinate.js").Coordinate>>} PolyCoordType
   */


  /**
   * Types used for drawing coordinates.
   * @typedef {PointCoordType|LineCoordType|PolyCoordType} SketchCoordType
   */


  /**
   * Function that takes an array of coordinates and an optional existing geometry as
   * arguments, and returns a geometry. The optional existing geometry is the
   * geometry that is returned when the function is called without a second
   * argument.
   * @typedef {function(!SketchCoordType, import("../geom/SimpleGeometry.js").default=):
   *     import("../geom/SimpleGeometry.js").default} GeometryFunction
   */


  /**
   * Draw mode.  This collapses multi-part geometry types with their single-part
   * cousins.
   * @enum {string}
   */
  const Mode$1 = {
    POINT: 'Point',
    LINE_STRING: 'LineString',
    POLYGON: 'Polygon',
    CIRCLE: 'Circle'
  };


  /**
   * @enum {string}
   */
  const DrawEventType = {
    /**
     * Triggered upon feature draw start
     * @event DrawEvent#drawstart
     * @api
     */
    DRAWSTART: 'drawstart',
    /**
     * Triggered upon feature draw end
     * @event DrawEvent#drawend
     * @api
     */
    DRAWEND: 'drawend'
  };


  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are
   * instances of this type.
   */
  class DrawEvent extends Event {
    /**
     * @param {DrawEventType} type Type.
     * @param {Feature} feature The feature drawn.
     */
    constructor(type, feature) {

      super(type);

      /**
       * The feature being drawn.
       * @type {Feature}
       * @api
       */
      this.feature = feature;

    }

  }


  /**
   * @classdesc
   * Interaction for drawing feature geometries.
   *
   * @fires DrawEvent
   * @api
   */
  class Draw extends PointerInteraction {
    /**
     * @param {Options} options Options.
     */
    constructor(options) {

      const pointerOptions = /** @type {import("./Pointer.js").Options} */ (options);
      if (!pointerOptions.stopDown) {
        pointerOptions.stopDown = FALSE;
      }

      super(pointerOptions);

      /**
       * @type {boolean}
       * @private
       */
      this.shouldHandle_ = false;

      /**
       * @type {import("../pixel.js").Pixel}
       * @private
       */
      this.downPx_ = null;

      /**
       * @type {?}
       * @private
       */
      this.downTimeout_;

      /**
       * @type {number|undefined}
       * @private
       */
      this.lastDragTime_;

      /**
       * @type {boolean}
       * @private
       */
      this.freehand_ = false;

      /**
       * Target source for drawn features.
       * @type {VectorSource}
       * @private
       */
      this.source_ = options.source ? options.source : null;

      /**
       * Target collection for drawn features.
       * @type {import("../Collection.js").default<Feature>}
       * @private
       */
      this.features_ = options.features ? options.features : null;

      /**
       * Pixel distance for snapping.
       * @type {number}
       * @private
       */
      this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;

      /**
       * Geometry type.
       * @type {GeometryType}
       * @private
       */
      this.type_ = /** @type {GeometryType} */ (options.type);

      /**
       * Drawing mode (derived from geometry type.
       * @type {Mode}
       * @private
       */
      this.mode_ = getMode(this.type_);

      /**
       * Stop click, singleclick, and doubleclick events from firing during drawing.
       * Default is `false`.
       * @type {boolean}
       * @private
       */
      this.stopClick_ = !!options.stopClick;

      /**
       * The number of points that must be drawn before a polygon ring or line
       * string can be finished.  The default is 3 for polygon rings and 2 for
       * line strings.
       * @type {number}
       * @private
       */
      this.minPoints_ = options.minPoints ?
        options.minPoints :
        (this.mode_ === Mode$1.POLYGON ? 3 : 2);

      /**
       * The number of points that can be drawn before a polygon ring or line string
       * is finished. The default is no restriction.
       * @type {number}
       * @private
       */
      this.maxPoints_ = options.maxPoints ? options.maxPoints : Infinity;

      /**
       * A function to decide if a potential finish coordinate is permissible
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.finishCondition_ = options.finishCondition ? options.finishCondition : TRUE;

      let geometryFunction = options.geometryFunction;
      if (!geometryFunction) {
        if (this.type_ === GeometryType.CIRCLE) {
          /**
           * @param {!LineCoordType} coordinates The coordinates.
           * @param {import("../geom/SimpleGeometry.js").default=} opt_geometry Optional geometry.
           * @return {import("../geom/SimpleGeometry.js").default} A geometry.
           */
          geometryFunction = function(coordinates, opt_geometry) {
            const circle = opt_geometry ? /** @type {Circle} */ (opt_geometry) :
              new Circle([NaN, NaN]);
            const squaredLength = squaredDistance$1(
              coordinates[0], coordinates[1]);
            circle.setCenterAndRadius(coordinates[0], Math.sqrt(squaredLength));
            return circle;
          };
        } else {
          let Constructor;
          const mode = this.mode_;
          if (mode === Mode$1.POINT) {
            Constructor = Point;
          } else if (mode === Mode$1.LINE_STRING) {
            Constructor = LineString;
          } else if (mode === Mode$1.POLYGON) {
            Constructor = Polygon;
          }
          /**
           * @param {!LineCoordType} coordinates The coordinates.
           * @param {import("../geom/SimpleGeometry.js").default=} opt_geometry Optional geometry.
           * @return {import("../geom/SimpleGeometry.js").default} A geometry.
           */
          geometryFunction = function(coordinates, opt_geometry) {
            let geometry = opt_geometry;
            if (geometry) {
              if (mode === Mode$1.POLYGON) {
                if (coordinates[0].length) {
                  // Add a closing coordinate to match the first
                  geometry.setCoordinates([coordinates[0].concat([coordinates[0][0]])]);
                } else {
                  geometry.setCoordinates([]);
                }
              } else {
                geometry.setCoordinates(coordinates);
              }
            } else {
              geometry = new Constructor(coordinates);
            }
            return geometry;
          };
        }
      }

      /**
       * @type {GeometryFunction}
       * @private
       */
      this.geometryFunction_ = geometryFunction;

      /**
       * @type {number}
       * @private
       */
      this.dragVertexDelay_ = options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;

      /**
       * Finish coordinate for the feature (first point for polygons, last point for
       * linestrings).
       * @type {import("../coordinate.js").Coordinate}
       * @private
       */
      this.finishCoordinate_ = null;

      /**
       * Sketch feature.
       * @type {Feature}
       * @private
       */
      this.sketchFeature_ = null;

      /**
       * Sketch point.
       * @type {Feature<Point>}
       * @private
       */
      this.sketchPoint_ = null;

      /**
       * Sketch coordinates. Used when drawing a line or polygon.
       * @type {SketchCoordType}
       * @private
       */
      this.sketchCoords_ = null;

      /**
       * Sketch line. Used when drawing polygon.
       * @type {Feature<LineString>}
       * @private
       */
      this.sketchLine_ = null;

      /**
       * Sketch line coordinates. Used when drawing a polygon or circle.
       * @type {LineCoordType}
       * @private
       */
      this.sketchLineCoords_ = null;

      /**
       * Squared tolerance for handling up events.  If the squared distance
       * between a down and up event is greater than this tolerance, up events
       * will not be handled.
       * @type {number}
       * @private
       */
      this.squaredClickTolerance_ = options.clickTolerance ?
        options.clickTolerance * options.clickTolerance : 36;

      /**
       * Draw overlay where our sketch features are drawn.
       * @type {VectorLayer}
       * @private
       */
      this.overlay_ = new VectorLayer({
        source: new VectorSource({
          useSpatialIndex: false,
          wrapX: options.wrapX ? options.wrapX : false
        }),
        style: options.style ? options.style :
          getDefaultStyleFunction(),
        updateWhileInteracting: true
      });

      /**
       * Name of the geometry attribute for newly created features.
       * @type {string|undefined}
       * @private
       */
      this.geometryName_ = options.geometryName;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : noModifierKeys;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.freehandCondition_;
      if (options.freehand) {
        this.freehandCondition_ = always;
      } else {
        this.freehandCondition_ = options.freehandCondition ?
          options.freehandCondition : shiftKeyOnly;
      }

      listen(this,
        getChangeEventType(InteractionProperty.ACTIVE),
        this.updateState_, this);

    }

    /**
     * @inheritDoc
     */
    setMap(map) {
      super.setMap(map);
      this.updateState_();
    }

    /**
     * Get the overlay layer that this interaction renders sketch features to.
     * @return {VectorLayer} Overlay layer.
     * @api
     */
    getOverlay() {
      return this.overlay_;
    }

    /**
     * Handles the {@link module:ol/MapBrowserEvent map browser event} and may actually draw or finish the drawing.
     * @override
     * @api
     */
    handleEvent(event) {
      if (event.originalEvent.type === EventType.CONTEXTMENU) {
        // Avoid context menu for long taps when drawing on mobile
        event.preventDefault();
      }
      this.freehand_ = this.mode_ !== Mode$1.POINT && this.freehandCondition_(event);
      let move = event.type === MapBrowserEventType.POINTERMOVE;
      let pass = true;
      if (!this.freehand_ && this.lastDragTime_ && event.type === MapBrowserEventType.POINTERDRAG) {
        const now = Date.now();
        if (now - this.lastDragTime_ >= this.dragVertexDelay_) {
          this.downPx_ = event.pixel;
          this.shouldHandle_ = !this.freehand_;
          move = true;
        } else {
          this.lastDragTime_ = undefined;
        }
        if (this.shouldHandle_ && this.downTimeout_ !== undefined) {
          clearTimeout(this.downTimeout_);
          this.downTimeout_ = undefined;
        }
      }
      if (this.freehand_ &&
          event.type === MapBrowserEventType.POINTERDRAG &&
          this.sketchFeature_ !== null) {
        this.addToDrawing_(event);
        pass = false;
      } else if (this.freehand_ &&
          event.type === MapBrowserEventType.POINTERDOWN) {
        pass = false;
      } else if (move) {
        pass = event.type === MapBrowserEventType.POINTERMOVE;
        if (pass && this.freehand_) {
          pass = this.handlePointerMove_(event);
        } else if (/** @type {MapBrowserPointerEvent} */ (event).pointerEvent.pointerType == POINTER_TYPE ||
            (event.type === MapBrowserEventType.POINTERDRAG && this.downTimeout_ === undefined)) {
          this.handlePointerMove_(event);
        }
      } else if (event.type === MapBrowserEventType.DBLCLICK) {
        pass = false;
      }

      return super.handleEvent(event) && pass;
    }

    /**
     * @inheritDoc
     */
    handleDownEvent(event) {
      this.shouldHandle_ = !this.freehand_;

      if (this.freehand_) {
        this.downPx_ = event.pixel;
        if (!this.finishCoordinate_) {
          this.startDrawing_(event);
        }
        return true;
      } else if (this.condition_(event)) {
        this.lastDragTime_ = Date.now();
        this.downTimeout_ = setTimeout(function() {
          this.handlePointerMove_(new MapBrowserPointerEvent(
            MapBrowserEventType.POINTERMOVE, event.map, event.pointerEvent, false, event.frameState));
        }.bind(this), this.dragVertexDelay_);
        this.downPx_ = event.pixel;
        return true;
      } else {
        this.lastDragTime_ = undefined;
        return false;
      }
    }


    /**
     * @inheritDoc
     */
    handleUpEvent(event) {
      let pass = true;

      if (this.downTimeout_) {
        clearTimeout(this.downTimeout_);
        this.downTimeout_ = undefined;
      }

      this.handlePointerMove_(event);

      const circleMode = this.mode_ === Mode$1.CIRCLE;

      if (this.shouldHandle_) {
        if (!this.finishCoordinate_) {
          this.startDrawing_(event);
          if (this.mode_ === Mode$1.POINT) {
            this.finishDrawing();
          }
        } else if (this.freehand_ || circleMode) {
          this.finishDrawing();
        } else if (this.atFinish_(event)) {
          if (this.finishCondition_(event)) {
            this.finishDrawing();
          }
        } else {
          this.addToDrawing_(event);
        }
        pass = false;
      } else if (this.freehand_) {
        this.finishCoordinate_ = null;
        this.abortDrawing_();
      }
      if (!pass && this.stopClick_) {
        event.stopPropagation();
      }
      return pass;
    }

    /**
     * Handle move events.
     * @param {import("../MapBrowserEvent.js").default} event A move event.
     * @return {boolean} Pass the event to other interactions.
     * @private
     */
    handlePointerMove_(event) {
      if (this.downPx_ &&
          ((!this.freehand_ && this.shouldHandle_) ||
          (this.freehand_ && !this.shouldHandle_))) {
        const downPx = this.downPx_;
        const clickPx = event.pixel;
        const dx = downPx[0] - clickPx[0];
        const dy = downPx[1] - clickPx[1];
        const squaredDistance = dx * dx + dy * dy;
        this.shouldHandle_ = this.freehand_ ?
          squaredDistance > this.squaredClickTolerance_ :
          squaredDistance <= this.squaredClickTolerance_;
        if (!this.shouldHandle_) {
          return true;
        }
      }

      if (this.finishCoordinate_) {
        this.modifyDrawing_(event);
      } else {
        this.createOrUpdateSketchPoint_(event);
      }
      return true;
    }

    /**
     * Determine if an event is within the snapping tolerance of the start coord.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @return {boolean} The event is within the snapping tolerance of the start.
     * @private
     */
    atFinish_(event) {
      let at = false;
      if (this.sketchFeature_) {
        let potentiallyDone = false;
        let potentiallyFinishCoordinates = [this.finishCoordinate_];
        if (this.mode_ === Mode$1.LINE_STRING) {
          potentiallyDone = this.sketchCoords_.length > this.minPoints_;
        } else if (this.mode_ === Mode$1.POLYGON) {
          const sketchCoords = /** @type {PolyCoordType} */ (this.sketchCoords_);
          potentiallyDone = sketchCoords[0].length > this.minPoints_;
          potentiallyFinishCoordinates = [sketchCoords[0][0], sketchCoords[0][sketchCoords[0].length - 2]];
        }
        if (potentiallyDone) {
          const map = event.map;
          for (let i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {
            const finishCoordinate = potentiallyFinishCoordinates[i];
            const finishPixel = map.getPixelFromCoordinate(finishCoordinate);
            const pixel = event.pixel;
            const dx = pixel[0] - finishPixel[0];
            const dy = pixel[1] - finishPixel[1];
            const snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;
            at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;
            if (at) {
              this.finishCoordinate_ = finishCoordinate;
              break;
            }
          }
        }
      }
      return at;
    }

    /**
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @private
     */
    createOrUpdateSketchPoint_(event) {
      const coordinates = event.coordinate.slice();
      if (!this.sketchPoint_) {
        this.sketchPoint_ = new Feature(new Point(coordinates));
        this.updateSketchFeatures_();
      } else {
        const sketchPointGeom = this.sketchPoint_.getGeometry();
        sketchPointGeom.setCoordinates(coordinates);
      }
    }

    /**
     * Start the drawing.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @private
     */
    startDrawing_(event) {
      const start = event.coordinate;
      this.finishCoordinate_ = start;
      if (this.mode_ === Mode$1.POINT) {
        this.sketchCoords_ = start.slice();
      } else if (this.mode_ === Mode$1.POLYGON) {
        this.sketchCoords_ = [[start.slice(), start.slice()]];
        this.sketchLineCoords_ = this.sketchCoords_[0];
      } else {
        this.sketchCoords_ = [start.slice(), start.slice()];
      }
      if (this.sketchLineCoords_) {
        this.sketchLine_ = new Feature(
          new LineString(this.sketchLineCoords_));
      }
      const geometry = this.geometryFunction_(this.sketchCoords_);
      this.sketchFeature_ = new Feature();
      if (this.geometryName_) {
        this.sketchFeature_.setGeometryName(this.geometryName_);
      }
      this.sketchFeature_.setGeometry(geometry);
      this.updateSketchFeatures_();
      this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));
    }

    /**
     * Modify the drawing.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @private
     */
    modifyDrawing_(event) {
      let coordinate = event.coordinate;
      const geometry = this.sketchFeature_.getGeometry();
      let coordinates, last;
      if (this.mode_ === Mode$1.POINT) {
        last = this.sketchCoords_;
      } else if (this.mode_ === Mode$1.POLYGON) {
        coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];
        last = coordinates[coordinates.length - 1];
        if (this.atFinish_(event)) {
          // snap to finish
          coordinate = this.finishCoordinate_.slice();
        }
      } else {
        coordinates = this.sketchCoords_;
        last = coordinates[coordinates.length - 1];
      }
      last[0] = coordinate[0];
      last[1] = coordinate[1];
      this.geometryFunction_(/** @type {!LineCoordType} */ (this.sketchCoords_), geometry);
      if (this.sketchPoint_) {
        const sketchPointGeom = this.sketchPoint_.getGeometry();
        sketchPointGeom.setCoordinates(coordinate);
      }
      /** @type {LineString} */
      let sketchLineGeom;
      if (geometry.getType() == GeometryType.POLYGON &&
          this.mode_ !== Mode$1.POLYGON) {
        if (!this.sketchLine_) {
          this.sketchLine_ = new Feature();
        }
        const ring = geometry.getLinearRing(0);
        sketchLineGeom = this.sketchLine_.getGeometry();
        if (!sketchLineGeom) {
          sketchLineGeom = new LineString(ring.getFlatCoordinates(), ring.getLayout());
          this.sketchLine_.setGeometry(sketchLineGeom);
        } else {
          sketchLineGeom.setFlatCoordinates(
            ring.getLayout(), ring.getFlatCoordinates());
          sketchLineGeom.changed();
        }
      } else if (this.sketchLineCoords_) {
        sketchLineGeom = this.sketchLine_.getGeometry();
        sketchLineGeom.setCoordinates(this.sketchLineCoords_);
      }
      this.updateSketchFeatures_();
    }

    /**
     * Add a new coordinate to the drawing.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @private
     */
    addToDrawing_(event) {
      const coordinate = event.coordinate;
      const geometry = this.sketchFeature_.getGeometry();
      let done;
      let coordinates;
      if (this.mode_ === Mode$1.LINE_STRING) {
        this.finishCoordinate_ = coordinate.slice();
        coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);
        if (coordinates.length >= this.maxPoints_) {
          if (this.freehand_) {
            coordinates.pop();
          } else {
            done = true;
          }
        }
        coordinates.push(coordinate.slice());
        this.geometryFunction_(coordinates, geometry);
      } else if (this.mode_ === Mode$1.POLYGON) {
        coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];
        if (coordinates.length >= this.maxPoints_) {
          if (this.freehand_) {
            coordinates.pop();
          } else {
            done = true;
          }
        }
        coordinates.push(coordinate.slice());
        if (done) {
          this.finishCoordinate_ = coordinates[0];
        }
        this.geometryFunction_(this.sketchCoords_, geometry);
      }
      this.updateSketchFeatures_();
      if (done) {
        this.finishDrawing();
      }
    }

    /**
     * Remove last point of the feature currently being drawn.
     * @api
     */
    removeLastPoint() {
      if (!this.sketchFeature_) {
        return;
      }
      const geometry = this.sketchFeature_.getGeometry();
      let coordinates;
      /** @type {LineString} */
      let sketchLineGeom;
      if (this.mode_ === Mode$1.LINE_STRING) {
        coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);
        coordinates.splice(-2, 1);
        this.geometryFunction_(coordinates, geometry);
        if (coordinates.length >= 2) {
          this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();
        }
      } else if (this.mode_ === Mode$1.POLYGON) {
        coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];
        coordinates.splice(-2, 1);
        sketchLineGeom = this.sketchLine_.getGeometry();
        sketchLineGeom.setCoordinates(coordinates);
        this.geometryFunction_(this.sketchCoords_, geometry);
      }

      if (coordinates.length === 0) {
        this.finishCoordinate_ = null;
      }

      this.updateSketchFeatures_();
    }

    /**
     * Stop drawing and add the sketch feature to the target layer.
     * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is
     * dispatched before inserting the feature.
     * @api
     */
    finishDrawing() {
      const sketchFeature = this.abortDrawing_();
      if (!sketchFeature) {
        return;
      }
      let coordinates = this.sketchCoords_;
      const geometry = sketchFeature.getGeometry();
      if (this.mode_ === Mode$1.LINE_STRING) {
        // remove the redundant last point
        coordinates.pop();
        this.geometryFunction_(coordinates, geometry);
      } else if (this.mode_ === Mode$1.POLYGON) {
        // remove the redundant last point in ring
        /** @type {PolyCoordType} */ (coordinates)[0].pop();
        this.geometryFunction_(coordinates, geometry);
        coordinates = geometry.getCoordinates();
      }

      // cast multi-part geometries
      if (this.type_ === GeometryType.MULTI_POINT) {
        sketchFeature.setGeometry(new MultiPoint([/** @type {PointCoordType} */(coordinates)]));
      } else if (this.type_ === GeometryType.MULTI_LINE_STRING) {
        sketchFeature.setGeometry(new MultiLineString([/** @type {LineCoordType} */(coordinates)]));
      } else if (this.type_ === GeometryType.MULTI_POLYGON) {
        sketchFeature.setGeometry(new MultiPolygon([/** @type {PolyCoordType} */(coordinates)]));
      }

      // First dispatch event to allow full set up of feature
      this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature));

      // Then insert feature
      if (this.features_) {
        this.features_.push(sketchFeature);
      }
      if (this.source_) {
        this.source_.addFeature(sketchFeature);
      }
    }

    /**
     * Stop drawing without adding the sketch feature to the target layer.
     * @return {Feature} The sketch feature (or null if none).
     * @private
     */
    abortDrawing_() {
      this.finishCoordinate_ = null;
      const sketchFeature = this.sketchFeature_;
      if (sketchFeature) {
        this.sketchFeature_ = null;
        this.sketchPoint_ = null;
        this.sketchLine_ = null;
        this.overlay_.getSource().clear(true);
      }
      return sketchFeature;
    }

    /**
     * Extend an existing geometry by adding additional points. This only works
     * on features with `LineString` geometries, where the interaction will
     * extend lines by adding points to the end of the coordinates array.
     * @param {!Feature<LineString>} feature Feature to be extended.
     * @api
     */
    extend(feature) {
      const geometry = feature.getGeometry();
      const lineString = geometry;
      this.sketchFeature_ = feature;
      this.sketchCoords_ = lineString.getCoordinates();
      const last = this.sketchCoords_[this.sketchCoords_.length - 1];
      this.finishCoordinate_ = last.slice();
      this.sketchCoords_.push(last.slice());
      this.updateSketchFeatures_();
      this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));
    }

    /**
     * Redraw the sketch features.
     * @private
     */
    updateSketchFeatures_() {
      const sketchFeatures = [];
      if (this.sketchFeature_) {
        sketchFeatures.push(this.sketchFeature_);
      }
      if (this.sketchLine_) {
        sketchFeatures.push(this.sketchLine_);
      }
      if (this.sketchPoint_) {
        sketchFeatures.push(this.sketchPoint_);
      }
      const overlaySource = this.overlay_.getSource();
      overlaySource.clear(true);
      overlaySource.addFeatures(sketchFeatures);
    }

    /**
     * @private
     */
    updateState_() {
      const map = this.getMap();
      const active = this.getActive();
      if (!map || !active) {
        this.abortDrawing_();
      }
      this.overlay_.setMap(active ? map : null);
    }
  }


  /**
   * @return {import("../style/Style.js").StyleFunction} Styles.
   */
  function getDefaultStyleFunction() {
    const styles = createEditingStyle();
    return function(feature, resolution) {
      return styles[feature.getGeometry().getType()];
    };
  }


  /**
   * Get the drawing mode.  The mode for mult-part geometries is the same as for
   * their single-part cousins.
   * @param {GeometryType} type Geometry type.
   * @return {Mode} Drawing mode.
   */
  function getMode(type) {
    let mode;
    if (type === GeometryType.POINT ||
        type === GeometryType.MULTI_POINT) {
      mode = Mode$1.POINT;
    } else if (type === GeometryType.LINE_STRING ||
        type === GeometryType.MULTI_LINE_STRING) {
      mode = Mode$1.LINE_STRING;
    } else if (type === GeometryType.POLYGON ||
        type === GeometryType.MULTI_POLYGON) {
      mode = Mode$1.POLYGON;
    } else if (type === GeometryType.CIRCLE) {
      mode = Mode$1.CIRCLE;
    }
    return (
      /** @type {!Mode} */ (mode)
    );
  }

  /**
   * @module ol/interaction/Extent
   */


  /**
   * @typedef {Object} Options
   * @property {import("../extent.js").Extent} [extent] Initial extent. Defaults to no
   * initial extent.
   * @property {import("../style/Style.js").StyleLike} [boxStyle]
   * Style for the drawn extent box. Defaults to
   * {@link module:ol/style/Style~createEditing()['Polygon']}
   * @property {number} [pixelTolerance=10] Pixel tolerance for considering the
   * pointer close enough to a segment or vertex for editing.
   * @property {import("../style/Style.js").StyleLike} [pointerStyle]
   * Style for the cursor used to draw the extent. Defaults to
   * {@link module:ol/style/Style~createEditing()['Point']}
   * @property {boolean} [wrapX=false] Wrap the drawn extent across multiple maps
   * in the X direction? Only affects visuals, not functionality.
   */


  /**
   * @enum {string}
   */
  const ExtentEventType = {
    /**
     * Triggered after the extent is changed
     * @event ExtentEvent#extentchanged
     * @api
     */
    EXTENTCHANGED: 'extentchanged'
  };


  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/Extent~Extent} instances are
   * instances of this type.
   */
  class ExtentEvent extends Event {

    /**
     * @param {import("../extent.js").Extent} extent the new extent
     */
    constructor(extent) {
      super(ExtentEventType.EXTENTCHANGED);

      /**
       * The current extent.
       * @type {import("../extent.js").Extent}
       * @api
       */
      this.extent = extent;
    }

  }


  /**
   * @classdesc
   * Allows the user to draw a vector box by clicking and dragging on the map.
   * Once drawn, the vector box can be modified by dragging its vertices or edges.
   * This interaction is only supported for mouse devices.
   *
   * @fires ExtentEvent
   * @api
   */
  class Extent extends PointerInteraction {
    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {

      const options = opt_options || {};

      super(/** @type {import("./Pointer.js").Options} */ (options));

      /**
       * Extent of the drawn box
       * @type {import("../extent.js").Extent}
       * @private
       */
      this.extent_ = null;

      /**
       * Handler for pointer move events
       * @type {function (import("../coordinate.js").Coordinate): import("../extent.js").Extent|null}
       * @private
       */
      this.pointerHandler_ = null;

      /**
       * Pixel threshold to snap to extent
       * @type {number}
       * @private
       */
      this.pixelTolerance_ = options.pixelTolerance !== undefined ?
        options.pixelTolerance : 10;

      /**
       * Is the pointer snapped to an extent vertex
       * @type {boolean}
       * @private
       */
      this.snappedToVertex_ = false;

      /**
       * Feature for displaying the visible extent
       * @type {Feature}
       * @private
       */
      this.extentFeature_ = null;

      /**
       * Feature for displaying the visible pointer
       * @type {Feature<Point>}
       * @private
       */
      this.vertexFeature_ = null;

      if (!opt_options) {
        opt_options = {};
      }

      /**
       * Layer for the extentFeature
       * @type {VectorLayer}
       * @private
       */
      this.extentOverlay_ = new VectorLayer({
        source: new VectorSource({
          useSpatialIndex: false,
          wrapX: !!opt_options.wrapX
        }),
        style: opt_options.boxStyle ? opt_options.boxStyle : getDefaultExtentStyleFunction(),
        updateWhileAnimating: true,
        updateWhileInteracting: true
      });

      /**
       * Layer for the vertexFeature
       * @type {VectorLayer}
       * @private
       */
      this.vertexOverlay_ = new VectorLayer({
        source: new VectorSource({
          useSpatialIndex: false,
          wrapX: !!opt_options.wrapX
        }),
        style: opt_options.pointerStyle ? opt_options.pointerStyle : getDefaultPointerStyleFunction(),
        updateWhileAnimating: true,
        updateWhileInteracting: true
      });

      if (opt_options.extent) {
        this.setExtent(opt_options.extent);
      }
    }

    /**
     * @param {import("../pixel.js").Pixel} pixel cursor location
     * @param {import("../PluggableMap.js").default} map map
     * @returns {import("../coordinate.js").Coordinate|null} snapped vertex on extent
     * @private
     */
    snapToVertex_(pixel, map) {
      const pixelCoordinate = map.getCoordinateFromPixel(pixel);
      const sortByDistance = function(a, b) {
        return squaredDistanceToSegment(pixelCoordinate, a) -
            squaredDistanceToSegment(pixelCoordinate, b);
      };
      const extent = this.getExtent();
      if (extent) {
        //convert extents to line segments and find the segment closest to pixelCoordinate
        const segments = getSegments(extent);
        segments.sort(sortByDistance);
        const closestSegment = segments[0];

        let vertex = (closestOnSegment(pixelCoordinate,
          closestSegment));
        const vertexPixel = map.getPixelFromCoordinate(vertex);

        //if the distance is within tolerance, snap to the segment
        if (distance(pixel, vertexPixel) <= this.pixelTolerance_) {
          //test if we should further snap to a vertex
          const pixel1 = map.getPixelFromCoordinate(closestSegment[0]);
          const pixel2 = map.getPixelFromCoordinate(closestSegment[1]);
          const squaredDist1 = squaredDistance$1(vertexPixel, pixel1);
          const squaredDist2 = squaredDistance$1(vertexPixel, pixel2);
          const dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));
          this.snappedToVertex_ = dist <= this.pixelTolerance_;
          if (this.snappedToVertex_) {
            vertex = squaredDist1 > squaredDist2 ?
              closestSegment[1] : closestSegment[0];
          }
          return vertex;
        }
      }
      return null;
    }

    /**
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent pointer move event
     * @private
     */
    handlePointerMove_(mapBrowserEvent) {
      const pixel = mapBrowserEvent.pixel;
      const map = mapBrowserEvent.map;

      let vertex = this.snapToVertex_(pixel, map);
      if (!vertex) {
        vertex = map.getCoordinateFromPixel(pixel);
      }
      this.createOrUpdatePointerFeature_(vertex);
    }

    /**
     * @param {import("../extent.js").Extent} extent extent
     * @returns {Feature} extent as featrue
     * @private
     */
    createOrUpdateExtentFeature_(extent) {
      let extentFeature = this.extentFeature_;

      if (!extentFeature) {
        if (!extent) {
          extentFeature = new Feature({});
        } else {
          extentFeature = new Feature(fromExtent(extent));
        }
        this.extentFeature_ = extentFeature;
        this.extentOverlay_.getSource().addFeature(extentFeature);
      } else {
        if (!extent) {
          extentFeature.setGeometry(undefined);
        } else {
          extentFeature.setGeometry(fromExtent(extent));
        }
      }
      return extentFeature;
    }

    /**
     * @param {import("../coordinate.js").Coordinate} vertex location of feature
     * @returns {Feature} vertex as feature
     * @private
     */
    createOrUpdatePointerFeature_(vertex) {
      let vertexFeature = this.vertexFeature_;
      if (!vertexFeature) {
        vertexFeature = new Feature(new Point(vertex));
        this.vertexFeature_ = vertexFeature;
        this.vertexOverlay_.getSource().addFeature(vertexFeature);
      } else {
        const geometry = vertexFeature.getGeometry();
        geometry.setCoordinates(vertex);
      }
      return vertexFeature;
    }

    /**
     * @inheritDoc
     */
    handleEvent(mapBrowserEvent) {
      if (!(/** @type {import("../MapBrowserPointerEvent.js").default} */ (mapBrowserEvent).pointerEvent)) {
        return true;
      }
      //display pointer (if not dragging)
      if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE && !this.handlingDownUpSequence) {
        this.handlePointerMove_(mapBrowserEvent);
      }
      //call pointer to determine up/down/drag
      super.handleEvent(mapBrowserEvent);
      //return false to stop propagation
      return false;
    }

    /**
     * @inheritDoc
     */
    handleDownEvent(mapBrowserEvent) {
      const pixel = mapBrowserEvent.pixel;
      const map = mapBrowserEvent.map;

      const extent = this.getExtent();
      let vertex = this.snapToVertex_(pixel, map);

      //find the extent corner opposite the passed corner
      const getOpposingPoint = function(point) {
        let x_ = null;
        let y_ = null;
        if (point[0] == extent[0]) {
          x_ = extent[2];
        } else if (point[0] == extent[2]) {
          x_ = extent[0];
        }
        if (point[1] == extent[1]) {
          y_ = extent[3];
        } else if (point[1] == extent[3]) {
          y_ = extent[1];
        }
        if (x_ !== null && y_ !== null) {
          return [x_, y_];
        }
        return null;
      };
      if (vertex && extent) {
        const x = (vertex[0] == extent[0] || vertex[0] == extent[2]) ? vertex[0] : null;
        const y = (vertex[1] == extent[1] || vertex[1] == extent[3]) ? vertex[1] : null;

        //snap to point
        if (x !== null && y !== null) {
          this.pointerHandler_ = getPointHandler(getOpposingPoint(vertex));
        //snap to edge
        } else if (x !== null) {
          this.pointerHandler_ = getEdgeHandler(
            getOpposingPoint([x, extent[1]]),
            getOpposingPoint([x, extent[3]])
          );
        } else if (y !== null) {
          this.pointerHandler_ = getEdgeHandler(
            getOpposingPoint([extent[0], y]),
            getOpposingPoint([extent[2], y])
          );
        }
      //no snap - new bbox
      } else {
        vertex = map.getCoordinateFromPixel(pixel);
        this.setExtent([vertex[0], vertex[1], vertex[0], vertex[1]]);
        this.pointerHandler_ = getPointHandler(vertex);
      }
      return true; //event handled; start downup sequence
    }

    /**
     * @inheritDoc
     */
    handleDragEvent(mapBrowserEvent) {
      if (this.pointerHandler_) {
        const pixelCoordinate = mapBrowserEvent.coordinate;
        this.setExtent(this.pointerHandler_(pixelCoordinate));
        this.createOrUpdatePointerFeature_(pixelCoordinate);
      }
      return true;
    }

    /**
     * @inheritDoc
     */
    handleUpEvent(mapBrowserEvent) {
      this.pointerHandler_ = null;
      //If bbox is zero area, set to null;
      const extent = this.getExtent();
      if (!extent || getArea(extent) === 0) {
        this.setExtent(null);
      }
      return false; //Stop handling downup sequence
    }

    /**
     * @inheritDoc
     */
    setMap(map) {
      this.extentOverlay_.setMap(map);
      this.vertexOverlay_.setMap(map);
      super.setMap(map);
    }

    /**
     * Returns the current drawn extent in the view projection
     *
     * @return {import("../extent.js").Extent} Drawn extent in the view projection.
     * @api
     */
    getExtent() {
      return this.extent_;
    }

    /**
     * Manually sets the drawn extent, using the view projection.
     *
     * @param {import("../extent.js").Extent} extent Extent
     * @api
     */
    setExtent(extent) {
      //Null extent means no bbox
      this.extent_ = extent ? extent : null;
      this.createOrUpdateExtentFeature_(extent);
      this.dispatchEvent(new ExtentEvent(this.extent_));
    }
  }

  /**
   * Returns the default style for the drawn bbox
   *
   * @return {import("../style/Style.js").StyleFunction} Default Extent style
   */
  function getDefaultExtentStyleFunction() {
    const style = createEditingStyle();
    return function(feature, resolution) {
      return style[GeometryType.POLYGON];
    };
  }

  /**
   * Returns the default style for the pointer
   *
   * @return {import("../style/Style.js").StyleFunction} Default pointer style
   */
  function getDefaultPointerStyleFunction() {
    const style = createEditingStyle();
    return function(feature, resolution) {
      return style[GeometryType.POINT];
    };
  }

  /**
   * @param {import("../coordinate.js").Coordinate} fixedPoint corner that will be unchanged in the new extent
   * @returns {function (import("../coordinate.js").Coordinate): import("../extent.js").Extent} event handler
   */
  function getPointHandler(fixedPoint) {
    return function(point) {
      return boundingExtent([fixedPoint, point]);
    };
  }

  /**
   * @param {import("../coordinate.js").Coordinate} fixedP1 first corner that will be unchanged in the new extent
   * @param {import("../coordinate.js").Coordinate} fixedP2 second corner that will be unchanged in the new extent
   * @returns {function (import("../coordinate.js").Coordinate): import("../extent.js").Extent|null} event handler
   */
  function getEdgeHandler(fixedP1, fixedP2) {
    if (fixedP1[0] == fixedP2[0]) {
      return function(point) {
        return boundingExtent([fixedP1, [point[0], fixedP2[1]]]);
      };
    } else if (fixedP1[1] == fixedP2[1]) {
      return function(point) {
        return boundingExtent([fixedP1, [fixedP2[0], point[1]]]);
      };
    } else {
      return null;
    }
  }

  /**
   * @param {import("../extent.js").Extent} extent extent
   * @returns {Array<Array<import("../coordinate.js").Coordinate>>} extent line segments
   */
  function getSegments(extent) {
    return [
      [[extent[0], extent[1]], [extent[0], extent[3]]],
      [[extent[0], extent[3]], [extent[2], extent[3]]],
      [[extent[2], extent[3]], [extent[2], extent[1]]],
      [[extent[2], extent[1]], [extent[0], extent[1]]]
    ];
  }

  /**
   * @module ol/interaction/Modify
   */


  /**
   * The segment index assigned to a circle's center when
   * breaking up a circle into ModifySegmentDataType segments.
   * @type {number}
   */
  const CIRCLE_CENTER_INDEX = 0;

  /**
   * The segment index assigned to a circle's circumference when
   * breaking up a circle into ModifySegmentDataType segments.
   * @type {number}
   */
  const CIRCLE_CIRCUMFERENCE_INDEX = 1;


  /**
   * @enum {string}
   */
  const ModifyEventType = {
    /**
     * Triggered upon feature modification start
     * @event ModifyEvent#modifystart
     * @api
     */
    MODIFYSTART: 'modifystart',
    /**
     * Triggered upon feature modification end
     * @event ModifyEvent#modifyend
     * @api
     */
    MODIFYEND: 'modifyend'
  };


  /**
   * @typedef {Object} SegmentData
   * @property {Array<number>} [depth]
   * @property {Feature} feature
   * @property {import("../geom/SimpleGeometry.js").default} geometry
   * @property {number} [index]
   * @property {Array<import("../extent.js").Extent>} segment
   * @property {Array<SegmentData>} [featureSegments]
   */


  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event will be considered to add or move a
   * vertex to the sketch. Default is
   * {@link module:ol/events/condition~primaryAction}.
   * @property {import("../events/condition.js").Condition} [deleteCondition] A function
   * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. By default,
   * {@link module:ol/events/condition~singleClick} with
   * {@link module:ol/events/condition~altKeyOnly} results in a vertex deletion.
   * @property {import("../events/condition.js").Condition} [insertVertexCondition] A
   * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and
   * returns a boolean to indicate whether a new vertex should be added to the sketch
   * features. Default is {@link module:ol/events/condition~always}.
   * @property {number} [pixelTolerance=10] Pixel tolerance for considering the
   * pointer close enough to a segment or vertex for editing.
   * @property {import("../style/Style.js").StyleLike} [style]
   * Style used for the features being modified. By default the default edit
   * style is used (see {@link module:ol/style}).
   * @property {VectorSource} [source] The vector source with
   * features to modify.  If a vector source is not provided, a feature collection
   * must be provided with the features option.
   * @property {Collection<Feature>} [features]
   * The features the interaction works on.  If a feature collection is not
   * provided, a vector source must be provided with the source option.
   * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch
   * overlay.
   */


  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are
   * instances of this type.
   */
  class ModifyEvent extends Event {
    /**
     * @param {ModifyEventType} type Type.
     * @param {Collection<Feature>} features
     * The features modified.
     * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserPointerEvent
     * Associated {@link module:ol/MapBrowserPointerEvent}.
     */
    constructor(type, features, mapBrowserPointerEvent) {
      super(type);

      /**
       * The features being modified.
       * @type {Collection<Feature>}
       * @api
       */
      this.features = features;

      /**
       * Associated {@link module:ol/MapBrowserEvent}.
       * @type {import("../MapBrowserEvent.js").default}
       * @api
       */
      this.mapBrowserEvent = mapBrowserPointerEvent;

    }

  }


  /**
   * @classdesc
   * Interaction for modifying feature geometries.  To modify features that have
   * been added to an existing source, construct the modify interaction with the
   * `source` option.  If you want to modify features in a collection (for example,
   * the collection used by a select interaction), construct the interaction with
   * the `features` option.  The interaction must be constructed with either a
   * `source` or `features` option.
   *
   * By default, the interaction will allow deletion of vertices when the `alt`
   * key is pressed.  To configure the interaction with a different condition
   * for deletion, use the `deleteCondition` option.
   * @fires ModifyEvent
   * @api
   */
  class Modify extends PointerInteraction {
    /**
     * @param {Options} options Options.
     */
    constructor(options) {

      super(/** @type {import("./Pointer.js").Options} */ (options));

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : primaryAction;

      /**
       * @private
       * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Browser event.
       * @return {boolean} Combined condition result.
       */
      this.defaultDeleteCondition_ = function(mapBrowserEvent) {
        return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);
      };

      /**
       * @type {import("../events/condition.js").Condition}
       * @private
       */
      this.deleteCondition_ = options.deleteCondition ?
        options.deleteCondition : this.defaultDeleteCondition_;

      /**
       * @type {import("../events/condition.js").Condition}
       * @private
       */
      this.insertVertexCondition_ = options.insertVertexCondition ?
        options.insertVertexCondition : always;

      /**
       * Editing vertex.
       * @type {Feature}
       * @private
       */
      this.vertexFeature_ = null;

      /**
       * Segments intersecting {@link this.vertexFeature_} by segment uid.
       * @type {Object<string, boolean>}
       * @private
       */
      this.vertexSegments_ = null;

      /**
       * @type {import("../pixel.js").Pixel}
       * @private
       */
      this.lastPixel_ = [0, 0];

      /**
       * Tracks if the next `singleclick` event should be ignored to prevent
       * accidental deletion right after vertex creation.
       * @type {boolean}
       * @private
       */
      this.ignoreNextSingleClick_ = false;

      /**
       * @type {boolean}
       * @private
       */
      this.modified_ = false;

      /**
       * Segment RTree for each layer
       * @type {RBush<SegmentData>}
       * @private
       */
      this.rBush_ = new RBush();

      /**
       * @type {number}
       * @private
       */
      this.pixelTolerance_ = options.pixelTolerance !== undefined ?
        options.pixelTolerance : 10;

      /**
       * @type {boolean}
       * @private
       */
      this.snappedToVertex_ = false;

      /**
       * Indicate whether the interaction is currently changing a feature's
       * coordinates.
       * @type {boolean}
       * @private
       */
      this.changingFeature_ = false;

      /**
       * @type {Array}
       * @private
       */
      this.dragSegments_ = [];

      /**
       * Draw overlay where sketch features are drawn.
       * @type {VectorLayer}
       * @private
       */
      this.overlay_ = new VectorLayer({
        source: new VectorSource({
          useSpatialIndex: false,
          wrapX: !!options.wrapX
        }),
        style: options.style ? options.style :
          getDefaultStyleFunction$1(),
        updateWhileAnimating: true,
        updateWhileInteracting: true
      });

      /**
       * @const
       * @private
       * @type {!Object<string, function(Feature, import("../geom/Geometry.js").default): void>}
       */
      this.SEGMENT_WRITERS_ = {
        'Point': this.writePointGeometry_,
        'LineString': this.writeLineStringGeometry_,
        'LinearRing': this.writeLineStringGeometry_,
        'Polygon': this.writePolygonGeometry_,
        'MultiPoint': this.writeMultiPointGeometry_,
        'MultiLineString': this.writeMultiLineStringGeometry_,
        'MultiPolygon': this.writeMultiPolygonGeometry_,
        'Circle': this.writeCircleGeometry_,
        'GeometryCollection': this.writeGeometryCollectionGeometry_
      };


      /**
       * @type {VectorSource}
       * @private
       */
      this.source_ = null;

      let features;
      if (options.source) {
        this.source_ = options.source;
        features = new Collection(this.source_.getFeatures());
        listen(this.source_, VectorEventType.ADDFEATURE,
          this.handleSourceAdd_, this);
        listen(this.source_, VectorEventType.REMOVEFEATURE,
          this.handleSourceRemove_, this);
      } else {
        features = options.features;
      }
      if (!features) {
        throw new Error('The modify interaction requires features or a source');
      }

      /**
       * @type {Collection<Feature>}
       * @private
       */
      this.features_ = features;

      this.features_.forEach(this.addFeature_.bind(this));
      listen(this.features_, CollectionEventType.ADD,
        this.handleFeatureAdd_, this);
      listen(this.features_, CollectionEventType.REMOVE,
        this.handleFeatureRemove_, this);

      /**
       * @type {import("../MapBrowserPointerEvent.js").default}
       * @private
       */
      this.lastPointerEvent_ = null;

    }

    /**
     * @param {Feature} feature Feature.
     * @private
     */
    addFeature_(feature) {
      const geometry = feature.getGeometry();
      if (geometry && geometry.getType() in this.SEGMENT_WRITERS_) {
        this.SEGMENT_WRITERS_[geometry.getType()].call(this, feature, geometry);
      }
      const map = this.getMap();
      if (map && map.isRendered() && this.getActive()) {
        this.handlePointerAtPixel_(this.lastPixel_, map);
      }
      listen(feature, EventType.CHANGE,
        this.handleFeatureChange_, this);
    }

    /**
     * @param {import("../MapBrowserPointerEvent.js").default} evt Map browser event
     * @private
     */
    willModifyFeatures_(evt) {
      if (!this.modified_) {
        this.modified_ = true;
        this.dispatchEvent(new ModifyEvent(
          ModifyEventType.MODIFYSTART, this.features_, evt));
      }
    }

    /**
     * @param {Feature} feature Feature.
     * @private
     */
    removeFeature_(feature) {
      this.removeFeatureSegmentData_(feature);
      // Remove the vertex feature if the collection of canditate features
      // is empty.
      if (this.vertexFeature_ && this.features_.getLength() === 0) {
        this.overlay_.getSource().removeFeature(this.vertexFeature_);
        this.vertexFeature_ = null;
      }
      unlisten(feature, EventType.CHANGE,
        this.handleFeatureChange_, this);
    }

    /**
     * @param {Feature} feature Feature.
     * @private
     */
    removeFeatureSegmentData_(feature) {
      const rBush = this.rBush_;
      const /** @type {Array<SegmentData>} */ nodesToRemove = [];
      rBush.forEach(
        /**
         * @param {SegmentData} node RTree node.
         */
        function(node) {
          if (feature === node.feature) {
            nodesToRemove.push(node);
          }
        });
      for (let i = nodesToRemove.length - 1; i >= 0; --i) {
        const nodeToRemove = nodesToRemove[i];
        for (let j = this.dragSegments_.length - 1; j >= 0; --j) {
          if (this.dragSegments_[j][0] === nodeToRemove) {
            this.dragSegments_.splice(j, 1);
          }
        }
        rBush.remove(nodeToRemove);
      }
    }

    /**
     * @inheritDoc
     */
    setActive(active) {
      if (this.vertexFeature_ && !active) {
        this.overlay_.getSource().removeFeature(this.vertexFeature_);
        this.vertexFeature_ = null;
      }
      super.setActive(active);
    }

    /**
     * @inheritDoc
     */
    setMap(map) {
      this.overlay_.setMap(map);
      super.setMap(map);
    }

    /**
     * Get the overlay layer that this interaction renders sketch features to.
     * @return {VectorLayer} Overlay layer.
     * @api
     */
    getOverlay() {
      return this.overlay_;
    }

    /**
     * @param {import("../source/Vector.js").VectorSourceEvent} event Event.
     * @private
     */
    handleSourceAdd_(event) {
      if (event.feature) {
        this.features_.push(event.feature);
      }
    }

    /**
     * @param {import("../source/Vector.js").VectorSourceEvent} event Event.
     * @private
     */
    handleSourceRemove_(event) {
      if (event.feature) {
        this.features_.remove(event.feature);
      }
    }

    /**
     * @param {import("../Collection.js").CollectionEvent} evt Event.
     * @private
     */
    handleFeatureAdd_(evt) {
      this.addFeature_(/** @type {Feature} */ (evt.element));
    }

    /**
     * @param {import("../events/Event.js").default} evt Event.
     * @private
     */
    handleFeatureChange_(evt) {
      if (!this.changingFeature_) {
        const feature = /** @type {Feature} */ (evt.target);
        this.removeFeature_(feature);
        this.addFeature_(feature);
      }
    }

    /**
     * @param {import("../Collection.js").CollectionEvent} evt Event.
     * @private
     */
    handleFeatureRemove_(evt) {
      const feature = /** @type {Feature} */ (evt.element);
      this.removeFeature_(feature);
    }

    /**
     * @param {Feature} feature Feature
     * @param {Point} geometry Geometry.
     * @private
     */
    writePointGeometry_(feature, geometry) {
      const coordinates = geometry.getCoordinates();
      const segmentData = /** @type {SegmentData} */ ({
        feature: feature,
        geometry: geometry,
        segment: [coordinates, coordinates]
      });
      this.rBush_.insert(geometry.getExtent(), segmentData);
    }

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/MultiPoint.js").default} geometry Geometry.
     * @private
     */
    writeMultiPointGeometry_(feature, geometry) {
      const points = geometry.getCoordinates();
      for (let i = 0, ii = points.length; i < ii; ++i) {
        const coordinates = points[i];
        const segmentData = /** @type {SegmentData} */ ({
          feature: feature,
          geometry: geometry,
          depth: [i],
          index: i,
          segment: [coordinates, coordinates]
        });
        this.rBush_.insert(geometry.getExtent(), segmentData);
      }
    }

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/LineString.js").default} geometry Geometry.
     * @private
     */
    writeLineStringGeometry_(feature, geometry) {
      const coordinates = geometry.getCoordinates();
      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
        const segment = coordinates.slice(i, i + 2);
        const segmentData = /** @type {SegmentData} */ ({
          feature: feature,
          geometry: geometry,
          index: i,
          segment: segment
        });
        this.rBush_.insert(boundingExtent(segment), segmentData);
      }
    }

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/MultiLineString.js").default} geometry Geometry.
     * @private
     */
    writeMultiLineStringGeometry_(feature, geometry) {
      const lines = geometry.getCoordinates();
      for (let j = 0, jj = lines.length; j < jj; ++j) {
        const coordinates = lines[j];
        for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
          const segment = coordinates.slice(i, i + 2);
          const segmentData = /** @type {SegmentData} */ ({
            feature: feature,
            geometry: geometry,
            depth: [j],
            index: i,
            segment: segment
          });
          this.rBush_.insert(boundingExtent(segment), segmentData);
        }
      }
    }

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/Polygon.js").default} geometry Geometry.
     * @private
     */
    writePolygonGeometry_(feature, geometry) {
      const rings = geometry.getCoordinates();
      for (let j = 0, jj = rings.length; j < jj; ++j) {
        const coordinates = rings[j];
        for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
          const segment = coordinates.slice(i, i + 2);
          const segmentData = /** @type {SegmentData} */ ({
            feature: feature,
            geometry: geometry,
            depth: [j],
            index: i,
            segment: segment
          });
          this.rBush_.insert(boundingExtent(segment), segmentData);
        }
      }
    }

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
     * @private
     */
    writeMultiPolygonGeometry_(feature, geometry) {
      const polygons = geometry.getCoordinates();
      for (let k = 0, kk = polygons.length; k < kk; ++k) {
        const rings = polygons[k];
        for (let j = 0, jj = rings.length; j < jj; ++j) {
          const coordinates = rings[j];
          for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
            const segment = coordinates.slice(i, i + 2);
            const segmentData = /** @type {SegmentData} */ ({
              feature: feature,
              geometry: geometry,
              depth: [j, k],
              index: i,
              segment: segment
            });
            this.rBush_.insert(boundingExtent(segment), segmentData);
          }
        }
      }
    }

    /**
     * We convert a circle into two segments.  The segment at index
     * {@link CIRCLE_CENTER_INDEX} is the
     * circle's center (a point).  The segment at index
     * {@link CIRCLE_CIRCUMFERENCE_INDEX} is
     * the circumference, and is not a line segment.
     *
     * @param {Feature} feature Feature.
     * @param {import("../geom/Circle.js").default} geometry Geometry.
     * @private
     */
    writeCircleGeometry_(feature, geometry) {
      const coordinates = geometry.getCenter();
      const centerSegmentData = /** @type {SegmentData} */ ({
        feature: feature,
        geometry: geometry,
        index: CIRCLE_CENTER_INDEX,
        segment: [coordinates, coordinates]
      });
      const circumferenceSegmentData = /** @type {SegmentData} */ ({
        feature: feature,
        geometry: geometry,
        index: CIRCLE_CIRCUMFERENCE_INDEX,
        segment: [coordinates, coordinates]
      });
      const featureSegments = [centerSegmentData, circumferenceSegmentData];
      centerSegmentData.featureSegments = circumferenceSegmentData.featureSegments = featureSegments;
      this.rBush_.insert(createOrUpdateFromCoordinate(coordinates), centerSegmentData);
      this.rBush_.insert(geometry.getExtent(), circumferenceSegmentData);
    }

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.
     * @private
     */
    writeGeometryCollectionGeometry_(feature, geometry) {
      const geometries = geometry.getGeometriesArray();
      for (let i = 0; i < geometries.length; ++i) {
        this.SEGMENT_WRITERS_[geometries[i].getType()].call(this, feature, geometries[i]);
      }
    }

    /**
     * @param {import("../coordinate.js").Coordinate} coordinates Coordinates.
     * @return {Feature} Vertex feature.
     * @private
     */
    createOrUpdateVertexFeature_(coordinates) {
      let vertexFeature = this.vertexFeature_;
      if (!vertexFeature) {
        vertexFeature = new Feature(new Point(coordinates));
        this.vertexFeature_ = vertexFeature;
        this.overlay_.getSource().addFeature(vertexFeature);
      } else {
        const geometry = vertexFeature.getGeometry();
        geometry.setCoordinates(coordinates);
      }
      return vertexFeature;
    }

    /**
     * Handles the {@link module:ol/MapBrowserEvent map browser event} and may modify the geometry.
     * @override
     */
    handleEvent(mapBrowserEvent) {
      if (!(/** @type {import("../MapBrowserPointerEvent.js").default} */ (mapBrowserEvent).pointerEvent)) {
        return true;
      }
      this.lastPointerEvent_ = mapBrowserEvent;

      let handled;
      if (!mapBrowserEvent.map.getView().getInteracting() &&
          mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE &&
          !this.handlingDownUpSequence) {
        this.handlePointerMove_(mapBrowserEvent);
      }
      if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {
        if (mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK || !this.ignoreNextSingleClick_) {
          handled = this.removePoint();
        } else {
          handled = true;
        }
      }

      if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {
        this.ignoreNextSingleClick_ = false;
      }

      return super.handleEvent(mapBrowserEvent) && !handled;
    }

    /**
     * @inheritDoc
     */
    handleDragEvent(evt) {
      this.ignoreNextSingleClick_ = false;
      this.willModifyFeatures_(evt);

      const vertex = evt.coordinate;
      for (let i = 0, ii = this.dragSegments_.length; i < ii; ++i) {
        const dragSegment = this.dragSegments_[i];
        const segmentData = dragSegment[0];
        const depth = segmentData.depth;
        const geometry = segmentData.geometry;
        let coordinates;
        const segment = segmentData.segment;
        const index = dragSegment[1];

        while (vertex.length < geometry.getStride()) {
          vertex.push(segment[index][vertex.length]);
        }

        switch (geometry.getType()) {
          case GeometryType.POINT:
            coordinates = vertex;
            segment[0] = segment[1] = vertex;
            break;
          case GeometryType.MULTI_POINT:
            coordinates = geometry.getCoordinates();
            coordinates[segmentData.index] = vertex;
            segment[0] = segment[1] = vertex;
            break;
          case GeometryType.LINE_STRING:
            coordinates = geometry.getCoordinates();
            coordinates[segmentData.index + index] = vertex;
            segment[index] = vertex;
            break;
          case GeometryType.MULTI_LINE_STRING:
            coordinates = geometry.getCoordinates();
            coordinates[depth[0]][segmentData.index + index] = vertex;
            segment[index] = vertex;
            break;
          case GeometryType.POLYGON:
            coordinates = geometry.getCoordinates();
            coordinates[depth[0]][segmentData.index + index] = vertex;
            segment[index] = vertex;
            break;
          case GeometryType.MULTI_POLYGON:
            coordinates = geometry.getCoordinates();
            coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;
            segment[index] = vertex;
            break;
          case GeometryType.CIRCLE:
            segment[0] = segment[1] = vertex;
            if (segmentData.index === CIRCLE_CENTER_INDEX) {
              this.changingFeature_ = true;
              geometry.setCenter(vertex);
              this.changingFeature_ = false;
            } else { // We're dragging the circle's circumference:
              this.changingFeature_ = true;
              geometry.setRadius(distance(geometry.getCenter(), vertex));
              this.changingFeature_ = false;
            }
            break;
            // pass
        }

        if (coordinates) {
          this.setGeometryCoordinates_(geometry, coordinates);
        }
      }
      this.createOrUpdateVertexFeature_(vertex);
    }

    /**
     * @inheritDoc
     */
    handleDownEvent(evt) {
      if (!this.condition_(evt)) {
        return false;
      }
      this.handlePointerAtPixel_(evt.pixel, evt.map);
      const pixelCoordinate = evt.map.getCoordinateFromPixel(evt.pixel);
      this.dragSegments_.length = 0;
      this.modified_ = false;
      const vertexFeature = this.vertexFeature_;
      if (vertexFeature) {
        const insertVertices = [];
        const geometry = vertexFeature.getGeometry();
        const vertex = geometry.getCoordinates();
        const vertexExtent = boundingExtent([vertex]);
        const segmentDataMatches = this.rBush_.getInExtent(vertexExtent);
        const componentSegments = {};
        segmentDataMatches.sort(compareIndexes);
        for (let i = 0, ii = segmentDataMatches.length; i < ii; ++i) {
          const segmentDataMatch = segmentDataMatches[i];
          const segment = segmentDataMatch.segment;
          let uid = getUid(segmentDataMatch.feature);
          const depth = segmentDataMatch.depth;
          if (depth) {
            uid += '-' + depth.join('-'); // separate feature components
          }
          if (!componentSegments[uid]) {
            componentSegments[uid] = new Array(2);
          }
          if (segmentDataMatch.geometry.getType() === GeometryType.CIRCLE &&
          segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {

            const closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch);
            if (equals$2(closestVertex, vertex) && !componentSegments[uid][0]) {
              this.dragSegments_.push([segmentDataMatch, 0]);
              componentSegments[uid][0] = segmentDataMatch;
            }
          } else if (equals$2(segment[0], vertex) &&
              !componentSegments[uid][0]) {
            this.dragSegments_.push([segmentDataMatch, 0]);
            componentSegments[uid][0] = segmentDataMatch;
          } else if (equals$2(segment[1], vertex) &&
              !componentSegments[uid][1]) {

            // prevent dragging closed linestrings by the connecting node
            if ((segmentDataMatch.geometry.getType() ===
                GeometryType.LINE_STRING ||
                segmentDataMatch.geometry.getType() ===
                GeometryType.MULTI_LINE_STRING) &&
                componentSegments[uid][0] &&
                componentSegments[uid][0].index === 0) {
              continue;
            }

            this.dragSegments_.push([segmentDataMatch, 1]);
            componentSegments[uid][1] = segmentDataMatch;
          } else if (getUid(segment) in this.vertexSegments_ &&
              (!componentSegments[uid][0] && !componentSegments[uid][1]) &&
              this.insertVertexCondition_(evt)) {
            insertVertices.push([segmentDataMatch, vertex]);
          }
        }
        if (insertVertices.length) {
          this.willModifyFeatures_(evt);
        }
        for (let j = insertVertices.length - 1; j >= 0; --j) {
          this.insertVertex_.apply(this, insertVertices[j]);
        }
      }
      return !!this.vertexFeature_;
    }

    /**
     * @inheritDoc
     */
    handleUpEvent(evt) {
      for (let i = this.dragSegments_.length - 1; i >= 0; --i) {
        const segmentData = this.dragSegments_[i][0];
        const geometry = segmentData.geometry;
        if (geometry.getType() === GeometryType.CIRCLE) {
          // Update a circle object in the R* bush:
          const coordinates = geometry.getCenter();
          const centerSegmentData = segmentData.featureSegments[0];
          const circumferenceSegmentData = segmentData.featureSegments[1];
          centerSegmentData.segment[0] = centerSegmentData.segment[1] = coordinates;
          circumferenceSegmentData.segment[0] = circumferenceSegmentData.segment[1] = coordinates;
          this.rBush_.update(createOrUpdateFromCoordinate(coordinates), centerSegmentData);
          this.rBush_.update(geometry.getExtent(), circumferenceSegmentData);
        } else {
          this.rBush_.update(boundingExtent(segmentData.segment), segmentData);
        }
      }
      if (this.modified_) {
        this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));
        this.modified_ = false;
      }
      return false;
    }

    /**
     * @param {import("../MapBrowserEvent.js").default} evt Event.
     * @private
     */
    handlePointerMove_(evt) {
      this.lastPixel_ = evt.pixel;
      this.handlePointerAtPixel_(evt.pixel, evt.map);
    }

    /**
     * @param {import("../pixel.js").Pixel} pixel Pixel
     * @param {import("../PluggableMap.js").default} map Map.
     * @private
     */
    handlePointerAtPixel_(pixel, map) {
      const pixelCoordinate = map.getCoordinateFromPixel(pixel);
      const sortByDistance = function(a, b) {
        return pointDistanceToSegmentDataSquared(pixelCoordinate, a) -
            pointDistanceToSegmentDataSquared(pixelCoordinate, b);
      };

      const box = buffer(createOrUpdateFromCoordinate(pixelCoordinate),
        map.getView().getResolution() * this.pixelTolerance_);

      const rBush = this.rBush_;
      const nodes = rBush.getInExtent(box);
      if (nodes.length > 0) {
        nodes.sort(sortByDistance);
        const node = nodes[0];
        const closestSegment = node.segment;
        let vertex = closestOnSegmentData(pixelCoordinate, node);
        const vertexPixel = map.getPixelFromCoordinate(vertex);
        let dist = distance(pixel, vertexPixel);
        if (dist <= this.pixelTolerance_) {
          /** @type {Object<string, boolean>} */
          const vertexSegments = {};

          if (node.geometry.getType() === GeometryType.CIRCLE &&
          node.index === CIRCLE_CIRCUMFERENCE_INDEX) {

            this.snappedToVertex_ = true;
            this.createOrUpdateVertexFeature_(vertex);
          } else {
            const pixel1 = map.getPixelFromCoordinate(closestSegment[0]);
            const pixel2 = map.getPixelFromCoordinate(closestSegment[1]);
            const squaredDist1 = squaredDistance$1(vertexPixel, pixel1);
            const squaredDist2 = squaredDistance$1(vertexPixel, pixel2);
            dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));
            this.snappedToVertex_ = dist <= this.pixelTolerance_;
            if (this.snappedToVertex_) {
              vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];
            }
            this.createOrUpdateVertexFeature_(vertex);
            for (let i = 1, ii = nodes.length; i < ii; ++i) {
              const segment = nodes[i].segment;
              if ((equals$2(closestSegment[0], segment[0]) &&
                  equals$2(closestSegment[1], segment[1]) ||
                  (equals$2(closestSegment[0], segment[1]) &&
                  equals$2(closestSegment[1], segment[0])))) {
                vertexSegments[getUid(segment)] = true;
              } else {
                break;
              }
            }
          }

          vertexSegments[getUid(closestSegment)] = true;
          this.vertexSegments_ = vertexSegments;
          return;
        }
      }
      if (this.vertexFeature_) {
        this.overlay_.getSource().removeFeature(this.vertexFeature_);
        this.vertexFeature_ = null;
      }
    }

    /**
     * @param {SegmentData} segmentData Segment data.
     * @param {import("../coordinate.js").Coordinate} vertex Vertex.
     * @private
     */
    insertVertex_(segmentData, vertex) {
      const segment = segmentData.segment;
      const feature = segmentData.feature;
      const geometry = segmentData.geometry;
      const depth = segmentData.depth;
      const index = /** @type {number} */ (segmentData.index);
      let coordinates;

      while (vertex.length < geometry.getStride()) {
        vertex.push(0);
      }

      switch (geometry.getType()) {
        case GeometryType.MULTI_LINE_STRING:
          coordinates = geometry.getCoordinates();
          coordinates[depth[0]].splice(index + 1, 0, vertex);
          break;
        case GeometryType.POLYGON:
          coordinates = geometry.getCoordinates();
          coordinates[depth[0]].splice(index + 1, 0, vertex);
          break;
        case GeometryType.MULTI_POLYGON:
          coordinates = geometry.getCoordinates();
          coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);
          break;
        case GeometryType.LINE_STRING:
          coordinates = geometry.getCoordinates();
          coordinates.splice(index + 1, 0, vertex);
          break;
        default:
          return;
      }

      this.setGeometryCoordinates_(geometry, coordinates);
      const rTree = this.rBush_;
      rTree.remove(segmentData);
      this.updateSegmentIndices_(geometry, index, depth, 1);
      const newSegmentData = /** @type {SegmentData} */ ({
        segment: [segment[0], vertex],
        feature: feature,
        geometry: geometry,
        depth: depth,
        index: index
      });
      rTree.insert(boundingExtent(newSegmentData.segment),
        newSegmentData);
      this.dragSegments_.push([newSegmentData, 1]);

      const newSegmentData2 = /** @type {SegmentData} */ ({
        segment: [vertex, segment[1]],
        feature: feature,
        geometry: geometry,
        depth: depth,
        index: index + 1
      });
      rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);
      this.dragSegments_.push([newSegmentData2, 0]);
      this.ignoreNextSingleClick_ = true;
    }

    /**
     * Removes the vertex currently being pointed.
     * @return {boolean} True when a vertex was removed.
     * @api
     */
    removePoint() {
      if (this.lastPointerEvent_ && this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG) {
        const evt = this.lastPointerEvent_;
        this.willModifyFeatures_(evt);
        const removed = this.removeVertex_();
        this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));
        this.modified_ = false;
        return removed;
      }
      return false;
    }

    /**
     * Removes a vertex from all matching features.
     * @return {boolean} True when a vertex was removed.
     * @private
     */
    removeVertex_() {
      const dragSegments = this.dragSegments_;
      const segmentsByFeature = {};
      let deleted = false;
      let component, coordinates, dragSegment, geometry, i, index, left;
      let newIndex, right, segmentData, uid;
      for (i = dragSegments.length - 1; i >= 0; --i) {
        dragSegment = dragSegments[i];
        segmentData = dragSegment[0];
        uid = getUid(segmentData.feature);
        if (segmentData.depth) {
          // separate feature components
          uid += '-' + segmentData.depth.join('-');
        }
        if (!(uid in segmentsByFeature)) {
          segmentsByFeature[uid] = {};
        }
        if (dragSegment[1] === 0) {
          segmentsByFeature[uid].right = segmentData;
          segmentsByFeature[uid].index = segmentData.index;
        } else if (dragSegment[1] == 1) {
          segmentsByFeature[uid].left = segmentData;
          segmentsByFeature[uid].index = segmentData.index + 1;
        }

      }
      for (uid in segmentsByFeature) {
        right = segmentsByFeature[uid].right;
        left = segmentsByFeature[uid].left;
        index = segmentsByFeature[uid].index;
        newIndex = index - 1;
        if (left !== undefined) {
          segmentData = left;
        } else {
          segmentData = right;
        }
        if (newIndex < 0) {
          newIndex = 0;
        }
        geometry = segmentData.geometry;
        coordinates = geometry.getCoordinates();
        component = coordinates;
        deleted = false;
        switch (geometry.getType()) {
          case GeometryType.MULTI_LINE_STRING:
            if (coordinates[segmentData.depth[0]].length > 2) {
              coordinates[segmentData.depth[0]].splice(index, 1);
              deleted = true;
            }
            break;
          case GeometryType.LINE_STRING:
            if (coordinates.length > 2) {
              coordinates.splice(index, 1);
              deleted = true;
            }
            break;
          case GeometryType.MULTI_POLYGON:
            component = component[segmentData.depth[1]];
            /* falls through */
          case GeometryType.POLYGON:
            component = component[segmentData.depth[0]];
            if (component.length > 4) {
              if (index == component.length - 1) {
                index = 0;
              }
              component.splice(index, 1);
              deleted = true;
              if (index === 0) {
                // close the ring again
                component.pop();
                component.push(component[0]);
                newIndex = component.length - 1;
              }
            }
            break;
            // pass
        }

        if (deleted) {
          this.setGeometryCoordinates_(geometry, coordinates);
          const segments = [];
          if (left !== undefined) {
            this.rBush_.remove(left);
            segments.push(left.segment[0]);
          }
          if (right !== undefined) {
            this.rBush_.remove(right);
            segments.push(right.segment[1]);
          }
          if (left !== undefined && right !== undefined) {
            const newSegmentData = /** @type {SegmentData} */ ({
              depth: segmentData.depth,
              feature: segmentData.feature,
              geometry: segmentData.geometry,
              index: newIndex,
              segment: segments
            });
            this.rBush_.insert(boundingExtent(newSegmentData.segment),
              newSegmentData);
          }
          this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);
          if (this.vertexFeature_) {
            this.overlay_.getSource().removeFeature(this.vertexFeature_);
            this.vertexFeature_ = null;
          }
          dragSegments.length = 0;
        }

      }
      return deleted;
    }

    /**
     * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
     * @param {Array} coordinates Coordinates.
     * @private
     */
    setGeometryCoordinates_(geometry, coordinates) {
      this.changingFeature_ = true;
      geometry.setCoordinates(coordinates);
      this.changingFeature_ = false;
    }

    /**
     * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
     * @param {number} index Index.
     * @param {Array<number>|undefined} depth Depth.
     * @param {number} delta Delta (1 or -1).
     * @private
     */
    updateSegmentIndices_(geometry, index, depth, delta) {
      this.rBush_.forEachInExtent(geometry.getExtent(), function(segmentDataMatch) {
        if (segmentDataMatch.geometry === geometry &&
            (depth === undefined || segmentDataMatch.depth === undefined ||
            equals$1(segmentDataMatch.depth, depth)) &&
            segmentDataMatch.index > index) {
          segmentDataMatch.index += delta;
        }
      });
    }
  }


  /**
   * @param {SegmentData} a The first segment data.
   * @param {SegmentData} b The second segment data.
   * @return {number} The difference in indexes.
   */
  function compareIndexes(a, b) {
    return a.index - b.index;
  }


  /**
   * Returns the distance from a point to a line segment.
   *
   * @param {import("../coordinate.js").Coordinate} pointCoordinates The coordinates of the point from
   *        which to calculate the distance.
   * @param {SegmentData} segmentData The object describing the line
   *        segment we are calculating the distance to.
   * @return {number} The square of the distance between a point and a line segment.
   */
  function pointDistanceToSegmentDataSquared(pointCoordinates, segmentData) {
    const geometry = segmentData.geometry;

    if (geometry.getType() === GeometryType.CIRCLE) {
      const circleGeometry = /** @type {import("../geom/Circle.js").default} */ (geometry);

      if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {
        const distanceToCenterSquared =
              squaredDistance$1(circleGeometry.getCenter(), pointCoordinates);
        const distanceToCircumference =
              Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();
        return distanceToCircumference * distanceToCircumference;
      }
    }
    return squaredDistanceToSegment(pointCoordinates, segmentData.segment);
  }

  /**
   * Returns the point closest to a given line segment.
   *
   * @param {import("../coordinate.js").Coordinate} pointCoordinates The point to which a closest point
   *        should be found.
   * @param {SegmentData} segmentData The object describing the line
   *        segment which should contain the closest point.
   * @return {import("../coordinate.js").Coordinate} The point closest to the specified line segment.
   */
  function closestOnSegmentData(pointCoordinates, segmentData) {
    const geometry = segmentData.geometry;

    if (geometry.getType() === GeometryType.CIRCLE &&
    segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {
      return geometry.getClosestPoint(pointCoordinates);
    }
    return closestOnSegment(pointCoordinates, segmentData.segment);
  }


  /**
   * @return {import("../style/Style.js").StyleFunction} Styles.
   */
  function getDefaultStyleFunction$1() {
    const style = createEditingStyle();
    return function(feature, resolution) {
      return style[GeometryType.POINT];
    };
  }

  /**
   * @module ol/interaction/Select
   */


  /**
   * @enum {string}
   */
  const SelectEventType = {
    /**
     * Triggered when feature(s) has been (de)selected.
     * @event SelectEvent#select
     * @api
     */
    SELECT: 'select'
  };


  /**
   * A function that takes an {@link module:ol/Feature} or
   * {@link module:ol/render/Feature} and an
   * {@link module:ol/layer/Layer} and returns `true` if the feature may be
   * selected or `false` otherwise.
   * @typedef {function(import("../Feature.js").FeatureLike, import("../layer/Layer.js").default):boolean} FilterFunction
   */


  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [addCondition] A function
   * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled.
   * By default, this is {@link module:ol/events/condition~never}. Use this if you
   * want to use different events for add and remove instead of `toggle`.
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. This is the event
   * for the selected features as a whole. By default, this is
   * {@link module:ol/events/condition~singleClick}. Clicking on a feature selects that
   * feature and removes any that were in the selection. Clicking outside any
   * feature removes all from the selection.
   * See `toggle`, `add`, `remove` options for adding/removing extra features to/
   * from the selection.
   * @property {Array<import("../layer/Layer.js").default>|function(import("../layer/Layer.js").default): boolean} [layers]
   * A list of layers from which features should be selected. Alternatively, a
   * filter function can be provided. The function will be called for each layer
   * in the map and should return `true` for layers that you want to be
   * selectable. If the option is absent, all visible layers will be considered
   * selectable.
   * @property {import("../style/Style.js").StyleLike} [style]
   * Style for the selected features. By default the default edit style is used
   * (see {@link module:ol/style}).
   * @property {import("../events/condition.js").Condition} [removeCondition] A function
   * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled.
   * By default, this is {@link module:ol/events/condition~never}. Use this if you
   * want to use different events for add and remove instead of `toggle`.
   * @property {import("../events/condition.js").Condition} [toggleCondition] A function
   * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. This is in addition
   * to the `condition` event. By default,
   * {@link module:ol/events/condition~shiftKeyOnly}, i.e. pressing `shift` as
   * well as the `condition` event, adds that feature to the current selection if
   * it is not currently selected, and removes it if it is. See `add` and `remove`
   * if you want to use different events instead of a toggle.
   * @property {boolean} [multi=false] A boolean that determines if the default
   * behaviour should select only single features or all (overlapping) features at
   * the clicked map position. The default of `false` means single select.
   * @property {import("../Collection.js").default<import("../Feature.js").default>} [features]
   * Collection where the interaction will place selected features. Optional. If
   * not set the interaction will create a collection. In any case the collection
   * used by the interaction is returned by
   * {@link module:ol/interaction/Select~Select#getFeatures}.
   * @property {FilterFunction} [filter] A function
   * that takes an {@link module:ol/Feature} and an
   * {@link module:ol/layer/Layer} and returns `true` if the feature may be
   * selected or `false` otherwise.
   * @property {boolean} [wrapX=true] Wrap the world horizontally on the selection
   * overlay.
   * @property {number} [hitTolerance=0] Hit-detection tolerance. Pixels inside
   * the radius around the given position will be checked for features.
   */


  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/Select~Select} instances are instances of
   * this type.
   */
  class SelectEvent extends Event {
    /**
     * @param {SelectEventType} type The event type.
     * @param {Array<import("../Feature.js").default>} selected Selected features.
     * @param {Array<import("../Feature.js").default>} deselected Deselected features.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Associated
     *     {@link module:ol/MapBrowserEvent}.
     */
    constructor(type, selected, deselected, mapBrowserEvent) {
      super(type);

      /**
       * Selected features array.
       * @type {Array<import("../Feature.js").default>}
       * @api
       */
      this.selected = selected;

      /**
       * Deselected features array.
       * @type {Array<import("../Feature.js").default>}
       * @api
       */
      this.deselected = deselected;

      /**
       * Associated {@link module:ol/MapBrowserEvent}.
       * @type {import("../MapBrowserEvent.js").default}
       * @api
       */
      this.mapBrowserEvent = mapBrowserEvent;

    }

  }


  /**
   * @classdesc
   * Interaction for selecting vector features. By default, selected features are
   * styled differently, so this interaction can be used for visual highlighting,
   * as well as selecting features for other actions, such as modification or
   * output. There are three ways of controlling which features are selected:
   * using the browser event as defined by the `condition` and optionally the
   * `toggle`, `add`/`remove`, and `multi` options; a `layers` filter; and a
   * further feature filter using the `filter` option.
   *
   * Selected features are added to an internal unmanaged layer.
   *
   * @fires SelectEvent
   * @api
   */
  class Select extends Interaction {
    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {

      super({
        handleEvent: handleEvent$3
      });

      const options = opt_options ? opt_options : {};

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : singleClick;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.addCondition_ = options.addCondition ? options.addCondition : never;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.removeCondition_ = options.removeCondition ? options.removeCondition : never;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.toggleCondition_ = options.toggleCondition ? options.toggleCondition : shiftKeyOnly;

      /**
       * @private
       * @type {boolean}
       */
      this.multi_ = options.multi ? options.multi : false;

      /**
       * @private
       * @type {FilterFunction}
       */
      this.filter_ = options.filter ? options.filter : TRUE;

      /**
       * @private
       * @type {number}
       */
      this.hitTolerance_ = options.hitTolerance ? options.hitTolerance : 0;

      const featureOverlay = new VectorLayer({
        source: new VectorSource({
          useSpatialIndex: false,
          features: options.features,
          wrapX: options.wrapX
        }),
        style: options.style ? options.style :
          getDefaultStyleFunction$2(),
        updateWhileAnimating: true,
        updateWhileInteracting: true
      });

      /**
       * @private
       * @type {VectorLayer}
       */
      this.featureOverlay_ = featureOverlay;

      /** @type {function(import("../layer/Layer.js").default): boolean} */
      let layerFilter;
      if (options.layers) {
        if (typeof options.layers === 'function') {
          layerFilter = options.layers;
        } else {
          const layers = options.layers;
          layerFilter = function(layer) {
            return includes(layers, layer);
          };
        }
      } else {
        layerFilter = TRUE;
      }

      /**
       * @private
       * @type {function(import("../layer/Layer.js").default): boolean}
       */
      this.layerFilter_ = layerFilter;

      /**
       * An association between selected feature (key)
       * and layer (value)
       * @private
       * @type {Object<string, import("../layer/Layer.js").default>}
       */
      this.featureLayerAssociation_ = {};

      const features = this.getFeatures();
      listen(features, CollectionEventType.ADD,
        this.addFeature_, this);
      listen(features, CollectionEventType.REMOVE,
        this.removeFeature_, this);
    }

    /**
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {import("../layer/Layer.js").default} layer Layer.
     * @private
     */
    addFeatureLayerAssociation_(feature, layer) {
      this.featureLayerAssociation_[getUid(feature)] = layer;
    }

    /**
     * Get the selected features.
     * @return {import("../Collection.js").default<import("../Feature.js").default>} Features collection.
     * @api
     */
    getFeatures() {
      return this.featureOverlay_.getSource().getFeaturesCollection();
    }

    /**
     * Returns the Hit-detection tolerance.
     * @returns {number} Hit tolerance in pixels.
     * @api
     */
    getHitTolerance() {
      return this.hitTolerance_;
    }

    /**
     * Returns the associated {@link module:ol/layer/Vector~Vector vectorlayer} of
     * the (last) selected feature. Note that this will not work with any
     * programmatic method like pushing features to
     * {@link module:ol/interaction/Select~Select#getFeatures collection}.
     * @param {import("../Feature.js").FeatureLike} feature Feature
     * @return {VectorLayer} Layer.
     * @api
     */
    getLayer(feature) {
      return (
        /** @type {VectorLayer} */ (this.featureLayerAssociation_[getUid(feature)])
      );
    }

    /**
     * Get the overlay layer that this interaction renders selected features to.
     * @return {VectorLayer} Overlay layer.
     * @api
     */
    getOverlay() {
      return this.featureOverlay_;
    }

    /**
     * Hit-detection tolerance. Pixels inside the radius around the given position
     * will be checked for features.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @api
     */
    setHitTolerance(hitTolerance) {
      this.hitTolerance_ = hitTolerance;
    }

    /**
     * Remove the interaction from its current map, if any,  and attach it to a new
     * map, if any. Pass `null` to just remove the interaction from the current map.
     * @param {import("../PluggableMap.js").default} map Map.
     * @override
     * @api
     */
    setMap(map) {
      const currentMap = this.getMap();
      const selectedFeatures = this.getFeatures();
      if (currentMap) {
        selectedFeatures.forEach(currentMap.unskipFeature.bind(currentMap));
      }
      super.setMap(map);
      this.featureOverlay_.setMap(map);
      if (map) {
        selectedFeatures.forEach(map.skipFeature.bind(map));
      }
    }

    /**
     * @param {import("../Collection.js").CollectionEvent} evt Event.
     * @private
     */
    addFeature_(evt) {
      const map = this.getMap();
      if (map) {
        map.skipFeature(/** @type {import("../Feature.js").default} */ (evt.element));
      }
    }

    /**
     * @param {import("../Collection.js").CollectionEvent} evt Event.
     * @private
     */
    removeFeature_(evt) {
      const map = this.getMap();
      if (map) {
        map.unskipFeature(/** @type {import("../Feature.js").default} */ (evt.element));
      }
    }

    /**
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @private
     */
    removeFeatureLayerAssociation_(feature) {
      delete this.featureLayerAssociation_[getUid(feature)];
    }
  }


  /**
   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may change the
   * selected state of features.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} `false` to stop event propagation.
   * @this {Select}
   */
  function handleEvent$3(mapBrowserEvent) {
    if (!this.condition_(mapBrowserEvent)) {
      return true;
    }
    const add = this.addCondition_(mapBrowserEvent);
    const remove = this.removeCondition_(mapBrowserEvent);
    const toggle = this.toggleCondition_(mapBrowserEvent);
    const set = !add && !remove && !toggle;
    const map = mapBrowserEvent.map;
    const features = this.getFeatures();
    const deselected = [];
    const selected = [];
    if (set) {
      // Replace the currently selected feature(s) with the feature(s) at the
      // pixel, or clear the selected feature(s) if there is no feature at
      // the pixel.
      clear(this.featureLayerAssociation_);
      map.forEachFeatureAtPixel(mapBrowserEvent.pixel,
        (
          /**
           * @param {import("../Feature.js").FeatureLike} feature Feature.
           * @param {import("../layer/Layer.js").default} layer Layer.
           * @return {boolean|undefined} Continue to iterate over the features.
           */
          function(feature, layer) {
            if (this.filter_(feature, layer)) {
              selected.push(feature);
              this.addFeatureLayerAssociation_(feature, layer);
              return !this.multi_;
            }
          }).bind(this), {
          layerFilter: this.layerFilter_,
          hitTolerance: this.hitTolerance_
        });
      for (let i = features.getLength() - 1; i >= 0; --i) {
        const feature = features.item(i);
        const index = selected.indexOf(feature);
        if (index > -1) {
          // feature is already selected
          selected.splice(index, 1);
        } else {
          features.remove(feature);
          deselected.push(feature);
        }
      }
      if (selected.length !== 0) {
        features.extend(selected);
      }
    } else {
      // Modify the currently selected feature(s).
      map.forEachFeatureAtPixel(mapBrowserEvent.pixel,
        (
          /**
           * @param {import("../Feature.js").FeatureLike} feature Feature.
           * @param {import("../layer/Layer.js").default} layer Layer.
           * @return {boolean|undefined} Continue to iterate over the features.
           */
          function(feature, layer) {
            if (this.filter_(feature, layer)) {
              if ((add || toggle) && !includes(features.getArray(), feature)) {
                selected.push(feature);
                this.addFeatureLayerAssociation_(feature, layer);
              } else if ((remove || toggle) && includes(features.getArray(), feature)) {
                deselected.push(feature);
                this.removeFeatureLayerAssociation_(feature);
              }
              return !this.multi_;
            }
          }).bind(this), {
          layerFilter: this.layerFilter_,
          hitTolerance: this.hitTolerance_
        });
      for (let j = deselected.length - 1; j >= 0; --j) {
        features.remove(deselected[j]);
      }
      features.extend(selected);
    }
    if (selected.length > 0 || deselected.length > 0) {
      this.dispatchEvent(
        new SelectEvent(SelectEventType.SELECT,
          selected, deselected, mapBrowserEvent));
    }
    return pointerMove$1(mapBrowserEvent);
  }


  /**
   * @return {import("../style/Style.js").StyleFunction} Styles.
   */
  function getDefaultStyleFunction$2() {
    const styles = createEditingStyle();
    extend$1(styles[GeometryType.POLYGON], styles[GeometryType.LINE_STRING]);
    extend$1(styles[GeometryType.GEOMETRY_COLLECTION], styles[GeometryType.LINE_STRING]);

    return function(feature, resolution) {
      if (!feature.getGeometry()) {
        return null;
      }
      return styles[feature.getGeometry().getType()];
    };
  }

  /**
   * @module ol/interaction/Snap
   */


  /**
   * @typedef {Object} Result
   * @property {boolean} snapped
   * @property {import("../coordinate.js").Coordinate|null} vertex
   * @property {import("../pixel.js").Pixel|null} vertexPixel
   */


  /**
   * @typedef {Object} SegmentData
   * @property {import("../Feature.js").default} feature
   * @property {Array<import("../coordinate.js").Coordinate>} segment
   */


  /**
   * @typedef {Object} Options
   * @property {import("../Collection.js").default<import("../Feature.js").default>} [features] Snap to these features. Either this option or source should be provided.
   * @property {boolean} [edge=true] Snap to edges.
   * @property {boolean} [vertex=true] Snap to vertices.
   * @property {number} [pixelTolerance=10] Pixel tolerance for considering the pointer close enough to a segment or
   * vertex for snapping.
   * @property {import("../source/Vector.js").default} [source] Snap to features from this source. Either this option or features should be provided
   */


  /**
   * @param  {import("../source/Vector.js").VectorSourceEvent|import("../Collection.js").CollectionEvent} evt Event.
   * @return {import("../Feature.js").default} Feature.
   */
  function getFeatureFromEvent(evt) {
    if (/** @type {import("../source/Vector.js").VectorSourceEvent} */ (evt).feature) {
      return /** @type {import("../source/Vector.js").VectorSourceEvent} */ (evt).feature;
    } else if (/** @type {import("../Collection.js").CollectionEvent} */ (evt).element) {
      return /** @type {import("../Feature.js").default} */ (/** @type {import("../Collection.js").CollectionEvent} */ (evt).element);
    }

  }

  /**
   * @classdesc
   * Handles snapping of vector features while modifying or drawing them.  The
   * features can come from a {@link module:ol/source/Vector} or {@link module:ol/Collection~Collection}
   * Any interaction object that allows the user to interact
   * with the features using the mouse can benefit from the snapping, as long
   * as it is added before.
   *
   * The snap interaction modifies map browser event `coordinate` and `pixel`
   * properties to force the snap to occur to any interaction that them.
   *
   * Example:
   *
   *     import Snap from 'ol/interaction/Snap';
   *
   *     var snap = new Snap({
   *       source: source
   *     });
   *
   * @api
   */
  class Snap extends PointerInteraction {
    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {

      const options = opt_options ? opt_options : {};

      const pointerOptions = /** @type {import("./Pointer.js").Options} */ (options);

      if (!pointerOptions.handleDownEvent) {
        pointerOptions.handleDownEvent = TRUE;
      }

      if (!pointerOptions.stopDown) {
        pointerOptions.stopDown = FALSE;
      }

      super(pointerOptions);

      /**
       * @type {import("../source/Vector.js").default}
       * @private
       */
      this.source_ = options.source ? options.source : null;

      /**
       * @private
       * @type {boolean}
       */
      this.vertex_ = options.vertex !== undefined ? options.vertex : true;

      /**
       * @private
       * @type {boolean}
       */
      this.edge_ = options.edge !== undefined ? options.edge : true;

      /**
       * @type {import("../Collection.js").default<import("../Feature.js").default>}
       * @private
       */
      this.features_ = options.features ? options.features : null;

      /**
       * @type {Array<import("../events.js").EventsKey>}
       * @private
       */
      this.featuresListenerKeys_ = [];

      /**
       * @type {Object<string, import("../events.js").EventsKey>}
       * @private
       */
      this.featureChangeListenerKeys_ = {};

      /**
       * Extents are preserved so indexed segment can be quickly removed
       * when its feature geometry changes
       * @type {Object<string, import("../extent.js").Extent>}
       * @private
       */
      this.indexedFeaturesExtents_ = {};

      /**
       * If a feature geometry changes while a pointer drag|move event occurs, the
       * feature doesn't get updated right away.  It will be at the next 'pointerup'
       * event fired.
       * @type {!Object<string, import("../Feature.js").default>}
       * @private
       */
      this.pendingFeatures_ = {};

      /**
       * Used for distance sorting in sortByDistance_
       * @type {import("../coordinate.js").Coordinate}
       * @private
       */
      this.pixelCoordinate_ = null;

      /**
       * @type {number}
       * @private
       */
      this.pixelTolerance_ = options.pixelTolerance !== undefined ?
        options.pixelTolerance : 10;

      /**
       * @type {function(SegmentData, SegmentData): number}
       * @private
       */
      this.sortByDistance_ = sortByDistance.bind(this);


      /**
      * Segment RTree for each layer
      * @type {import("../structs/RBush.js").default<SegmentData>}
      * @private
      */
      this.rBush_ = new RBush();


      /**
      * @const
      * @private
      * @type {Object<string, function(import("../Feature.js").default, import("../geom/Geometry.js").default): void>}
      */
      this.SEGMENT_WRITERS_ = {
        'Point': this.writePointGeometry_,
        'LineString': this.writeLineStringGeometry_,
        'LinearRing': this.writeLineStringGeometry_,
        'Polygon': this.writePolygonGeometry_,
        'MultiPoint': this.writeMultiPointGeometry_,
        'MultiLineString': this.writeMultiLineStringGeometry_,
        'MultiPolygon': this.writeMultiPolygonGeometry_,
        'GeometryCollection': this.writeGeometryCollectionGeometry_,
        'Circle': this.writeCircleGeometry_
      };
    }

    /**
     * Add a feature to the collection of features that we may snap to.
     * @param {import("../Feature.js").default} feature Feature.
     * @param {boolean=} opt_listen Whether to listen to the feature change or not
     *     Defaults to `true`.
     * @api
     */
    addFeature(feature, opt_listen) {
      const register = opt_listen !== undefined ? opt_listen : true;
      const feature_uid = getUid(feature);
      const geometry = feature.getGeometry();
      if (geometry) {
        const segmentWriter = this.SEGMENT_WRITERS_[geometry.getType()];
        if (segmentWriter) {
          this.indexedFeaturesExtents_[feature_uid] = geometry.getExtent(createEmpty());
          segmentWriter.call(this, feature, geometry);
        }
      }

      if (register) {
        this.featureChangeListenerKeys_[feature_uid] = listen(
          feature,
          EventType.CHANGE,
          this.handleFeatureChange_, this);
      }
    }

    /**
     * @param {import("../Feature.js").default} feature Feature.
     * @private
     */
    forEachFeatureAdd_(feature) {
      this.addFeature(feature);
    }

    /**
     * @param {import("../Feature.js").default} feature Feature.
     * @private
     */
    forEachFeatureRemove_(feature) {
      this.removeFeature(feature);
    }

    /**
     * @return {import("../Collection.js").default<import("../Feature.js").default>|Array<import("../Feature.js").default>} Features.
     * @private
     */
    getFeatures_() {
      let features;
      if (this.features_) {
        features = this.features_;
      } else if (this.source_) {
        features = this.source_.getFeatures();
      }
      return features;
    }

    /**
     * @inheritDoc
     */
    handleEvent(evt) {
      const result = this.snapTo(evt.pixel, evt.coordinate, evt.map);
      if (result.snapped) {
        evt.coordinate = result.vertex.slice(0, 2);
        evt.pixel = result.vertexPixel;
      }
      return super.handleEvent(evt);
    }

    /**
     * @param {import("../source/Vector.js").VectorSourceEvent|import("../Collection.js").CollectionEvent} evt Event.
     * @private
     */
    handleFeatureAdd_(evt) {
      const feature = getFeatureFromEvent(evt);
      this.addFeature(feature);
    }

    /**
     * @param {import("../source/Vector.js").VectorSourceEvent|import("../Collection.js").CollectionEvent} evt Event.
     * @private
     */
    handleFeatureRemove_(evt) {
      const feature = getFeatureFromEvent(evt);
      this.removeFeature(feature);
    }

    /**
     * @param {import("../events/Event.js").default} evt Event.
     * @private
     */
    handleFeatureChange_(evt) {
      const feature = /** @type {import("../Feature.js").default} */ (evt.target);
      if (this.handlingDownUpSequence) {
        const uid = getUid(feature);
        if (!(uid in this.pendingFeatures_)) {
          this.pendingFeatures_[uid] = feature;
        }
      } else {
        this.updateFeature_(feature);
      }
    }

    /**
     * @inheritDoc
     */
    handleUpEvent(evt) {
      const featuresToUpdate = getValues(this.pendingFeatures_);
      if (featuresToUpdate.length) {
        featuresToUpdate.forEach(this.updateFeature_.bind(this));
        this.pendingFeatures_ = {};
      }
      return false;
    }

    /**
     * Remove a feature from the collection of features that we may snap to.
     * @param {import("../Feature.js").default} feature Feature
     * @param {boolean=} opt_unlisten Whether to unlisten to the feature change
     *     or not. Defaults to `true`.
     * @api
     */
    removeFeature(feature, opt_unlisten) {
      const unregister = opt_unlisten !== undefined ? opt_unlisten : true;
      const feature_uid = getUid(feature);
      const extent = this.indexedFeaturesExtents_[feature_uid];
      if (extent) {
        const rBush = this.rBush_;
        const nodesToRemove = [];
        rBush.forEachInExtent(extent, function(node) {
          if (feature === node.feature) {
            nodesToRemove.push(node);
          }
        });
        for (let i = nodesToRemove.length - 1; i >= 0; --i) {
          rBush.remove(nodesToRemove[i]);
        }
      }

      if (unregister) {
        unlistenByKey(this.featureChangeListenerKeys_[feature_uid]);
        delete this.featureChangeListenerKeys_[feature_uid];
      }
    }

    /**
     * @inheritDoc
     */
    setMap(map) {
      const currentMap = this.getMap();
      const keys = this.featuresListenerKeys_;
      const features = /** @type {Array<import("../Feature.js").default>} */ (this.getFeatures_());

      if (currentMap) {
        keys.forEach(unlistenByKey);
        keys.length = 0;
        features.forEach(this.forEachFeatureRemove_.bind(this));
      }
      super.setMap(map);

      if (map) {
        if (this.features_) {
          keys.push(
            listen(this.features_, CollectionEventType.ADD,
              this.handleFeatureAdd_, this),
            listen(this.features_, CollectionEventType.REMOVE,
              this.handleFeatureRemove_, this)
          );
        } else if (this.source_) {
          keys.push(
            listen(this.source_, VectorEventType.ADDFEATURE,
              this.handleFeatureAdd_, this),
            listen(this.source_, VectorEventType.REMOVEFEATURE,
              this.handleFeatureRemove_, this)
          );
        }
        features.forEach(this.forEachFeatureAdd_.bind(this));
      }
    }

    /**
     * @param {import("../pixel.js").Pixel} pixel Pixel
     * @param {import("../coordinate.js").Coordinate} pixelCoordinate Coordinate
     * @param {import("../PluggableMap.js").default} map Map.
     * @return {Result} Snap result
     */
    snapTo(pixel, pixelCoordinate, map) {

      const lowerLeft = map.getCoordinateFromPixel(
        [pixel[0] - this.pixelTolerance_, pixel[1] + this.pixelTolerance_]);
      const upperRight = map.getCoordinateFromPixel(
        [pixel[0] + this.pixelTolerance_, pixel[1] - this.pixelTolerance_]);
      const box = boundingExtent([lowerLeft, upperRight]);

      let segments = this.rBush_.getInExtent(box);

      // If snapping on vertices only, don't consider circles
      if (this.vertex_ && !this.edge_) {
        segments = segments.filter(function(segment) {
          return segment.feature.getGeometry().getType() !==
              GeometryType.CIRCLE;
        });
      }

      let snappedToVertex = false;
      let snapped = false;
      let vertex = null;
      let vertexPixel = null;
      let dist, pixel1, pixel2, squaredDist1, squaredDist2;
      if (segments.length > 0) {
        this.pixelCoordinate_ = pixelCoordinate;
        segments.sort(this.sortByDistance_);
        const closestSegment = segments[0].segment;
        const isCircle = segments[0].feature.getGeometry().getType() ===
            GeometryType.CIRCLE;
        if (this.vertex_ && !this.edge_) {
          pixel1 = map.getPixelFromCoordinate(closestSegment[0]);
          pixel2 = map.getPixelFromCoordinate(closestSegment[1]);
          squaredDist1 = squaredDistance$1(pixel, pixel1);
          squaredDist2 = squaredDistance$1(pixel, pixel2);
          dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));
          snappedToVertex = dist <= this.pixelTolerance_;
          if (snappedToVertex) {
            snapped = true;
            vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];
            vertexPixel = map.getPixelFromCoordinate(vertex);
          }
        } else if (this.edge_) {
          if (isCircle) {
            vertex = closestOnCircle(pixelCoordinate,
              /** @type {import("../geom/Circle.js").default} */ (segments[0].feature.getGeometry()));
          } else {
            vertex = closestOnSegment(pixelCoordinate, closestSegment);
          }
          vertexPixel = map.getPixelFromCoordinate(vertex);
          if (distance(pixel, vertexPixel) <= this.pixelTolerance_) {
            snapped = true;
            if (this.vertex_ && !isCircle) {
              pixel1 = map.getPixelFromCoordinate(closestSegment[0]);
              pixel2 = map.getPixelFromCoordinate(closestSegment[1]);
              squaredDist1 = squaredDistance$1(vertexPixel, pixel1);
              squaredDist2 = squaredDistance$1(vertexPixel, pixel2);
              dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));
              snappedToVertex = dist <= this.pixelTolerance_;
              if (snappedToVertex) {
                vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];
                vertexPixel = map.getPixelFromCoordinate(vertex);
              }
            }
          }
        }
        if (snapped) {
          vertexPixel = [Math.round(vertexPixel[0]), Math.round(vertexPixel[1])];
        }
      }
      return {
        snapped: snapped,
        vertex: vertex,
        vertexPixel: vertexPixel
      };
    }

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @private
     */
    updateFeature_(feature) {
      this.removeFeature(feature, false);
      this.addFeature(feature, false);
    }

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @param {import("../geom/Circle.js").default} geometry Geometry.
     * @private
     */
    writeCircleGeometry_(feature, geometry) {
      const polygon = fromCircle(geometry);
      const coordinates = polygon.getCoordinates()[0];
      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
        const segment = coordinates.slice(i, i + 2);
        const segmentData = {
          feature: feature,
          segment: segment
        };
        this.rBush_.insert(boundingExtent(segment), segmentData);
      }
    }

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.
     * @private
     */
    writeGeometryCollectionGeometry_(feature, geometry) {
      const geometries = geometry.getGeometriesArray();
      for (let i = 0; i < geometries.length; ++i) {
        const segmentWriter = this.SEGMENT_WRITERS_[geometries[i].getType()];
        if (segmentWriter) {
          segmentWriter.call(this, feature, geometries[i]);
        }
      }
    }

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @param {import("../geom/LineString.js").default} geometry Geometry.
     * @private
     */
    writeLineStringGeometry_(feature, geometry) {
      const coordinates = geometry.getCoordinates();
      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
        const segment = coordinates.slice(i, i + 2);
        const segmentData = {
          feature: feature,
          segment: segment
        };
        this.rBush_.insert(boundingExtent(segment), segmentData);
      }
    }

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @param {import("../geom/MultiLineString.js").default} geometry Geometry.
     * @private
     */
    writeMultiLineStringGeometry_(feature, geometry) {
      const lines = geometry.getCoordinates();
      for (let j = 0, jj = lines.length; j < jj; ++j) {
        const coordinates = lines[j];
        for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
          const segment = coordinates.slice(i, i + 2);
          const segmentData = {
            feature: feature,
            segment: segment
          };
          this.rBush_.insert(boundingExtent(segment), segmentData);
        }
      }
    }

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @param {import("../geom/MultiPoint.js").default} geometry Geometry.
     * @private
     */
    writeMultiPointGeometry_(feature, geometry) {
      const points = geometry.getCoordinates();
      for (let i = 0, ii = points.length; i < ii; ++i) {
        const coordinates = points[i];
        const segmentData = {
          feature: feature,
          segment: [coordinates, coordinates]
        };
        this.rBush_.insert(geometry.getExtent(), segmentData);
      }
    }

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
     * @private
     */
    writeMultiPolygonGeometry_(feature, geometry) {
      const polygons = geometry.getCoordinates();
      for (let k = 0, kk = polygons.length; k < kk; ++k) {
        const rings = polygons[k];
        for (let j = 0, jj = rings.length; j < jj; ++j) {
          const coordinates = rings[j];
          for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
            const segment = coordinates.slice(i, i + 2);
            const segmentData = {
              feature: feature,
              segment: segment
            };
            this.rBush_.insert(boundingExtent(segment), segmentData);
          }
        }
      }
    }

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @param {import("../geom/Point.js").default} geometry Geometry.
     * @private
     */
    writePointGeometry_(feature, geometry) {
      const coordinates = geometry.getCoordinates();
      const segmentData = {
        feature: feature,
        segment: [coordinates, coordinates]
      };
      this.rBush_.insert(geometry.getExtent(), segmentData);
    }

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @param {import("../geom/Polygon.js").default} geometry Geometry.
     * @private
     */
    writePolygonGeometry_(feature, geometry) {
      const rings = geometry.getCoordinates();
      for (let j = 0, jj = rings.length; j < jj; ++j) {
        const coordinates = rings[j];
        for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
          const segment = coordinates.slice(i, i + 2);
          const segmentData = {
            feature: feature,
            segment: segment
          };
          this.rBush_.insert(boundingExtent(segment), segmentData);
        }
      }
    }
  }


  /**
   * Sort segments by distance, helper function
   * @param {SegmentData} a The first segment data.
   * @param {SegmentData} b The second segment data.
   * @return {number} The difference in distance.
   * @this {Snap}
   */
  function sortByDistance(a, b) {
    const deltaA = squaredDistanceToSegment(this.pixelCoordinate_, a.segment);
    const deltaB = squaredDistanceToSegment(this.pixelCoordinate_, b.segment);
    return deltaA - deltaB;
  }

  /**
   * @module ol/interaction/Translate
   */


  /**
   * @enum {string}
   */
  const TranslateEventType = {
    /**
     * Triggered upon feature translation start.
     * @event TranslateEvent#translatestart
     * @api
     */
    TRANSLATESTART: 'translatestart',
    /**
     * Triggered upon feature translation.
     * @event TranslateEvent#translating
     * @api
     */
    TRANSLATING: 'translating',
    /**
     * Triggered upon feature translation end.
     * @event TranslateEvent#translateend
     * @api
     */
    TRANSLATEEND: 'translateend'
  };

  /**
   * A function that takes an {@link module:ol/Feature} or
   * {@link module:ol/render/Feature} and an
   * {@link module:ol/layer/Layer} and returns `true` if the feature may be
   * translated or `false` otherwise.
   * @typedef {function(import("../Feature.js").FeatureLike, import("../layer/Layer.js").default):boolean} FilterFunction
   */

  /**
   * @typedef {Object} Options
   * @property {Collection<import("../Feature.js").default>} [features] Only features contained in this collection will be able to be translated. If
   * not specified, all features on the map will be able to be translated.
   * @property {Array<import("../layer/Layer.js").default>|function(import("../layer/Layer.js").default): boolean} [layers] A list of layers from which features should be
   * translated. Alternatively, a filter function can be provided. The
   * function will be called for each layer in the map and should return
   * `true` for layers that you want to be translatable. If the option is
   * absent, all visible layers will be considered translatable.
   * @property {FilterFunction} [filter] A function
   * that takes an {@link module:ol/Feature} and an
   * {@link module:ol/layer/Layer} and returns `true` if the feature may be
   * translated or `false` otherwise.
   * @property {number} [hitTolerance=0] Hit-detection tolerance. Pixels inside the radius around the given position
   * will be checked for features.
   */


  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/Translate~Translate} instances
   * are instances of this type.
   */
  class TranslateEvent extends Event {
    /**
     * @param {TranslateEventType} type Type.
     * @param {Collection<import("../Feature.js").default>} features The features translated.
     * @param {import("../coordinate.js").Coordinate} coordinate The event coordinate.
     */
    constructor(type, features, coordinate) {

      super(type);

      /**
       * The features being translated.
       * @type {Collection<import("../Feature.js").default>}
       * @api
       */
      this.features = features;

      /**
       * The coordinate of the drag event.
       * @const
       * @type {import("../coordinate.js").Coordinate}
       * @api
       */
      this.coordinate = coordinate;

    }

  }


  /**
   * @classdesc
   * Interaction for translating (moving) features.
   *
   * @fires TranslateEvent
   * @api
   */
  class Translate extends PointerInteraction {
    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {
      const options = opt_options ? opt_options : {};

      super(/** @type {import("./Pointer.js").Options} */ (options));

      /**
       * The last position we translated to.
       * @type {import("../coordinate.js").Coordinate}
       * @private
       */
      this.lastCoordinate_ = null;


      /**
       * @type {Collection<import("../Feature.js").default>}
       * @private
       */
      this.features_ = options.features !== undefined ? options.features : null;

      /** @type {function(import("../layer/Layer.js").default): boolean} */
      let layerFilter;
      if (options.layers) {
        if (typeof options.layers === 'function') {
          layerFilter = options.layers;
        } else {
          const layers = options.layers;
          layerFilter = function(layer) {
            return includes(layers, layer);
          };
        }
      } else {
        layerFilter = TRUE;
      }

      /**
       * @private
       * @type {function(import("../layer/Layer.js").default): boolean}
       */
      this.layerFilter_ = layerFilter;

      /**
       * @private
       * @type {FilterFunction}
       */
      this.filter_ = options.filter ? options.filter : TRUE;

      /**
       * @private
       * @type {number}
       */
      this.hitTolerance_ = options.hitTolerance ? options.hitTolerance : 0;

      /**
       * @type {import("../Feature.js").default}
       * @private
       */
      this.lastFeature_ = null;

      listen(this,
        getChangeEventType(InteractionProperty.ACTIVE),
        this.handleActiveChanged_, this);

    }

    /**
     * @inheritDoc
     */
    handleDownEvent(event) {
      this.lastFeature_ = this.featuresAtPixel_(event.pixel, event.map);
      if (!this.lastCoordinate_ && this.lastFeature_) {
        this.lastCoordinate_ = event.coordinate;
        this.handleMoveEvent(event);

        const features = this.features_ || new Collection([this.lastFeature_]);

        this.dispatchEvent(
          new TranslateEvent(
            TranslateEventType.TRANSLATESTART, features,
            event.coordinate));
        return true;
      }
      return false;
    }

    /**
     * @inheritDoc
     */
    handleUpEvent(event) {
      if (this.lastCoordinate_) {
        this.lastCoordinate_ = null;
        this.handleMoveEvent(event);

        const features = this.features_ || new Collection([this.lastFeature_]);

        this.dispatchEvent(
          new TranslateEvent(
            TranslateEventType.TRANSLATEEND, features,
            event.coordinate));
        return true;
      }
      return false;
    }

    /**
     * @inheritDoc
     */
    handleDragEvent(event) {
      if (this.lastCoordinate_) {
        const newCoordinate = event.coordinate;
        const deltaX = newCoordinate[0] - this.lastCoordinate_[0];
        const deltaY = newCoordinate[1] - this.lastCoordinate_[1];

        const features = this.features_ || new Collection([this.lastFeature_]);

        features.forEach(function(feature) {
          const geom = feature.getGeometry();
          geom.translate(deltaX, deltaY);
          feature.setGeometry(geom);
        });

        this.lastCoordinate_ = newCoordinate;
        this.dispatchEvent(
          new TranslateEvent(
            TranslateEventType.TRANSLATING, features,
            newCoordinate));
      }
    }

    /**
     * @inheritDoc
     */
    handleMoveEvent(event) {
      const elem = event.map.getViewport();

      // Change the cursor to grab/grabbing if hovering any of the features managed
      // by the interaction
      if (this.featuresAtPixel_(event.pixel, event.map)) {
        elem.classList.remove(this.lastCoordinate_ ? 'ol-grab' : 'ol-grabbing');
        elem.classList.add(this.lastCoordinate_ ? 'ol-grabbing' : 'ol-grab');
      } else {
        elem.classList.remove('ol-grab', 'ol-grabbing');
      }
    }

    /**
     * Tests to see if the given coordinates intersects any of our selected
     * features.
     * @param {import("../pixel.js").Pixel} pixel Pixel coordinate to test for intersection.
     * @param {import("../PluggableMap.js").default} map Map to test the intersection on.
     * @return {import("../Feature.js").default} Returns the feature found at the specified pixel
     * coordinates.
     * @private
     */
    featuresAtPixel_(pixel, map) {
      return map.forEachFeatureAtPixel(pixel,
        function(feature, layer) {
          if (this.filter_(feature, layer)) {
            if (!this.features_ || includes(this.features_.getArray(), feature)) {
              return feature;
            }
          }
        }.bind(this), {
          layerFilter: this.layerFilter_,
          hitTolerance: this.hitTolerance_
        });
    }

    /**
     * Returns the Hit-detection tolerance.
     * @returns {number} Hit tolerance in pixels.
     * @api
     */
    getHitTolerance() {
      return this.hitTolerance_;
    }

    /**
     * Hit-detection tolerance. Pixels inside the radius around the given position
     * will be checked for features.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @api
     */
    setHitTolerance(hitTolerance) {
      this.hitTolerance_ = hitTolerance;
    }

    /**
     * @inheritDoc
     */
    setMap(map) {
      const oldMap = this.getMap();
      super.setMap(map);
      this.updateState_(oldMap);
    }

    /**
     * @private
     */
    handleActiveChanged_() {
      this.updateState_(null);
    }

    /**
     * @param {import("../PluggableMap.js").default} oldMap Old map.
     * @private
     */
    updateState_(oldMap) {
      let map = this.getMap();
      const active = this.getActive();
      if (!map || !active) {
        map = map || oldMap;
        if (map) {
          const elem = map.getViewport();
          elem.classList.remove('ol-grab', 'ol-grabbing');
        }
      }
    }
  }

  /**
   * @module ol/interaction
   */


  /**
   * @typedef {Object} DefaultsOptions
   * @property {boolean} [altShiftDragRotate=true] Whether Alt-Shift-drag rotate is
   * desired.
   * @property {boolean} [onFocusOnly=false] Interact only when the map has the
   * focus. This affects the `MouseWheelZoom` and `DragPan` interactions and is
   * useful when page scroll is desired for maps that do not have the browser's
   * focus.
   * @property {boolean} [doubleClickZoom=true] Whether double click zoom is
   * desired.
   * @property {boolean} [keyboard=true] Whether keyboard interaction is desired.
   * @property {boolean} [mouseWheelZoom=true] Whether mousewheel zoom is desired.
   * @property {boolean} [shiftDragZoom=true] Whether Shift-drag zoom is desired.
   * @property {boolean} [dragPan=true] Whether drag pan is desired.
   * @property {boolean} [pinchRotate=true] Whether pinch rotate is desired.
   * @property {boolean} [pinchZoom=true] Whether pinch zoom is desired.
   * @property {number} [zoomDelta] Zoom level delta when using keyboard or double click zoom.
   * @property {number} [zoomDuration] Duration of the zoom animation in
   * milliseconds.
   */


  /**
   * Set of interactions included in maps by default. Specific interactions can be
   * excluded by setting the appropriate option to false in the constructor
   * options, but the order of the interactions is fixed.  If you want to specify
   * a different order for interactions, you will need to create your own
   * {@link module:ol/interaction/Interaction} instances and insert
   * them into a {@link module:ol/Collection} in the order you want
   * before creating your {@link module:ol/Map~Map} instance. Changing the order can
   * be of interest if the event propagation needs to be stopped at a point.
   * The default set of interactions, in sequence, is:
   * * {@link module:ol/interaction/DragRotate~DragRotate}
   * * {@link module:ol/interaction/DoubleClickZoom~DoubleClickZoom}
   * * {@link module:ol/interaction/DragPan~DragPan}
   * * {@link module:ol/interaction/PinchRotate~PinchRotate}
   * * {@link module:ol/interaction/PinchZoom~PinchZoom}
   * * {@link module:ol/interaction/KeyboardPan~KeyboardPan}
   * * {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}
   * * {@link module:ol/interaction/MouseWheelZoom~MouseWheelZoom}
   * * {@link module:ol/interaction/DragZoom~DragZoom}
   *
   * @param {DefaultsOptions=} opt_options Defaults options.
   * @return {import("./Collection.js").default<import("./interaction/Interaction.js").default>}
   * A collection of interactions to be used with the {@link module:ol/Map~Map}
   * constructor's `interactions` option.
   * @api
   */
  function defaults$1(opt_options) {

    const options = opt_options ? opt_options : {};

    const interactions = new Collection();

    const kinetic = new Kinetic(-0.005, 0.05, 100);

    const altShiftDragRotate = options.altShiftDragRotate !== undefined ?
      options.altShiftDragRotate : true;
    if (altShiftDragRotate) {
      interactions.push(new DragRotate());
    }

    const doubleClickZoom = options.doubleClickZoom !== undefined ?
      options.doubleClickZoom : true;
    if (doubleClickZoom) {
      interactions.push(new DoubleClickZoom({
        delta: options.zoomDelta,
        duration: options.zoomDuration
      }));
    }

    const dragPan = options.dragPan !== undefined ? options.dragPan : true;
    if (dragPan) {
      interactions.push(new DragPan({
        condition: options.onFocusOnly ? focus : undefined,
        kinetic: kinetic
      }));
    }

    const pinchRotate = options.pinchRotate !== undefined ? options.pinchRotate :
      true;
    if (pinchRotate) {
      interactions.push(new PinchRotate());
    }

    const pinchZoom = options.pinchZoom !== undefined ? options.pinchZoom : true;
    if (pinchZoom) {
      interactions.push(new PinchZoom({
        duration: options.zoomDuration
      }));
    }

    const keyboard = options.keyboard !== undefined ? options.keyboard : true;
    if (keyboard) {
      interactions.push(new KeyboardPan());
      interactions.push(new KeyboardZoom({
        delta: options.zoomDelta,
        duration: options.zoomDuration
      }));
    }

    const mouseWheelZoom = options.mouseWheelZoom !== undefined ?
      options.mouseWheelZoom : true;
    if (mouseWheelZoom) {
      interactions.push(new MouseWheelZoom({
        condition: options.onFocusOnly ? focus : undefined,
        duration: options.zoomDuration
      }));
    }

    const shiftDragZoom = options.shiftDragZoom !== undefined ?
      options.shiftDragZoom : true;
    if (shiftDragZoom) {
      interactions.push(new DragZoom({
        duration: options.zoomDuration
      }));
    }

    return interactions;

  }

  var interaction = /*#__PURE__*/Object.freeze({
    __proto__: null,
    defaults: defaults$1,
    DoubleClickZoom: DoubleClickZoom,
    DragAndDrop: DragAndDrop,
    DragBox: DragBox,
    DragPan: DragPan,
    DragRotate: DragRotate,
    DragRotateAndZoom: DragRotateAndZoom,
    DragZoom: DragZoom,
    Draw: Draw,
    Extent: Extent,
    Interaction: Interaction,
    KeyboardPan: KeyboardPan,
    KeyboardZoom: KeyboardZoom,
    Modify: Modify,
    MouseWheelZoom: MouseWheelZoom,
    PinchRotate: PinchRotate,
    PinchZoom: PinchZoom,
    Pointer: PointerInteraction,
    Select: Select,
    Snap: Snap,
    Translate: Translate
  });

  /**
   * @module ol/Map
   */

  /**
   * @classdesc
   * The map is the core component of OpenLayers. For a map to render, a view,
   * one or more layers, and a target container are needed:
   *
   *     import Map from 'ol/Map';
   *     import View from 'ol/View';
   *     import TileLayer from 'ol/layer/Tile';
   *     import OSM from 'ol/source/OSM';
   *
   *     var map = new Map({
   *       view: new View({
   *         center: [0, 0],
   *         zoom: 1
   *       }),
   *       layers: [
   *         new TileLayer({
   *           source: new OSM()
   *         })
   *       ],
   *       target: 'map'
   *     });
   *
   * The above snippet creates a map using a {@link module:ol/layer/Tile} to
   * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM
   * element with the id `map`.
   *
   * The constructor places a viewport container (with CSS class name
   * `ol-viewport`) in the target element (see `getViewport()`), and then two
   * further elements within the viewport: one with CSS class name
   * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with
   * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`
   * option of {@link module:ol/Overlay~Overlay} for the difference). The map
   * itself is placed in a further element within the viewport.
   *
   * Layers are stored as a {@link module:ol/Collection~Collection} in
   * layerGroups. A top-level group is provided by the library. This is what is
   * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the
   * options are added to this group, and `addLayer` and `removeLayer` change the
   * layer collection in the group. `getLayers` is a convenience function for
   * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~Group}
   * is a subclass of {@link module:ol/layer/Base}, so layers entered in the
   * options or added with `addLayer` can be groups, which can contain further
   * groups, and so on.
   *
   * @api
   */
  class Map extends PluggableMap {

    /**
     * @param {import("./PluggableMap.js").MapOptions} options Map options.
     */
    constructor(options) {
      options = assign({}, options);
      if (!options.controls) {
        options.controls = defaults();
      }
      if (!options.interactions) {
        options.interactions = defaults$1();
      }

      super(options);
    }

    createRenderer() {
      return new CompositeMapRenderer(this);
    }
  }

  /**
   * @module ol/tilecoord
   */


  /**
   * An array of three numbers representing the location of a tile in a tile
   * grid. The order is `z` (zoom level), `x` (column), and `y` (row).
   * @typedef {Array<number>} TileCoord
   * @api
   */


  /**
   * @param {number} z Z.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {TileCoord=} opt_tileCoord Tile coordinate.
   * @return {TileCoord} Tile coordinate.
   */
  function createOrUpdate$1(z, x, y, opt_tileCoord) {
    if (opt_tileCoord !== undefined) {
      opt_tileCoord[0] = z;
      opt_tileCoord[1] = x;
      opt_tileCoord[2] = y;
      return opt_tileCoord;
    } else {
      return [z, x, y];
    }
  }


  /**
   * @param {number} z Z.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {string} Key.
   */
  function getKeyZXY(z, x, y) {
    return z + '/' + x + '/' + y;
  }


  /**
   * Get the key for a tile coord.
   * @param {TileCoord} tileCoord The tile coord.
   * @return {string} Key.
   */
  function getKey$1(tileCoord) {
    return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);
  }


  /**
   * Get a tile coord given a key.
   * @param {string} key The tile coord key.
   * @return {TileCoord} The tile coord.
   */
  function fromKey(key) {
    return key.split('/').map(Number);
  }


  /**
   * @param {TileCoord} tileCoord Tile coord.
   * @return {number} Hash.
   */
  function hash(tileCoord) {
    return (tileCoord[1] << tileCoord[0]) + tileCoord[2];
  }


  /**
   * @param {TileCoord} tileCoord Tile coordinate.
   * @param {!import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
   * @return {boolean} Tile coordinate is within extent and zoom level range.
   */
  function withinExtentAndZ(tileCoord, tileGrid) {
    const z = tileCoord[0];
    const x = tileCoord[1];
    const y = tileCoord[2];

    if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {
      return false;
    }
    const extent = tileGrid.getExtent();
    let tileRange;
    if (!extent) {
      tileRange = tileGrid.getFullTileRange(z);
    } else {
      tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);
    }
    if (!tileRange) {
      return true;
    } else {
      return tileRange.containsXY(x, y);
    }
  }

  /**
   * @module ol/TileCache
   */

  class TileCache extends LRUCache {

    /**
     * @param {number=} opt_highWaterMark High water mark.
     */
    constructor(opt_highWaterMark) {

      super(opt_highWaterMark);

    }

    /**
     * @param {!Object<string, import("./TileRange.js").default>} usedTiles Used tiles.
     */
    expireCache(usedTiles) {
      while (this.canExpireCache()) {
        const tile = this.peekLast();
        if (tile.getKey() in usedTiles) {
          break;
        } else {
          this.pop().dispose();
        }
      }
    }

    /**
     * Prune all tiles from the cache that don't have the same z as the newest tile.
     */
    pruneExceptNewestZ() {
      if (this.getCount() === 0) {
        return;
      }
      const key = this.peekFirstKey();
      const tileCoord = fromKey(key);
      const z = tileCoord[0];
      this.forEach(function(tile) {
        if (tile.tileCoord[0] !== z) {
          this.remove(getKey$1(tile.tileCoord));
          tile.dispose();
        }
      }.bind(this));
    }
  }

  /**
   * @module ol/TileRange
   */

  /**
   * A representation of a contiguous block of tiles.  A tile range is specified
   * by its min/max tile coordinates and is inclusive of coordinates.
   */
  class TileRange {

    /**
     * @param {number} minX Minimum X.
     * @param {number} maxX Maximum X.
     * @param {number} minY Minimum Y.
     * @param {number} maxY Maximum Y.
     */
    constructor(minX, maxX, minY, maxY) {

      /**
       * @type {number}
       */
      this.minX = minX;

      /**
       * @type {number}
       */
      this.maxX = maxX;

      /**
       * @type {number}
       */
      this.minY = minY;

      /**
       * @type {number}
       */
      this.maxY = maxY;

    }

    /**
     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @return {boolean} Contains tile coordinate.
     */
    contains(tileCoord) {
      return this.containsXY(tileCoord[1], tileCoord[2]);
    }

    /**
     * @param {TileRange} tileRange Tile range.
     * @return {boolean} Contains.
     */
    containsTileRange(tileRange) {
      return this.minX <= tileRange.minX && tileRange.maxX <= this.maxX &&
         this.minY <= tileRange.minY && tileRange.maxY <= this.maxY;
    }

    /**
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @return {boolean} Contains coordinate.
     */
    containsXY(x, y) {
      return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;
    }

    /**
     * @param {TileRange} tileRange Tile range.
     * @return {boolean} Equals.
     */
    equals(tileRange) {
      return this.minX == tileRange.minX && this.minY == tileRange.minY &&
         this.maxX == tileRange.maxX && this.maxY == tileRange.maxY;
    }

    /**
     * @param {TileRange} tileRange Tile range.
     */
    extend(tileRange) {
      if (tileRange.minX < this.minX) {
        this.minX = tileRange.minX;
      }
      if (tileRange.maxX > this.maxX) {
        this.maxX = tileRange.maxX;
      }
      if (tileRange.minY < this.minY) {
        this.minY = tileRange.minY;
      }
      if (tileRange.maxY > this.maxY) {
        this.maxY = tileRange.maxY;
      }
    }

    /**
     * @return {number} Height.
     */
    getHeight() {
      return this.maxY - this.minY + 1;
    }

    /**
     * @return {import("./size.js").Size} Size.
     */
    getSize() {
      return [this.getWidth(), this.getHeight()];
    }

    /**
     * @return {number} Width.
     */
    getWidth() {
      return this.maxX - this.minX + 1;
    }

    /**
     * @param {TileRange} tileRange Tile range.
     * @return {boolean} Intersects.
     */
    intersects(tileRange) {
      return this.minX <= tileRange.maxX &&
         this.maxX >= tileRange.minX &&
         this.minY <= tileRange.maxY &&
         this.maxY >= tileRange.minY;
    }
  }


  /**
   * @param {number} minX Minimum X.
   * @param {number} maxX Maximum X.
   * @param {number} minY Minimum Y.
   * @param {number} maxY Maximum Y.
   * @param {TileRange=} tileRange TileRange.
   * @return {TileRange} Tile range.
   */
  function createOrUpdate$2(minX, maxX, minY, maxY, tileRange) {
    if (tileRange !== undefined) {
      tileRange.minX = minX;
      tileRange.maxX = maxX;
      tileRange.minY = minY;
      tileRange.maxY = maxY;
      return tileRange;
    } else {
      return new TileRange(minX, maxX, minY, maxY);
    }
  }

  /**
   * @module ol/VectorRenderTile
   */


  /**
   * @typedef {Object} ReplayState
   * @property {boolean} dirty
   * @property {null|import("./render.js").OrderFunction} renderedRenderOrder
   * @property {number} renderedTileRevision
   * @property {number} renderedResolution
   * @property {number} renderedRevision
   * @property {number} renderedZ
   * @property {number} renderedTileResolution
   * @property {number} renderedTileZ
   */


  class VectorRenderTile extends Tile {

    /**
     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {TileState} state State.
     * @param {import("./tilecoord.js").TileCoord} urlTileCoord Wrapped tile coordinate for source urls.
     * @param {import("./tilegrid/TileGrid.js").default} sourceTileGrid Tile grid of the source.
     * @param {function(VectorRenderTile):Array<import("./VectorTile").default>} getSourceTiles Function
     * to get an source tiles for this tile.
     * @param {function(VectorRenderTile):void} removeSourceTiles Function to remove this tile from its
     * source tiles's consumer count.
     */
    constructor(tileCoord, state, urlTileCoord, sourceTileGrid, getSourceTiles, removeSourceTiles) {

      super(tileCoord, state, {transition: 0});

      /**
       * @private
       * @type {!Object<string, CanvasRenderingContext2D>}
       */
      this.context_ = {};

      /**
       * Executor groups by layer uid. Entries are read/written by the renderer.
       * @type {Object<string, Array<import("./render/canvas/ExecutorGroup.js").default>>}
       */
      this.executorGroups = {};

      /**
       * Number of loading source tiles. Read/written by the source.
       * @type {number}
       */
      this.loadingSourceTiles = 0;

      /**
       * Tile keys of error source tiles. Read/written by the source.
       * @type {Object<string, boolean>}
       */
      this.errorSourceTileKeys = {};

      /**
       * @private
       * @type {!Object<string, ReplayState>}
       */
      this.replayState_ = {};

      /**
       * @type {number}
       */
      this.wantedResolution;

      /**
       * @type {!function(import("./VectorRenderTile.js").default):Array<import("./VectorTile.js").default>}
       */
      this.getSourceTiles_ = getSourceTiles;

      /**
       * @type {!function(import("./VectorRenderTile.js").default):void}
       */
      this.removeSourceTiles_ = removeSourceTiles;

      /**
       * @private
       * @type {import("./tilegrid/TileGrid.js").default}
       */
      this.sourceTileGrid_ = sourceTileGrid;

      /**
       * z of the source tiles of the last getSourceTiles call.
       * @type {number}
       */
      this.sourceZ = -1;

      /**
       * True when all tiles for this tile's nominal resolution are available.
       * @type {boolean}
       */
      this.hifi = false;

      /**
       * @type {import("./tilecoord.js").TileCoord}
       */
      this.wrappedTileCoord = urlTileCoord;
    }

    /**
     * @inheritDoc
     */
    disposeInternal() {
      this.removeSourceTiles_(this);
      for (const key in this.context_) {
        const canvas = this.context_[key].canvas;
        canvas.width = canvas.height = 0;
      }
      for (const key in this.executorGroups) {
        const executorGroups = this.executorGroups[key];
        for (let i = 0, ii = executorGroups.length; i < ii; ++i) {
          executorGroups[i].disposeInternal();
        }
      }
      this.setState(TileState.ABORT);
      super.disposeInternal();
    }

    /**
     * @param {import("./layer/Layer.js").default} layer Layer.
     * @return {CanvasRenderingContext2D} The rendering context.
     */
    getContext(layer) {
      const key = getUid(layer);
      if (!(key in this.context_)) {
        this.context_[key] = createCanvasContext2D();
      }
      return this.context_[key];
    }

    /**
     * @param {import("./layer/Layer.js").default} layer Layer.
     * @return {boolean} Tile has a rendering context for the given layer.
     */
    hasContext(layer) {
      return getUid(layer) in this.context_;
    }

    /**
     * Get the Canvas for this tile.
     * @param {import("./layer/Layer.js").default} layer Layer.
     * @return {HTMLCanvasElement} Canvas.
     */
    getImage(layer) {
      return this.hasContext(layer) ? this.getContext(layer).canvas : null;
    }

    /**
     * @param {import("./layer/Layer.js").default} layer Layer.
     * @return {ReplayState} The replay state.
     */
    getReplayState(layer) {
      const key = getUid(layer);
      if (!(key in this.replayState_)) {
        this.replayState_[key] = {
          dirty: false,
          renderedRenderOrder: null,
          renderedResolution: NaN,
          renderedRevision: -1,
          renderedTileResolution: NaN,
          renderedTileRevision: -1,
          renderedZ: -1,
          renderedTileZ: -1
        };
      }
      return this.replayState_[key];
    }

    /**
     * @inheritDoc
     */
    load() {
      this.getSourceTiles_(this);
    }
  }

  /**
   * @module ol/VectorTile
   */

  class VectorTile extends Tile {

    /**
     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {TileState} state State.
     * @param {string} src Data source url.
     * @param {import("./format/Feature.js").default} format Feature format.
     * @param {import("./Tile.js").LoadFunction} tileLoadFunction Tile load function.
     * @param {import("./Tile.js").Options=} opt_options Tile options.
     */
    constructor(tileCoord, state, src, format, tileLoadFunction, opt_options) {

      super(tileCoord, state, opt_options);

      /**
       * @type {number}
       */
      this.consumers = 0;

      /**
       * Extent of this tile; set by the source.
       * @type {import("./extent.js").Extent}
       */
      this.extent = null;

      /**
       * @private
       * @type {import("./format/Feature.js").default}
       */
      this.format_ = format;

      /**
       * @private
       * @type {Array<import("./Feature.js").default>}
       */
      this.features_ = null;

      /**
       * @private
       * @type {import("./featureloader.js").FeatureLoader}
       */
      this.loader_;

      /**
       * Feature projection of this tile; set by the source.
       * @type {import("./proj/Projection.js").default}
       */
      this.projection = null;

      /**
       * Resolution of this tile; set by the source.
       * @type {number}
       */
      this.resolution;

      /**
       * @private
       * @type {import("./Tile.js").LoadFunction}
       */
      this.tileLoadFunction_ = tileLoadFunction;

      /**
       * @private
       * @type {string}
       */
      this.url_ = src;

    }

    /**
     * @inheritDoc
     */
    disposeInternal() {
      this.setState(TileState.ABORT);
      super.disposeInternal();
    }

    /**
     * Get the feature format assigned for reading this tile's features.
     * @return {import("./format/Feature.js").default} Feature format.
     * @api
     */
    getFormat() {
      return this.format_;
    }

    /**
     * Get the features for this tile. Geometries will be in the view projection.
     * @return {Array<import("./Feature.js").FeatureLike>} Features.
     * @api
     */
    getFeatures() {
      return this.features_;
    }

    /**
     * @inheritDoc
     */
    getKey() {
      return this.url_;
    }

    /**
     * @inheritDoc
     */
    load() {
      if (this.state == TileState.IDLE) {
        this.setState(TileState.LOADING);
        this.tileLoadFunction_(this, this.url_);
        this.loader_(this.extent, this.resolution, this.projection);
      }
    }

    /**
     * Handler for successful tile load.
     * @param {Array<import("./Feature.js").default>} features The loaded features.
     * @param {import("./proj/Projection.js").default} dataProjection Data projection.
     */
    onLoad(features, dataProjection) {
      this.setFeatures(features);
    }

    /**
     * Handler for tile load errors.
     */
    onError() {
      this.setState(TileState.ERROR);
    }

    /**
     * Function for use in an {@link module:ol/source/VectorTile~VectorTile}'s `tileLoadFunction`.
     * Sets the features for the tile.
     * @param {Array<import("./Feature.js").default>} features Features.
     * @api
     */
    setFeatures(features) {
      this.features_ = features;
      this.setState(TileState.LOADED);
    }

    /**
     * Set the feature loader for reading this tile's features.
     * @param {import("./featureloader.js").FeatureLoader} loader Feature loader.
     * @api
     */
    setLoader(loader) {
      this.loader_ = loader;
    }
  }

  /**
   * @module ol/format/Feature
   */


  /**
   * @typedef {Object} ReadOptions
   * @property {import("../proj.js").ProjectionLike} [dataProjection] Projection of the data we are reading.
   * If not provided, the projection will be derived from the data (where possible) or
   * the `dataProjection` of the format is assigned (where set). If the projection
   * can not be derived from the data and if no `dataProjection` is set for a format,
   * the features will not be reprojected.
   * @property {import("../extent.js").Extent} [extent] Tile extent in map units of the tile being read.
   * This is only required when reading data with tile pixels as geometry units. When configured,
   * a `dataProjection` with `TILE_PIXELS` as `units` and the tile's pixel extent as `extent` needs to be
   * provided.
   * @property {import("../proj.js").ProjectionLike} [featureProjection] Projection of the feature geometries
   * created by the format reader. If not provided, features will be returned in the
   * `dataProjection`.
   */


  /**
   * @typedef {Object} WriteOptions
   * @property {import("../proj.js").ProjectionLike} [dataProjection] Projection of the data we are writing.
   * If not provided, the `dataProjection` of the format is assigned (where set).
   * If no `dataProjection` is set for a format, the features will be returned
   * in the `featureProjection`.
   * @property {import("../proj.js").ProjectionLike} [featureProjection] Projection of the feature geometries
   * that will be serialized by the format writer. If not provided, geometries are assumed
   * to be in the `dataProjection` if that is set; in other words, they are not transformed.
   * @property {boolean} [rightHanded] When writing geometries, follow the right-hand
   * rule for linear ring orientation.  This means that polygons will have counter-clockwise
   * exterior rings and clockwise interior rings.  By default, coordinates are serialized
   * as they are provided at construction.  If `true`, the right-hand rule will
   * be applied.  If `false`, the left-hand rule will be applied (clockwise for
   * exterior and counter-clockwise for interior rings).  Note that not all
   * formats support this.  The GeoJSON format does use this property when writing
   * geometries.
   * @property {number} [decimals] Maximum number of decimal places for coordinates.
   * Coordinates are stored internally as floats, but floating-point arithmetic can create
   * coordinates with a large number of decimal places, not generally wanted on output.
   * Set a number here to round coordinates. Can also be used to ensure that
   * coordinates read in can be written back out with the same number of decimals.
   * Default is no rounding.
   */


  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for feature formats.
   * {FeatureFormat} subclasses provide the ability to decode and encode
   * {@link module:ol/Feature~Feature} objects from a variety of commonly used geospatial
   * file formats.  See the documentation for each format for more details.
   *
   * @abstract
   * @api
   */
  class FeatureFormat {
    constructor() {

      /**
       * @protected
       * @type {import("../proj/Projection.js").default}
       */
      this.dataProjection = null;

      /**
       * @protected
       * @type {import("../proj/Projection.js").default}
       */
      this.defaultFeatureProjection = null;

    }

    /**
     * Adds the data projection to the read options.
     * @param {Document|Node|Object|string} source Source.
     * @param {ReadOptions=} opt_options Options.
     * @return {ReadOptions|undefined} Options.
     * @protected
     */
    getReadOptions(source, opt_options) {
      let options;
      if (opt_options) {
        let dataProjection = opt_options.dataProjection ?
          get$2(opt_options.dataProjection) : this.readProjection(source);
        if (opt_options.extent &&
            dataProjection && dataProjection.getUnits() === Units.TILE_PIXELS) {
          dataProjection = get$2(dataProjection);
          dataProjection.setWorldExtent(opt_options.extent);
        }
        options = {
          dataProjection: dataProjection,
          featureProjection: opt_options.featureProjection
        };
      }
      return this.adaptOptions(options);
    }

    /**
     * Sets the `dataProjection` on the options, if no `dataProjection`
     * is set.
     * @param {WriteOptions|ReadOptions|undefined} options
     *     Options.
     * @protected
     * @return {WriteOptions|ReadOptions|undefined}
     *     Updated options.
     */
    adaptOptions(options) {
      return assign({
        dataProjection: this.dataProjection,
        featureProjection: this.defaultFeatureProjection
      }, options);
    }

    /**
     * @abstract
     * @return {import("./FormatType.js").default} Format.
     */
    getType() {
      return abstract();
    }

    /**
     * Read a single feature from a source.
     *
     * @abstract
     * @param {Document|Node|Object|string} source Source.
     * @param {ReadOptions=} opt_options Read options.
     * @return {import("../Feature.js").FeatureLike} Feature.
     */
    readFeature(source, opt_options) {
      return abstract();
    }

    /**
     * Read all features from a source.
     *
     * @abstract
     * @param {Document|Node|ArrayBuffer|Object|string} source Source.
     * @param {ReadOptions=} opt_options Read options.
     * @return {Array<import("../Feature.js").FeatureLike>} Features.
     */
    readFeatures(source, opt_options) {
      return abstract();
    }

    /**
     * Read a single geometry from a source.
     *
     * @abstract
     * @param {Document|Node|Object|string} source Source.
     * @param {ReadOptions=} opt_options Read options.
     * @return {import("../geom/Geometry.js").default} Geometry.
     */
    readGeometry(source, opt_options) {
      return abstract();
    }

    /**
     * Read the projection from a source.
     *
     * @abstract
     * @param {Document|Node|Object|string} source Source.
     * @return {import("../proj/Projection.js").default} Projection.
     */
    readProjection(source) {
      return abstract();
    }

    /**
     * Encode a feature in this format.
     *
     * @abstract
     * @param {import("../Feature.js").default} feature Feature.
     * @param {WriteOptions=} opt_options Write options.
     * @return {string} Result.
     */
    writeFeature(feature, opt_options) {
      return abstract();
    }

    /**
     * Encode an array of features in this format.
     *
     * @abstract
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {WriteOptions=} opt_options Write options.
     * @return {string} Result.
     */
    writeFeatures(features, opt_options) {
      return abstract();
    }

    /**
     * Write a single geometry in this format.
     *
     * @abstract
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {WriteOptions=} opt_options Write options.
     * @return {string} Result.
     */
    writeGeometry(geometry, opt_options) {
      return abstract();
    }
  }

  /**
   * @param {import("../geom/Geometry.js").default} geometry Geometry.
   * @param {boolean} write Set to true for writing, false for reading.
   * @param {(WriteOptions|ReadOptions)=} opt_options Options.
   * @return {import("../geom/Geometry.js").default} Transformed geometry.
   */
  function transformGeometryWithOptions(geometry, write, opt_options) {
    const featureProjection = opt_options ? get$2(opt_options.featureProjection) : null;
    const dataProjection = opt_options ? get$2(opt_options.dataProjection) : null;

    let transformed;
    if (featureProjection && dataProjection && !equivalent(featureProjection, dataProjection)) {
      transformed = (write ? geometry.clone() : geometry).transform(
        write ? featureProjection : dataProjection,
        write ? dataProjection : featureProjection);
    } else {
      transformed = geometry;
    }
    if (write && opt_options && /** @type {WriteOptions} */ (opt_options).decimals !== undefined) {
      const power = Math.pow(10, /** @type {WriteOptions} */ (opt_options).decimals);
      // if decimals option on write, round each coordinate appropriately
      /**
       * @param {Array<number>} coordinates Coordinates.
       * @return {Array<number>} Transformed coordinates.
       */
      const transform = function(coordinates) {
        for (let i = 0, ii = coordinates.length; i < ii; ++i) {
          coordinates[i] = Math.round(coordinates[i] * power) / power;
        }
        return coordinates;
      };
      if (transformed === geometry) {
        transformed = geometry.clone();
      }
      transformed.applyTransform(transform);
    }
    return transformed;
  }


  /**
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {ReadOptions=} opt_options Read options.
   * @return {import("../extent.js").Extent} Transformed extent.
   */
  function transformExtentWithOptions(extent, opt_options) {
    const featureProjection = opt_options ? get$2(opt_options.featureProjection) : null;
    const dataProjection = opt_options ? get$2(opt_options.dataProjection) : null;

    if (featureProjection && dataProjection && !equivalent(featureProjection, dataProjection)) {
      return transformExtent(extent, dataProjection, featureProjection);
    } else {
      return extent;
    }
  }

  /**
   * @module ol/format/JSONFeature
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for JSON feature formats.
   *
   * @abstract
   */
  class JSONFeature extends FeatureFormat {
    constructor() {
      super();
    }

    /**
     * @inheritDoc
     */
    getType() {
      return FormatType.JSON;
    }

    /**
     * Read a feature.  Only works for a single feature. Use `readFeatures` to
     * read a feature collection.
     *
     * @param {ArrayBuffer|Document|Node|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
     * @return {import("../Feature.js").default} Feature.
     * @api
     */
    readFeature(source, opt_options) {
      return this.readFeatureFromObject(
        getObject(source), this.getReadOptions(source, opt_options));
    }

    /**
     * Read all features.  Works with both a single feature and a feature
     * collection.
     *
     * @param {ArrayBuffer|Document|Node|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
     * @return {Array<import("../Feature.js").default>} Features.
     * @api
     */
    readFeatures(source, opt_options) {
      return this.readFeaturesFromObject(
        getObject(source), this.getReadOptions(source, opt_options));
    }

    /**
     * @abstract
     * @param {Object} object Object.
     * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
     * @protected
     * @return {import("../Feature.js").default} Feature.
     */
    readFeatureFromObject(object, opt_options) {
      return abstract();
    }

    /**
     * @abstract
     * @param {Object} object Object.
     * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
     * @protected
     * @return {Array<import("../Feature.js").default>} Features.
     */
    readFeaturesFromObject(object, opt_options) {
      return abstract();
    }

    /**
     * Read a geometry.
     *
     * @param {ArrayBuffer|Document|Node|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
     * @return {import("../geom/Geometry.js").default} Geometry.
     * @api
     */
    readGeometry(source, opt_options) {
      return this.readGeometryFromObject(
        getObject(source), this.getReadOptions(source, opt_options));
    }

    /**
     * @abstract
     * @param {Object} object Object.
     * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
     * @protected
     * @return {import("../geom/Geometry.js").default} Geometry.
     */
    readGeometryFromObject(object, opt_options) {
      return abstract();
    }

    /**
     * Read the projection.
     *
     * @param {ArrayBuffer|Document|Node|Object|string} source Source.
     * @return {import("../proj/Projection.js").default} Projection.
     * @api
     */
    readProjection(source) {
      return this.readProjectionFromObject(getObject(source));
    }

    /**
     * @abstract
     * @param {Object} object Object.
     * @protected
     * @return {import("../proj/Projection.js").default} Projection.
     */
    readProjectionFromObject(object) {
      return abstract();
    }

    /**
     * Encode a feature as string.
     *
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {string} Encoded feature.
     * @api
     */
    writeFeature(feature, opt_options) {
      return JSON.stringify(this.writeFeatureObject(feature, opt_options));
    }

    /**
     * @abstract
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {Object} Object.
     */
    writeFeatureObject(feature, opt_options) {
      return abstract();
    }

    /**
     * Encode an array of features as string.
     *
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {string} Encoded features.
     * @api
     */
    writeFeatures(features, opt_options) {
      return JSON.stringify(this.writeFeaturesObject(features, opt_options));
    }

    /**
     * @abstract
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {Object} Object.
     */
    writeFeaturesObject(features, opt_options) {
      return abstract();
    }

    /**
     * Encode a geometry as string.
     *
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {string} Encoded geometry.
     * @api
     */
    writeGeometry(geometry, opt_options) {
      return JSON.stringify(this.writeGeometryObject(geometry, opt_options));
    }

    /**
     * @abstract
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {Object} Object.
     */
    writeGeometryObject(geometry, opt_options) {
      return abstract();
    }
  }


  /**
   * @param {Document|Node|Object|string} source Source.
   * @return {Object} Object.
   */
  function getObject(source) {
    if (typeof source === 'string') {
      const object = JSON.parse(source);
      return object ? /** @type {Object} */ (object) : null;
    } else if (source !== null) {
      return source;
    } else {
      return null;
    }
  }

  /**
   * @module ol/format/EsriJSON
   */

  /**
   * @typedef {import("arcgis-rest-api").Feature} EsriJSONFeature
   * @typedef {import("arcgis-rest-api").FeatureSet} EsriJSONFeatureSet
   * @typedef {import("arcgis-rest-api").Geometry} EsriJSONGeometry
   * @typedef {import("arcgis-rest-api").Point} EsriJSONPoint
   * @typedef {import("arcgis-rest-api").Polyline} EsriJSONPolyline
   * @typedef {import("arcgis-rest-api").Polygon} EsriJSONPolygon
   * @typedef {import("arcgis-rest-api").Multipoint} EsriJSONMultipoint
   * @typedef {import("arcgis-rest-api").HasZM} EsriJSONHasZM
   * @typedef {import("arcgis-rest-api").Position} EsriJSONPosition
   * @typedef {import("arcgis-rest-api").SpatialReferenceWkid} EsriJSONSpatialReferenceWkid
   */


  /**
   * @typedef {Object} EsriJSONMultiPolygon
   * @property {Array<Array<Array<Array<number>>>>} rings Rings for the MultiPolygon.
   * @property {boolean} [hasM] If the polygon coordinates have an M value.
   * @property {boolean} [hasZ] If the polygon coordinates have a Z value.
   * @property {EsriJSONSpatialReferenceWkid} [spatialReference] The coordinate reference system.
   */


  /**
   * @const
   * @type {Object<import("../geom/GeometryType.js").default, function(EsriJSONGeometry): import("../geom/Geometry.js").default>}
   */
  const GEOMETRY_READERS = {};
  GEOMETRY_READERS[GeometryType.POINT] = readPointGeometry;
  GEOMETRY_READERS[GeometryType.LINE_STRING] = readLineStringGeometry;
  GEOMETRY_READERS[GeometryType.POLYGON] = readPolygonGeometry;
  GEOMETRY_READERS[GeometryType.MULTI_POINT] = readMultiPointGeometry;
  GEOMETRY_READERS[GeometryType.MULTI_LINE_STRING] = readMultiLineStringGeometry;
  GEOMETRY_READERS[GeometryType.MULTI_POLYGON] = readMultiPolygonGeometry;


  /**
   * @const
   * @type {Object<string, function(import("../geom/Geometry.js").default, import("./Feature.js").WriteOptions=): (EsriJSONGeometry)>}
   */
  const GEOMETRY_WRITERS = {};
  GEOMETRY_WRITERS[GeometryType.POINT] = writePointGeometry;
  GEOMETRY_WRITERS[GeometryType.LINE_STRING] = writeLineStringGeometry;
  GEOMETRY_WRITERS[GeometryType.POLYGON] = writePolygonGeometry;
  GEOMETRY_WRITERS[GeometryType.MULTI_POINT] = writeMultiPointGeometry;
  GEOMETRY_WRITERS[GeometryType.MULTI_LINE_STRING] = writeMultiLineStringGeometry;
  GEOMETRY_WRITERS[GeometryType.MULTI_POLYGON] = writeMultiPolygonGeometry;


  /**
   * @typedef {Object} Options
   * @property {string} [geometryName] Geometry name to use when creating features.
   */


  /**
   * @classdesc
   * Feature format for reading and writing data in the EsriJSON format.
   *
   * @api
   */
  class EsriJSON extends JSONFeature {

    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {

      const options = opt_options ? opt_options : {};

      super();

      /**
       * Name of the geometry attribute for features.
       * @type {string|undefined}
       * @private
       */
      this.geometryName_ = options.geometryName;

    }

    /**
     * @inheritDoc
     */
    readFeatureFromObject(object, opt_options) {
      const esriJSONFeature = /** @type {EsriJSONFeature} */ (object);
      const geometry = readGeometry(esriJSONFeature.geometry, opt_options);
      const feature = new Feature();
      if (this.geometryName_) {
        feature.setGeometryName(this.geometryName_);
      }
      feature.setGeometry(geometry);
      if (opt_options && opt_options.idField &&
        esriJSONFeature.attributes[opt_options.idField]) {
        feature.setId(/** @type {number} */(esriJSONFeature.attributes[opt_options.idField]));
      }
      if (esriJSONFeature.attributes) {
        feature.setProperties(esriJSONFeature.attributes, true);
      }
      return feature;
    }

    /**
     * @inheritDoc
     */
    readFeaturesFromObject(object, opt_options) {
      const options = opt_options ? opt_options : {};
      if (object['features']) {
        const esriJSONFeatureSet = /** @type {EsriJSONFeatureSet} */ (object);
        /** @type {Array<import("../Feature.js").default>} */
        const features = [];
        const esriJSONFeatures = esriJSONFeatureSet.features;
        options.idField = object.objectIdFieldName;
        for (let i = 0, ii = esriJSONFeatures.length; i < ii; ++i) {
          features.push(this.readFeatureFromObject(esriJSONFeatures[i], options));
        }
        return features;
      } else {
        return [this.readFeatureFromObject(object, options)];
      }
    }

    /**
     * @inheritDoc
     */
    readGeometryFromObject(object, opt_options) {
      return readGeometry(/** @type {EsriJSONGeometry} */(object), opt_options);
    }

    /**
     * @inheritDoc
     */
    readProjectionFromObject(object) {
      if (object['spatialReference'] && object['spatialReference']['wkid'] !== undefined) {
        const spatialReference = /** @type {EsriJSONSpatialReferenceWkid} */ (object['spatialReference']);
        const crs = spatialReference.wkid;
        return get$2('EPSG:' + crs);
      } else {
        return null;
      }
    }

    /**
     * Encode a geometry as a EsriJSON object.
     *
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {EsriJSONGeometry} Object.
     * @override
     * @api
     */
    writeGeometryObject(geometry, opt_options) {
      return writeGeometry(geometry, this.adaptOptions(opt_options));
    }

    /**
     * Encode a feature as a esriJSON Feature object.
     *
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {Object} Object.
     * @override
     * @api
     */
    writeFeatureObject(feature, opt_options) {
      opt_options = this.adaptOptions(opt_options);
      const object = {};
      const geometry = feature.getGeometry();
      if (geometry) {
        object['geometry'] = writeGeometry(geometry, opt_options);
        if (opt_options && opt_options.featureProjection) {
          object['geometry']['spatialReference'] = /** @type {EsriJSONSpatialReferenceWkid} */({
            wkid: Number(get$2(opt_options.featureProjection).getCode().split(':').pop())
          });
        }
      }
      const properties = feature.getProperties();
      delete properties[feature.getGeometryName()];
      if (!isEmpty(properties)) {
        object['attributes'] = properties;
      } else {
        object['attributes'] = {};
      }
      return object;
    }

    /**
     * Encode an array of features as a EsriJSON object.
     *
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {EsriJSONFeatureSet} EsriJSON Object.
     * @override
     * @api
     */
    writeFeaturesObject(features, opt_options) {
      opt_options = this.adaptOptions(opt_options);
      const objects = [];
      for (let i = 0, ii = features.length; i < ii; ++i) {
        objects.push(this.writeFeatureObject(features[i], opt_options));
      }
      return {
        'features': objects
      };
    }
  }


  /**
   * @param {EsriJSONGeometry} object Object.
   * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
   * @return {import("../geom/Geometry.js").default} Geometry.
   */
  function readGeometry(object, opt_options) {
    if (!object) {
      return null;
    }
    /** @type {import("../geom/GeometryType.js").default} */
    let type;
    if (typeof object['x'] === 'number' && typeof object['y'] === 'number') {
      type = GeometryType.POINT;
    } else if (object['points']) {
      type = GeometryType.MULTI_POINT;
    } else if (object['paths']) {
      const esriJSONPolyline = /** @type {EsriJSONPolyline} */ (object);
      if (esriJSONPolyline.paths.length === 1) {
        type = GeometryType.LINE_STRING;
      } else {
        type = GeometryType.MULTI_LINE_STRING;
      }
    } else if (object['rings']) {
      const esriJSONPolygon = /** @type {EsriJSONPolygon} */ (object);
      const layout = getGeometryLayout(esriJSONPolygon);
      const rings = convertRings(esriJSONPolygon.rings, layout);
      if (rings.length === 1) {
        type = GeometryType.POLYGON;
        object['rings'] = rings[0];
      } else {
        type = GeometryType.MULTI_POLYGON;
        object['rings'] = rings;
      }
    }
    const geometryReader = GEOMETRY_READERS[type];
    return transformGeometryWithOptions(geometryReader(object), false, opt_options);
  }


  /**
   * Determines inner and outer rings.
   * Checks if any polygons in this array contain any other polygons in this
   * array. It is used for checking for holes.
   * Logic inspired by: https://github.com/Esri/terraformer-arcgis-parser
   * @param {Array<!Array<!Array<number>>>} rings Rings.
   * @param {import("../geom/GeometryLayout.js").default} layout Geometry layout.
   * @return {Array<!Array<!Array<!Array<number>>>>} Transformed rings.
   */
  function convertRings(rings, layout) {
    const flatRing = [];
    const outerRings = [];
    const holes = [];
    let i, ii;
    for (i = 0, ii = rings.length; i < ii; ++i) {
      flatRing.length = 0;
      deflateCoordinates(flatRing, 0, rings[i], layout.length);
      // is this ring an outer ring? is it clockwise?
      const clockwise = linearRingIsClockwise(flatRing, 0,
        flatRing.length, layout.length);
      if (clockwise) {
        outerRings.push([rings[i]]);
      } else {
        holes.push(rings[i]);
      }
    }
    while (holes.length) {
      const hole = holes.shift();
      let matched = false;
      // loop over all outer rings and see if they contain our hole.
      for (i = outerRings.length - 1; i >= 0; i--) {
        const outerRing = outerRings[i][0];
        const containsHole = containsExtent(
          new LinearRing(outerRing).getExtent(),
          new LinearRing(hole).getExtent()
        );
        if (containsHole) {
          // the hole is contained push it into our polygon
          outerRings[i].push(hole);
          matched = true;
          break;
        }
      }
      if (!matched) {
        // no outer rings contain this hole turn it into and outer
        // ring (reverse it)
        outerRings.push([hole.reverse()]);
      }
    }
    return outerRings;
  }


  /**
   * @param {EsriJSONPoint} object Object.
   * @return {import("../geom/Geometry.js").default} Point.
   */
  function readPointGeometry(object) {
    let point;
    if (object.m !== undefined && object.z !== undefined) {
      point = new Point([object.x, object.y, object.z, object.m],
        GeometryLayout.XYZM);
    } else if (object.z !== undefined) {
      point = new Point([object.x, object.y, object.z],
        GeometryLayout.XYZ);
    } else if (object.m !== undefined) {
      point = new Point([object.x, object.y, object.m],
        GeometryLayout.XYM);
    } else {
      point = new Point([object.x, object.y]);
    }
    return point;
  }


  /**
   * @param {EsriJSONPolyline} object Object.
   * @return {import("../geom/Geometry.js").default} LineString.
   */
  function readLineStringGeometry(object) {
    const layout = getGeometryLayout(object);
    return new LineString(object.paths[0], layout);
  }


  /**
   * @param {EsriJSONPolyline} object Object.
   * @return {import("../geom/Geometry.js").default} MultiLineString.
   */
  function readMultiLineStringGeometry(object) {
    const layout = getGeometryLayout(object);
    return new MultiLineString(object.paths, layout);
  }


  /**
   * @param {EsriJSONHasZM} object Object.
   * @return {import("../geom/GeometryLayout.js").default} The geometry layout to use.
   */
  function getGeometryLayout(object) {
    let layout = GeometryLayout.XY;
    if (object.hasZ === true && object.hasM === true) {
      layout = GeometryLayout.XYZM;
    } else if (object.hasZ === true) {
      layout = GeometryLayout.XYZ;
    } else if (object.hasM === true) {
      layout = GeometryLayout.XYM;
    }
    return layout;
  }


  /**
   * @param {EsriJSONMultipoint} object Object.
   * @return {import("../geom/Geometry.js").default} MultiPoint.
   */
  function readMultiPointGeometry(object) {
    const layout = getGeometryLayout(object);
    return new MultiPoint(object.points, layout);
  }


  /**
   * @param {EsriJSONMultiPolygon} object Object.
   * @return {import("../geom/Geometry.js").default} MultiPolygon.
   */
  function readMultiPolygonGeometry(object) {
    const layout = getGeometryLayout(object);
    return new MultiPolygon(object.rings, layout);
  }


  /**
   * @param {EsriJSONPolygon} object Object.
   * @return {import("../geom/Geometry.js").default} Polygon.
   */
  function readPolygonGeometry(object) {
    const layout = getGeometryLayout(object);
    return new Polygon(object.rings, layout);
  }


  /**
   * @param {import("../geom/Point.js").default} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
   * @return {EsriJSONPoint} EsriJSON geometry.
   */
  function writePointGeometry(geometry, opt_options) {
    const coordinates = geometry.getCoordinates();
    /** @type {EsriJSONPoint} */
    let esriJSON;
    const layout = geometry.getLayout();
    if (layout === GeometryLayout.XYZ) {
      esriJSON = {
        x: coordinates[0],
        y: coordinates[1],
        z: coordinates[2]
      };
    } else if (layout === GeometryLayout.XYM) {
      esriJSON = {
        x: coordinates[0],
        y: coordinates[1],
        m: coordinates[2]
      };
    } else if (layout === GeometryLayout.XYZM) {
      esriJSON = {
        x: coordinates[0],
        y: coordinates[1],
        z: coordinates[2],
        m: coordinates[3]
      };
    } else if (layout === GeometryLayout.XY) {
      esriJSON = {
        x: coordinates[0],
        y: coordinates[1]
      };
    } else {
      assert(false, 34); // Invalid geometry layout
    }
    return esriJSON;
  }


  /**
   * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
   * @return {Object} Object with boolean hasZ and hasM keys.
   */
  function getHasZM(geometry) {
    const layout = geometry.getLayout();
    return {
      hasZ: (layout === GeometryLayout.XYZ ||
        layout === GeometryLayout.XYZM),
      hasM: (layout === GeometryLayout.XYM ||
        layout === GeometryLayout.XYZM)
    };
  }


  /**
   * @param {import("../geom/LineString.js").default} lineString Geometry.
   * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
   * @return {EsriJSONPolyline} EsriJSON geometry.
   */
  function writeLineStringGeometry(lineString, opt_options) {
    const hasZM = getHasZM(lineString);
    return {
      hasZ: hasZM.hasZ,
      hasM: hasZM.hasM,
      paths: [
        /** @type {Array<EsriJSONPosition>} */ (lineString.getCoordinates())
      ]
    };
  }


  /**
   * @param {import("../geom/Polygon.js").default} polygon Geometry.
   * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
   * @return {EsriJSONPolygon} EsriJSON geometry.
   */
  function writePolygonGeometry(polygon, opt_options) {
    // Esri geometries use the left-hand rule
    const hasZM = getHasZM(polygon);
    return {
      hasZ: hasZM.hasZ,
      hasM: hasZM.hasM,
      rings: /** @type {Array<Array<EsriJSONPosition>>} */ (polygon.getCoordinates(false))
    };
  }


  /**
   * @param {import("../geom/MultiLineString.js").default} multiLineString Geometry.
   * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
   * @return {EsriJSONPolyline} EsriJSON geometry.
   */
  function writeMultiLineStringGeometry(multiLineString, opt_options) {
    const hasZM = getHasZM(multiLineString);
    return {
      hasZ: hasZM.hasZ,
      hasM: hasZM.hasM,
      paths: /** @type {Array<Array<EsriJSONPosition>>} */ (multiLineString.getCoordinates())
    };
  }


  /**
   * @param {import("../geom/MultiPoint.js").default} multiPoint Geometry.
   * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
   * @return {EsriJSONMultipoint} EsriJSON geometry.
   */
  function writeMultiPointGeometry(multiPoint, opt_options) {
    const hasZM = getHasZM(multiPoint);
    return {
      hasZ: hasZM.hasZ,
      hasM: hasZM.hasM,
      points: /** @type {Array<EsriJSONPosition>} */ (multiPoint.getCoordinates())
    };
  }


  /**
   * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
   * @return {EsriJSONPolygon} EsriJSON geometry.
   */
  function writeMultiPolygonGeometry(geometry, opt_options) {
    const hasZM = getHasZM(geometry);
    const coordinates = geometry.getCoordinates(false);
    const output = [];
    for (let i = 0; i < coordinates.length; i++) {
      for (let x = coordinates[i].length - 1; x >= 0; x--) {
        output.push(coordinates[i][x]);
      }
    }
    return {
      hasZ: hasZM.hasZ,
      hasM: hasZM.hasM,
      rings: /** @type {Array<Array<EsriJSONPosition>>} */ (output)
    };
  }


  /**
   * @param {import("../geom/Geometry.js").default} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
   * @return {EsriJSONGeometry} EsriJSON geometry.
   */
  function writeGeometry(geometry, opt_options) {
    const geometryWriter = GEOMETRY_WRITERS[geometry.getType()];
    return geometryWriter(transformGeometryWithOptions(geometry, true, opt_options), opt_options);
  }

  /**
   * @module ol/geom/GeometryCollection
   */

  /**
   * @classdesc
   * An array of {@link module:ol/geom/Geometry} objects.
   *
   * @api
   */
  class GeometryCollection extends Geometry {

    /**
     * @param {Array<Geometry>=} opt_geometries Geometries.
     */
    constructor(opt_geometries) {

      super();

      /**
       * @private
       * @type {Array<Geometry>}
       */
      this.geometries_ = opt_geometries ? opt_geometries : null;

      this.listenGeometriesChange_();
    }

    /**
     * @private
     */
    unlistenGeometriesChange_() {
      if (!this.geometries_) {
        return;
      }
      for (let i = 0, ii = this.geometries_.length; i < ii; ++i) {
        unlisten(
          this.geometries_[i], EventType.CHANGE,
          this.changed, this);
      }
    }

    /**
     * @private
     */
    listenGeometriesChange_() {
      if (!this.geometries_) {
        return;
      }
      for (let i = 0, ii = this.geometries_.length; i < ii; ++i) {
        listen(
          this.geometries_[i], EventType.CHANGE,
          this.changed, this);
      }
    }

    /**
     * Make a complete copy of the geometry.
     * @return {!GeometryCollection} Clone.
     * @override
     * @api
     */
    clone() {
      const geometryCollection = new GeometryCollection(null);
      geometryCollection.setGeometries(this.geometries_);
      return geometryCollection;
    }

    /**
     * @inheritDoc
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      const geometries = this.geometries_;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        minSquaredDistance = geometries[i].closestPointXY(
          x, y, closestPoint, minSquaredDistance);
      }
      return minSquaredDistance;
    }

    /**
     * @inheritDoc
     */
    containsXY(x, y) {
      const geometries = this.geometries_;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        if (geometries[i].containsXY(x, y)) {
          return true;
        }
      }
      return false;
    }

    /**
     * @inheritDoc
     */
    computeExtent(extent) {
      createOrUpdateEmpty(extent);
      const geometries = this.geometries_;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        extend(extent, geometries[i].getExtent());
      }
      return extent;
    }

    /**
     * Return the geometries that make up this geometry collection.
     * @return {Array<Geometry>} Geometries.
     * @api
     */
    getGeometries() {
      return cloneGeometries(this.geometries_);
    }

    /**
     * @return {Array<Geometry>} Geometries.
     */
    getGeometriesArray() {
      return this.geometries_;
    }

    /**
     * @inheritDoc
     */
    getSimplifiedGeometry(squaredTolerance) {
      if (this.simplifiedGeometryRevision != this.getRevision()) {
        clear(this.simplifiedGeometryCache);
        this.simplifiedGeometryMaxMinSquaredTolerance = 0;
        this.simplifiedGeometryRevision = this.getRevision();
      }
      if (squaredTolerance < 0 ||
          (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&
           squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance)) {
        return this;
      }
      const key = squaredTolerance.toString();
      if (this.simplifiedGeometryCache.hasOwnProperty(key)) {
        return this.simplifiedGeometryCache[key];
      } else {
        const simplifiedGeometries = [];
        const geometries = this.geometries_;
        let simplified = false;
        for (let i = 0, ii = geometries.length; i < ii; ++i) {
          const geometry = geometries[i];
          const simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);
          simplifiedGeometries.push(simplifiedGeometry);
          if (simplifiedGeometry !== geometry) {
            simplified = true;
          }
        }
        if (simplified) {
          const simplifiedGeometryCollection = new GeometryCollection(null);
          simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);
          this.simplifiedGeometryCache[key] = simplifiedGeometryCollection;
          return simplifiedGeometryCollection;
        } else {
          this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;
          return this;
        }
      }
    }

    /**
     * @inheritDoc
     * @api
     */
    getType() {
      return GeometryType.GEOMETRY_COLLECTION;
    }

    /**
     * @inheritDoc
     * @api
     */
    intersectsExtent(extent) {
      const geometries = this.geometries_;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        if (geometries[i].intersectsExtent(extent)) {
          return true;
        }
      }
      return false;
    }

    /**
     * @return {boolean} Is empty.
     */
    isEmpty() {
      return this.geometries_.length === 0;
    }

    /**
     * @inheritDoc
     * @api
     */
    rotate(angle, anchor) {
      const geometries = this.geometries_;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        geometries[i].rotate(angle, anchor);
      }
      this.changed();
    }

    /**
     * @inheritDoc
     * @api
     */
    scale(sx, opt_sy, opt_anchor) {
      let anchor = opt_anchor;
      if (!anchor) {
        anchor = getCenter(this.getExtent());
      }
      const geometries = this.geometries_;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        geometries[i].scale(sx, opt_sy, anchor);
      }
      this.changed();
    }

    /**
     * Set the geometries that make up this geometry collection.
     * @param {Array<Geometry>} geometries Geometries.
     * @api
     */
    setGeometries(geometries) {
      this.setGeometriesArray(cloneGeometries(geometries));
    }

    /**
     * @param {Array<Geometry>} geometries Geometries.
     */
    setGeometriesArray(geometries) {
      this.unlistenGeometriesChange_();
      this.geometries_ = geometries;
      this.listenGeometriesChange_();
      this.changed();
    }

    /**
     * @inheritDoc
     * @api
     */
    applyTransform(transformFn) {
      const geometries = this.geometries_;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        geometries[i].applyTransform(transformFn);
      }
      this.changed();
    }

    /**
     * @inheritDoc
     * @api
     */
    translate(deltaX, deltaY) {
      const geometries = this.geometries_;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        geometries[i].translate(deltaX, deltaY);
      }
      this.changed();
    }

    /**
     * @inheritDoc
     */
    disposeInternal() {
      this.unlistenGeometriesChange_();
      super.disposeInternal();
    }
  }


  /**
   * @param {Array<Geometry>} geometries Geometries.
   * @return {Array<Geometry>} Cloned geometries.
   */
  function cloneGeometries(geometries) {
    const clonedGeometries = [];
    for (let i = 0, ii = geometries.length; i < ii; ++i) {
      clonedGeometries.push(geometries[i].clone());
    }
    return clonedGeometries;
  }

  /**
   * @module ol/format/GeoJSON
   */

  /**
   * @typedef {import("geojson").GeoJSON} GeoJSONObject
   * @typedef {import("geojson").Feature} GeoJSONFeature
   * @typedef {import("geojson").FeatureCollection} GeoJSONFeatureCollection
   * @typedef {import("geojson").Geometry} GeoJSONGeometry
   * @typedef {import("geojson").Point} GeoJSONPoint
   * @typedef {import("geojson").LineString} GeoJSONLineString
   * @typedef {import("geojson").Polygon} GeoJSONPolygon
   * @typedef {import("geojson").MultiPoint} GeoJSONMultiPoint
   * @typedef {import("geojson").MultiLineString} GeoJSONMultiLineString
   * @typedef {import("geojson").MultiPolygon} GeoJSONMultiPolygon
   * @typedef {import("geojson").GeometryCollection} GeoJSONGeometryCollection
   */


  /**
   * @typedef {Object} Options
   * @property {import("../proj.js").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.
   * @property {import("../proj.js").ProjectionLike} [featureProjection] Projection for features read or
   * written by the format.  Options passed to read or write methods will take precedence.
   * @property {string} [geometryName] Geometry name to use when creating features.
   * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include
   * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader
   * will look for that field to set the geometry name. If both this field is set to `true`
   * and a `geometryName` is provided, the `geometryName` will take precedence.
   */


  /**
   * @classdesc
   * Feature format for reading and writing data in the GeoJSON format.
   *
    * @api
   */
  class GeoJSON extends JSONFeature {

    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {

      const options = opt_options ? opt_options : {};

      super();

      /**
       * @inheritDoc
       */
      this.dataProjection = get$2(
        options.dataProjection ?
          options.dataProjection : 'EPSG:4326');

      if (options.featureProjection) {
        this.defaultFeatureProjection = get$2(options.featureProjection);
      }

      /**
       * Name of the geometry attribute for features.
       * @type {string|undefined}
       * @private
       */
      this.geometryName_ = options.geometryName;

      /**
       * Look for the geometry name in the feature GeoJSON
       * @type {boolean|undefined}
       * @private
       */
      this.extractGeometryName_ = options.extractGeometryName;

    }

    /**
     * @inheritDoc
     */
    readFeatureFromObject(object, opt_options) {
      /**
       * @type {GeoJSONFeature}
       */
      let geoJSONFeature = null;
      if (object['type'] === 'Feature') {
        geoJSONFeature = /** @type {GeoJSONFeature} */ (object);
      } else {
        geoJSONFeature = {
          'type': 'Feature',
          'geometry': /** @type {GeoJSONGeometry} */ (object),
          'properties': null
        };
      }

      const geometry = readGeometry$1(geoJSONFeature['geometry'], opt_options);
      const feature = new Feature();
      if (this.geometryName_) {
        feature.setGeometryName(this.geometryName_);
      } else if (this.extractGeometryName_ && 'geometry_name' in geoJSONFeature !== undefined) {
        feature.setGeometryName(geoJSONFeature['geometry_name']);
      }
      feature.setGeometry(geometry);

      if ('id' in geoJSONFeature) {
        feature.setId(geoJSONFeature['id']);
      }

      if (geoJSONFeature['properties']) {
        feature.setProperties(geoJSONFeature['properties'], true);
      }
      return feature;
    }

    /**
     * @inheritDoc
     */
    readFeaturesFromObject(object, opt_options) {
      const geoJSONObject = /** @type {GeoJSONObject} */ (object);
      /** @type {Array<import("../Feature.js").default>} */
      let features = null;
      if (geoJSONObject['type'] === 'FeatureCollection') {
        const geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ (object);
        features = [];
        const geoJSONFeatures = geoJSONFeatureCollection['features'];
        for (let i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {
          features.push(this.readFeatureFromObject(geoJSONFeatures[i], opt_options));
        }
      } else {
        features = [this.readFeatureFromObject(object, opt_options)];
      }
      return features;
    }

    /**
     * @inheritDoc
     */
    readGeometryFromObject(object, opt_options) {
      return readGeometry$1(/** @type {GeoJSONGeometry} */ (object), opt_options);
    }

    /**
     * @inheritDoc
     */
    readProjectionFromObject(object) {
      const crs = object['crs'];
      let projection;
      if (crs) {
        if (crs['type'] == 'name') {
          projection = get$2(crs['properties']['name']);
        } else {
          assert(false, 36); // Unknown SRS type
        }
      } else {
        projection = this.dataProjection;
      }
      return (
        /** @type {import("../proj/Projection.js").default} */ (projection)
      );
    }

    /**
     * Encode a feature as a GeoJSON Feature object.
     *
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {GeoJSONFeature} Object.
     * @override
     * @api
     */
    writeFeatureObject(feature, opt_options) {
      opt_options = this.adaptOptions(opt_options);

      /** @type {GeoJSONFeature} */
      const object = {
        'type': 'Feature',
        geometry: null,
        properties: null
      };

      const id = feature.getId();
      if (id !== undefined) {
        object.id = id;
      }

      const geometry = feature.getGeometry();
      if (geometry) {
        object.geometry = writeGeometry$1(geometry, opt_options);
      }

      const properties = feature.getProperties();
      delete properties[feature.getGeometryName()];
      if (!isEmpty(properties)) {
        object.properties = properties;
      }
      return object;
    }

    /**
     * Encode an array of features as a GeoJSON object.
     *
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {GeoJSONFeatureCollection} GeoJSON Object.
     * @override
     * @api
     */
    writeFeaturesObject(features, opt_options) {
      opt_options = this.adaptOptions(opt_options);
      const objects = [];
      for (let i = 0, ii = features.length; i < ii; ++i) {
        objects.push(this.writeFeatureObject(features[i], opt_options));
      }
      return {
        type: 'FeatureCollection',
        features: objects
      };
    }

    /**
     * Encode a geometry as a GeoJSON object.
     *
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.
     * @override
     * @api
     */
    writeGeometryObject(geometry, opt_options) {
      return writeGeometry$1(geometry, this.adaptOptions(opt_options));
    }
  }


  /**
   * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.
   * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
   * @return {import("../geom/Geometry.js").default} Geometry.
   */
  function readGeometry$1(object, opt_options) {
    if (!object) {
      return null;
    }

    /**
     * @type {import("../geom/Geometry.js").default}
     */
    let geometry;
    switch (object['type']) {
      case GeometryType.POINT: {
        geometry = readPointGeometry$1(/** @type {GeoJSONPoint} */ (object));
        break;
      }
      case GeometryType.LINE_STRING: {
        geometry = readLineStringGeometry$1(/** @type {GeoJSONLineString} */ (object));
        break;
      }
      case GeometryType.POLYGON: {
        geometry = readPolygonGeometry$1(/** @type {GeoJSONPolygon} */ (object));
        break;
      }
      case GeometryType.MULTI_POINT: {
        geometry = readMultiPointGeometry$1(/** @type {GeoJSONMultiPoint} */ (object));
        break;
      }
      case GeometryType.MULTI_LINE_STRING: {
        geometry = readMultiLineStringGeometry$1(/** @type {GeoJSONMultiLineString} */ (object));
        break;
      }
      case GeometryType.MULTI_POLYGON: {
        geometry = readMultiPolygonGeometry$1(/** @type {GeoJSONMultiPolygon} */ (object));
        break;
      }
      case GeometryType.GEOMETRY_COLLECTION: {
        geometry = readGeometryCollectionGeometry(/** @type {GeoJSONGeometryCollection} */ (object));
        break;
      }
      default: {
        throw new Error('Unsupported GeoJSON type: ' + object.type);
      }
    }
    return transformGeometryWithOptions(geometry, false, opt_options);
  }


  /**
   * @param {GeoJSONGeometryCollection} object Object.
   * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
   * @return {GeometryCollection} Geometry collection.
   */
  function readGeometryCollectionGeometry(object, opt_options) {
    const geometries = object['geometries'].map(
      /**
       * @param {GeoJSONGeometry} geometry Geometry.
       * @return {import("../geom/Geometry.js").default} geometry Geometry.
       */
      function(geometry) {
        return readGeometry$1(geometry, opt_options);
      });
    return new GeometryCollection(geometries);
  }


  /**
   * @param {GeoJSONPoint} object Object.
   * @return {Point} Point.
   */
  function readPointGeometry$1(object) {
    return new Point(object['coordinates']);
  }


  /**
   * @param {GeoJSONLineString} object Object.
   * @return {LineString} LineString.
   */
  function readLineStringGeometry$1(object) {
    return new LineString(object['coordinates']);
  }


  /**
   * @param {GeoJSONMultiLineString} object Object.
   * @return {MultiLineString} MultiLineString.
   */
  function readMultiLineStringGeometry$1(object) {
    return new MultiLineString(object['coordinates']);
  }


  /**
   * @param {GeoJSONMultiPoint} object Object.
   * @return {MultiPoint} MultiPoint.
   */
  function readMultiPointGeometry$1(object) {
    return new MultiPoint(object['coordinates']);
  }


  /**
   * @param {GeoJSONMultiPolygon} object Object.
   * @return {MultiPolygon} MultiPolygon.
   */
  function readMultiPolygonGeometry$1(object) {
    return new MultiPolygon(object['coordinates']);
  }


  /**
   * @param {GeoJSONPolygon} object Object.
   * @return {Polygon} Polygon.
   */
  function readPolygonGeometry$1(object) {
    return new Polygon(object['coordinates']);
  }


  /**
   * @param {import("../geom/Geometry.js").default} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writeGeometry$1(geometry, opt_options) {
    geometry = transformGeometryWithOptions(geometry, true, opt_options);
    const type = geometry.getType();

    /** @type {GeoJSONGeometry} */
    let geoJSON;
    switch (type) {
      case GeometryType.POINT: {
        geoJSON = writePointGeometry$1(/** @type {Point} */ (geometry));
        break;
      }
      case GeometryType.LINE_STRING: {
        geoJSON = writeLineStringGeometry$1(/** @type {LineString} */ (geometry));
        break;
      }
      case GeometryType.POLYGON: {
        geoJSON = writePolygonGeometry$1(/** @type {Polygon} */ (geometry), opt_options);
        break;
      }
      case GeometryType.MULTI_POINT: {
        geoJSON = writeMultiPointGeometry$1(/** @type {MultiPoint} */ (geometry));
        break;
      }
      case GeometryType.MULTI_LINE_STRING: {
        geoJSON = writeMultiLineStringGeometry$1(/** @type {MultiLineString} */ (geometry));
        break;
      }
      case GeometryType.MULTI_POLYGON: {
        geoJSON = writeMultiPolygonGeometry$1(/** @type {MultiPolygon} */ (geometry), opt_options);
        break;
      }
      case GeometryType.GEOMETRY_COLLECTION: {
        geoJSON = writeGeometryCollectionGeometry(/** @type {GeometryCollection} */ (geometry), opt_options);
        break;
      }
      case GeometryType.CIRCLE: {
        geoJSON = {
          type: 'GeometryCollection',
          geometries: []
        };
        break;
      }
      default: {
        throw new Error('Unsupported geometry type: ' + type);
      }
    }
    return geoJSON;
  }


  /**
   * @param {GeometryCollection} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
   * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.
   */
  function writeGeometryCollectionGeometry(geometry, opt_options) {
    const geometries = geometry.getGeometriesArray().map(function(geometry) {
      const options = assign({}, opt_options);
      delete options.featureProjection;
      return writeGeometry$1(geometry, options);
    });
    return {
      type: 'GeometryCollection',
      geometries: geometries
    };
  }


  /**
   * @param {LineString} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writeLineStringGeometry$1(geometry, opt_options) {
    return {
      type: 'LineString',
      coordinates: geometry.getCoordinates()
    };
  }


  /**
   * @param {MultiLineString} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writeMultiLineStringGeometry$1(geometry, opt_options) {
    return {
      type: 'MultiLineString',
      coordinates: geometry.getCoordinates()
    };
  }


  /**
   * @param {MultiPoint} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writeMultiPointGeometry$1(geometry, opt_options) {
    return {
      type: 'MultiPoint',
      coordinates: geometry.getCoordinates()
    };
  }


  /**
   * @param {MultiPolygon} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writeMultiPolygonGeometry$1(geometry, opt_options) {
    let right;
    if (opt_options) {
      right = opt_options.rightHanded;
    }
    return {
      type: 'MultiPolygon',
      coordinates: geometry.getCoordinates(right)
    };
  }


  /**
   * @param {Point} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writePointGeometry$1(geometry, opt_options) {
    return {
      type: 'Point',
      coordinates: geometry.getCoordinates()
    };
  }


  /**
   * @param {Polygon} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writePolygonGeometry$1(geometry, opt_options) {
    let right;
    if (opt_options) {
      right = opt_options.rightHanded;
    }
    return {
      type: 'Polygon',
      coordinates: geometry.getCoordinates(right)
    };
  }

  /**
   * @module ol/xml
   */


  /**
   * When using {@link module:ol/xml~makeChildAppender} or
   * {@link module:ol/xml~makeSimpleNodeFactory}, the top `objectStack` item needs
   * to have this structure.
   * @typedef {Object} NodeStackItem
   * @property {Node} node
   */


  /**
   * @typedef {function(Element, Array<*>): void} Parser
   */


  /**
   * @typedef {function(Element, *, Array<*>): void} Serializer
   */


  /**
   * This document should be used when creating nodes for XML serializations. This
   * document is also used by {@link module:ol/xml~createElementNS}
   * @const
   * @type {Document}
   */
  const DOCUMENT = document.implementation.createDocument('', '', null);


  /**
   * @type {string}
   */
  const XML_SCHEMA_INSTANCE_URI = 'http://www.w3.org/2001/XMLSchema-instance';


  /**
   * @param {string} namespaceURI Namespace URI.
   * @param {string} qualifiedName Qualified name.
   * @return {Element} Node.
   */
  function createElementNS(namespaceURI, qualifiedName) {
    return DOCUMENT.createElementNS(namespaceURI, qualifiedName);
  }


  /**
   * Recursively grab all text content of child nodes into a single string.
   * @param {Node} node Node.
   * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line
   * breaks.
   * @return {string} All text content.
   * @api
   */
  function getAllTextContent(node, normalizeWhitespace) {
    return getAllTextContent_(node, normalizeWhitespace, []).join('');
  }


  /**
   * Recursively grab all text content of child nodes into a single string.
   * @param {Node} node Node.
   * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line
   * breaks.
   * @param {Array<string>} accumulator Accumulator.
   * @private
   * @return {Array<string>} Accumulator.
   */
  function getAllTextContent_(node, normalizeWhitespace, accumulator) {
    if (node.nodeType == Node.CDATA_SECTION_NODE ||
        node.nodeType == Node.TEXT_NODE) {
      if (normalizeWhitespace) {
        accumulator.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ''));
      } else {
        accumulator.push(node.nodeValue);
      }
    } else {
      let n;
      for (n = node.firstChild; n; n = n.nextSibling) {
        getAllTextContent_(n, normalizeWhitespace, accumulator);
      }
    }
    return accumulator;
  }


  /**
   * @param {Object} object Object.
   * @return {boolean} Is a document.
   */
  function isDocument(object) {
    return 'documentElement' in object;
  }


  /**
   * @param {Element} node Node.
   * @param {?string} namespaceURI Namespace URI.
   * @param {string} name Attribute name.
   * @return {string} Value
   */
  function getAttributeNS(node, namespaceURI, name) {
    return node.getAttributeNS(namespaceURI, name) || '';
  }


  /**
   * Parse an XML string to an XML Document.
   * @param {string} xml XML.
   * @return {Document} Document.
   * @api
   */
  function parse(xml) {
    return new DOMParser().parseFromString(xml, 'application/xml');
  }


  /**
   * Make an array extender function for extending the array at the top of the
   * object stack.
   * @param {function(this: T, Node, Array<*>): (Array<*>|undefined)} valueReader Value reader.
   * @param {T=} opt_this The object to use as `this` in `valueReader`.
   * @return {Parser} Parser.
   * @template T
   */
  function makeArrayExtender(valueReader, opt_this) {
    return (
      /**
       * @param {Node} node Node.
       * @param {Array<*>} objectStack Object stack.
       */
      function(node, objectStack) {
        const value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);
        if (value !== undefined) {
          const array = /** @type {Array<*>} */ (objectStack[objectStack.length - 1]);
          extend$1(array, value);
        }
      }
    );
  }


  /**
   * Make an array pusher function for pushing to the array at the top of the
   * object stack.
   * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.
   * @param {T=} opt_this The object to use as `this` in `valueReader`.
   * @return {Parser} Parser.
   * @template T
   */
  function makeArrayPusher(valueReader, opt_this) {
    return (
      /**
       * @param {Element} node Node.
       * @param {Array<*>} objectStack Object stack.
       */
      function(node, objectStack) {
        const value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);
        if (value !== undefined) {
          const array = /** @type {Array<*>} */ (objectStack[objectStack.length - 1]);
          array.push(value);
        }
      });
  }


  /**
   * Make an object stack replacer function for replacing the object at the
   * top of the stack.
   * @param {function(this: T, Node, Array<*>): *} valueReader Value reader.
   * @param {T=} opt_this The object to use as `this` in `valueReader`.
   * @return {Parser} Parser.
   * @template T
   */
  function makeReplacer(valueReader, opt_this) {
    return (
      /**
       * @param {Node} node Node.
       * @param {Array<*>} objectStack Object stack.
       */
      function(node, objectStack) {
        const value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);
        if (value !== undefined) {
          objectStack[objectStack.length - 1] = value;
        }
      });
  }


  /**
   * Make an object property pusher function for adding a property to the
   * object at the top of the stack.
   * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.
   * @param {string=} opt_property Property.
   * @param {T=} opt_this The object to use as `this` in `valueReader`.
   * @return {Parser} Parser.
   * @template T
   */
  function makeObjectPropertyPusher(valueReader, opt_property, opt_this) {
    return (
      /**
       * @param {Element} node Node.
       * @param {Array<*>} objectStack Object stack.
       */
      function(node, objectStack) {
        const value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);
        if (value !== undefined) {
          const object = /** @type {!Object} */ (objectStack[objectStack.length - 1]);
          const property = opt_property !== undefined ? opt_property : node.localName;
          let array;
          if (property in object) {
            array = object[property];
          } else {
            array = object[property] = [];
          }
          array.push(value);
        }
      });
  }


  /**
   * Make an object property setter function.
   * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.
   * @param {string=} opt_property Property.
   * @param {T=} opt_this The object to use as `this` in `valueReader`.
   * @return {Parser} Parser.
   * @template T
   */
  function makeObjectPropertySetter(valueReader, opt_property, opt_this) {
    return (
      /**
       * @param {Element} node Node.
       * @param {Array<*>} objectStack Object stack.
       */
      function(node, objectStack) {
        const value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);
        if (value !== undefined) {
          const object = /** @type {!Object} */ (objectStack[objectStack.length - 1]);
          const property = opt_property !== undefined ? opt_property : node.localName;
          object[property] = value;
        }
      });
  }


  /**
   * Create a serializer that appends nodes written by its `nodeWriter` to its
   * designated parent. The parent is the `node` of the
   * {@link module:ol/xml~NodeStackItem} at the top of the `objectStack`.
   * @param {function(this: T, Node, V, Array<*>): void} nodeWriter Node writer.
   * @param {T=} opt_this The object to use as `this` in `nodeWriter`.
   * @return {Serializer} Serializer.
   * @template T, V
   */
  function makeChildAppender(nodeWriter, opt_this) {
    return function(node, value, objectStack) {
      nodeWriter.call(opt_this !== undefined ? opt_this : this, node, value, objectStack);
      const parent = /** @type {NodeStackItem} */ (objectStack[objectStack.length - 1]);
      const parentNode = parent.node;
      parentNode.appendChild(node);
    };
  }


  /**
   * Create a serializer that calls the provided `nodeWriter` from
   * {@link module:ol/xml~serialize}. This can be used by the parent writer to have the
   * 'nodeWriter' called with an array of values when the `nodeWriter` was
   * designed to serialize a single item. An example would be a LineString
   * geometry writer, which could be reused for writing MultiLineString
   * geometries.
   * @param {function(this: T, Element, V, Array<*>): void} nodeWriter Node writer.
   * @param {T=} opt_this The object to use as `this` in `nodeWriter`.
   * @return {Serializer} Serializer.
   * @template T, V
   */
  function makeArraySerializer(nodeWriter, opt_this) {
    let serializersNS, nodeFactory;
    return function(node, value, objectStack) {
      if (serializersNS === undefined) {
        serializersNS = {};
        const serializers = {};
        serializers[node.localName] = nodeWriter;
        serializersNS[node.namespaceURI] = serializers;
        nodeFactory = makeSimpleNodeFactory(node.localName);
      }
      serialize(serializersNS, nodeFactory, value, objectStack);
    };
  }


  /**
   * Create a node factory which can use the `opt_keys` passed to
   * {@link module:ol/xml~serialize} or {@link module:ol/xml~pushSerializeAndPop} as node names,
   * or a fixed node name. The namespace of the created nodes can either be fixed,
   * or the parent namespace will be used.
   * @param {string=} opt_nodeName Fixed node name which will be used for all
   *     created nodes. If not provided, the 3rd argument to the resulting node
   *     factory needs to be provided and will be the nodeName.
   * @param {string=} opt_namespaceURI Fixed namespace URI which will be used for
   *     all created nodes. If not provided, the namespace of the parent node will
   *     be used.
   * @return {function(*, Array<*>, string=): (Node|undefined)} Node factory.
   */
  function makeSimpleNodeFactory(opt_nodeName, opt_namespaceURI) {
    const fixedNodeName = opt_nodeName;
    return (
      /**
       * @param {*} value Value.
       * @param {Array<*>} objectStack Object stack.
       * @param {string=} opt_nodeName Node name.
       * @return {Node} Node.
       */
      function(value, objectStack, opt_nodeName) {
        const context = /** @type {NodeStackItem} */ (objectStack[objectStack.length - 1]);
        const node = context.node;
        let nodeName = fixedNodeName;
        if (nodeName === undefined) {
          nodeName = opt_nodeName;
        }

        const namespaceURI = opt_namespaceURI !== undefined ? opt_namespaceURI : node.namespaceURI;
        return createElementNS(namespaceURI, /** @type {string} */ (nodeName));
      }
    );
  }


  /**
   * A node factory that creates a node using the parent's `namespaceURI` and the
   * `nodeName` passed by {@link module:ol/xml~serialize} or
   * {@link module:ol/xml~pushSerializeAndPop} to the node factory.
   * @const
   * @type {function(*, Array<*>, string=): (Node|undefined)}
   */
  const OBJECT_PROPERTY_NODE_FACTORY = makeSimpleNodeFactory();


  /**
   * Create an array of `values` to be used with {@link module:ol/xml~serialize} or
   * {@link module:ol/xml~pushSerializeAndPop}, where `orderedKeys` has to be provided as
   * `opt_key` argument.
   * @param {Object<string, V>} object Key-value pairs for the sequence. Keys can
   *     be a subset of the `orderedKeys`.
   * @param {Array<string>} orderedKeys Keys in the order of the sequence.
   * @return {Array<V>} Values in the order of the sequence. The resulting array
   *     has the same length as the `orderedKeys` array. Values that are not
   *     present in `object` will be `undefined` in the resulting array.
   * @template V
   */
  function makeSequence(object, orderedKeys) {
    const length = orderedKeys.length;
    const sequence = new Array(length);
    for (let i = 0; i < length; ++i) {
      sequence[i] = object[orderedKeys[i]];
    }
    return sequence;
  }


  /**
   * Create a namespaced structure, using the same values for each namespace.
   * This can be used as a starting point for versioned parsers, when only a few
   * values are version specific.
   * @param {Array<string>} namespaceURIs Namespace URIs.
   * @param {T} structure Structure.
   * @param {Object<string, T>=} opt_structureNS Namespaced structure to add to.
   * @return {Object<string, T>} Namespaced structure.
   * @template T
   */
  function makeStructureNS(namespaceURIs, structure, opt_structureNS) {
    /**
     * @type {Object<string, T>}
     */
    const structureNS = opt_structureNS !== undefined ? opt_structureNS : {};
    let i, ii;
    for (i = 0, ii = namespaceURIs.length; i < ii; ++i) {
      structureNS[namespaceURIs[i]] = structure;
    }
    return structureNS;
  }


  /**
   * Parse a node using the parsers and object stack.
   * @param {Object<string, Object<string, Parser>>} parsersNS
   *     Parsers by namespace.
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @param {*=} opt_this The object to use as `this`.
   */
  function parseNode(parsersNS, node, objectStack, opt_this) {
    let n;
    for (n = node.firstElementChild; n; n = n.nextElementSibling) {
      const parsers = parsersNS[n.namespaceURI];
      if (parsers !== undefined) {
        const parser = parsers[n.localName];
        if (parser !== undefined) {
          parser.call(opt_this, n, objectStack);
        }
      }
    }
  }


  /**
   * Push an object on top of the stack, parse and return the popped object.
   * @param {T} object Object.
   * @param {Object<string, Object<string, Parser>>} parsersNS
   *     Parsers by namespace.
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @param {*=} opt_this The object to use as `this`.
   * @return {T} Object.
   * @template T
   */
  function pushParseAndPop(object, parsersNS, node, objectStack, opt_this) {
    objectStack.push(object);
    parseNode(parsersNS, node, objectStack, opt_this);
    return /** @type {T} */ (objectStack.pop());
  }


  /**
   * Walk through an array of `values` and call a serializer for each value.
   * @param {Object<string, Object<string, Serializer>>} serializersNS
   *     Namespaced serializers.
   * @param {function(this: T, *, Array<*>, (string|undefined)): (Node|undefined)} nodeFactory
   *     Node factory. The `nodeFactory` creates the node whose namespace and name
   *     will be used to choose a node writer from `serializersNS`. This
   *     separation allows us to decide what kind of node to create, depending on
   *     the value we want to serialize. An example for this would be different
   *     geometry writers based on the geometry type.
   * @param {Array<*>} values Values to serialize. An example would be an array
   *     of {@link module:ol/Feature~Feature} instances.
   * @param {Array<*>} objectStack Node stack.
   * @param {Array<string>=} opt_keys Keys of the `values`. Will be passed to the
   *     `nodeFactory`. This is used for serializing object literals where the
   *     node name relates to the property key. The array length of `opt_keys` has
   *     to match the length of `values`. For serializing a sequence, `opt_keys`
   *     determines the order of the sequence.
   * @param {T=} opt_this The object to use as `this` for the node factory and
   *     serializers.
   * @template T
   */
  function serialize(
    serializersNS, nodeFactory, values, objectStack, opt_keys, opt_this) {
    const length = (opt_keys !== undefined ? opt_keys : values).length;
    let value, node;
    for (let i = 0; i < length; ++i) {
      value = values[i];
      if (value !== undefined) {
        node = nodeFactory.call(opt_this !== undefined ? opt_this : this, value, objectStack,
          opt_keys !== undefined ? opt_keys[i] : undefined);
        if (node !== undefined) {
          serializersNS[node.namespaceURI][node.localName]
            .call(opt_this, node, value, objectStack);
        }
      }
    }
  }


  /**
   * @param {O} object Object.
   * @param {Object<string, Object<string, Serializer>>} serializersNS
   *     Namespaced serializers.
   * @param {function(this: T, *, Array<*>, (string|undefined)): (Node|undefined)} nodeFactory
   *     Node factory. The `nodeFactory` creates the node whose namespace and name
   *     will be used to choose a node writer from `serializersNS`. This
   *     separation allows us to decide what kind of node to create, depending on
   *     the value we want to serialize. An example for this would be different
   *     geometry writers based on the geometry type.
   * @param {Array<*>} values Values to serialize. An example would be an array
   *     of {@link module:ol/Feature~Feature} instances.
   * @param {Array<*>} objectStack Node stack.
   * @param {Array<string>=} opt_keys Keys of the `values`. Will be passed to the
   *     `nodeFactory`. This is used for serializing object literals where the
   *     node name relates to the property key. The array length of `opt_keys` has
   *     to match the length of `values`. For serializing a sequence, `opt_keys`
   *     determines the order of the sequence.
   * @param {T=} opt_this The object to use as `this` for the node factory and
   *     serializers.
   * @return {O|undefined} Object.
   * @template O, T
   */
  function pushSerializeAndPop(object, serializersNS, nodeFactory, values, objectStack, opt_keys, opt_this) {
    objectStack.push(object);
    serialize(serializersNS, nodeFactory, values, objectStack, opt_keys, opt_this);
    return /** @type {O|undefined} */ (objectStack.pop());
  }

  /**
   * @module ol/format/XMLFeature
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for XML feature formats.
   *
   * @abstract
   */
  class XMLFeature extends FeatureFormat {
    constructor() {
      super();

      /**
       * @type {XMLSerializer}
       * @private
       */
      this.xmlSerializer_ = new XMLSerializer();
    }

    /**
     * @inheritDoc
     */
    getType() {
      return FormatType.XML;
    }

    /**
     * Read a single feature.
     *
     * @param {Document|Node|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
     * @return {import("../Feature.js").default} Feature.
     * @api
     */
    readFeature(source, opt_options) {
      if (!source) {
        return null;
      } else if (typeof source === 'string') {
        const doc = parse(source);
        return this.readFeatureFromDocument(doc, opt_options);
      } else if (isDocument(source)) {
        return this.readFeatureFromDocument(/** @type {Document} */ (source), opt_options);
      } else {
        return this.readFeatureFromNode(/** @type {Node} */ (source), opt_options);
      }
    }

    /**
     * @param {Document} doc Document.
     * @param {import("./Feature.js").ReadOptions=} opt_options Options.
     * @return {import("../Feature.js").default} Feature.
     */
    readFeatureFromDocument(doc, opt_options) {
      const features = this.readFeaturesFromDocument(doc, opt_options);
      if (features.length > 0) {
        return features[0];
      } else {
        return null;
      }
    }

    /**
     * @param {Node} node Node.
     * @param {import("./Feature.js").ReadOptions=} opt_options Options.
     * @return {import("../Feature.js").default} Feature.
     */
    readFeatureFromNode(node, opt_options) {
      return null; // not implemented
    }

    /**
     * Read all features from a feature collection.
     *
     * @param {Document|Node|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions=} opt_options Options.
     * @return {Array<import("../Feature.js").default>} Features.
     * @api
     */
    readFeatures(source, opt_options) {
      if (!source) {
        return [];
      } else if (typeof source === 'string') {
        const doc = parse(source);
        return this.readFeaturesFromDocument(doc, opt_options);
      } else if (isDocument(source)) {
        return this.readFeaturesFromDocument(
          /** @type {Document} */ (source), opt_options);
      } else {
        return this.readFeaturesFromNode(/** @type {Node} */ (source), opt_options);
      }
    }

    /**
     * @param {Document} doc Document.
     * @param {import("./Feature.js").ReadOptions=} opt_options Options.
     * @protected
     * @return {Array<import("../Feature.js").default>} Features.
     */
    readFeaturesFromDocument(doc, opt_options) {
      /** @type {Array<import("../Feature.js").default>} */
      const features = [];
      for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {
        if (n.nodeType == Node.ELEMENT_NODE) {
          extend$1(features, this.readFeaturesFromNode(n, opt_options));
        }
      }
      return features;
    }

    /**
     * @abstract
     * @param {Node} node Node.
     * @param {import("./Feature.js").ReadOptions=} opt_options Options.
     * @protected
     * @return {Array<import("../Feature.js").default>} Features.
     */
    readFeaturesFromNode(node, opt_options) {
      return abstract();
    }

    /**
     * @inheritDoc
     */
    readGeometry(source, opt_options) {
      if (!source) {
        return null;
      } else if (typeof source === 'string') {
        const doc = parse(source);
        return this.readGeometryFromDocument(doc, opt_options);
      } else if (isDocument(source)) {
        return this.readGeometryFromDocument(
          /** @type {Document} */ (source), opt_options);
      } else {
        return this.readGeometryFromNode(/** @type {Node} */ (source), opt_options);
      }
    }

    /**
     * @param {Document} doc Document.
     * @param {import("./Feature.js").ReadOptions=} opt_options Options.
     * @protected
     * @return {import("../geom/Geometry.js").default} Geometry.
     */
    readGeometryFromDocument(doc, opt_options) {
      return null; // not implemented
    }

    /**
     * @param {Node} node Node.
     * @param {import("./Feature.js").ReadOptions=} opt_options Options.
     * @protected
     * @return {import("../geom/Geometry.js").default} Geometry.
     */
    readGeometryFromNode(node, opt_options) {
      return null; // not implemented
    }

    /**
     * Read the projection from the source.
     *
     * @param {Document|Node|Object|string} source Source.
     * @return {import("../proj/Projection.js").default} Projection.
     * @api
     */
    readProjection(source) {
      if (!source) {
        return null;
      } else if (typeof source === 'string') {
        const doc = parse(source);
        return this.readProjectionFromDocument(doc);
      } else if (isDocument(source)) {
        return this.readProjectionFromDocument(/** @type {Document} */ (source));
      } else {
        return this.readProjectionFromNode(/** @type {Node} */ (source));
      }
    }

    /**
     * @param {Document} doc Document.
     * @protected
     * @return {import("../proj/Projection.js").default} Projection.
     */
    readProjectionFromDocument(doc) {
      return this.dataProjection;
    }

    /**
     * @param {Node} node Node.
     * @protected
     * @return {import("../proj/Projection.js").default} Projection.
     */
    readProjectionFromNode(node) {
      return this.dataProjection;
    }

    /**
     * @inheritDoc
     */
    writeFeature(feature, opt_options) {
      const node = this.writeFeatureNode(feature, opt_options);
      return this.xmlSerializer_.serializeToString(node);
    }

    /**
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("./Feature.js").WriteOptions=} opt_options Options.
     * @protected
     * @return {Node} Node.
     */
    writeFeatureNode(feature, opt_options) {
      return null; // not implemented
    }

    /**
     * Encode an array of features as string.
     *
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {string} Result.
     * @api
     */
    writeFeatures(features, opt_options) {
      const node = this.writeFeaturesNode(features, opt_options);
      return this.xmlSerializer_.serializeToString(node);
    }

    /**
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions=} opt_options Options.
     * @return {Node} Node.
     */
    writeFeaturesNode(features, opt_options) {
      return null; // not implemented
    }

    /**
     * @inheritDoc
     */
    writeGeometry(geometry, opt_options) {
      const node = this.writeGeometryNode(geometry, opt_options);
      return this.xmlSerializer_.serializeToString(node);
    }

    /**
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions=} opt_options Options.
     * @return {Node} Node.
     */
    writeGeometryNode(geometry, opt_options) {
      return null; // not implemented
    }
  }

  /**
   * @module ol/format/GMLBase
   */


  /**
   * @const
   * @type {string}
   */
  const GMLNS = 'http://www.opengis.net/gml';


  /**
   * A regular expression that matches if a string only contains whitespace
   * characters. It will e.g. match `''`, `' '`, `'\n'` etc. The non-breaking
   * space (0xa0) is explicitly included as IE doesn't include it in its
   * definition of `\s`.
   *
   * Information from `goog.string.isEmptyOrWhitespace`: https://github.com/google/closure-library/blob/e877b1e/closure/goog/string/string.js#L156-L160
   *
   * @const
   * @type {RegExp}
   */
  const ONLY_WHITESPACE_RE = /^[\s\xa0]*$/;


  /**
   * @typedef {Object} Options
   * @property {Object<string, string>|string} [featureNS] Feature
   * namespace. If not defined will be derived from GML. If multiple
   * feature types have been configured which come from different feature
   * namespaces, this will be an object with the keys being the prefixes used
   * in the entries of featureType array. The values of the object will be the
   * feature namespaces themselves. So for instance there might be a featureType
   * item `topp:states` in the `featureType` array and then there will be a key
   * `topp` in the featureNS object with value `http://www.openplans.org/topp`.
   * @property {Array<string>|string} [featureType] Feature type(s) to parse.
   * If multiple feature types need to be configured
   * which come from different feature namespaces, `featureNS` will be an object
   * with the keys being the prefixes used in the entries of featureType array.
   * The values of the object will be the feature namespaces themselves.
   * So for instance there might be a featureType item `topp:states` and then
   * there will be a key named `topp` in the featureNS object with value
   * `http://www.openplans.org/topp`.
   * @property {string} srsName srsName to use when writing geometries.
   * @property {boolean} [surface=false] Write gml:Surface instead of gml:Polygon
   * elements. This also affects the elements in multi-part geometries.
   * @property {boolean} [curve=false] Write gml:Curve instead of gml:LineString
   * elements. This also affects the elements in multi-part geometries.
   * @property {boolean} [multiCurve=true] Write gml:MultiCurve instead of gml:MultiLineString.
   * Since the latter is deprecated in GML 3.
   * @property {boolean} [multiSurface=true] Write gml:multiSurface instead of
   * gml:MultiPolygon. Since the latter is deprecated in GML 3.
   * @property {string} [schemaLocation] Optional schemaLocation to use when
   * writing out the GML, this will override the default provided.
   * @property {boolean} [hasZ=false] If coordinates have a Z value.
   */


  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Feature base format for reading and writing data in the GML format.
   * This class cannot be instantiated, it contains only base content that
   * is shared with versioned format classes GML2 and GML3.
   *
   * @abstract
   */
  class GMLBase extends XMLFeature {

    /**
     * @param {Options=} opt_options Optional configuration object.
     */
    constructor(opt_options) {
      super();

      const options = /** @type {Options} */ (opt_options ? opt_options : {});

      /**
       * @protected
       * @type {Array<string>|string|undefined}
       */
      this.featureType = options.featureType;

      /**
       * @protected
       * @type {Object<string, string>|string|undefined}
       */
      this.featureNS = options.featureNS;

      /**
       * @protected
       * @type {string}
       */
      this.srsName = options.srsName;

      /**
       * @protected
       * @type {string}
       */
      this.schemaLocation = '';

      /**
       * @type {Object<string, Object<string, Object>>}
       */
      this.FEATURE_COLLECTION_PARSERS = {};
      this.FEATURE_COLLECTION_PARSERS[this.namespace] = {
        'featureMember': makeArrayPusher(this.readFeaturesInternal),
        'featureMembers': makeReplacer(this.readFeaturesInternal)
      };
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<Feature> | undefined} Features.
     */
    readFeaturesInternal(node, objectStack) {
      const localName = node.localName;
      let features = null;
      if (localName == 'FeatureCollection') {
        features = pushParseAndPop([],
          this.FEATURE_COLLECTION_PARSERS, node,
          objectStack, this);
      } else if (localName == 'featureMembers' || localName == 'featureMember') {
        const context = objectStack[0];
        let featureType = context['featureType'];
        let featureNS = context['featureNS'];
        const prefix = 'p';
        const defaultPrefix = 'p0';
        if (!featureType && node.childNodes) {
          featureType = [], featureNS = {};
          for (let i = 0, ii = node.childNodes.length; i < ii; ++i) {
            const child = node.childNodes[i];
            if (child.nodeType === 1) {
              const ft = child.nodeName.split(':').pop();
              if (featureType.indexOf(ft) === -1) {
                let key = '';
                let count = 0;
                const uri = child.namespaceURI;
                for (const candidate in featureNS) {
                  if (featureNS[candidate] === uri) {
                    key = candidate;
                    break;
                  }
                  ++count;
                }
                if (!key) {
                  key = prefix + count;
                  featureNS[key] = uri;
                }
                featureType.push(key + ':' + ft);
              }
            }
          }
          if (localName != 'featureMember') {
            // recheck featureType for each featureMember
            context['featureType'] = featureType;
            context['featureNS'] = featureNS;
          }
        }
        if (typeof featureNS === 'string') {
          const ns = featureNS;
          featureNS = {};
          featureNS[defaultPrefix] = ns;
        }
        /** @type {Object<string, Object<string, import("../xml.js").Parser>>} */
        const parsersNS = {};
        const featureTypes = Array.isArray(featureType) ? featureType : [featureType];
        for (const p in featureNS) {
          /** @type {Object<string, import("../xml.js").Parser>} */
          const parsers = {};
          for (let i = 0, ii = featureTypes.length; i < ii; ++i) {
            const featurePrefix = featureTypes[i].indexOf(':') === -1 ?
              defaultPrefix : featureTypes[i].split(':')[0];
            if (featurePrefix === p) {
              parsers[featureTypes[i].split(':').pop()] =
                  (localName == 'featureMembers') ?
                    makeArrayPusher(this.readFeatureElement, this) :
                    makeReplacer(this.readFeatureElement, this);
            }
          }
          parsersNS[featureNS[p]] = parsers;
        }
        if (localName == 'featureMember') {
          features = pushParseAndPop(undefined, parsersNS, node, objectStack);
        } else {
          features = pushParseAndPop([], parsersNS, node, objectStack);
        }
      }
      if (features === null) {
        features = [];
      }
      return features;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {import("../geom/Geometry.js").default|import("../extent.js").Extent|undefined} Geometry.
     */
    readGeometryElement(node, objectStack) {
      const context = /** @type {Object} */ (objectStack[0]);
      context['srsName'] = node.firstElementChild.getAttribute('srsName');
      context['srsDimension'] = node.firstElementChild.getAttribute('srsDimension');
      const geometry = pushParseAndPop(null, this.GEOMETRY_PARSERS, node, objectStack, this);
      if (geometry) {
        if (Array.isArray(geometry)) {
          return transformExtentWithOptions(/** @type {import("../extent.js").Extent} */ (geometry), context);
        } else {
          return transformGeometryWithOptions(/** @type {import("../geom/Geometry.js").default} */ (geometry), false, context);
        }
      } else {
        return undefined;
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @param {boolean} asFeature whether result should be wrapped as a feature.
     * @return {Feature|Object} Feature
     */
    readFeatureElementInternal(node, objectStack, asFeature) {
      let geometryName;
      const values = {};
      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
        let value;
        const localName = n.localName;
        // first, check if it is simple attribute
        if (n.childNodes.length === 0
                || (n.childNodes.length === 1 && (n.firstChild.nodeType === 3 || n.firstChild.nodeType === 4))) {
          value = getAllTextContent(n, false);
          if (ONLY_WHITESPACE_RE.test(value)) {
            value = undefined;
          }
        } else {
          if (asFeature) {
            //if feature, try it as a geometry
            value = this.readGeometryElement(n, objectStack);
          }
          if (!value) { //if not a geometry or not a feature, treat it as a complex attribute
            value = this.readFeatureElementInternal(n, objectStack, false);
          } else if (localName !== 'boundedBy') {
            // boundedBy is an extent and must not be considered as a geometry
            geometryName = localName;
          }
        }

        if (values[localName]) {
          if (!(values[localName] instanceof Array)) {
            values[localName] = [values[localName]];
          }
          values[localName].push(value);
        } else {
          values[localName] = value;
        }

        const len = n.attributes.length;
        if (len > 0) {
          values[localName] = {_content_: values[localName]};
          for (let i = 0; i < len; i++) {
            const attName = n.attributes[i].name;
            values[localName][attName] = n.attributes[i].value;
          }
        }
      }
      if (!asFeature) {
        return values;
      } else {
        const feature = new Feature(values);
        if (geometryName) {
          feature.setGeometryName(geometryName);
        }
        const fid = node.getAttribute('fid') ||
             getAttributeNS(node, this.namespace, 'id');
        if (fid) {
          feature.setId(fid);
        }
        return feature;
      }
    }


    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Feature} Feature.
     */
    readFeatureElement(node, objectStack) {
      return this.readFeatureElementInternal(node, objectStack, true);
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Point|undefined} Point.
     */
    readPoint(node, objectStack) {
      const flatCoordinates = this.readFlatCoordinatesFromNode_(node, objectStack);
      if (flatCoordinates) {
        return new Point(flatCoordinates, GeometryLayout.XYZ);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {MultiPoint|undefined} MultiPoint.
     */
    readMultiPoint(node, objectStack) {
      /** @type {Array<Array<number>>} */
      const coordinates = pushParseAndPop([],
        this.MULTIPOINT_PARSERS_, node, objectStack, this);
      if (coordinates) {
        return new MultiPoint(coordinates);
      } else {
        return undefined;
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {MultiLineString|undefined} MultiLineString.
     */
    readMultiLineString(node, objectStack) {
      /** @type {Array<LineString>} */
      const lineStrings = pushParseAndPop([],
        this.MULTILINESTRING_PARSERS_, node, objectStack, this);
      if (lineStrings) {
        return new MultiLineString(lineStrings);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {MultiPolygon|undefined} MultiPolygon.
     */
    readMultiPolygon(node, objectStack) {
      /** @type {Array<Polygon>} */
      const polygons = pushParseAndPop([], this.MULTIPOLYGON_PARSERS_, node, objectStack, this);
      if (polygons) {
        return new MultiPolygon(polygons);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     */
    pointMemberParser_(node, objectStack) {
      parseNode(this.POINTMEMBER_PARSERS_, node, objectStack, this);
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     */
    lineStringMemberParser_(node, objectStack) {
      parseNode(this.LINESTRINGMEMBER_PARSERS_, node, objectStack, this);
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     */
    polygonMemberParser_(node, objectStack) {
      parseNode(this.POLYGONMEMBER_PARSERS_, node, objectStack, this);
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {LineString|undefined} LineString.
     */
    readLineString(node, objectStack) {
      const flatCoordinates = this.readFlatCoordinatesFromNode_(node, objectStack);
      if (flatCoordinates) {
        const lineString = new LineString(flatCoordinates, GeometryLayout.XYZ);
        return lineString;
      } else {
        return undefined;
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     * @return {Array<number>|undefined} LinearRing flat coordinates.
     */
    readFlatLinearRing_(node, objectStack) {
      const ring = pushParseAndPop(null,
        this.GEOMETRY_FLAT_COORDINATES_PARSERS, node,
        objectStack, this);
      if (ring) {
        return ring;
      } else {
        return undefined;
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {LinearRing|undefined} LinearRing.
     */
    readLinearRing(node, objectStack) {
      const flatCoordinates = this.readFlatCoordinatesFromNode_(node, objectStack);
      if (flatCoordinates) {
        return new LinearRing(flatCoordinates, GeometryLayout.XYZ);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Polygon|undefined} Polygon.
     */
    readPolygon(node, objectStack) {
      /** @type {Array<Array<number>>} */
      const flatLinearRings = pushParseAndPop([null],
        this.FLAT_LINEAR_RINGS_PARSERS, node, objectStack, this);
      if (flatLinearRings && flatLinearRings[0]) {
        const flatCoordinates = flatLinearRings[0];
        const ends = [flatCoordinates.length];
        let i, ii;
        for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {
          extend$1(flatCoordinates, flatLinearRings[i]);
          ends.push(flatCoordinates.length);
        }
        return new Polygon(flatCoordinates, GeometryLayout.XYZ, ends);
      } else {
        return undefined;
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     * @return {Array<number>} Flat coordinates.
     */
    readFlatCoordinatesFromNode_(node, objectStack) {
      return pushParseAndPop(null, this.GEOMETRY_FLAT_COORDINATES_PARSERS, node, objectStack, this);
    }

    /**
     * @inheritDoc
     */
    readGeometryFromNode(node, opt_options) {
      const geometry = this.readGeometryElement(node,
        [this.getReadOptions(node, opt_options ? opt_options : {})]);
      return geometry ? geometry : null;
    }

    /**
     * @inheritDoc
     */
    readFeaturesFromNode(node, opt_options) {
      const options = {
        featureType: this.featureType,
        featureNS: this.featureNS
      };
      if (opt_options) {
        assign(options, this.getReadOptions(node, opt_options));
      }
      const features = this.readFeaturesInternal(node, [options]);
      return features || [];
    }

    /**
     * @inheritDoc
     */
    readProjectionFromNode(node) {
      return get$2(this.srsName ? this.srsName : node.firstElementChild.getAttribute('srsName'));
    }
  }


  GMLBase.prototype.namespace = GMLNS;


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   * @protected
   */
  GMLBase.prototype.FLAT_LINEAR_RINGS_PARSERS = {
    'http://www.opengis.net/gml': {}
  };


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   * @protected
   */
  GMLBase.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {
    'http://www.opengis.net/gml': {}
  };


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   * @protected
   */
  GMLBase.prototype.GEOMETRY_PARSERS = {
    'http://www.opengis.net/gml': {}
  };


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   * @private
   */
  GMLBase.prototype.MULTIPOINT_PARSERS_ = {
    'http://www.opengis.net/gml': {
      'pointMember': makeArrayPusher(GMLBase.prototype.pointMemberParser_),
      'pointMembers': makeArrayPusher(GMLBase.prototype.pointMemberParser_)
    }
  };


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   * @private
   */
  GMLBase.prototype.MULTILINESTRING_PARSERS_ = {
    'http://www.opengis.net/gml': {
      'lineStringMember': makeArrayPusher(GMLBase.prototype.lineStringMemberParser_),
      'lineStringMembers': makeArrayPusher(GMLBase.prototype.lineStringMemberParser_)
    }
  };


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   * @private
   */
  GMLBase.prototype.MULTIPOLYGON_PARSERS_ = {
    'http://www.opengis.net/gml': {
      'polygonMember': makeArrayPusher(GMLBase.prototype.polygonMemberParser_),
      'polygonMembers': makeArrayPusher(GMLBase.prototype.polygonMemberParser_)
    }
  };


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   * @private
   */
  GMLBase.prototype.POINTMEMBER_PARSERS_ = {
    'http://www.opengis.net/gml': {
      'Point': makeArrayPusher(GMLBase.prototype.readFlatCoordinatesFromNode_)
    }
  };


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   * @private
   */
  GMLBase.prototype.LINESTRINGMEMBER_PARSERS_ = {
    'http://www.opengis.net/gml': {
      'LineString': makeArrayPusher(GMLBase.prototype.readLineString)
    }
  };


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   * @private
   */
  GMLBase.prototype.POLYGONMEMBER_PARSERS_ = {
    'http://www.opengis.net/gml': {
      'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon)
    }
  };


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   * @protected
   */
  GMLBase.prototype.RING_PARSERS = {
    'http://www.opengis.net/gml': {
      'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing_)
    }
  };

  /**
   * @module ol/format/xsd
   */


  /**
   * @param {Node} node Node.
   * @return {boolean|undefined} Boolean.
   */
  function readBoolean(node) {
    const s = getAllTextContent(node, false);
    return readBooleanString(s);
  }


  /**
   * @param {string} string String.
   * @return {boolean|undefined} Boolean.
   */
  function readBooleanString(string) {
    const m = /^\s*(true|1)|(false|0)\s*$/.exec(string);
    if (m) {
      return m[1] !== undefined || false;
    } else {
      return undefined;
    }
  }


  /**
   * @param {Node} node Node.
   * @return {number|undefined} DateTime in seconds.
   */
  function readDateTime(node) {
    const s = getAllTextContent(node, false);
    const dateTime = Date.parse(s);
    return isNaN(dateTime) ? undefined : dateTime / 1000;
  }


  /**
   * @param {Node} node Node.
   * @return {number|undefined} Decimal.
   */
  function readDecimal(node) {
    const s = getAllTextContent(node, false);
    return readDecimalString(s);
  }


  /**
   * @param {string} string String.
   * @return {number|undefined} Decimal.
   */
  function readDecimalString(string) {
    // FIXME check spec
    const m = /^\s*([+\-]?\d*\.?\d+(?:e[+\-]?\d+)?)\s*$/i.exec(string);
    if (m) {
      return parseFloat(m[1]);
    } else {
      return undefined;
    }
  }


  /**
   * @param {Node} node Node.
   * @return {number|undefined} Non negative integer.
   */
  function readNonNegativeInteger(node) {
    const s = getAllTextContent(node, false);
    return readNonNegativeIntegerString(s);
  }


  /**
   * @param {string} string String.
   * @return {number|undefined} Non negative integer.
   */
  function readNonNegativeIntegerString(string) {
    const m = /^\s*(\d+)\s*$/.exec(string);
    if (m) {
      return parseInt(m[1], 10);
    } else {
      return undefined;
    }
  }


  /**
   * @param {Node} node Node.
   * @return {string|undefined} String.
   */
  function readString(node) {
    return getAllTextContent(node, false).trim();
  }


  /**
   * @param {Node} node Node to append a TextNode with the boolean to.
   * @param {boolean} bool Boolean.
   */
  function writeBooleanTextNode(node, bool) {
    writeStringTextNode(node, (bool) ? '1' : '0');
  }


  /**
   * @param {Node} node Node to append a CDATA Section with the string to.
   * @param {string} string String.
   */
  function writeCDATASection(node, string) {
    node.appendChild(DOCUMENT.createCDATASection(string));
  }


  /**
   * @param {Node} node Node to append a TextNode with the dateTime to.
   * @param {number} dateTime DateTime in seconds.
   */
  function writeDateTimeTextNode(node, dateTime) {
    const date = new Date(dateTime * 1000);
    const string = date.getUTCFullYear() + '-' +
        padNumber(date.getUTCMonth() + 1, 2) + '-' +
        padNumber(date.getUTCDate(), 2) + 'T' +
        padNumber(date.getUTCHours(), 2) + ':' +
        padNumber(date.getUTCMinutes(), 2) + ':' +
        padNumber(date.getUTCSeconds(), 2) + 'Z';
    node.appendChild(DOCUMENT.createTextNode(string));
  }


  /**
   * @param {Node} node Node to append a TextNode with the decimal to.
   * @param {number} decimal Decimal.
   */
  function writeDecimalTextNode(node, decimal) {
    const string = decimal.toPrecision();
    node.appendChild(DOCUMENT.createTextNode(string));
  }


  /**
   * @param {Node} node Node to append a TextNode with the decimal to.
   * @param {number} nonNegativeInteger Non negative integer.
   */
  function writeNonNegativeIntegerTextNode(node, nonNegativeInteger) {
    const string = nonNegativeInteger.toString();
    node.appendChild(DOCUMENT.createTextNode(string));
  }


  /**
   * @param {Node} node Node to append a TextNode with the string to.
   * @param {string} string String.
   */
  function writeStringTextNode(node, string) {
    node.appendChild(DOCUMENT.createTextNode(string));
  }

  /**
   * @module ol/format/GML3
   */


  /**
   * @const
   * @type {string}
   * @private
   */
  const schemaLocation = GMLNS +
      ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' +
      '1.0.0/gmlsf.xsd';


  /**
   * @const
   * @type {Object<string, string>}
   */
  const MULTIGEOMETRY_TO_MEMBER_NODENAME = {
    'MultiLineString': 'lineStringMember',
    'MultiCurve': 'curveMember',
    'MultiPolygon': 'polygonMember',
    'MultiSurface': 'surfaceMember'
  };


  /**
   * @classdesc
   * Feature format for reading and writing data in the GML format
   * version 3.1.1.
   * Currently only supports GML 3.1.1 Simple Features profile.
   *
   * @api
   */
  class GML3 extends GMLBase {

    /**
     * @param {import("./GMLBase.js").Options=} opt_options Optional configuration object.
     */
    constructor(opt_options) {
      const options = /** @type {import("./GMLBase.js").Options} */
          (opt_options ? opt_options : {});

      super(options);

      /**
       * @private
       * @type {boolean}
       */
      this.surface_ = options.surface !== undefined ? options.surface : false;

      /**
       * @private
       * @type {boolean}
       */
      this.curve_ = options.curve !== undefined ? options.curve : false;

      /**
       * @private
       * @type {boolean}
       */
      this.multiCurve_ = options.multiCurve !== undefined ?
        options.multiCurve : true;

      /**
       * @private
       * @type {boolean}
       */
      this.multiSurface_ = options.multiSurface !== undefined ?
        options.multiSurface : true;

      /**
       * @inheritDoc
       */
      this.schemaLocation = options.schemaLocation ?
        options.schemaLocation : schemaLocation;

      /**
       * @private
       * @type {boolean}
       */
      this.hasZ = options.hasZ !== undefined ?
        options.hasZ : false;

    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     * @return {MultiLineString|undefined} MultiLineString.
     */
    readMultiCurve_(node, objectStack) {
      /** @type {Array<LineString>} */
      const lineStrings = pushParseAndPop([],
        this.MULTICURVE_PARSERS_, node, objectStack, this);
      if (lineStrings) {
        const multiLineString = new MultiLineString(lineStrings);
        return multiLineString;
      } else {
        return undefined;
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     * @return {MultiPolygon|undefined} MultiPolygon.
     */
    readMultiSurface_(node, objectStack) {
      /** @type {Array<Polygon>} */
      const polygons = pushParseAndPop([],
        this.MULTISURFACE_PARSERS_, node, objectStack, this);
      if (polygons) {
        return new MultiPolygon(polygons);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     */
    curveMemberParser_(node, objectStack) {
      parseNode(this.CURVEMEMBER_PARSERS_, node, objectStack, this);
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     */
    surfaceMemberParser_(node, objectStack) {
      parseNode(this.SURFACEMEMBER_PARSERS_,
        node, objectStack, this);
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     * @return {Array<(Array<number>)>|undefined} flat coordinates.
     */
    readPatch_(node, objectStack) {
      return pushParseAndPop([null],
        this.PATCHES_PARSERS_, node, objectStack, this);
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     * @return {Array<number>|undefined} flat coordinates.
     */
    readSegment_(node, objectStack) {
      return pushParseAndPop([null],
        this.SEGMENTS_PARSERS_, node, objectStack, this);
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     * @return {Array<(Array<number>)>|undefined} flat coordinates.
     */
    readPolygonPatch_(node, objectStack) {
      return pushParseAndPop([null],
        this.FLAT_LINEAR_RINGS_PARSERS, node, objectStack, this);
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     * @return {Array<number>|undefined} flat coordinates.
     */
    readLineStringSegment_(node, objectStack) {
      return pushParseAndPop([null],
        this.GEOMETRY_FLAT_COORDINATES_PARSERS,
        node, objectStack, this);
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     */
    interiorParser_(node, objectStack) {
      /** @type {Array<number>|undefined} */
      const flatLinearRing = pushParseAndPop(undefined,
        this.RING_PARSERS, node, objectStack, this);
      if (flatLinearRing) {
        const flatLinearRings = /** @type {Array<Array<number>>} */
            (objectStack[objectStack.length - 1]);
        flatLinearRings.push(flatLinearRing);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     */
    exteriorParser_(node, objectStack) {
      /** @type {Array<number>|undefined} */
      const flatLinearRing = pushParseAndPop(undefined,
        this.RING_PARSERS, node, objectStack, this);
      if (flatLinearRing) {
        const flatLinearRings = /** @type {Array<Array<number>>} */
            (objectStack[objectStack.length - 1]);
        flatLinearRings[0] = flatLinearRing;
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     * @return {Polygon|undefined} Polygon.
     */
    readSurface_(node, objectStack) {
      /** @type {Array<Array<number>>} */
      const flatLinearRings = pushParseAndPop([null],
        this.SURFACE_PARSERS_, node, objectStack, this);
      if (flatLinearRings && flatLinearRings[0]) {
        const flatCoordinates = flatLinearRings[0];
        const ends = [flatCoordinates.length];
        let i, ii;
        for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {
          extend$1(flatCoordinates, flatLinearRings[i]);
          ends.push(flatCoordinates.length);
        }
        return new Polygon(flatCoordinates, GeometryLayout.XYZ, ends);
      } else {
        return undefined;
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     * @return {LineString|undefined} LineString.
     */
    readCurve_(node, objectStack) {
      /** @type {Array<number>} */
      const flatCoordinates = pushParseAndPop([null],
        this.CURVE_PARSERS_, node, objectStack, this);
      if (flatCoordinates) {
        const lineString = new LineString(flatCoordinates, GeometryLayout.XYZ);
        return lineString;
      } else {
        return undefined;
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     * @return {import("../extent.js").Extent|undefined} Envelope.
     */
    readEnvelope_(node, objectStack) {
      /** @type {Array<number>} */
      const flatCoordinates = pushParseAndPop([null],
        this.ENVELOPE_PARSERS_, node, objectStack, this);
      return createOrUpdate(flatCoordinates[1][0],
        flatCoordinates[1][1], flatCoordinates[2][0],
        flatCoordinates[2][1]);
    }

    /**
     * @param {Node} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     * @return {Array<number>|undefined} Flat coordinates.
     */
    readFlatPos_(node, objectStack) {
      let s = getAllTextContent(node, false);
      const re = /^\s*([+\-]?\d*\.?\d+(?:[eE][+\-]?\d+)?)\s*/;
      /** @type {Array<number>} */
      const flatCoordinates = [];
      let m;
      while ((m = re.exec(s))) {
        flatCoordinates.push(parseFloat(m[1]));
        s = s.substr(m[0].length);
      }
      if (s !== '') {
        return undefined;
      }
      const context = objectStack[0];
      const containerSrs = context['srsName'];
      let axisOrientation = 'enu';
      if (containerSrs) {
        const proj = get$2(containerSrs);
        axisOrientation = proj.getAxisOrientation();
      }
      if (axisOrientation === 'neu') {
        let i, ii;
        for (i = 0, ii = flatCoordinates.length; i < ii; i += 3) {
          const y = flatCoordinates[i];
          const x = flatCoordinates[i + 1];
          flatCoordinates[i] = x;
          flatCoordinates[i + 1] = y;
        }
      }
      const len = flatCoordinates.length;
      if (len == 2) {
        flatCoordinates.push(0);
      }
      if (len === 0) {
        return undefined;
      }
      return flatCoordinates;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     * @return {Array<number>|undefined} Flat coordinates.
     */
    readFlatPosList_(node, objectStack) {
      const s = getAllTextContent(node, false).replace(/^\s*|\s*$/g, '');
      const context = objectStack[0];
      const containerSrs = context['srsName'];
      const contextDimension = context['srsDimension'];
      let axisOrientation = 'enu';
      if (containerSrs) {
        const proj = get$2(containerSrs);
        axisOrientation = proj.getAxisOrientation();
      }
      const coords = s.split(/\s+/);
      // The "dimension" attribute is from the GML 3.0.1 spec.
      let dim = 2;
      if (node.getAttribute('srsDimension')) {
        dim = readNonNegativeIntegerString(
          node.getAttribute('srsDimension'));
      } else if (node.getAttribute('dimension')) {
        dim = readNonNegativeIntegerString(
          node.getAttribute('dimension'));
      } else if (/** @type {Element} */ (node.parentNode).getAttribute('srsDimension')) {
        dim = readNonNegativeIntegerString(
          /** @type {Element} */ (node.parentNode).getAttribute('srsDimension'));
      } else if (contextDimension) {
        dim = readNonNegativeIntegerString(contextDimension);
      }
      let x, y, z;
      const flatCoordinates = [];
      for (let i = 0, ii = coords.length; i < ii; i += dim) {
        x = parseFloat(coords[i]);
        y = parseFloat(coords[i + 1]);
        z = (dim === 3) ? parseFloat(coords[i + 2]) : 0;
        if (axisOrientation.substr(0, 2) === 'en') {
          flatCoordinates.push(x, y, z);
        } else {
          flatCoordinates.push(y, x, z);
        }
      }
      return flatCoordinates;
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/Point.js").default} value Point geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writePos_(node, value, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsDimension = hasZ ? '3' : '2';
      node.setAttribute('srsDimension', srsDimension);
      const srsName = context['srsName'];
      let axisOrientation = 'enu';
      if (srsName) {
        axisOrientation = get$2(srsName).getAxisOrientation();
      }
      const point = value.getCoordinates();
      let coords;
      // only 2d for simple features profile
      if (axisOrientation.substr(0, 2) === 'en') {
        coords = (point[0] + ' ' + point[1]);
      } else {
        coords = (point[1] + ' ' + point[0]);
      }
      if (hasZ) {
        // For newly created points, Z can be undefined.
        const z = point[2] || 0;
        coords += ' ' + z;
      }
      writeStringTextNode(node, coords);
    }

    /**
     * @param {Array<number>} point Point geometry.
     * @param {string=} opt_srsName Optional srsName
     * @param {boolean=} opt_hasZ whether the geometry has a Z coordinate (is 3D) or not.
     * @return {string} The coords string.
     * @private
     */
    getCoords_(point, opt_srsName, opt_hasZ) {
      let axisOrientation = 'enu';
      if (opt_srsName) {
        axisOrientation = get$2(opt_srsName).getAxisOrientation();
      }
      let coords = ((axisOrientation.substr(0, 2) === 'en') ?
        point[0] + ' ' + point[1] :
        point[1] + ' ' + point[0]);
      if (opt_hasZ) {
        // For newly created points, Z can be undefined.
        const z = point[2] || 0;
        coords += ' ' + z;
      }

      return coords;
    }

    /**
     * @param {Element} node Node.
     * @param {LineString|import("../geom/LinearRing.js").default} value Geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writePosList_(node, value, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsDimension = hasZ ? '3' : '2';
      node.setAttribute('srsDimension', srsDimension);
      const srsName = context['srsName'];
      // only 2d for simple features profile
      const points = value.getCoordinates();
      const len = points.length;
      const parts = new Array(len);
      let point;
      for (let i = 0; i < len; ++i) {
        point = points[i];
        parts[i] = this.getCoords_(point, srsName, hasZ);
      }
      writeStringTextNode(node, parts.join(' '));
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/Point.js").default} geometry Point geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writePoint_(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const srsName = context['srsName'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const pos = createElementNS(node.namespaceURI, 'pos');
      node.appendChild(pos);
      this.writePos_(pos, geometry, objectStack);
    }

    /**
     * @param {Element} node Node.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {Array<*>} objectStack Node stack.
     */
    writeEnvelope(node, extent, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const srsName = context['srsName'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const keys = ['lowerCorner', 'upperCorner'];
      const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];
      pushSerializeAndPop(/** @type {import("../xml.js").NodeStackItem} */
        ({node: node}), this.ENVELOPE_SERIALIZERS_,
        OBJECT_PROPERTY_NODE_FACTORY,
        values,
        objectStack, keys, this);
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/LinearRing.js").default} geometry LinearRing geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeLinearRing_(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const srsName = context['srsName'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const posList = createElementNS(node.namespaceURI, 'posList');
      node.appendChild(posList);
      this.writePosList_(posList, geometry, objectStack);
    }

    /**
     * @param {*} value Value.
     * @param {Array<*>} objectStack Object stack.
     * @param {string=} opt_nodeName Node name.
     * @return {Node} Node.
     * @private
     */
    RING_NODE_FACTORY_(value, objectStack, opt_nodeName) {
      const context = objectStack[objectStack.length - 1];
      const parentNode = context.node;
      const exteriorWritten = context['exteriorWritten'];
      if (exteriorWritten === undefined) {
        context['exteriorWritten'] = true;
      }
      return createElementNS(parentNode.namespaceURI,
        exteriorWritten !== undefined ? 'interior' : 'exterior');
    }

    /**
     * @param {Element} node Node.
     * @param {Polygon} geometry Polygon geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeSurfaceOrPolygon_(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsName = context['srsName'];
      if (node.nodeName !== 'PolygonPatch' && srsName) {
        node.setAttribute('srsName', srsName);
      }
      if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {
        const rings = geometry.getLinearRings();
        pushSerializeAndPop(
          {node: node, hasZ: hasZ, srsName: srsName},
          this.RING_SERIALIZERS_,
          this.RING_NODE_FACTORY_,
          rings, objectStack, undefined, this);
      } else if (node.nodeName === 'Surface') {
        const patches = createElementNS(node.namespaceURI, 'patches');
        node.appendChild(patches);
        this.writeSurfacePatches_(
          patches, geometry, objectStack);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {LineString} geometry LineString geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeCurveOrLineString_(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const srsName = context['srsName'];
      if (node.nodeName !== 'LineStringSegment' && srsName) {
        node.setAttribute('srsName', srsName);
      }
      if (node.nodeName === 'LineString' ||
          node.nodeName === 'LineStringSegment') {
        const posList = createElementNS(node.namespaceURI, 'posList');
        node.appendChild(posList);
        this.writePosList_(posList, geometry, objectStack);
      } else if (node.nodeName === 'Curve') {
        const segments = createElementNS(node.namespaceURI, 'segments');
        node.appendChild(segments);
        this.writeCurveSegments_(segments,
          geometry, objectStack);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {MultiPolygon} geometry MultiPolygon geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeMultiSurfaceOrPolygon_(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsName = context['srsName'];
      const surface = context['surface'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const polygons = geometry.getPolygons();
      pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName, surface: surface},
        this.SURFACEORPOLYGONMEMBER_SERIALIZERS_,
        this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons,
        objectStack, undefined, this);
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/MultiPoint.js").default} geometry MultiPoint geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeMultiPoint_(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const srsName = context['srsName'];
      const hasZ = context['hasZ'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const points = geometry.getPoints();
      pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName},
        this.POINTMEMBER_SERIALIZERS_,
        makeSimpleNodeFactory('pointMember'), points,
        objectStack, undefined, this);
    }

    /**
     * @param {Element} node Node.
     * @param {MultiLineString} geometry MultiLineString geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeMultiCurveOrLineString_(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsName = context['srsName'];
      const curve = context['curve'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const lines = geometry.getLineStrings();
      pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName, curve: curve},
        this.LINESTRINGORCURVEMEMBER_SERIALIZERS_,
        this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines,
        objectStack, undefined, this);
    }

    /**
     * @param {Node} node Node.
     * @param {import("../geom/LinearRing.js").default} ring LinearRing geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeRing_(node, ring, objectStack) {
      const linearRing = createElementNS(node.namespaceURI, 'LinearRing');
      node.appendChild(linearRing);
      this.writeLinearRing_(linearRing, ring, objectStack);
    }

    /**
     * @param {Node} node Node.
     * @param {Polygon} polygon Polygon geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeSurfaceOrPolygonMember_(node, polygon, objectStack) {
      const child = this.GEOMETRY_NODE_FACTORY_(
        polygon, objectStack);
      if (child) {
        node.appendChild(child);
        this.writeSurfaceOrPolygon_(child, polygon, objectStack);
      }
    }

    /**
     * @param {Node} node Node.
     * @param {import("../geom/Point.js").default} point Point geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writePointMember_(node, point, objectStack) {
      const child = createElementNS(node.namespaceURI, 'Point');
      node.appendChild(child);
      this.writePoint_(child, point, objectStack);
    }

    /**
     * @param {Node} node Node.
     * @param {LineString} line LineString geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeLineStringOrCurveMember_(node, line, objectStack) {
      const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);
      if (child) {
        node.appendChild(child);
        this.writeCurveOrLineString_(child, line, objectStack);
      }
    }

    /**
     * @param {Node} node Node.
     * @param {Polygon} polygon Polygon geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeSurfacePatches_(node, polygon, objectStack) {
      const child = createElementNS(node.namespaceURI, 'PolygonPatch');
      node.appendChild(child);
      this.writeSurfaceOrPolygon_(child, polygon, objectStack);
    }

    /**
     * @param {Node} node Node.
     * @param {LineString} line LineString geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeCurveSegments_(node, line, objectStack) {
      const child = createElementNS(node.namespaceURI,
        'LineStringSegment');
      node.appendChild(child);
      this.writeCurveOrLineString_(child, line, objectStack);
    }

    /**
     * @param {Node} node Node.
     * @param {import("../geom/Geometry.js").default|import("../extent.js").Extent} geometry Geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeGeometryElement(node, geometry, objectStack) {
      const context = /** @type {import("./Feature.js").WriteOptions} */ (objectStack[objectStack.length - 1]);
      const item = assign({}, context);
      item['node'] = node;
      let value;
      if (Array.isArray(geometry)) {
        value = transformExtentWithOptions(/** @type {import("../extent.js").Extent} */ (geometry), context);
      } else {
        value = transformGeometryWithOptions(/** @type {import("../geom/Geometry.js").default} */ (geometry), true, context);
      }
      pushSerializeAndPop(/** @type {import("../xml.js").NodeStackItem} */
        (item), this.GEOMETRY_SERIALIZERS_,
        this.GEOMETRY_NODE_FACTORY_, [value],
        objectStack, undefined, this);
    }

    /**
     * @param {Element} node Node.
     * @param {import("../Feature.js").default} feature Feature.
     * @param {Array<*>} objectStack Node stack.
     */
    writeFeatureElement(node, feature, objectStack) {
      const fid = feature.getId();
      if (fid) {
        node.setAttribute('fid', /** @type {string} */ (fid));
      }
      const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);
      const featureNS = context['featureNS'];
      const geometryName = feature.getGeometryName();
      if (!context.serializers) {
        context.serializers = {};
        context.serializers[featureNS] = {};
      }
      const properties = feature.getProperties();
      const keys = [];
      const values = [];
      for (const key in properties) {
        const value = properties[key];
        if (value !== null) {
          keys.push(key);
          values.push(value);
          if (key == geometryName || typeof /** @type {?} */ (value).getSimplifiedGeometry === 'function') {
            if (!(key in context.serializers[featureNS])) {
              context.serializers[featureNS][key] = makeChildAppender(
                this.writeGeometryElement, this);
            }
          } else {
            if (!(key in context.serializers[featureNS])) {
              context.serializers[featureNS][key] = makeChildAppender(writeStringTextNode);
            }
          }
        }
      }
      const item = assign({}, context);
      item.node = node;
      pushSerializeAndPop(/** @type {import("../xml.js").NodeStackItem} */
        (item), context.serializers,
        makeSimpleNodeFactory(undefined, featureNS),
        values,
        objectStack, keys);
    }

    /**
     * @param {Node} node Node.
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeFeatureMembers_(node, features, objectStack) {
      const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);
      const featureType = context['featureType'];
      const featureNS = context['featureNS'];
      /** @type {Object<string, Object<string, import("../xml.js").Serializer>>} */
      const serializers = {};
      serializers[featureNS] = {};
      serializers[featureNS][featureType] = makeChildAppender(
        this.writeFeatureElement, this);
      const item = assign({}, context);
      item.node = node;
      pushSerializeAndPop(/** @type {import("../xml.js").NodeStackItem} */
        (item),
        serializers,
        makeSimpleNodeFactory(featureType, featureNS), features,
        objectStack);
    }

    /**
     * @const
     * @param {*} value Value.
     * @param {Array<*>} objectStack Object stack.
     * @param {string=} opt_nodeName Node name.
     * @return {Node|undefined} Node.
     * @private
     */
    MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, opt_nodeName) {
      const parentNode = objectStack[objectStack.length - 1].node;
      return createElementNS(this.namespace,
        MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]);
    }

    /**
     * @const
     * @param {*} value Value.
     * @param {Array<*>} objectStack Object stack.
     * @param {string=} opt_nodeName Node name.
     * @return {Element|undefined} Node.
     * @private
     */
    GEOMETRY_NODE_FACTORY_(value, objectStack, opt_nodeName) {
      const context = objectStack[objectStack.length - 1];
      const multiSurface = context['multiSurface'];
      const surface = context['surface'];
      const curve = context['curve'];
      const multiCurve = context['multiCurve'];
      let nodeName;
      if (!Array.isArray(value)) {
        nodeName = /** @type {import("../geom/Geometry.js").default} */ (value).getType();
        if (nodeName === 'MultiPolygon' && multiSurface === true) {
          nodeName = 'MultiSurface';
        } else if (nodeName === 'Polygon' && surface === true) {
          nodeName = 'Surface';
        } else if (nodeName === 'LineString' && curve === true) {
          nodeName = 'Curve';
        } else if (nodeName === 'MultiLineString' && multiCurve === true) {
          nodeName = 'MultiCurve';
        }
      } else {
        nodeName = 'Envelope';
      }
      return createElementNS(this.namespace,
        nodeName);
    }

    /**
     * Encode a geometry in GML 3.1.1 Simple Features.
     *
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions=} opt_options Options.
     * @return {Node} Node.
     * @override
     * @api
     */
    writeGeometryNode(geometry, opt_options) {
      opt_options = this.adaptOptions(opt_options);
      const geom = createElementNS(this.namespace, 'geom');
      const context = {node: geom, hasZ: this.hasZ, srsName: this.srsName,
        curve: this.curve_, surface: this.surface_,
        multiSurface: this.multiSurface_, multiCurve: this.multiCurve_};
      if (opt_options) {
        assign(context, opt_options);
      }
      this.writeGeometryElement(geom, geometry, [context]);
      return geom;
    }

    /**
     * Encode an array of features in the GML 3.1.1 format as an XML node.
     *
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions=} opt_options Options.
     * @return {Element} Node.
     * @override
     * @api
     */
    writeFeaturesNode(features, opt_options) {
      opt_options = this.adaptOptions(opt_options);
      const node = createElementNS(this.namespace, 'featureMembers');
      node.setAttributeNS(XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', this.schemaLocation);
      const context = {
        srsName: this.srsName,
        hasZ: this.hasZ,
        curve: this.curve_,
        surface: this.surface_,
        multiSurface: this.multiSurface_,
        multiCurve: this.multiCurve_,
        featureNS: this.featureNS,
        featureType: this.featureType
      };
      if (opt_options) {
        assign(context, opt_options);
      }
      this.writeFeatureMembers_(node, features, [context]);
      return node;
    }
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   * @protected
   */
  GML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {
    'http://www.opengis.net/gml': {
      'pos': makeReplacer(GML3.prototype.readFlatPos_),
      'posList': makeReplacer(GML3.prototype.readFlatPosList_)
    }
  };


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   * @protected
   */
  GML3.prototype.FLAT_LINEAR_RINGS_PARSERS = {
    'http://www.opengis.net/gml': {
      'interior': GML3.prototype.interiorParser_,
      'exterior': GML3.prototype.exteriorParser_
    }
  };


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   * @protected
   */
  GML3.prototype.GEOMETRY_PARSERS = {
    'http://www.opengis.net/gml': {
      'Point': makeReplacer(GMLBase.prototype.readPoint),
      'MultiPoint': makeReplacer(
        GMLBase.prototype.readMultiPoint),
      'LineString': makeReplacer(
        GMLBase.prototype.readLineString),
      'MultiLineString': makeReplacer(
        GMLBase.prototype.readMultiLineString),
      'LinearRing': makeReplacer(
        GMLBase.prototype.readLinearRing),
      'Polygon': makeReplacer(GMLBase.prototype.readPolygon),
      'MultiPolygon': makeReplacer(
        GMLBase.prototype.readMultiPolygon),
      'Surface': makeReplacer(GML3.prototype.readSurface_),
      'MultiSurface': makeReplacer(
        GML3.prototype.readMultiSurface_),
      'Curve': makeReplacer(GML3.prototype.readCurve_),
      'MultiCurve': makeReplacer(
        GML3.prototype.readMultiCurve_),
      'Envelope': makeReplacer(GML3.prototype.readEnvelope_)
    }
  };


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   * @private
   */
  GML3.prototype.MULTICURVE_PARSERS_ = {
    'http://www.opengis.net/gml': {
      'curveMember': makeArrayPusher(
        GML3.prototype.curveMemberParser_),
      'curveMembers': makeArrayPusher(
        GML3.prototype.curveMemberParser_)
    }
  };


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   * @private
   */
  GML3.prototype.MULTISURFACE_PARSERS_ = {
    'http://www.opengis.net/gml': {
      'surfaceMember': makeArrayPusher(
        GML3.prototype.surfaceMemberParser_),
      'surfaceMembers': makeArrayPusher(
        GML3.prototype.surfaceMemberParser_)
    }
  };


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   * @private
   */
  GML3.prototype.CURVEMEMBER_PARSERS_ = {
    'http://www.opengis.net/gml': {
      'LineString': makeArrayPusher(
        GMLBase.prototype.readLineString),
      'Curve': makeArrayPusher(GML3.prototype.readCurve_)
    }
  };


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   * @private
   */
  GML3.prototype.SURFACEMEMBER_PARSERS_ = {
    'http://www.opengis.net/gml': {
      'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),
      'Surface': makeArrayPusher(GML3.prototype.readSurface_)
    }
  };


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   * @private
   */
  GML3.prototype.SURFACE_PARSERS_ = {
    'http://www.opengis.net/gml': {
      'patches': makeReplacer(GML3.prototype.readPatch_)
    }
  };


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   * @private
   */
  GML3.prototype.CURVE_PARSERS_ = {
    'http://www.opengis.net/gml': {
      'segments': makeReplacer(GML3.prototype.readSegment_)
    }
  };


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   * @private
   */
  GML3.prototype.ENVELOPE_PARSERS_ = {
    'http://www.opengis.net/gml': {
      'lowerCorner': makeArrayPusher(
        GML3.prototype.readFlatPosList_),
      'upperCorner': makeArrayPusher(
        GML3.prototype.readFlatPosList_)
    }
  };


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   * @private
   */
  GML3.prototype.PATCHES_PARSERS_ = {
    'http://www.opengis.net/gml': {
      'PolygonPatch': makeReplacer(
        GML3.prototype.readPolygonPatch_)
    }
  };


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   * @private
   */
  GML3.prototype.SEGMENTS_PARSERS_ = {
    'http://www.opengis.net/gml': {
      'LineStringSegment': makeReplacer(
        GML3.prototype.readLineStringSegment_)
    }
  };


  /**
   * Encode an array of features in GML 3.1.1 Simple Features.
   *
   * @function
   * @param {Array<import("../Feature.js").default>} features Features.
   * @param {import("./Feature.js").WriteOptions=} opt_options Options.
   * @return {string} Result.
   * @api
   */
  GML3.prototype.writeFeatures;


  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   * @private
   */
  GML3.prototype.RING_SERIALIZERS_ = {
    'http://www.opengis.net/gml': {
      'exterior': makeChildAppender(GML3.prototype.writeRing_),
      'interior': makeChildAppender(GML3.prototype.writeRing_)
    }
  };


  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   * @private
   */
  GML3.prototype.ENVELOPE_SERIALIZERS_ = {
    'http://www.opengis.net/gml': {
      'lowerCorner': makeChildAppender(writeStringTextNode),
      'upperCorner': makeChildAppender(writeStringTextNode)
    }
  };


  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   * @private
   */
  GML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS_ = {
    'http://www.opengis.net/gml': {
      'surfaceMember': makeChildAppender(
        GML3.prototype.writeSurfaceOrPolygonMember_),
      'polygonMember': makeChildAppender(
        GML3.prototype.writeSurfaceOrPolygonMember_)
    }
  };


  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   * @private
   */
  GML3.prototype.POINTMEMBER_SERIALIZERS_ = {
    'http://www.opengis.net/gml': {
      'pointMember': makeChildAppender(
        GML3.prototype.writePointMember_)
    }
  };


  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   * @private
   */
  GML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS_ = {
    'http://www.opengis.net/gml': {
      'lineStringMember': makeChildAppender(
        GML3.prototype.writeLineStringOrCurveMember_),
      'curveMember': makeChildAppender(
        GML3.prototype.writeLineStringOrCurveMember_)
    }
  };


  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   * @private
   */
  GML3.prototype.GEOMETRY_SERIALIZERS_ = {
    'http://www.opengis.net/gml': {
      'Curve': makeChildAppender(
        GML3.prototype.writeCurveOrLineString_),
      'MultiCurve': makeChildAppender(
        GML3.prototype.writeMultiCurveOrLineString_),
      'Point': makeChildAppender(GML3.prototype.writePoint_),
      'MultiPoint': makeChildAppender(
        GML3.prototype.writeMultiPoint_),
      'LineString': makeChildAppender(
        GML3.prototype.writeCurveOrLineString_),
      'MultiLineString': makeChildAppender(
        GML3.prototype.writeMultiCurveOrLineString_),
      'LinearRing': makeChildAppender(
        GML3.prototype.writeLinearRing_),
      'Polygon': makeChildAppender(
        GML3.prototype.writeSurfaceOrPolygon_),
      'MultiPolygon': makeChildAppender(
        GML3.prototype.writeMultiSurfaceOrPolygon_),
      'Surface': makeChildAppender(
        GML3.prototype.writeSurfaceOrPolygon_),
      'MultiSurface': makeChildAppender(
        GML3.prototype.writeMultiSurfaceOrPolygon_),
      'Envelope': makeChildAppender(
        GML3.prototype.writeEnvelope)
    }
  };

  /**
   * @module ol/format/GML
   */

  /**
   * @classdesc
   * Feature format for reading and writing data in the GML format
   * version 3.1.1.
   * Currently only supports GML 3.1.1 Simple Features profile.
   *
   * @param {import("./GMLBase.js").Options=} opt_options
   *     Optional configuration object.
   * @api
   */
  const GML = GML3;


  /**
   * Encode an array of features in GML 3.1.1 Simple Features.
   *
   * @function
   * @param {Array<import("../Feature.js").default>} features Features.
   * @param {import("./Feature.js").WriteOptions=} opt_options Options.
   * @return {string} Result.
   * @api
   */
  GML.prototype.writeFeatures;


  /**
   * Encode an array of features in the GML 3.1.1 format as an XML node.
   *
   * @function
   * @param {Array<import("../Feature.js").default>} features Features.
   * @param {import("./Feature.js").WriteOptions=} opt_options Options.
   * @return {Node} Node.
   * @api
   */
  GML.prototype.writeFeaturesNode;

  /**
   * @module ol/format/GPX
   */


  /**
   * @const
   * @type {Array<null|string>}
   */
  const NAMESPACE_URIS = [
    null,
    'http://www.topografix.com/GPX/1/0',
    'http://www.topografix.com/GPX/1/1'
  ];


  /**
   * @const
   * @type {string}
   */
  const SCHEMA_LOCATION = 'http://www.topografix.com/GPX/1/1 ' +
      'http://www.topografix.com/GPX/1/1/gpx.xsd';


  /**
   * @const
   * @type {Object<string, function(Node, Array<*>): (Feature|undefined)>}
   */
  const FEATURE_READER = {
    'rte': readRte,
    'trk': readTrk,
    'wpt': readWpt
  };


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const GPX_PARSERS = makeStructureNS(
    NAMESPACE_URIS, {
      'rte': makeArrayPusher(readRte),
      'trk': makeArrayPusher(readTrk),
      'wpt': makeArrayPusher(readWpt)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const LINK_PARSERS = makeStructureNS(
    NAMESPACE_URIS, {
      'text': makeObjectPropertySetter(readString, 'linkText'),
      'type': makeObjectPropertySetter(readString, 'linkType')
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const GPX_SERIALIZERS = makeStructureNS(
    NAMESPACE_URIS, {
      'rte': makeChildAppender(writeRte),
      'trk': makeChildAppender(writeTrk),
      'wpt': makeChildAppender(writeWpt)
    });


  /**
   * @typedef {Object} Options
   * @property {function(Feature, Node)} [readExtensions] Callback function
   * to process `extensions` nodes. To prevent memory leaks, this callback function must
   * not store any references to the node. Note that the `extensions`
   * node is not allowed in GPX 1.0. Moreover, only `extensions`
   * nodes from `wpt`, `rte` and `trk` can be processed, as those are
   * directly mapped to a feature.
   */

  /**
   * @typedef {Object} LayoutOptions
   * @property {boolean} [hasZ]
   * @property {boolean} [hasM]
   */

  /**
   * @classdesc
   * Feature format for reading and writing data in the GPX format.
   *
   * Note that {@link module:ol/format/GPX~GPX#readFeature} only reads the first
   * feature of the source.
   *
   * When reading, routes (`<rte>`) are converted into LineString geometries, and
   * tracks (`<trk>`) into MultiLineString. Any properties on route and track
   * waypoints are ignored.
   *
   * When writing, LineString geometries are output as routes (`<rte>`), and
   * MultiLineString as tracks (`<trk>`).
   *
   * @api
   */
  class GPX extends XMLFeature {

    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {
      super();

      const options = opt_options ? opt_options : {};


      /**
       * @inheritDoc
       */
      this.dataProjection = get$2('EPSG:4326');

      /**
       * @type {function(Feature, Node): void|undefined}
       * @private
       */
      this.readExtensions_ = options.readExtensions;
    }

    /**
     * @param {Array<Feature>} features List of features.
     * @private
     */
    handleReadExtensions_(features) {
      if (!features) {
        features = [];
      }
      for (let i = 0, ii = features.length; i < ii; ++i) {
        const feature = features[i];
        if (this.readExtensions_) {
          const extensionsNode = feature.get('extensionsNode_') || null;
          this.readExtensions_(feature, extensionsNode);
        }
        feature.set('extensionsNode_', undefined);
      }
    }

    /**
     * @inheritDoc
     */
    readFeatureFromNode(node, opt_options) {
      if (!includes(NAMESPACE_URIS, node.namespaceURI)) {
        return null;
      }
      const featureReader = FEATURE_READER[node.localName];
      if (!featureReader) {
        return null;
      }
      const feature = featureReader(node, [this.getReadOptions(node, opt_options)]);
      if (!feature) {
        return null;
      }
      this.handleReadExtensions_([feature]);
      return feature;
    }

    /**
     * @inheritDoc
     */
    readFeaturesFromNode(node, opt_options) {
      if (!includes(NAMESPACE_URIS, node.namespaceURI)) {
        return [];
      }
      if (node.localName == 'gpx') {
        /** @type {Array<Feature>} */
        const features = pushParseAndPop([], GPX_PARSERS,
          node, [this.getReadOptions(node, opt_options)]);
        if (features) {
          this.handleReadExtensions_(features);
          return features;
        } else {
          return [];
        }
      }
      return [];
    }

    /**
     * Encode an array of features in the GPX format as an XML node.
     * LineString geometries are output as routes (`<rte>`), and MultiLineString
     * as tracks (`<trk>`).
     *
     * @param {Array<Feature>} features Features.
     * @param {import("./Feature.js").WriteOptions=} opt_options Options.
     * @return {Node} Node.
     * @override
     * @api
     */
    writeFeaturesNode(features, opt_options) {
      opt_options = this.adaptOptions(opt_options);
      //FIXME Serialize metadata
      const gpx = createElementNS('http://www.topografix.com/GPX/1/1', 'gpx');
      const xmlnsUri = 'http://www.w3.org/2000/xmlns/';
      gpx.setAttributeNS(xmlnsUri, 'xmlns:xsi', XML_SCHEMA_INSTANCE_URI);
      gpx.setAttributeNS(XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', SCHEMA_LOCATION);
      gpx.setAttribute('version', '1.1');
      gpx.setAttribute('creator', 'OpenLayers');

      pushSerializeAndPop(/** @type {import("../xml.js").NodeStackItem} */
        ({node: gpx}), GPX_SERIALIZERS, GPX_NODE_FACTORY, features, [opt_options]);
      return gpx;
    }
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const RTE_PARSERS = makeStructureNS(
    NAMESPACE_URIS, {
      'name': makeObjectPropertySetter(readString),
      'cmt': makeObjectPropertySetter(readString),
      'desc': makeObjectPropertySetter(readString),
      'src': makeObjectPropertySetter(readString),
      'link': parseLink,
      'number': makeObjectPropertySetter(readNonNegativeInteger),
      'extensions': parseExtensions,
      'type': makeObjectPropertySetter(readString),
      'rtept': parseRtePt
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const RTEPT_PARSERS = makeStructureNS(
    NAMESPACE_URIS, {
      'ele': makeObjectPropertySetter(readDecimal),
      'time': makeObjectPropertySetter(readDateTime)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const TRK_PARSERS = makeStructureNS(
    NAMESPACE_URIS, {
      'name': makeObjectPropertySetter(readString),
      'cmt': makeObjectPropertySetter(readString),
      'desc': makeObjectPropertySetter(readString),
      'src': makeObjectPropertySetter(readString),
      'link': parseLink,
      'number': makeObjectPropertySetter(readNonNegativeInteger),
      'type': makeObjectPropertySetter(readString),
      'extensions': parseExtensions,
      'trkseg': parseTrkSeg
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const TRKSEG_PARSERS = makeStructureNS(
    NAMESPACE_URIS, {
      'trkpt': parseTrkPt
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const TRKPT_PARSERS = makeStructureNS(
    NAMESPACE_URIS, {
      'ele': makeObjectPropertySetter(readDecimal),
      'time': makeObjectPropertySetter(readDateTime)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const WPT_PARSERS = makeStructureNS(
    NAMESPACE_URIS, {
      'ele': makeObjectPropertySetter(readDecimal),
      'time': makeObjectPropertySetter(readDateTime),
      'magvar': makeObjectPropertySetter(readDecimal),
      'geoidheight': makeObjectPropertySetter(readDecimal),
      'name': makeObjectPropertySetter(readString),
      'cmt': makeObjectPropertySetter(readString),
      'desc': makeObjectPropertySetter(readString),
      'src': makeObjectPropertySetter(readString),
      'link': parseLink,
      'sym': makeObjectPropertySetter(readString),
      'type': makeObjectPropertySetter(readString),
      'fix': makeObjectPropertySetter(readString),
      'sat': makeObjectPropertySetter(readNonNegativeInteger),
      'hdop': makeObjectPropertySetter(readDecimal),
      'vdop': makeObjectPropertySetter(readDecimal),
      'pdop': makeObjectPropertySetter(readDecimal),
      'ageofdgpsdata': makeObjectPropertySetter(readDecimal),
      'dgpsid': makeObjectPropertySetter(readNonNegativeInteger),
      'extensions': parseExtensions
    });


  /**
   * @const
   * @type {Array<string>}
   */
  const LINK_SEQUENCE = ['text', 'type'];


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const LINK_SERIALIZERS = makeStructureNS(
    NAMESPACE_URIS, {
      'text': makeChildAppender(writeStringTextNode),
      'type': makeChildAppender(writeStringTextNode)
    });


  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  const RTE_SEQUENCE = makeStructureNS(
    NAMESPACE_URIS, [
      'name', 'cmt', 'desc', 'src', 'link', 'number', 'type', 'rtept'
    ]);


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const RTE_SERIALIZERS = makeStructureNS(
    NAMESPACE_URIS, {
      'name': makeChildAppender(writeStringTextNode),
      'cmt': makeChildAppender(writeStringTextNode),
      'desc': makeChildAppender(writeStringTextNode),
      'src': makeChildAppender(writeStringTextNode),
      'link': makeChildAppender(writeLink),
      'number': makeChildAppender(writeNonNegativeIntegerTextNode),
      'type': makeChildAppender(writeStringTextNode),
      'rtept': makeArraySerializer(makeChildAppender(writeWptType))
    });


  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  const RTEPT_TYPE_SEQUENCE = makeStructureNS(
    NAMESPACE_URIS, [
      'ele', 'time'
    ]);


  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  const TRK_SEQUENCE = makeStructureNS(
    NAMESPACE_URIS, [
      'name', 'cmt', 'desc', 'src', 'link', 'number', 'type', 'trkseg'
    ]);


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const TRK_SERIALIZERS = makeStructureNS(
    NAMESPACE_URIS, {
      'name': makeChildAppender(writeStringTextNode),
      'cmt': makeChildAppender(writeStringTextNode),
      'desc': makeChildAppender(writeStringTextNode),
      'src': makeChildAppender(writeStringTextNode),
      'link': makeChildAppender(writeLink),
      'number': makeChildAppender(writeNonNegativeIntegerTextNode),
      'type': makeChildAppender(writeStringTextNode),
      'trkseg': makeArraySerializer(makeChildAppender(writeTrkSeg))
    });


  /**
   * @const
   * @type {function(*, Array<*>, string=): (Node|undefined)}
   */
  const TRKSEG_NODE_FACTORY = makeSimpleNodeFactory('trkpt');


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const TRKSEG_SERIALIZERS = makeStructureNS(
    NAMESPACE_URIS, {
      'trkpt': makeChildAppender(writeWptType)
    });


  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  const WPT_TYPE_SEQUENCE = makeStructureNS(
    NAMESPACE_URIS, [
      'ele', 'time', 'magvar', 'geoidheight', 'name', 'cmt', 'desc', 'src',
      'link', 'sym', 'type', 'fix', 'sat', 'hdop', 'vdop', 'pdop',
      'ageofdgpsdata', 'dgpsid'
    ]);


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const WPT_TYPE_SERIALIZERS = makeStructureNS(
    NAMESPACE_URIS, {
      'ele': makeChildAppender(writeDecimalTextNode),
      'time': makeChildAppender(writeDateTimeTextNode),
      'magvar': makeChildAppender(writeDecimalTextNode),
      'geoidheight': makeChildAppender(writeDecimalTextNode),
      'name': makeChildAppender(writeStringTextNode),
      'cmt': makeChildAppender(writeStringTextNode),
      'desc': makeChildAppender(writeStringTextNode),
      'src': makeChildAppender(writeStringTextNode),
      'link': makeChildAppender(writeLink),
      'sym': makeChildAppender(writeStringTextNode),
      'type': makeChildAppender(writeStringTextNode),
      'fix': makeChildAppender(writeStringTextNode),
      'sat': makeChildAppender(writeNonNegativeIntegerTextNode),
      'hdop': makeChildAppender(writeDecimalTextNode),
      'vdop': makeChildAppender(writeDecimalTextNode),
      'pdop': makeChildAppender(writeDecimalTextNode),
      'ageofdgpsdata': makeChildAppender(writeDecimalTextNode),
      'dgpsid': makeChildAppender(writeNonNegativeIntegerTextNode)
    });


  /**
   * @const
   * @type {Object<string, string>}
   */
  const GEOMETRY_TYPE_TO_NODENAME = {
    'Point': 'wpt',
    'LineString': 'rte',
    'MultiLineString': 'trk'
  };


  /**
   * @param {*} value Value.
   * @param {Array<*>} objectStack Object stack.
   * @param {string=} opt_nodeName Node name.
   * @return {Node|undefined} Node.
   */
  function GPX_NODE_FACTORY(value, objectStack, opt_nodeName) {
    const geometry = /** @type {Feature} */ (value).getGeometry();
    if (geometry) {
      const nodeName = GEOMETRY_TYPE_TO_NODENAME[geometry.getType()];
      if (nodeName) {
        const parentNode = objectStack[objectStack.length - 1].node;
        return createElementNS(parentNode.namespaceURI, nodeName);
      }
    }
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {LayoutOptions} layoutOptions Layout options.
   * @param {Element} node Node.
   * @param {!Object} values Values.
   * @return {Array<number>} Flat coordinates.
   */
  function appendCoordinate(flatCoordinates, layoutOptions, node, values) {
    flatCoordinates.push(
      parseFloat(node.getAttribute('lon')),
      parseFloat(node.getAttribute('lat')));
    if ('ele' in values) {
      flatCoordinates.push(/** @type {number} */ (values['ele']));
      delete values['ele'];
      layoutOptions.hasZ = true;
    } else {
      flatCoordinates.push(0);
    }
    if ('time' in values) {
      flatCoordinates.push(/** @type {number} */ (values['time']));
      delete values['time'];
      layoutOptions.hasM = true;
    } else {
      flatCoordinates.push(0);
    }
    return flatCoordinates;
  }


  /**
   * Choose GeometryLayout based on flags in layoutOptions and adjust flatCoordinates
   * and ends arrays by shrinking them accordingly (removing unused zero entries).
   *
   * @param {LayoutOptions} layoutOptions Layout options.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {Array<number>=} ends Ends.
   * @return {GeometryLayout} Layout.
   */
  function applyLayoutOptions(layoutOptions, flatCoordinates, ends) {
    let layout = GeometryLayout.XY;
    let stride = 2;
    if (layoutOptions.hasZ && layoutOptions.hasM) {
      layout = GeometryLayout.XYZM;
      stride = 4;
    } else if (layoutOptions.hasZ) {
      layout = GeometryLayout.XYZ;
      stride = 3;
    } else if (layoutOptions.hasM) {
      layout = GeometryLayout.XYM;
      stride = 3;
    }
    if (stride !== 4) {
      for (let i = 0, ii = flatCoordinates.length / 4; i < ii; i++) {
        flatCoordinates[i * stride] = flatCoordinates[i * 4];
        flatCoordinates[i * stride + 1] = flatCoordinates[i * 4 + 1];
        if (layoutOptions.hasZ) {
          flatCoordinates[i * stride + 2] = flatCoordinates[i * 4 + 2];
        }
        if (layoutOptions.hasM) {
          flatCoordinates[i * stride + 2] = flatCoordinates[i * 4 + 3];
        }
      }
      flatCoordinates.length = flatCoordinates.length / 4 * stride;
      if (ends) {
        for (let i = 0, ii = ends.length; i < ii; i++) {
          ends[i] = ends[i] / 4 * stride;
        }
      }
    }
    return layout;
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function parseLink(node, objectStack) {
    const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const href = node.getAttribute('href');
    if (href !== null) {
      values['link'] = href;
    }
    parseNode(LINK_PARSERS, node, objectStack);
  }


  /**
   * @param {Node} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function parseExtensions(node, objectStack) {
    const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    values['extensionsNode_'] = node;
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function parseRtePt(node, objectStack) {
    const values = pushParseAndPop({}, RTEPT_PARSERS, node, objectStack);
    if (values) {
      const rteValues = /** @type {!Object} */ (objectStack[objectStack.length - 1]);
      const flatCoordinates = /** @type {Array<number>} */ (rteValues['flatCoordinates']);
      const layoutOptions = /** @type {LayoutOptions} */ (rteValues['layoutOptions']);
      appendCoordinate(flatCoordinates, layoutOptions, node, values);
    }
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function parseTrkPt(node, objectStack) {
    const values = pushParseAndPop({}, TRKPT_PARSERS, node, objectStack);
    if (values) {
      const trkValues = /** @type {!Object} */ (objectStack[objectStack.length - 1]);
      const flatCoordinates = /** @type {Array<number>} */ (trkValues['flatCoordinates']);
      const layoutOptions = /** @type {LayoutOptions} */ (trkValues['layoutOptions']);
      appendCoordinate(flatCoordinates, layoutOptions, node, values);
    }
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function parseTrkSeg(node, objectStack) {
    const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    parseNode(TRKSEG_PARSERS, node, objectStack);
    const flatCoordinates = /** @type {Array<number>} */
        (values['flatCoordinates']);
    const ends = /** @type {Array<number>} */ (values['ends']);
    ends.push(flatCoordinates.length);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Feature|undefined} Track.
   */
  function readRte(node, objectStack) {
    const options = /** @type {import("./Feature.js").ReadOptions} */ (objectStack[0]);
    const values = pushParseAndPop({
      'flatCoordinates': [],
      'layoutOptions': {}
    }, RTE_PARSERS, node, objectStack);
    if (!values) {
      return undefined;
    }
    const flatCoordinates = /** @type {Array<number>} */
        (values['flatCoordinates']);
    delete values['flatCoordinates'];
    const layoutOptions = /** @type {LayoutOptions} */ (values['layoutOptions']);
    delete values['layoutOptions'];
    const layout = applyLayoutOptions(layoutOptions, flatCoordinates);
    const geometry = new LineString(flatCoordinates, layout);
    transformGeometryWithOptions(geometry, false, options);
    const feature = new Feature(geometry);
    feature.setProperties(values, true);
    return feature;
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Feature|undefined} Track.
   */
  function readTrk(node, objectStack) {
    const options = /** @type {import("./Feature.js").ReadOptions} */ (objectStack[0]);
    const values = pushParseAndPop({
      'flatCoordinates': [],
      'ends': [],
      'layoutOptions': {}
    }, TRK_PARSERS, node, objectStack);
    if (!values) {
      return undefined;
    }
    const flatCoordinates = /** @type {Array<number>} */
        (values['flatCoordinates']);
    delete values['flatCoordinates'];
    const ends = /** @type {Array<number>} */ (values['ends']);
    delete values['ends'];
    const layoutOptions = /** @type {LayoutOptions} */ (values['layoutOptions']);
    delete values['layoutOptions'];
    const layout = applyLayoutOptions(layoutOptions, flatCoordinates, ends);
    const geometry = new MultiLineString(flatCoordinates, layout, ends);
    transformGeometryWithOptions(geometry, false, options);
    const feature = new Feature(geometry);
    feature.setProperties(values, true);
    return feature;
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Feature|undefined} Waypoint.
   */
  function readWpt(node, objectStack) {
    const options = /** @type {import("./Feature.js").ReadOptions} */ (objectStack[0]);
    const values = pushParseAndPop({}, WPT_PARSERS, node, objectStack);
    if (!values) {
      return undefined;
    }
    const layoutOptions = /** @type {LayoutOptions} */ ({});
    const coordinates = appendCoordinate([], layoutOptions, node, values);
    const layout = applyLayoutOptions(layoutOptions, coordinates);
    const geometry = new Point(coordinates, layout);
    transformGeometryWithOptions(geometry, false, options);
    const feature = new Feature(geometry);
    feature.setProperties(values, true);
    return feature;
  }


  /**
   * @param {Element} node Node.
   * @param {string} value Value for the link's `href` attribute.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeLink(node, value, objectStack) {
    node.setAttribute('href', value);
    const context = objectStack[objectStack.length - 1];
    const properties = context['properties'];
    const link = [
      properties['linkText'],
      properties['linkType']
    ];
    pushSerializeAndPop(/** @type {import("../xml.js").NodeStackItem} */ ({node: node}),
      LINK_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY,
      link, objectStack, LINK_SEQUENCE);
  }


  /**
   * @param {Element} node Node.
   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeWptType(node, coordinate, objectStack) {
    const context = objectStack[objectStack.length - 1];
    const parentNode = context.node;
    const namespaceURI = parentNode.namespaceURI;
    const properties = context['properties'];
    //FIXME Projection handling
    node.setAttributeNS(null, 'lat', String(coordinate[1]));
    node.setAttributeNS(null, 'lon', String(coordinate[0]));
    const geometryLayout = context['geometryLayout'];
    switch (geometryLayout) {
      case GeometryLayout.XYZM:
        if (coordinate[3] !== 0) {
          properties['time'] = coordinate[3];
        }
        // fall through
      case GeometryLayout.XYZ:
        if (coordinate[2] !== 0) {
          properties['ele'] = coordinate[2];
        }
        break;
      case GeometryLayout.XYM:
        if (coordinate[2] !== 0) {
          properties['time'] = coordinate[2];
        }
        break;
        // pass
    }
    const orderedKeys = (node.nodeName == 'rtept') ?
      RTEPT_TYPE_SEQUENCE[namespaceURI] :
      WPT_TYPE_SEQUENCE[namespaceURI];
    const values = makeSequence(properties, orderedKeys);
    pushSerializeAndPop(/** @type {import("../xml.js").NodeStackItem} */
      ({node: node, 'properties': properties}),
      WPT_TYPE_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY,
      values, objectStack, orderedKeys);
  }


  /**
   * @param {Node} node Node.
   * @param {Feature} feature Feature.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeRte(node, feature, objectStack) {
    const options = /** @type {import("./Feature.js").WriteOptions} */ (objectStack[0]);
    const properties = feature.getProperties();
    const context = {node: node};
    context['properties'] = properties;
    const geometry = feature.getGeometry();
    if (geometry.getType() == GeometryType.LINE_STRING) {
      const lineString = /** @type {LineString} */ (transformGeometryWithOptions(geometry, true, options));
      context['geometryLayout'] = lineString.getLayout();
      properties['rtept'] = lineString.getCoordinates();
    }
    const parentNode = objectStack[objectStack.length - 1].node;
    const orderedKeys = RTE_SEQUENCE[parentNode.namespaceURI];
    const values = makeSequence(properties, orderedKeys);
    pushSerializeAndPop(context,
      RTE_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY,
      values, objectStack, orderedKeys);
  }


  /**
   * @param {Node} node Node.
   * @param {Feature} feature Feature.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeTrk(node, feature, objectStack) {
    const options = /** @type {import("./Feature.js").WriteOptions} */ (objectStack[0]);
    const properties = feature.getProperties();
    /** @type {import("../xml.js").NodeStackItem} */
    const context = {node: node};
    context['properties'] = properties;
    const geometry = feature.getGeometry();
    if (geometry.getType() == GeometryType.MULTI_LINE_STRING) {
      const multiLineString = /** @type {MultiLineString} */ (transformGeometryWithOptions(geometry, true, options));
      properties['trkseg'] = multiLineString.getLineStrings();
    }
    const parentNode = objectStack[objectStack.length - 1].node;
    const orderedKeys = TRK_SEQUENCE[parentNode.namespaceURI];
    const values = makeSequence(properties, orderedKeys);
    pushSerializeAndPop(context,
      TRK_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY,
      values, objectStack, orderedKeys);
  }


  /**
   * @param {Node} node Node.
   * @param {LineString} lineString LineString.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeTrkSeg(node, lineString, objectStack) {
    /** @type {import("../xml.js").NodeStackItem} */
    const context = {node: node};
    context['geometryLayout'] = lineString.getLayout();
    context['properties'] = {};
    pushSerializeAndPop(context,
      TRKSEG_SERIALIZERS, TRKSEG_NODE_FACTORY,
      lineString.getCoordinates(), objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Feature} feature Feature.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeWpt(node, feature, objectStack) {
    const options = /** @type {import("./Feature.js").WriteOptions} */ (objectStack[0]);
    const context = objectStack[objectStack.length - 1];
    context['properties'] = feature.getProperties();
    const geometry = feature.getGeometry();
    if (geometry.getType() == GeometryType.POINT) {
      const point = /** @type {Point} */ (transformGeometryWithOptions(geometry, true, options));
      context['geometryLayout'] = point.getLayout();
      writeWptType(node, point.getCoordinates(), objectStack);
    }
  }

  /**
   * @module ol/format/TextFeature
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for text feature formats.
   *
   * @abstract
   */
  class TextFeature extends FeatureFormat {
    constructor() {
      super();
    }

    /**
     * @inheritDoc
     */
    getType() {
      return FormatType.TEXT;
    }

    /**
     * Read the feature from the source.
     *
     * @param {Document|Node|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
     * @return {import("../Feature.js").default} Feature.
     * @api
     */
    readFeature(source, opt_options) {
      return this.readFeatureFromText(getText(source), this.adaptOptions(opt_options));
    }

    /**
     * @abstract
     * @param {string} text Text.
     * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
     * @protected
     * @return {import("../Feature.js").default} Feature.
     */
    readFeatureFromText(text, opt_options) {
      return abstract();
    }

    /**
     * Read the features from the source.
     *
     * @param {Document|Node|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
     * @return {Array<import("../Feature.js").default>} Features.
     * @api
     */
    readFeatures(source, opt_options) {
      return this.readFeaturesFromText(getText(source), this.adaptOptions(opt_options));
    }

    /**
     * @abstract
     * @param {string} text Text.
     * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
     * @protected
     * @return {Array<import("../Feature.js").default>} Features.
     */
    readFeaturesFromText(text, opt_options) {
      return abstract();
    }

    /**
     * Read the geometry from the source.
     *
     * @param {Document|Node|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
     * @return {import("../geom/Geometry.js").default} Geometry.
     * @api
     */
    readGeometry(source, opt_options) {
      return this.readGeometryFromText(getText(source), this.adaptOptions(opt_options));
    }

    /**
     * @abstract
     * @param {string} text Text.
     * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
     * @protected
     * @return {import("../geom/Geometry.js").default} Geometry.
     */
    readGeometryFromText(text, opt_options) {
      return abstract();
    }

    /**
     * Read the projection from the source.
     *
     * @param {Document|Node|Object|string} source Source.
     * @return {import("../proj/Projection.js").default} Projection.
     * @api
     */
    readProjection(source) {
      return this.readProjectionFromText(getText(source));
    }

    /**
     * @param {string} text Text.
     * @protected
     * @return {import("../proj/Projection.js").default} Projection.
     */
    readProjectionFromText(text) {
      return this.dataProjection;
    }

    /**
     * Encode a feature as a string.
     *
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {string} Encoded feature.
     * @api
     */
    writeFeature(feature, opt_options) {
      return this.writeFeatureText(feature, this.adaptOptions(opt_options));
    }

    /**
     * @abstract
     * @param {import("../Feature.js").default} feature Features.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @protected
     * @return {string} Text.
     */
    writeFeatureText(feature, opt_options) {
      return abstract();
    }

    /**
     * Encode an array of features as string.
     *
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {string} Encoded features.
     * @api
     */
    writeFeatures(features, opt_options) {
      return this.writeFeaturesText(features, this.adaptOptions(opt_options));
    }

    /**
     * @abstract
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @protected
     * @return {string} Text.
     */
    writeFeaturesText(features, opt_options) {
      return abstract();
    }

    /**
     * Write a single geometry.
     *
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {string} Geometry.
     * @api
     */
    writeGeometry(geometry, opt_options) {
      return this.writeGeometryText(geometry, this.adaptOptions(opt_options));
    }

    /**
     * @abstract
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @protected
     * @return {string} Text.
     */
    writeGeometryText(geometry, opt_options) {
      return abstract();
    }
  }


  /**
   * @param {Document|Node|Object|string} source Source.
   * @return {string} Text.
   */
  function getText(source) {
    if (typeof source === 'string') {
      return source;
    } else {
      return '';
    }
  }

  /**
   * @module ol/format/IGC
   */

  /**
   * IGC altitude/z. One of 'barometric', 'gps', 'none'.
   * @enum {string}
   */
  const IGCZ = {
    BAROMETRIC: 'barometric',
    GPS: 'gps',
    NONE: 'none'
  };

  /**
   * @const
   * @type {RegExp}
   */
  const B_RECORD_RE =
      /^B(\d{2})(\d{2})(\d{2})(\d{2})(\d{5})([NS])(\d{3})(\d{5})([EW])([AV])(\d{5})(\d{5})/;


  /**
   * @const
   * @type {RegExp}
   */
  const H_RECORD_RE = /^H.([A-Z]{3}).*?:(.*)/;


  /**
   * @const
   * @type {RegExp}
   */
  const HFDTE_RECORD_RE = /^HFDTE(\d{2})(\d{2})(\d{2})/;


  /**
   * A regular expression matching the newline characters `\r\n`, `\r` and `\n`.
   *
   * @const
   * @type {RegExp}
   */
  const NEWLINE_RE = /\r\n|\r|\n/;


  /**
   * @typedef {Object} Options
   * @property {IGCZ|string} [altitudeMode='none'] Altitude mode. Possible
   * values are `'barometric'`, `'gps'`, and `'none'`.
   */


  /**
   * @classdesc
   * Feature format for `*.igc` flight recording files.
   *
   * As IGC sources contain a single feature,
   * {@link module:ol/format/IGC~IGC#readFeatures} will return the feature in an
   * array
   *
   * @api
   */
  class IGC extends TextFeature {

    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {
      super();

      const options = opt_options ? opt_options : {};

      /**
       * @inheritDoc
       */
      this.dataProjection = get$2('EPSG:4326');

      /**
       * @private
       * @type {IGCZ}
       */
      this.altitudeMode_ = options.altitudeMode ? options.altitudeMode : IGCZ.NONE;
    }

    /**
     * @inheritDoc
     */
    readFeatureFromText(text, opt_options) {
      const altitudeMode = this.altitudeMode_;
      const lines = text.split(NEWLINE_RE);
      /** @type {Object<string, string>} */
      const properties = {};
      const flatCoordinates = [];
      let year = 2000;
      let month = 0;
      let day = 1;
      let lastDateTime = -1;
      let i, ii;
      for (i = 0, ii = lines.length; i < ii; ++i) {
        const line = lines[i];
        let m;
        if (line.charAt(0) == 'B') {
          m = B_RECORD_RE.exec(line);
          if (m) {
            const hour = parseInt(m[1], 10);
            const minute = parseInt(m[2], 10);
            const second = parseInt(m[3], 10);
            let y = parseInt(m[4], 10) + parseInt(m[5], 10) / 60000;
            if (m[6] == 'S') {
              y = -y;
            }
            let x = parseInt(m[7], 10) + parseInt(m[8], 10) / 60000;
            if (m[9] == 'W') {
              x = -x;
            }
            flatCoordinates.push(x, y);
            if (altitudeMode != IGCZ.NONE) {
              let z;
              if (altitudeMode == IGCZ.GPS) {
                z = parseInt(m[11], 10);
              } else if (altitudeMode == IGCZ.BAROMETRIC) {
                z = parseInt(m[12], 10);
              } else {
                z = 0;
              }
              flatCoordinates.push(z);
            }
            let dateTime = Date.UTC(year, month, day, hour, minute, second);
            // Detect UTC midnight wrap around.
            if (dateTime < lastDateTime) {
              dateTime = Date.UTC(year, month, day + 1, hour, minute, second);
            }
            flatCoordinates.push(dateTime / 1000);
            lastDateTime = dateTime;
          }
        } else if (line.charAt(0) == 'H') {
          m = HFDTE_RECORD_RE.exec(line);
          if (m) {
            day = parseInt(m[1], 10);
            month = parseInt(m[2], 10) - 1;
            year = 2000 + parseInt(m[3], 10);
          } else {
            m = H_RECORD_RE.exec(line);
            if (m) {
              properties[m[1]] = m[2].trim();
            }
          }
        }
      }
      if (flatCoordinates.length === 0) {
        return null;
      }
      const layout = altitudeMode == IGCZ.NONE ? GeometryLayout.XYM : GeometryLayout.XYZM;
      const lineString = new LineString(flatCoordinates, layout);
      const feature = new Feature(transformGeometryWithOptions(lineString, false, opt_options));
      feature.setProperties(properties, true);
      return feature;
    }

    /**
     * @inheritDoc
     */
    readFeaturesFromText(text, opt_options) {
      const feature = this.readFeatureFromText(text, opt_options);
      if (feature) {
        return [feature];
      } else {
        return [];
      }
    }

  }

  /**
   * @module ol/format/IIIFInfo
   */


  /**
   * @typedef {Object} PreferredOptions
   * @property {string} [format] Preferred image format. Will be used if the image information
   * indicates support for that format.
   * @property {string} [quality] IIIF image qualitiy.  Will be used if the image information
   * indicates support for that quality.
   */

  /**
   * @typedef {Object} SupportedFeatures
   * @property {Array<string>} [supports] Supported IIIF image size and region
   * calculation features.
   * @property {Array<string>} [formats] Supported image formats.
   * @property {Array<string>} [qualities] Supported IIIF image qualities.
   */

  /**
   * @typedef {Object} ImageInformationResponse1_0
   * @property {string} identifier
   * @property {number} width
   * @property {number} height
   * @property {Array<number>} [scale_factors] Resolution scaling factors.
   * @property {number} [tile_width]
   * @property {number} [tile_height]
   * @property {Array<string>} [formats] Supported image formats.
   * @property {string} [profile] Compliance level URI.
   */

  /**
   * @typedef {Object} ImageInformationResponse1_1
   * @property {string} "@id" The base URI of the image service.
   * @property {string} "@context" JSON-LD context URI.
   * @property {number} width Full image width.
   * @property {number} height Full image height.
   * @property {Array<number>} [scale_factors] Resolution scaling factors.
   * @property {number} [tile_width]
   * @property {number} [tile_height]
   * @property {Array<string>} [formats] Supported image formats.
   * @property {string} [profile] Compliance level URI.
   */

  /**
   * @typedef {Object} TileInfo
   * @property {Array<number>} scaleFactors Supported resolution scaling factors.
   * @property {number} width Tile width in pixels.
   * @property {number} [height] Tile height in pixels. Same as tile width if height is
   * not given.
   */

  /**
   * @typedef {Object} IiifProfile
   * @property {Array<string>} [formats] Supported image formats for the image service.
   * @property {Array<string>} [qualities] Supported IIIF image qualities.
   * @property {Array<string>} [supports] Supported features.
   * @property {number} [maxArea] Maximum area (pixels) available for this image service.
   * @property {number} [maxHeight] Maximum height.
   * @property {number} [maxWidth] Maximum width.
   */

  /**
   * @typedef {Object} ImageInformationResponse2
   * @property {string} "@id" The base URI of the image service.
   * @property {string} "@context" JSON-LD context IRI
   * @property {number} width Full image width.
   * @property {number} height Full image height.
   * @property {Array<string|IiifProfile>} profile Additional informations about the image
   * service's capabilities.
   * @property {Array<Object<string, number>>} [sizes] Supported full image dimensions.
   * @property {Array<TileInfo>} [tiles] Supported tile sizes and resolution scaling factors.
   */

  /**
   * @typedef {Object} ImageInformationResponse3
   * @property {string} id The base URI of the image service.
   * @property {string} "@context" JSON-LD context IRI
   * @property {number} width Full image width.
   * @property {number} height Full image height.
   * @property {string} profile Compliance level, one of 'level0', 'level1' or 'level2'
   * @property {Array<Object<string, number>>} [sizes] Supported full image dimensions.
   * @property {Array<TileInfo>} [tiles] Supported tile sizes and resolution scaling factors.
   * @property {number} [maxArea] Maximum area (pixels) available for this image service.
   * @property {number} [maxHeight] Maximum height.
   * @property {number} [maxWidth] Maximum width.
   * @property {Array<string>} [extraQualities] IIIF image qualities supported by the
   * image service additional to the ones indicated by the compliance level.
   * @property {Array<string>} [extraFormats] Image formats supported by the
   * image service additional to the ones indicated by the compliance level.
   * @property {Array<string>} [extraFeatures] Additional supported features whose support
   * is not indicated by the compliance level.
   * @property {Array<string>} [preferredFormats] Image formats that should preferrably
   * be used.
   */

  /**
   * Enum representing the major IIIF Image API versions
   * @enum {string}
   */
  const Versions = {
    VERSION1: 'version1',
    VERSION2: 'version2',
    VERSION3: 'version3'
  };

  /**
   * Supported image formats, qualities and supported region / size calculation features
   * for different image API versions and compliance levels
   * @const
   * @type {Object<string, Object<string, SupportedFeatures>>}
   */
  const IIIF_PROFILE_VALUES = {};
  IIIF_PROFILE_VALUES[Versions.VERSION1] = {
    'level0': {
      supports: [],
      formats: [],
      qualities: ['native']
    },
    'level1': {
      supports: ['regionByPx', 'sizeByW', 'sizeByH', 'sizeByPct'],
      formats: ['jpg'],
      qualities: ['native']
    },
    'level2': {
      supports: ['regionByPx', 'regionByPct', 'sizeByW', 'sizeByH', 'sizeByPct',
        'sizeByConfinedWh', 'sizeByWh'],
      formats: ['jpg', 'png'],
      qualities: ['native', 'color', 'grey', 'bitonal']
    }
  };
  IIIF_PROFILE_VALUES[Versions.VERSION2] = {
    'level0': {
      supports: [],
      formats: ['jpg'],
      qualities: ['default']
    },
    'level1': {
      supports: ['regionByPx', 'sizeByW', 'sizeByH', 'sizeByPct'],
      formats: ['jpg'],
      qualities: ['default']
    },
    'level2': {
      supports: ['regionByPx', 'regionByPct', 'sizeByW', 'sizeByH', 'sizeByPct',
        'sizeByConfinedWh', 'sizeByDistortedWh', 'sizeByWh'],
      formats: ['jpg', 'png'],
      qualities: ['default', 'bitonal']
    }
  };
  IIIF_PROFILE_VALUES[Versions.VERSION3] = {
    'level0': {
      supports: [],
      formats: ['jpg'],
      qualities: ['default']
    },
    'level1': {
      supports: ['regionByPx', 'regionSquare', 'sizeByW', 'sizeByH', 'sizeByWh'],
      formats: ['jpg'],
      qualities: ['default']
    },
    'level2': {
      supports: ['regionByPx', 'regionSquare', 'regionByPct',
        'sizeByW', 'sizeByH', 'sizeByPct', 'sizeByConfinedWh', 'sizeByWh'],
      formats: ['jpg', 'png'],
      qualities: ['default']
    }
  };
  IIIF_PROFILE_VALUES['none'] = {
    'none': {
      supports: [],
      formats: [],
      qualities: []
    }
  };

  const COMPLIANCE_VERSION1 = new RegExp('^https?\:\/\/library\.stanford\.edu\/iiif\/image-api\/(1\.1\/)?compliance\.html#level[0-2]$');
  const COMPLIANCE_VERSION2 = new RegExp('^https?\:\/\/iiif\.io\/api\/image\/2\/level[0-2](\.json)?$');
  const COMPLIANCE_VERSION3 = new RegExp('(^https?\:\/\/iiif\.io\/api\/image\/3\/level[0-2](\.json)?$)|(^level[0-2]$)');

  function generateVersion1Options(iiifInfo) {
    let levelProfile = iiifInfo.getComplianceLevelSupportedFeatures();
    // Version 1.0 and 1.1 do not require a profile.
    if (levelProfile === undefined) {
      levelProfile = IIIF_PROFILE_VALUES[Versions.VERSION1]['level0'];
    }
    return {
      url: iiifInfo.imageInfo['@id'] === undefined ? undefined : iiifInfo.imageInfo['@id'].replace(/\/?(info.json)?$/g, ''),
      supports: levelProfile.supports,
      formats: [...levelProfile.formats, iiifInfo.imageInfo.formats === undefined ?
        [] : iiifInfo.imageInfo.formats
      ],
      qualities: [...levelProfile.qualities, iiifInfo.imageInfo.qualities === undefined ?
        [] : iiifInfo.imageInfo.qualities
      ],
      resolutions: iiifInfo.imageInfo.scale_factors,
      tileSize: iiifInfo.imageInfo.tile_width !== undefined ? (iiifInfo.imageInfo.tile_height !== undefined ?
        [iiifInfo.imageInfo.tile_width, iiifInfo.imageInfo.tile_height] : [iiifInfo.imageInfo.tile_width, iiifInfo.imageInfo.tile_width]) :
        (iiifInfo.imageInfo.tile_height != undefined ? [iiifInfo.imageInfo.tile_height, iiifInfo.imageInfo.tile_height] : undefined)
    };
  }

  function generateVersion2Options(iiifInfo) {
    const levelProfile = iiifInfo.getComplianceLevelSupportedFeatures(),
        additionalProfile = Array.isArray(iiifInfo.imageInfo.profile) && iiifInfo.imageInfo.profile.length > 1,
        profileSupports = additionalProfile && iiifInfo.imageInfo.profile[1].supports ? iiifInfo.imageInfo.profile[1].supports : [],
        profileFormats = additionalProfile && iiifInfo.imageInfo.profile[1].formats ? iiifInfo.imageInfo.profile[1].formats : [],
        profileQualities = additionalProfile && iiifInfo.imageInfo.profile[1].qualities ? iiifInfo.imageInfo.profile[1].qualities : [];
    return {
      url: iiifInfo.imageInfo['@id'].replace(/\/?(info.json)?$/g, ''),
      sizes: iiifInfo.imageInfo.sizes === undefined ? undefined : iiifInfo.imageInfo.sizes.map(function(size) {
        return [size.width, size.height];
      }),
      tileSize: iiifInfo.imageInfo.tiles === undefined ? undefined : [
        iiifInfo.imageInfo.tiles.map(function(tile) {
          return tile.width;
        })[0],
        iiifInfo.imageInfo.tiles.map(function(tile) {
          return tile.height === undefined ? tile.width : tile.height;
        })[0]
      ],
      resolutions: iiifInfo.imageInfo.tiles === undefined ? undefined :
        iiifInfo.imageInfo.tiles.map(function(tile) {
          return tile.scaleFactors;
        })[0],
      supports: [...levelProfile.supports, ...profileSupports],
      formats: [...levelProfile.formats, ...profileFormats],
      qualities: [...levelProfile.qualities, ...profileQualities]
    };
  }

  function generateVersion3Options(iiifInfo) {
    const levelProfile = iiifInfo.getComplianceLevelSupportedFeatures(),
        formats = iiifInfo.imageInfo.extraFormats === undefined ? levelProfile.formats :
          [...levelProfile.formats, ...iiifInfo.imageInfo.extraFormats],
        preferredFormat = iiifInfo.imageInfo.preferredFormats !== undefined && Array.isArray(iiifInfo.imageInfo.preferredFormats) &&
          iiifInfo.imageInfo.preferredFormats.length > 0 ?
          iiifInfo.imageInfo.preferredFormats.filter(function(format) {
            return ['jpg', 'png', 'gif'].includes(format);
          }).reduce(function(acc, format) {
            return acc === undefined && formats.includes(format) ? format : acc;
          }, undefined) : undefined;
    return {
      url: iiifInfo.imageInfo['id'],
      sizes: iiifInfo.imageInfo.sizes === undefined ? undefined : iiifInfo.imageInfo.sizes.map(function(size) {
        return [size.width, size.height];
      }),
      tileSize: iiifInfo.imageInfo.tiles === undefined ? undefined : [
        iiifInfo.imageInfo.tiles.map(function(tile) {
          return tile.width;
        })[0],
        iiifInfo.imageInfo.tiles.map(function(tile) {
          return tile.height;
        })[0]
      ],
      resolutions: iiifInfo.imageInfo.tiles === undefined ? undefined :
        iiifInfo.imageInfo.tiles.map(function(tile) {
          return tile.scaleFactors;
        })[0],
      supports: iiifInfo.imageInfo.extraFeatures === undefined ? levelProfile.supports :
        [...levelProfile.supports, ...iiifInfo.imageInfo.extraFeatures],
      formats: formats,
      qualities: iiifInfo.imageInfo.extraQualities === undefined ? levelProfile.qualities :
        [...levelProfile.qualities, ...iiifInfo.imageInfo.extraQualities],
      preferredFormat: preferredFormat
    };
  }

  const versionFunctions = {};
  versionFunctions[Versions.VERSION1] = generateVersion1Options;
  versionFunctions[Versions.VERSION2] = generateVersion2Options;
  versionFunctions[Versions.VERSION3] = generateVersion3Options;

  /**
   * @classdesc
   * Format for transforming IIIF Image API image information responses into
   * IIIF tile source ready options
   *
   * @api
   */
  class IIIFInfo {

    /**
     * @param {string|ImageInformationResponse1_0|ImageInformationResponse1_1|ImageInformationResponse2|ImageInformationResponse3} imageInfo
     * Deserialized image information JSON response object or JSON response as string
     */
    constructor(imageInfo) {
      this.setImageInfo(imageInfo);
    }

    /**
     * @param {string|ImageInformationResponse1_0|ImageInformationResponse1_1|ImageInformationResponse2|ImageInformationResponse3} imageInfo
     * Deserialized image information JSON response object or JSON response as string
     * @api
     */
    setImageInfo(imageInfo) {
      if (typeof imageInfo == 'string') {
        this.imageInfo = JSON.parse(imageInfo);
      } else {
        this.imageInfo = imageInfo;
      }
    }

    /**
     * @returns {Versions} Major IIIF version.
     * @api
     */
    getImageApiVersion() {
      if (this.imageInfo === undefined) {
        return;
      }
      let context = this.imageInfo['@context'] || 'ol-no-context';
      if (typeof context == 'string') {
        context = [context];
      }
      for (let i = 0; i < context.length; i++) {
        switch (context[i]) {
          case 'http://library.stanford.edu/iiif/image-api/1.1/context.json':
          case 'http://iiif.io/api/image/1/context.json':
            return Versions.VERSION1;
          case 'http://iiif.io/api/image/2/context.json':
            return Versions.VERSION2;
          case 'http://iiif.io/api/image/3/context.json':
            return Versions.VERSION3;
          case 'ol-no-context':
            // Image API 1.0 has no '@context'
            if (this.getComplianceLevelEntryFromProfile(Versions.VERSION1) && this.imageInfo.identifier) {
              return Versions.VERSION1;
            }
            break;
        }
      }
      assert(false, 61);
    }

    /**
     * @param {Versions} version Optional IIIF image API version
     * @returns {string} Compliance level as it appears in the IIIF image information
     * response.
     */
    getComplianceLevelEntryFromProfile(version) {
      if (this.imageInfo === undefined || this.imageInfo.profile === undefined) {
        return;
      }
      if (version === undefined) {
        version = this.getImageApiVersion();
      }
      switch (version) {
        case Versions.VERSION1:
          if (COMPLIANCE_VERSION1.test(this.imageInfo.profile)) {
            return this.imageInfo.profile;
          }
          break;
        case Versions.VERSION3:
          if (COMPLIANCE_VERSION3.test(this.imageInfo.profile)) {
            return this.imageInfo.profile;
          }
          break;
        case Versions.VERSION2:
          if (typeof this.imageInfo.profile === 'string' && COMPLIANCE_VERSION2.test(this.imageInfo.profile)) {
            return this.imageInfo.profile;
          }
          if (Array.isArray(this.imageInfo.profile) && this.imageInfo.profile.length > 0
            && typeof this.imageInfo.profile[0] === 'string' && COMPLIANCE_VERSION2.test(this.imageInfo.profile[0])) {
            return this.imageInfo.profile[0];
          }
          break;
      }
    }

    /**
     * @param {Versions} version Optional IIIF image API version
     * @returns {string} Compliance level, on of 'level0', 'level1' or 'level2' or undefined
     */
    getComplianceLevelFromProfile(version) {
      const complianceLevel = this.getComplianceLevelEntryFromProfile(version);
      if (complianceLevel === undefined) {
        return undefined;
      }
      const level = complianceLevel.match(/level[0-2](\.json)?$/g);
      return Array.isArray(level) ? level[0].replace('.json', '') : undefined;
    }

    /**
     * @returns {SupportedFeatures} Image formats, qualities and region / size calculation
     * methods that are supported by the IIIF service.
     */
    getComplianceLevelSupportedFeatures() {
      if (this.imageInfo === undefined) {
        return;
      }
      const version = this.getImageApiVersion();
      const level = this.getComplianceLevelFromProfile(version);
      if (level === undefined) {
        return IIIF_PROFILE_VALUES['none']['none'];
      }
      return IIIF_PROFILE_VALUES[version][level];
    }

    /**
     * @param {PreferredOptions} opt_preferredOptions Optional options for preferred format and quality.
     * @returns {import("../source/IIIF.js").Options} IIIF tile source ready constructor options.
     * @api
     */
    getTileSourceOptions(opt_preferredOptions) {
      const options = opt_preferredOptions || {},
          version = this.getImageApiVersion();
      if (version === undefined) {
        return;
      }
      const imageOptions = version === undefined ? undefined : versionFunctions[version](this);
      if (imageOptions === undefined) {
        return;
      }
      return {
        url: imageOptions.url,
        version: version,
        size: [this.imageInfo.width, this.imageInfo.height],
        sizes: imageOptions.sizes,
        format: options.format !== undefined && imageOptions.formats.includes(options.format) ? options.format :
          imageOptions.preferredFormat !== undefined ? imageOptions.preferredFormat : 'jpg',
        supports: imageOptions.supports,
        quality: options.quality && imageOptions.qualities.includes(options.quality) ?
          options.quality : imageOptions.qualities.includes('native') ? 'native' : 'default',
        resolutions: Array.isArray(imageOptions.resolutions) ? imageOptions.resolutions.sort(function(a, b) {
          return b - a;
        }) : undefined,
        tileSize: imageOptions.tileSize
      };
    }

  }

  /**
   * @module ol/style/IconAnchorUnits
   */

  /**
   * Icon anchor units. One of 'fraction', 'pixels'.
   * @enum {string}
   */
  var IconAnchorUnits = {
    FRACTION: 'fraction',
    PIXELS: 'pixels'
  };

  /**
   * @module ol/style/IconImage
   */


  class IconImage extends Target {
    /**
     * @param {HTMLImageElement|HTMLCanvasElement} image Image.
     * @param {string|undefined} src Src.
     * @param {import("../size.js").Size} size Size.
     * @param {?string} crossOrigin Cross origin.
     * @param {import("../ImageState.js").default} imageState Image state.
     * @param {import("../color.js").Color} color Color.
     */
    constructor(image, src, size, crossOrigin, imageState, color) {

      super();

      /**
       * @private
       * @type {HTMLImageElement|HTMLCanvasElement}
       */
      this.hitDetectionImage_ = null;

      /**
       * @private
       * @type {HTMLImageElement|HTMLCanvasElement}
       */
      this.image_ = !image ? new Image() : image;

      if (crossOrigin !== null) {
        /** @type {HTMLImageElement} */ (this.image_).crossOrigin = crossOrigin;
      }

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.canvas_ = color ? document.createElement('canvas') : null;

      /**
       * @private
       * @type {import("../color.js").Color}
       */
      this.color_ = color;

      /**
       * @private
       * @type {function():void}
       */
      this.unlisten_ = null;

      /**
       * @private
       * @type {import("../ImageState.js").default}
       */
      this.imageState_ = imageState;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.size_ = size;

      /**
       * @private
       * @type {string|undefined}
       */
      this.src_ = src;

      /**
       * @private
       * @type {boolean|undefined}
       */
      this.tainted_;

    }

    /**
     * @private
     * @return {boolean} The image canvas is tainted.
     */
    isTainted_() {
      if (this.tainted_ === undefined && this.imageState_ === ImageState.LOADED) {
        this.tainted_ = false;
        const context = createCanvasContext2D(1, 1);
        try {
          context.drawImage(this.image_, 0, 0);
          context.getImageData(0, 0, 1, 1);
        } catch (e) {
          this.tainted_ = true;
        }
      }
      return this.tainted_ === true;
    }

    /**
     * @private
     */
    dispatchChangeEvent_() {
      this.dispatchEvent(EventType.CHANGE);
    }

    /**
     * @private
     */
    handleImageError_() {
      this.imageState_ = ImageState.ERROR;
      this.unlistenImage_();
      this.dispatchChangeEvent_();
    }

    /**
     * @private
     */
    handleImageLoad_() {
      this.imageState_ = ImageState.LOADED;
      if (this.size_) {
        this.image_.width = this.size_[0];
        this.image_.height = this.size_[1];
      }
      this.size_ = [this.image_.width, this.image_.height];
      this.unlistenImage_();
      this.replaceColor_();
      this.dispatchChangeEvent_();
    }

    /**
     * @param {number} pixelRatio Pixel ratio.
     * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.
     */
    getImage(pixelRatio) {
      return this.canvas_ ? this.canvas_ : this.image_;
    }

    /**
     * @return {import("../ImageState.js").default} Image state.
     */
    getImageState() {
      return this.imageState_;
    }

    /**
     * @param {number} pixelRatio Pixel ratio.
     * @return {HTMLImageElement|HTMLCanvasElement} Image element.
     */
    getHitDetectionImage(pixelRatio) {
      if (!this.hitDetectionImage_) {
        if (this.isTainted_()) {
          const width = this.size_[0];
          const height = this.size_[1];
          const context = createCanvasContext2D(width, height);
          context.fillRect(0, 0, width, height);
          this.hitDetectionImage_ = context.canvas;
        } else {
          this.hitDetectionImage_ = this.image_;
        }
      }
      return this.hitDetectionImage_;
    }

    /**
     * @return {import("../size.js").Size} Image size.
     */
    getSize() {
      return this.size_;
    }

    /**
     * @return {string|undefined} Image src.
     */
    getSrc() {
      return this.src_;
    }

    /**
     * Load not yet loaded URI.
     */
    load() {
      if (this.imageState_ == ImageState.IDLE) {
        this.imageState_ = ImageState.LOADING;
        try {
          /** @type {HTMLImageElement} */ (this.image_).src = this.src_;
        } catch (e) {
          this.handleImageError_();
        }
        this.unlisten_ = listenImage(
          this.image_,
          this.handleImageLoad_.bind(this),
          this.handleImageError_.bind(this)
        );
      }
    }

    /**
     * @private
     */
    replaceColor_() {
      if (!this.color_ || this.isTainted_()) {
        return;
      }

      this.canvas_.width = this.image_.width;
      this.canvas_.height = this.image_.height;

      const ctx = this.canvas_.getContext('2d');
      ctx.drawImage(this.image_, 0, 0);

      const imgData = ctx.getImageData(0, 0, this.image_.width, this.image_.height);
      const data = imgData.data;
      const r = this.color_[0] / 255.0;
      const g = this.color_[1] / 255.0;
      const b = this.color_[2] / 255.0;

      for (let i = 0, ii = data.length; i < ii; i += 4) {
        data[i] *= r;
        data[i + 1] *= g;
        data[i + 2] *= b;
      }
      ctx.putImageData(imgData, 0, 0);
    }

    /**
     * Discards event handlers which listen for load completion or errors.
     *
     * @private
     */
    unlistenImage_() {
      if (this.unlisten_) {
        this.unlisten_();
        this.unlisten_ = null;
      }
    }
  }


  /**
   * @param {HTMLImageElement|HTMLCanvasElement} image Image.
   * @param {string} src Src.
   * @param {import("../size.js").Size} size Size.
   * @param {?string} crossOrigin Cross origin.
   * @param {import("../ImageState.js").default} imageState Image state.
   * @param {import("../color.js").Color} color Color.
   * @return {IconImage} Icon image.
   */
  function get$3(image, src, size, crossOrigin, imageState, color) {
    let iconImage = shared.get(src, crossOrigin, color);
    if (!iconImage) {
      iconImage = new IconImage(image, src, size, crossOrigin, imageState, color);
      shared.set(src, crossOrigin, color, iconImage);
    }
    return iconImage;
  }

  /**
   * @module ol/style/IconOrigin
   */

  /**
   * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.
   * @enum {string}
   */
  var IconOrigin = {
    BOTTOM_LEFT: 'bottom-left',
    BOTTOM_RIGHT: 'bottom-right',
    TOP_LEFT: 'top-left',
    TOP_RIGHT: 'top-right'
  };

  /**
   * @module ol/style/Icon
   */


  /**
   * @typedef {Object} Options
   * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.
   * @property {import("./IconOrigin.js").default} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,
   * `top-left` or `top-right`.
   * @property {import("./IconAnchorUnits.js").default} [anchorXUnits='fraction'] Units in which the anchor x value is
   * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates
   * the x value in pixels.
   * @property {import("./IconAnchorUnits.js").default} [anchorYUnits='fraction'] Units in which the anchor y value is
   * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates
   * the y value in pixels.
   * @property {import("../color.js").Color|string} [color] Color to tint the icon. If not specified,
   * the icon will be left as is.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a
   * `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the
   * provided image must already be loaded. And in that case, it is required
   * to provide the size of the image, with the `imgSize` option.
   * @property {Array<number>} [offset=[0, 0]] Offset, which, together with the size and the offset origin, define the
   * sub-rectangle to use from the original icon image.
   * @property {import("./IconOrigin.js").default} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,
   * `top-left` or `top-right`.
   * @property {number} [opacity=1] Opacity of the icon.
   * @property {number} [scale=1] Scale.
   * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.
   * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
   * @property {import("../size.js").Size} [size] Icon size in pixel. Can be used together with `offset` to define the
   * sub-rectangle to use from the origin (sprite) icon image.
   * @property {import("../size.js").Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not, and
   * for SVG images in Internet Explorer 11. The provided `imgSize` needs to match the actual size of the image.
   * @property {string} [src] Image source URI.
   */


  /**
   * @classdesc
   * Set icon style for vector features.
   * @api
   */
  class Icon extends ImageStyle {
    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {
      const options = opt_options || {};

      /**
       * @type {number}
       */
      const opacity = options.opacity !== undefined ? options.opacity : 1;

      /**
       * @type {number}
       */
      const rotation = options.rotation !== undefined ? options.rotation : 0;

      /**
       * @type {number}
       */
      const scale = options.scale !== undefined ? options.scale : 1;

      /**
       * @type {boolean}
       */
      const rotateWithView = options.rotateWithView !== undefined ?
        options.rotateWithView : false;

      super({
        opacity: opacity,
        rotation: rotation,
        scale: scale,
        rotateWithView: rotateWithView
      });

      /**
       * @private
       * @type {Array<number>}
       */
      this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];

      /**
       * @private
       * @type {Array<number>}
       */
      this.normalizedAnchor_ = null;

      /**
       * @private
       * @type {import("./IconOrigin.js").default}
       */
      this.anchorOrigin_ = options.anchorOrigin !== undefined ?
        options.anchorOrigin : IconOrigin.TOP_LEFT;

      /**
       * @private
       * @type {import("./IconAnchorUnits.js").default}
       */
      this.anchorXUnits_ = options.anchorXUnits !== undefined ?
        options.anchorXUnits : IconAnchorUnits.FRACTION;

      /**
       * @private
       * @type {import("./IconAnchorUnits.js").default}
       */
      this.anchorYUnits_ = options.anchorYUnits !== undefined ?
        options.anchorYUnits : IconAnchorUnits.FRACTION;

      /**
       * @private
       * @type {?string}
       */
      this.crossOrigin_ =
          options.crossOrigin !== undefined ? options.crossOrigin : null;

      /**
       * @type {HTMLImageElement|HTMLCanvasElement}
       */
      const image = options.img !== undefined ? options.img : null;

      /**
       * @type {import("../size.js").Size}
       */
      const imgSize = options.imgSize !== undefined ? options.imgSize : null;

      /**
       * @type {string|undefined}
       */
      let src = options.src;

      assert(!(src !== undefined && image),
        4); // `image` and `src` cannot be provided at the same time
      assert(!image || (image && imgSize),
        5); // `imgSize` must be set when `image` is provided

      if ((src === undefined || src.length === 0) && image) {
        src = /** @type {HTMLImageElement} */ (image).src || getUid(image);
      }
      assert(src !== undefined && src.length > 0,
        6); // A defined and non-empty `src` or `image` must be provided

      /**
       * @type {import("../ImageState.js").default}
       */
      const imageState = options.src !== undefined ?
        ImageState.IDLE : ImageState.LOADED;

      /**
       * @private
       * @type {import("../color.js").Color}
       */
      this.color_ = options.color !== undefined ? asArray(options.color) : null;

      /**
       * @private
       * @type {import("./IconImage.js").default}
       */
      this.iconImage_ = get$3(
        image, /** @type {string} */ (src), imgSize, this.crossOrigin_, imageState, this.color_);

      /**
       * @private
       * @type {Array<number>}
       */
      this.offset_ = options.offset !== undefined ? options.offset : [0, 0];

      /**
       * @private
       * @type {import("./IconOrigin.js").default}
       */
      this.offsetOrigin_ = options.offsetOrigin !== undefined ?
        options.offsetOrigin : IconOrigin.TOP_LEFT;

      /**
       * @private
       * @type {Array<number>}
       */
      this.origin_ = null;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.size_ = options.size !== undefined ? options.size : null;

    }

    /**
     * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.
     * @return {Icon} The cloned style.
     * @api
     */
    clone() {
      return new Icon({
        anchor: this.anchor_.slice(),
        anchorOrigin: this.anchorOrigin_,
        anchorXUnits: this.anchorXUnits_,
        anchorYUnits: this.anchorYUnits_,
        crossOrigin: this.crossOrigin_,
        color: (this.color_ && this.color_.slice) ? this.color_.slice() : this.color_ || undefined,
        src: this.getSrc(),
        offset: this.offset_.slice(),
        offsetOrigin: this.offsetOrigin_,
        size: this.size_ !== null ? this.size_.slice() : undefined,
        opacity: this.getOpacity(),
        scale: this.getScale(),
        rotation: this.getRotation(),
        rotateWithView: this.getRotateWithView()
      });
    }

    /**
     * @inheritDoc
     * @api
     */
    getAnchor() {
      if (this.normalizedAnchor_) {
        return this.normalizedAnchor_;
      }
      let anchor = this.anchor_;
      const size = this.getSize();
      if (this.anchorXUnits_ == IconAnchorUnits.FRACTION ||
          this.anchorYUnits_ == IconAnchorUnits.FRACTION) {
        if (!size) {
          return null;
        }
        anchor = this.anchor_.slice();
        if (this.anchorXUnits_ == IconAnchorUnits.FRACTION) {
          anchor[0] *= size[0];
        }
        if (this.anchorYUnits_ == IconAnchorUnits.FRACTION) {
          anchor[1] *= size[1];
        }
      }

      if (this.anchorOrigin_ != IconOrigin.TOP_LEFT) {
        if (!size) {
          return null;
        }
        if (anchor === this.anchor_) {
          anchor = this.anchor_.slice();
        }
        if (this.anchorOrigin_ == IconOrigin.TOP_RIGHT ||
            this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {
          anchor[0] = -anchor[0] + size[0];
        }
        if (this.anchorOrigin_ == IconOrigin.BOTTOM_LEFT ||
            this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {
          anchor[1] = -anchor[1] + size[1];
        }
      }
      this.normalizedAnchor_ = anchor;
      return this.normalizedAnchor_;
    }

    /**
     * Set the anchor point. The anchor determines the center point for the
     * symbolizer.
     *
     * @param {Array<number>} anchor Anchor.
     * @api
     */
    setAnchor(anchor) {
      this.anchor_ = anchor;
      this.normalizedAnchor_ = null;
    }

    /**
     * Get the icon color.
     * @return {import("../color.js").Color} Color.
     * @api
     */
    getColor() {
      return this.color_;
    }

    /**
     * Get the image icon.
     * @param {number} pixelRatio Pixel ratio.
     * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.
     * @override
     * @api
     */
    getImage(pixelRatio) {
      return this.iconImage_.getImage(pixelRatio);
    }

    /**
     * @override
     */
    getImageSize() {
      return this.iconImage_.getSize();
    }

    /**
     * @override
     */
    getHitDetectionImageSize() {
      return this.getImageSize();
    }

    /**
     * @override
     */
    getImageState() {
      return this.iconImage_.getImageState();
    }

    /**
     * @override
     */
    getHitDetectionImage(pixelRatio) {
      return this.iconImage_.getHitDetectionImage(pixelRatio);
    }

    /**
     * @inheritDoc
     * @api
     */
    getOrigin() {
      if (this.origin_) {
        return this.origin_;
      }
      let offset = this.offset_;

      if (this.offsetOrigin_ != IconOrigin.TOP_LEFT) {
        const size = this.getSize();
        const iconImageSize = this.iconImage_.getSize();
        if (!size || !iconImageSize) {
          return null;
        }
        offset = offset.slice();
        if (this.offsetOrigin_ == IconOrigin.TOP_RIGHT ||
            this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {
          offset[0] = iconImageSize[0] - size[0] - offset[0];
        }
        if (this.offsetOrigin_ == IconOrigin.BOTTOM_LEFT ||
            this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {
          offset[1] = iconImageSize[1] - size[1] - offset[1];
        }
      }
      this.origin_ = offset;
      return this.origin_;
    }

    /**
     * Get the image URL.
     * @return {string|undefined} Image src.
     * @api
     */
    getSrc() {
      return this.iconImage_.getSrc();
    }

    /**
     * @inheritDoc
     * @api
     */
    getSize() {
      return !this.size_ ? this.iconImage_.getSize() : this.size_;
    }

    /**
     * @override
     */
    listenImageChange(listener, thisArg) {
      return listen(this.iconImage_, EventType.CHANGE,
        listener, thisArg);
    }

    /**
     * Load not yet loaded URI.
     * When rendering a feature with an icon style, the vector renderer will
     * automatically call this method. However, you might want to call this
     * method yourself for preloading or other purposes.
     * @override
     * @api
     */
    load() {
      this.iconImage_.load();
    }

    /**
     * @override
     */
    unlistenImageChange(listener, thisArg) {
      unlisten(this.iconImage_, EventType.CHANGE,
        listener, thisArg);
    }
  }

  /**
   * @module ol/format/KML
   */

  /**
   * @typedef {Object} Vec2
   * @property {number} x
   * @property {IconAnchorUnits} xunits
   * @property {number} y
   * @property {IconAnchorUnits} yunits
   * @property {IconOrigin} origin
   */

  /**
   * @typedef {Object} GxTrackObject
   * @property {Array<number>} flatCoordinates
   * @property {Array<number>} whens
   */


  /**
   * @const
   * @type {Array<string>}
   */
  const GX_NAMESPACE_URIS = [
    'http://www.google.com/kml/ext/2.2'
  ];


  /**
   * @const
   * @type {Array<null|string>}
   */
  const NAMESPACE_URIS$1 = [
    null,
    'http://earth.google.com/kml/2.0',
    'http://earth.google.com/kml/2.1',
    'http://earth.google.com/kml/2.2',
    'http://www.opengis.net/kml/2.2'
  ];


  /**
   * @const
   * @type {string}
   */
  const SCHEMA_LOCATION$1 = 'http://www.opengis.net/kml/2.2 ' +
      'https://developers.google.com/kml/schema/kml22gx.xsd';


  /**
   * @type {Object<string, IconAnchorUnits>}
   */
  const ICON_ANCHOR_UNITS_MAP = {
    'fraction': IconAnchorUnits.FRACTION,
    'pixels': IconAnchorUnits.PIXELS,
    'insetPixels': IconAnchorUnits.PIXELS
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const PLACEMARK_PARSERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'ExtendedData': extendedDataParser,
      'Region': regionParser,
      'MultiGeometry': makeObjectPropertySetter(
        readMultiGeometry, 'geometry'),
      'LineString': makeObjectPropertySetter(
        readLineString, 'geometry'),
      'LinearRing': makeObjectPropertySetter(
        readLinearRing, 'geometry'),
      'Point': makeObjectPropertySetter(
        readPoint, 'geometry'),
      'Polygon': makeObjectPropertySetter(
        readPolygon, 'geometry'),
      'Style': makeObjectPropertySetter(readStyle),
      'StyleMap': placemarkStyleMapParser,
      'address': makeObjectPropertySetter(readString),
      'description': makeObjectPropertySetter(readString),
      'name': makeObjectPropertySetter(readString),
      'open': makeObjectPropertySetter(readBoolean),
      'phoneNumber': makeObjectPropertySetter(readString),
      'styleUrl': makeObjectPropertySetter(readURI),
      'visibility': makeObjectPropertySetter(readBoolean)
    }, makeStructureNS(
      GX_NAMESPACE_URIS, {
        'MultiTrack': makeObjectPropertySetter(
          readGxMultiTrack, 'geometry'),
        'Track': makeObjectPropertySetter(
          readGxTrack, 'geometry')
      }
    ));


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const NETWORK_LINK_PARSERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'ExtendedData': extendedDataParser,
      'Region': regionParser,
      'Link': linkParser,
      'address': makeObjectPropertySetter(readString),
      'description': makeObjectPropertySetter(readString),
      'name': makeObjectPropertySetter(readString),
      'open': makeObjectPropertySetter(readBoolean),
      'phoneNumber': makeObjectPropertySetter(readString),
      'visibility': makeObjectPropertySetter(readBoolean)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const LINK_PARSERS$1 = makeStructureNS(
    NAMESPACE_URIS$1, {
      'href': makeObjectPropertySetter(readURI)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const REGION_PARSERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'LatLonAltBox': latLonAltBoxParser,
      'Lod': lodParser
    });


  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  const KML_SEQUENCE = makeStructureNS(
    NAMESPACE_URIS$1, [
      'Document', 'Placemark'
    ]);


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const KML_SERIALIZERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'Document': makeChildAppender(writeDocument),
      'Placemark': makeChildAppender(writePlacemark)
    });


  /**
   * @type {import("../color.js").Color}
   */
  let DEFAULT_COLOR;

  /**
   * @type {Fill}
   */
  let DEFAULT_FILL_STYLE = null;

  /**
   * @type {import("../size.js").Size}
   */
  let DEFAULT_IMAGE_STYLE_ANCHOR;

  /**
   * @type {IconAnchorUnits}
   */
  let DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;

  /**
   * @type {IconAnchorUnits}
   */
  let DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;

  /**
   * @type {import("../size.js").Size}
   */
  let DEFAULT_IMAGE_STYLE_SIZE;

  /**
   * @type {string}
   */
  let DEFAULT_IMAGE_STYLE_SRC;

  /**
   * @type {number}
   */
  let DEFAULT_IMAGE_SCALE_MULTIPLIER;

  /**
   * @type {import("../style/Image.js").default}
   */
  let DEFAULT_IMAGE_STYLE = null;

  /**
   * @type {string}
   */
  let DEFAULT_NO_IMAGE_STYLE;

  /**
   * @type {Stroke}
   */
  let DEFAULT_STROKE_STYLE$1 = null;

  /**
   * @type {Stroke}
   */
  let DEFAULT_TEXT_STROKE_STYLE;

  /**
   * @type {Text}
   */
  let DEFAULT_TEXT_STYLE = null;

  /**
   * @type {Style}
   */
  let DEFAULT_STYLE = null;

  /**
   * @type {Array<Style>}
   */
  let DEFAULT_STYLE_ARRAY = null;


  function createStyleDefaults() {

    DEFAULT_COLOR = [255, 255, 255, 1];

    DEFAULT_FILL_STYLE = new Fill({
      color: DEFAULT_COLOR
    });

    DEFAULT_IMAGE_STYLE_ANCHOR = [20, 2]; // FIXME maybe [8, 32] ?

    DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS = IconAnchorUnits.PIXELS;

    DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS = IconAnchorUnits.PIXELS;

    DEFAULT_IMAGE_STYLE_SIZE = [64, 64];

    DEFAULT_IMAGE_STYLE_SRC =
        'https://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png';

    DEFAULT_IMAGE_SCALE_MULTIPLIER = 0.5;

    DEFAULT_IMAGE_STYLE = new Icon({
      anchor: DEFAULT_IMAGE_STYLE_ANCHOR,
      anchorOrigin: IconOrigin.BOTTOM_LEFT,
      anchorXUnits: DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS,
      anchorYUnits: DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS,
      crossOrigin: 'anonymous',
      rotation: 0,
      scale: DEFAULT_IMAGE_SCALE_MULTIPLIER,
      size: DEFAULT_IMAGE_STYLE_SIZE,
      src: DEFAULT_IMAGE_STYLE_SRC
    });

    DEFAULT_NO_IMAGE_STYLE = 'NO_IMAGE';

    DEFAULT_STROKE_STYLE$1 = new Stroke({
      color: DEFAULT_COLOR,
      width: 1
    });

    DEFAULT_TEXT_STROKE_STYLE = new Stroke({
      color: [51, 51, 51, 1],
      width: 2
    });

    DEFAULT_TEXT_STYLE = new Text({
      font: 'bold 16px Helvetica',
      fill: DEFAULT_FILL_STYLE,
      stroke: DEFAULT_TEXT_STROKE_STYLE,
      scale: 0.8
    });

    DEFAULT_STYLE = new Style$1({
      fill: DEFAULT_FILL_STYLE,
      image: DEFAULT_IMAGE_STYLE,
      text: DEFAULT_TEXT_STYLE,
      stroke: DEFAULT_STROKE_STYLE$1,
      zIndex: 0
    });

    DEFAULT_STYLE_ARRAY = [DEFAULT_STYLE];

  }


  /**
   * @typedef {Object} Options
   * @property {boolean} [extractStyles=true] Extract styles from the KML.
   * @property {boolean} [showPointNames=true] Show names as labels for placemarks which contain points.
   * @property {Array<Style>} [defaultStyle] Default style. The
   * default default style is the same as Google Earth.
   * @property {boolean} [writeStyles=true] Write styles into KML.
   */


  /**
   * @classdesc
   * Feature format for reading and writing data in the KML format.
   *
   * {@link module:ol/format/KML~KML#readFeature} will read the first feature from
   * a KML source.
   *
   * MultiGeometries are converted into GeometryCollections if they are a mix of
   * geometry types, and into MultiPoint/MultiLineString/MultiPolygon if they are
   * all of the same type.
   *
   * Note that the KML format uses the URL() constructor. Older browsers such as IE
   * which do not support this will need a URL polyfill to be loaded before use.
   *
   * @api
   */
  class KML extends XMLFeature {

    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {
      super();

      const options = opt_options ? opt_options : {};

      if (!DEFAULT_STYLE_ARRAY) {
        createStyleDefaults();
      }

      /**
       * @inheritDoc
       */
      this.dataProjection = get$2('EPSG:4326');

      /**
       * @private
       * @type {Array<Style>}
       */
      this.defaultStyle_ = options.defaultStyle ?
        options.defaultStyle : DEFAULT_STYLE_ARRAY;

      /**
       * @private
       * @type {boolean}
       */
      this.extractStyles_ = options.extractStyles !== undefined ?
        options.extractStyles : true;

      /**
       * @private
       * @type {boolean}
       */
      this.writeStyles_ = options.writeStyles !== undefined ?
        options.writeStyles : true;

      /**
       * @private
       * @type {!Object<string, (Array<Style>|string)>}
       */
      this.sharedStyles_ = {};

      /**
       * @private
       * @type {boolean}
       */
      this.showPointNames_ = options.showPointNames !== undefined ?
        options.showPointNames : true;

    }

    /**
     * @param {Node} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     * @return {Array<Feature>|undefined} Features.
     */
    readDocumentOrFolder_(node, objectStack) {
      // FIXME use scope somehow
      const parsersNS = makeStructureNS(
        NAMESPACE_URIS$1, {
          'Document': makeArrayExtender(this.readDocumentOrFolder_, this),
          'Folder': makeArrayExtender(this.readDocumentOrFolder_, this),
          'Placemark': makeArrayPusher(this.readPlacemark_, this),
          'Style': this.readSharedStyle_.bind(this),
          'StyleMap': this.readSharedStyleMap_.bind(this)
        });
      /** @type {Array<Feature>} */
      const features = pushParseAndPop([], parsersNS, node, objectStack, this);
      if (features) {
        return features;
      } else {
        return undefined;
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     * @return {Feature|undefined} Feature.
     */
    readPlacemark_(node, objectStack) {
      const object = pushParseAndPop({'geometry': null},
        PLACEMARK_PARSERS, node, objectStack);
      if (!object) {
        return undefined;
      }
      const feature = new Feature();
      const id = node.getAttribute('id');
      if (id !== null) {
        feature.setId(id);
      }
      const options = /** @type {import("./Feature.js").ReadOptions} */ (objectStack[0]);

      const geometry = object['geometry'];
      if (geometry) {
        transformGeometryWithOptions(geometry, false, options);
      }
      feature.setGeometry(geometry);
      delete object['geometry'];

      if (this.extractStyles_) {
        const style = object['Style'];
        const styleUrl = object['styleUrl'];
        const styleFunction = createFeatureStyleFunction(
          style, styleUrl, this.defaultStyle_, this.sharedStyles_,
          this.showPointNames_);
        feature.setStyle(styleFunction);
      }
      delete object['Style'];
      // we do not remove the styleUrl property from the object, so it
      // gets stored on feature when setProperties is called

      feature.setProperties(object, true);

      return feature;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     */
    readSharedStyle_(node, objectStack) {
      const id = node.getAttribute('id');
      if (id !== null) {
        const style = readStyle(node, objectStack);
        if (style) {
          let styleUri;
          let baseURI = node.baseURI;
          if (!baseURI || baseURI == 'about:blank') {
            baseURI = window.location.href;
          }
          if (baseURI) {
            const url = new URL('#' + id, baseURI);
            styleUri = url.href;
          } else {
            styleUri = '#' + id;
          }
          this.sharedStyles_[styleUri] = style;
        }
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     */
    readSharedStyleMap_(node, objectStack) {
      const id = node.getAttribute('id');
      if (id === null) {
        return;
      }
      const styleMapValue = readStyleMapValue(node, objectStack);
      if (!styleMapValue) {
        return;
      }
      let styleUri;
      let baseURI = node.baseURI;
      if (!baseURI || baseURI == 'about:blank') {
        baseURI = window.location.href;
      }
      if (baseURI) {
        const url = new URL('#' + id, baseURI);
        styleUri = url.href;
      } else {
        styleUri = '#' + id;
      }
      this.sharedStyles_[styleUri] = styleMapValue;
    }

    /**
     * @inheritDoc
     */
    readFeatureFromNode(node, opt_options) {
      if (!includes(NAMESPACE_URIS$1, node.namespaceURI)) {
        return null;
      }
      const feature = this.readPlacemark_(
        node, [this.getReadOptions(node, opt_options)]);
      if (feature) {
        return feature;
      } else {
        return null;
      }
    }

    /**
     * @inheritDoc
     */
    readFeaturesFromNode(node, opt_options) {
      if (!includes(NAMESPACE_URIS$1, node.namespaceURI)) {
        return [];
      }
      let features;
      const localName = node.localName;
      if (localName == 'Document' || localName == 'Folder') {
        features = this.readDocumentOrFolder_(
          node, [this.getReadOptions(node, opt_options)]);
        if (features) {
          return features;
        } else {
          return [];
        }
      } else if (localName == 'Placemark') {
        const feature = this.readPlacemark_(
          node, [this.getReadOptions(node, opt_options)]);
        if (feature) {
          return [feature];
        } else {
          return [];
        }
      } else if (localName == 'kml') {
        features = [];
        for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
          const fs = this.readFeaturesFromNode(n, opt_options);
          if (fs) {
            extend$1(features, fs);
          }
        }
        return features;
      } else {
        return [];
      }
    }

    /**
     * Read the name of the KML.
     *
     * @param {Document|Element|string} source Source.
     * @return {string|undefined} Name.
     * @api
     */
    readName(source) {
      if (!source) {
        return undefined;
      } else if (typeof source === 'string') {
        const doc = parse(source);
        return this.readNameFromDocument(doc);
      } else if (isDocument(source)) {
        return this.readNameFromDocument(/** @type {Document} */ (source));
      } else {
        return this.readNameFromNode(/** @type {Element} */ (source));
      }
    }

    /**
     * @param {Document} doc Document.
     * @return {string|undefined} Name.
     */
    readNameFromDocument(doc) {
      for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {
        if (n.nodeType == Node.ELEMENT_NODE) {
          const name = this.readNameFromNode(/** @type {Element} */ (n));
          if (name) {
            return name;
          }
        }
      }
      return undefined;
    }

    /**
     * @param {Element} node Node.
     * @return {string|undefined} Name.
     */
    readNameFromNode(node) {
      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
        if (includes(NAMESPACE_URIS$1, n.namespaceURI) &&
            n.localName == 'name') {
          return readString(n);
        }
      }
      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
        const localName = n.localName;
        if (includes(NAMESPACE_URIS$1, n.namespaceURI) &&
            (localName == 'Document' ||
             localName == 'Folder' ||
             localName == 'Placemark' ||
             localName == 'kml')) {
          const name = this.readNameFromNode(n);
          if (name) {
            return name;
          }
        }
      }
      return undefined;
    }

    /**
     * Read the network links of the KML.
     *
     * @param {Document|Element|string} source Source.
     * @return {Array<Object>} Network links.
     * @api
     */
    readNetworkLinks(source) {
      const networkLinks = [];
      if (typeof source === 'string') {
        const doc = parse(source);
        extend$1(networkLinks, this.readNetworkLinksFromDocument(doc));
      } else if (isDocument(source)) {
        extend$1(networkLinks, this.readNetworkLinksFromDocument(
          /** @type {Document} */ (source)));
      } else {
        extend$1(networkLinks, this.readNetworkLinksFromNode(
          /** @type {Element} */ (source)));
      }
      return networkLinks;
    }

    /**
     * @param {Document} doc Document.
     * @return {Array<Object>} Network links.
     */
    readNetworkLinksFromDocument(doc) {
      const networkLinks = [];
      for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {
        if (n.nodeType == Node.ELEMENT_NODE) {
          extend$1(networkLinks, this.readNetworkLinksFromNode(/** @type {Element} */ (n)));
        }
      }
      return networkLinks;
    }

    /**
     * @param {Element} node Node.
     * @return {Array<Object>} Network links.
     */
    readNetworkLinksFromNode(node) {
      const networkLinks = [];
      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
        if (includes(NAMESPACE_URIS$1, n.namespaceURI) &&
            n.localName == 'NetworkLink') {
          const obj = pushParseAndPop({}, NETWORK_LINK_PARSERS,
            n, []);
          networkLinks.push(obj);
        }
      }
      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
        const localName = n.localName;
        if (includes(NAMESPACE_URIS$1, n.namespaceURI) &&
            (localName == 'Document' ||
             localName == 'Folder' ||
             localName == 'kml')) {
          extend$1(networkLinks, this.readNetworkLinksFromNode(n));
        }
      }
      return networkLinks;
    }

    /**
     * Read the regions of the KML.
     *
     * @param {Document|Element|string} source Source.
     * @return {Array<Object>} Regions.
     * @api
     */
    readRegion(source) {
      const regions = [];
      if (typeof source === 'string') {
        const doc = parse(source);
        extend$1(regions, this.readRegionFromDocument(doc));
      } else if (isDocument(source)) {
        extend$1(regions, this.readRegionFromDocument(
          /** @type {Document} */ (source)));
      } else {
        extend$1(regions, this.readRegionFromNode(
          /** @type {Element} */ (source)));
      }
      return regions;
    }

    /**
     * @param {Document} doc Document.
     * @return {Array<Object>} Region.
     */
    readRegionFromDocument(doc) {
      const regions = [];
      for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {
        if (n.nodeType == Node.ELEMENT_NODE) {
          extend$1(regions, this.readRegionFromNode(/** @type {Element} */ (n)));
        }
      }
      return regions;
    }

    /**
     * @param {Element} node Node.
     * @return {Array<Object>} Region.
     * @api
     */
    readRegionFromNode(node) {
      const regions = [];
      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
        if (includes(NAMESPACE_URIS$1, n.namespaceURI) &&
            n.localName == 'Region') {
          const obj = pushParseAndPop({}, REGION_PARSERS,
            n, []);
          regions.push(obj);
        }
      }
      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
        const localName = n.localName;
        if (includes(NAMESPACE_URIS$1, n.namespaceURI) &&
            (localName == 'Document' ||
             localName == 'Folder' ||
             localName == 'kml')) {
          extend$1(regions, this.readRegionFromNode(n));
        }
      }
      return regions;
    }

    /**
     * Encode an array of features in the KML format as an XML node. GeometryCollections,
     * MultiPoints, MultiLineStrings, and MultiPolygons are output as MultiGeometries.
     *
     * @param {Array<Feature>} features Features.
     * @param {import("./Feature.js").WriteOptions=} opt_options Options.
     * @return {Node} Node.
     * @override
     * @api
     */
    writeFeaturesNode(features, opt_options) {
      opt_options = this.adaptOptions(opt_options);
      const kml = createElementNS(NAMESPACE_URIS$1[4], 'kml');
      const xmlnsUri = 'http://www.w3.org/2000/xmlns/';
      kml.setAttributeNS(xmlnsUri, 'xmlns:gx', GX_NAMESPACE_URIS[0]);
      kml.setAttributeNS(xmlnsUri, 'xmlns:xsi', XML_SCHEMA_INSTANCE_URI);
      kml.setAttributeNS(XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', SCHEMA_LOCATION$1);

      const /** @type {import("../xml.js").NodeStackItem} */ context = {node: kml};
      /** @type {!Object<string, (Array<Feature>|Feature|undefined)>} */
      const properties = {};
      if (features.length > 1) {
        properties['Document'] = features;
      } else if (features.length == 1) {
        properties['Placemark'] = features[0];
      }
      const orderedKeys = KML_SEQUENCE[kml.namespaceURI];
      const values = makeSequence(properties, orderedKeys);
      pushSerializeAndPop(context, KML_SERIALIZERS,
        OBJECT_PROPERTY_NODE_FACTORY, values, [opt_options], orderedKeys,
        this);
      return kml;
    }
  }


  /**
   * @param {Style|undefined} foundStyle Style.
   * @param {string} name Name.
   * @return {Style} style Style.
   */
  function createNameStyleFunction(foundStyle, name) {
    let textStyle = null;
    const textOffset = [0, 0];
    let textAlign = 'start';
    if (foundStyle.getImage()) {
      let imageSize = foundStyle.getImage().getImageSize();
      if (imageSize === null) {
        imageSize = DEFAULT_IMAGE_STYLE_SIZE;
      }
      if (imageSize.length == 2) {
        const imageScale = foundStyle.getImage().getScale();
        // Offset the label to be centered to the right of the icon, if there is
        // one.
        textOffset[0] = imageScale * imageSize[0] / 2;
        textOffset[1] = -imageScale * imageSize[1] / 2;
        textAlign = 'left';
      }
    }
    if (foundStyle.getText() !== null) {
      // clone the text style, customizing it with name, alignments and offset.
      // Note that kml does not support many text options that OpenLayers does (rotation, textBaseline).
      const foundText = foundStyle.getText();
      textStyle = foundText.clone();
      textStyle.setFont(foundText.getFont() || DEFAULT_TEXT_STYLE.getFont());
      textStyle.setScale(foundText.getScale() || DEFAULT_TEXT_STYLE.getScale());
      textStyle.setFill(foundText.getFill() || DEFAULT_TEXT_STYLE.getFill());
      textStyle.setStroke(foundText.getStroke() || DEFAULT_TEXT_STROKE_STYLE);
    } else {
      textStyle = DEFAULT_TEXT_STYLE.clone();
    }
    textStyle.setText(name);
    textStyle.setOffsetX(textOffset[0]);
    textStyle.setOffsetY(textOffset[1]);
    textStyle.setTextAlign(textAlign);

    const nameStyle = new Style$1({
      text: textStyle
    });
    return nameStyle;
  }


  /**
   * @param {Array<Style>|undefined} style Style.
   * @param {string} styleUrl Style URL.
   * @param {Array<Style>} defaultStyle Default style.
   * @param {!Object<string, (Array<Style>|string)>} sharedStyles Shared styles.
   * @param {boolean|undefined} showPointNames true to show names for point placemarks.
   * @return {import("../style/Style.js").StyleFunction} Feature style function.
   */
  function createFeatureStyleFunction(style, styleUrl, defaultStyle, sharedStyles, showPointNames) {

    return (
      /**
       * @param {Feature} feature feature.
       * @param {number} resolution Resolution.
       * @return {Array<Style>} Style.
       */
      function(feature, resolution) {
        let drawName = showPointNames;
        /** @type {Style|undefined} */
        let nameStyle;
        let name = '';
        if (drawName) {
          const geometry = feature.getGeometry();
          if (geometry) {
            drawName = geometry.getType() === GeometryType.POINT;
          }
        }

        if (drawName) {
          name = /** @type {string} */ (feature.get('name'));
          drawName = drawName && !!name;
        }

        if (style) {
          if (drawName) {
            nameStyle = createNameStyleFunction(style[0], name);
            return style.concat(nameStyle);
          }
          return style;
        }
        if (styleUrl) {
          const foundStyle = findStyle(styleUrl, defaultStyle, sharedStyles);
          if (drawName) {
            nameStyle = createNameStyleFunction(foundStyle[0], name);
            return foundStyle.concat(nameStyle);
          }
          return foundStyle;
        }
        if (drawName) {
          nameStyle = createNameStyleFunction(defaultStyle[0], name);
          return defaultStyle.concat(nameStyle);
        }
        return defaultStyle;
      }
    );
  }


  /**
   * @param {Array<Style>|string|undefined} styleValue Style value.
   * @param {Array<Style>} defaultStyle Default style.
   * @param {!Object<string, (Array<Style>|string)>} sharedStyles
   * Shared styles.
   * @return {Array<Style>} Style.
   */
  function findStyle(styleValue, defaultStyle, sharedStyles) {
    if (Array.isArray(styleValue)) {
      return styleValue;
    } else if (typeof styleValue === 'string') {
      // KML files in the wild occasionally forget the leading `#` on styleUrls
      // defined in the same document.  Add a leading `#` if it enables to find
      // a style.
      if (!(styleValue in sharedStyles) && ('#' + styleValue in sharedStyles)) {
        styleValue = '#' + styleValue;
      }
      return findStyle(sharedStyles[styleValue], defaultStyle, sharedStyles);
    } else {
      return defaultStyle;
    }
  }


  /**
   * @param {Node} node Node.
   * @return {import("../color.js").Color|undefined} Color.
   */
  function readColor(node) {
    const s = getAllTextContent(node, false);
    // The KML specification states that colors should not include a leading `#`
    // but we tolerate them.
    const m = /^\s*#?\s*([0-9A-Fa-f]{8})\s*$/.exec(s);
    if (m) {
      const hexColor = m[1];
      return [
        parseInt(hexColor.substr(6, 2), 16),
        parseInt(hexColor.substr(4, 2), 16),
        parseInt(hexColor.substr(2, 2), 16),
        parseInt(hexColor.substr(0, 2), 16) / 255
      ];

    } else {
      return undefined;
    }
  }


  /**
   * @param {Node} node Node.
   * @return {Array<number>|undefined} Flat coordinates.
   */
  function readFlatCoordinates(node) {
    let s = getAllTextContent(node, false);
    const flatCoordinates = [];
    // The KML specification states that coordinate tuples should not include
    // spaces, but we tolerate them.
    const re =
        /^\s*([+\-]?\d*\.?\d+(?:e[+\-]?\d+)?)\s*,\s*([+\-]?\d*\.?\d+(?:e[+\-]?\d+)?)(?:\s*,\s*([+\-]?\d*\.?\d+(?:e[+\-]?\d+)?))?\s*/i;
    let m;
    while ((m = re.exec(s))) {
      const x = parseFloat(m[1]);
      const y = parseFloat(m[2]);
      const z = m[3] ? parseFloat(m[3]) : 0;
      flatCoordinates.push(x, y, z);
      s = s.substr(m[0].length);
    }
    if (s !== '') {
      return undefined;
    }
    return flatCoordinates;
  }


  /**
   * @param {Node} node Node.
   * @return {string} URI.
   */
  function readURI(node) {
    const s = getAllTextContent(node, false).trim();
    let baseURI = node.baseURI;
    if (!baseURI || baseURI == 'about:blank') {
      baseURI = window.location.href;
    }
    if (baseURI) {
      const url = new URL(s, baseURI);
      return url.href;
    } else {
      return s;
    }
  }


  /**
   * @param {Element} node Node.
   * @return {Vec2} Vec2.
   */
  function readVec2(node) {
    const xunits = node.getAttribute('xunits');
    const yunits = node.getAttribute('yunits');
    let origin;
    if (xunits !== 'insetPixels') {
      if (yunits !== 'insetPixels') {
        origin = IconOrigin.BOTTOM_LEFT;
      } else {
        origin = IconOrigin.TOP_LEFT;
      }
    } else {
      if (yunits !== 'insetPixels') {
        origin = IconOrigin.BOTTOM_RIGHT;
      } else {
        origin = IconOrigin.TOP_RIGHT;
      }
    }
    return {
      x: parseFloat(node.getAttribute('x')),
      xunits: ICON_ANCHOR_UNITS_MAP[xunits],
      y: parseFloat(node.getAttribute('y')),
      yunits: ICON_ANCHOR_UNITS_MAP[yunits],
      origin: origin
    };
  }


  /**
   * @param {Node} node Node.
   * @return {number|undefined} Scale.
   */
  function readScale(node) {
    return readDecimal(node);
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const STYLE_MAP_PARSERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'Pair': pairDataParser
    });


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Array<Style>|string|undefined} StyleMap.
   */
  function readStyleMapValue(node, objectStack) {
    return pushParseAndPop(undefined,
      STYLE_MAP_PARSERS, node, objectStack);
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const ICON_STYLE_PARSERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'Icon': makeObjectPropertySetter(readIcon),
      'heading': makeObjectPropertySetter(readDecimal),
      'hotSpot': makeObjectPropertySetter(readVec2),
      'scale': makeObjectPropertySetter(readScale)
    });


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function iconStyleParser(node, objectStack) {
    // FIXME refreshMode
    // FIXME refreshInterval
    // FIXME viewRefreshTime
    // FIXME viewBoundScale
    // FIXME viewFormat
    // FIXME httpQuery
    const object = pushParseAndPop(
      {}, ICON_STYLE_PARSERS, node, objectStack);
    if (!object) {
      return;
    }
    const styleObject = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const IconObject = 'Icon' in object ? object['Icon'] : {};
    const drawIcon = (!('Icon' in object) || Object.keys(IconObject).length > 0);
    let src;
    const href = /** @type {string|undefined} */
        (IconObject['href']);
    if (href) {
      src = href;
    } else if (drawIcon) {
      src = DEFAULT_IMAGE_STYLE_SRC;
    }
    let anchor, anchorXUnits, anchorYUnits;
    let anchorOrigin = IconOrigin.BOTTOM_LEFT;
    const hotSpot = /** @type {Vec2|undefined} */
        (object['hotSpot']);
    if (hotSpot) {
      anchor = [hotSpot.x, hotSpot.y];
      anchorXUnits = hotSpot.xunits;
      anchorYUnits = hotSpot.yunits;
      anchorOrigin = hotSpot.origin;
    } else if (src === DEFAULT_IMAGE_STYLE_SRC) {
      anchor = DEFAULT_IMAGE_STYLE_ANCHOR;
      anchorXUnits = DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;
      anchorYUnits = DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;
    } else if (/^http:\/\/maps\.(?:google|gstatic)\.com\//.test(src)) {
      anchor = [0.5, 0];
      anchorXUnits = IconAnchorUnits.FRACTION;
      anchorYUnits = IconAnchorUnits.FRACTION;
    }

    let offset;
    const x = /** @type {number|undefined} */
        (IconObject['x']);
    const y = /** @type {number|undefined} */
        (IconObject['y']);
    if (x !== undefined && y !== undefined) {
      offset = [x, y];
    }

    let size;
    const w = /** @type {number|undefined} */
        (IconObject['w']);
    const h = /** @type {number|undefined} */
        (IconObject['h']);
    if (w !== undefined && h !== undefined) {
      size = [w, h];
    }

    let rotation;
    const heading = /** @type {number} */
        (object['heading']);
    if (heading !== undefined) {
      rotation = toRadians(heading);
    }

    let scale = /** @type {number|undefined} */
        (object['scale']);

    if (drawIcon) {
      if (src == DEFAULT_IMAGE_STYLE_SRC) {
        size = DEFAULT_IMAGE_STYLE_SIZE;
        if (scale === undefined) {
          scale = DEFAULT_IMAGE_SCALE_MULTIPLIER;
        }
      }

      const imageStyle = new Icon({
        anchor: anchor,
        anchorOrigin: anchorOrigin,
        anchorXUnits: anchorXUnits,
        anchorYUnits: anchorYUnits,
        crossOrigin: 'anonymous', // FIXME should this be configurable?
        offset: offset,
        offsetOrigin: IconOrigin.BOTTOM_LEFT,
        rotation: rotation,
        scale: scale,
        size: size,
        src: src
      });
      styleObject['imageStyle'] = imageStyle;
    } else {
      // handle the case when we explicitly want to draw no icon.
      styleObject['imageStyle'] = DEFAULT_NO_IMAGE_STYLE;
    }
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const LABEL_STYLE_PARSERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'color': makeObjectPropertySetter(readColor),
      'scale': makeObjectPropertySetter(readScale)
    });


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function labelStyleParser(node, objectStack) {
    // FIXME colorMode
    const object = pushParseAndPop(
      {}, LABEL_STYLE_PARSERS, node, objectStack);
    if (!object) {
      return;
    }
    const styleObject = objectStack[objectStack.length - 1];
    const textStyle = new Text({
      fill: new Fill({
        color: /** @type {import("../color.js").Color} */
            ('color' in object ? object['color'] : DEFAULT_COLOR)
      }),
      scale: /** @type {number|undefined} */
          (object['scale'])
    });
    styleObject['textStyle'] = textStyle;
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const LINE_STYLE_PARSERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'color': makeObjectPropertySetter(readColor),
      'width': makeObjectPropertySetter(readDecimal)
    });


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function lineStyleParser(node, objectStack) {
    // FIXME colorMode
    // FIXME gx:outerColor
    // FIXME gx:outerWidth
    // FIXME gx:physicalWidth
    // FIXME gx:labelVisibility
    const object = pushParseAndPop(
      {}, LINE_STYLE_PARSERS, node, objectStack);
    if (!object) {
      return;
    }
    const styleObject = objectStack[objectStack.length - 1];
    const strokeStyle = new Stroke({
      color: /** @type {import("../color.js").Color} */
          ('color' in object ? object['color'] : DEFAULT_COLOR),
      width: /** @type {number} */ ('width' in object ? object['width'] : 1)
    });
    styleObject['strokeStyle'] = strokeStyle;
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const POLY_STYLE_PARSERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'color': makeObjectPropertySetter(readColor),
      'fill': makeObjectPropertySetter(readBoolean),
      'outline': makeObjectPropertySetter(readBoolean)
    });


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function polyStyleParser(node, objectStack) {
    // FIXME colorMode
    const object = pushParseAndPop(
      {}, POLY_STYLE_PARSERS, node, objectStack);
    if (!object) {
      return;
    }
    const styleObject = objectStack[objectStack.length - 1];
    const fillStyle = new Fill({
      color: /** @type {import("../color.js").Color} */
          ('color' in object ? object['color'] : DEFAULT_COLOR)
    });
    styleObject['fillStyle'] = fillStyle;
    const fill = /** @type {boolean|undefined} */ (object['fill']);
    if (fill !== undefined) {
      styleObject['fill'] = fill;
    }
    const outline = /** @type {boolean|undefined} */ (object['outline']);
    if (outline !== undefined) {
      styleObject['outline'] = outline;
    }
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const FLAT_LINEAR_RING_PARSERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'coordinates': makeReplacer(readFlatCoordinates)
    });


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Array<number>} LinearRing flat coordinates.
   */
  function readFlatLinearRing(node, objectStack) {
    return pushParseAndPop(null,
      FLAT_LINEAR_RING_PARSERS, node, objectStack);
  }


  /**
   * @param {Node} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function gxCoordParser(node, objectStack) {
    const gxTrackObject = /** @type {GxTrackObject} */
        (objectStack[objectStack.length - 1]);
    const flatCoordinates = gxTrackObject.flatCoordinates;
    const s = getAllTextContent(node, false);
    const re =
        /^\s*([+\-]?\d+(?:\.\d*)?(?:e[+\-]?\d*)?)\s+([+\-]?\d+(?:\.\d*)?(?:e[+\-]?\d*)?)\s+([+\-]?\d+(?:\.\d*)?(?:e[+\-]?\d*)?)\s*$/i;
    const m = re.exec(s);
    if (m) {
      const x = parseFloat(m[1]);
      const y = parseFloat(m[2]);
      const z = parseFloat(m[3]);
      flatCoordinates.push(x, y, z, 0);
    } else {
      flatCoordinates.push(0, 0, 0, 0);
    }
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const GX_MULTITRACK_GEOMETRY_PARSERS = makeStructureNS(
    GX_NAMESPACE_URIS, {
      'Track': makeArrayPusher(readGxTrack)
    });


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {MultiLineString|undefined} MultiLineString.
   */
  function readGxMultiTrack(node, objectStack) {
    const lineStrings = pushParseAndPop([],
      GX_MULTITRACK_GEOMETRY_PARSERS, node, objectStack);
    if (!lineStrings) {
      return undefined;
    }
    return new MultiLineString(lineStrings);
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const GX_TRACK_PARSERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'when': whenParser
    }, makeStructureNS(
      GX_NAMESPACE_URIS, {
        'coord': gxCoordParser
      }));


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {LineString|undefined} LineString.
   */
  function readGxTrack(node, objectStack) {
    const gxTrackObject = pushParseAndPop(
      /** @type {GxTrackObject} */ ({
        flatCoordinates: [],
        whens: []
      }), GX_TRACK_PARSERS, node, objectStack);
    if (!gxTrackObject) {
      return undefined;
    }
    const flatCoordinates = gxTrackObject.flatCoordinates;
    const whens = gxTrackObject.whens;
    for (let i = 0, ii = Math.min(flatCoordinates.length, whens.length); i < ii; ++i) {
      flatCoordinates[4 * i + 3] = whens[i];
    }
    return new LineString(flatCoordinates, GeometryLayout.XYZM);
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const ICON_PARSERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'href': makeObjectPropertySetter(readURI)
    }, makeStructureNS(
      GX_NAMESPACE_URIS, {
        'x': makeObjectPropertySetter(readDecimal),
        'y': makeObjectPropertySetter(readDecimal),
        'w': makeObjectPropertySetter(readDecimal),
        'h': makeObjectPropertySetter(readDecimal)
      }));


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object} Icon object.
   */
  function readIcon(node, objectStack) {
    const iconObject = pushParseAndPop(
      {}, ICON_PARSERS, node, objectStack);
    if (iconObject) {
      return iconObject;
    } else {
      return null;
    }
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const GEOMETRY_FLAT_COORDINATES_PARSERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'coordinates': makeReplacer(readFlatCoordinates)
    });


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Array<number>} Flat coordinates.
   */
  function readFlatCoordinatesFromNode(node, objectStack) {
    return pushParseAndPop(null,
      GEOMETRY_FLAT_COORDINATES_PARSERS, node, objectStack);
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const EXTRUDE_AND_ALTITUDE_MODE_PARSERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'extrude': makeObjectPropertySetter(readBoolean),
      'tessellate': makeObjectPropertySetter(readBoolean),
      'altitudeMode': makeObjectPropertySetter(readString)
    });


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {LineString|undefined} LineString.
   */
  function readLineString(node, objectStack) {
    const properties = pushParseAndPop({},
      EXTRUDE_AND_ALTITUDE_MODE_PARSERS, node,
      objectStack);
    const flatCoordinates =
        readFlatCoordinatesFromNode(node, objectStack);
    if (flatCoordinates) {
      const lineString = new LineString(flatCoordinates, GeometryLayout.XYZ);
      lineString.setProperties(properties, true);
      return lineString;
    } else {
      return undefined;
    }
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Polygon|undefined} Polygon.
   */
  function readLinearRing(node, objectStack) {
    const properties = pushParseAndPop({},
      EXTRUDE_AND_ALTITUDE_MODE_PARSERS, node,
      objectStack);
    const flatCoordinates =
        readFlatCoordinatesFromNode(node, objectStack);
    if (flatCoordinates) {
      const polygon = new Polygon(flatCoordinates, GeometryLayout.XYZ, [flatCoordinates.length]);
      polygon.setProperties(properties, true);
      return polygon;
    } else {
      return undefined;
    }
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const MULTI_GEOMETRY_PARSERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'LineString': makeArrayPusher(readLineString),
      'LinearRing': makeArrayPusher(readLinearRing),
      'MultiGeometry': makeArrayPusher(readMultiGeometry),
      'Point': makeArrayPusher(readPoint),
      'Polygon': makeArrayPusher(readPolygon)
    });


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {import("../geom/Geometry.js").default} Geometry.
   */
  function readMultiGeometry(node, objectStack) {
    const geometries = pushParseAndPop([],
      MULTI_GEOMETRY_PARSERS, node, objectStack);
    if (!geometries) {
      return null;
    }
    if (geometries.length === 0) {
      return new GeometryCollection(geometries);
    }
    let multiGeometry;
    let homogeneous = true;
    const type = geometries[0].getType();
    let geometry;
    for (let i = 1, ii = geometries.length; i < ii; ++i) {
      geometry = geometries[i];
      if (geometry.getType() != type) {
        homogeneous = false;
        break;
      }
    }
    if (homogeneous) {
      let layout;
      let flatCoordinates;
      if (type == GeometryType.POINT) {
        const point = geometries[0];
        layout = point.getLayout();
        flatCoordinates = point.getFlatCoordinates();
        for (let i = 1, ii = geometries.length; i < ii; ++i) {
          geometry = geometries[i];
          extend$1(flatCoordinates, geometry.getFlatCoordinates());
        }
        multiGeometry = new MultiPoint(flatCoordinates, layout);
        setCommonGeometryProperties(multiGeometry, geometries);
      } else if (type == GeometryType.LINE_STRING) {
        multiGeometry = new MultiLineString(geometries);
        setCommonGeometryProperties(multiGeometry, geometries);
      } else if (type == GeometryType.POLYGON) {
        multiGeometry = new MultiPolygon(geometries);
        setCommonGeometryProperties(multiGeometry, geometries);
      } else if (type == GeometryType.GEOMETRY_COLLECTION) {
        multiGeometry = new GeometryCollection(geometries);
      } else {
        assert(false, 37); // Unknown geometry type found
      }
    } else {
      multiGeometry = new GeometryCollection(geometries);
    }
    return (
      /** @type {import("../geom/Geometry.js").default} */ (multiGeometry)
    );
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Point|undefined} Point.
   */
  function readPoint(node, objectStack) {
    const properties = pushParseAndPop({},
      EXTRUDE_AND_ALTITUDE_MODE_PARSERS, node,
      objectStack);
    const flatCoordinates =
        readFlatCoordinatesFromNode(node, objectStack);
    if (flatCoordinates) {
      const point = new Point(flatCoordinates, GeometryLayout.XYZ);
      point.setProperties(properties, true);
      return point;
    } else {
      return undefined;
    }
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const FLAT_LINEAR_RINGS_PARSERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'innerBoundaryIs': innerBoundaryIsParser,
      'outerBoundaryIs': outerBoundaryIsParser
    });


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Polygon|undefined} Polygon.
   */
  function readPolygon(node, objectStack) {
    const properties = pushParseAndPop(/** @type {Object<string,*>} */ ({}),
      EXTRUDE_AND_ALTITUDE_MODE_PARSERS, node,
      objectStack);
    const flatLinearRings = pushParseAndPop([null],
      FLAT_LINEAR_RINGS_PARSERS, node, objectStack);
    if (flatLinearRings && flatLinearRings[0]) {
      const flatCoordinates = flatLinearRings[0];
      const ends = [flatCoordinates.length];
      for (let i = 1, ii = flatLinearRings.length; i < ii; ++i) {
        extend$1(flatCoordinates, flatLinearRings[i]);
        ends.push(flatCoordinates.length);
      }
      const polygon = new Polygon(flatCoordinates, GeometryLayout.XYZ, ends);
      polygon.setProperties(properties, true);
      return polygon;
    } else {
      return undefined;
    }
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const STYLE_PARSERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'IconStyle': iconStyleParser,
      'LabelStyle': labelStyleParser,
      'LineStyle': lineStyleParser,
      'PolyStyle': polyStyleParser
    });


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Array<Style>} Style.
   */
  function readStyle(node, objectStack) {
    const styleObject = pushParseAndPop(
      {}, STYLE_PARSERS, node, objectStack);
    if (!styleObject) {
      return null;
    }
    let fillStyle = /** @type {Fill} */
        ('fillStyle' in styleObject ?
          styleObject['fillStyle'] : DEFAULT_FILL_STYLE);
    const fill = /** @type {boolean|undefined} */ (styleObject['fill']);
    if (fill !== undefined && !fill) {
      fillStyle = null;
    }
    let imageStyle;
    if ('imageStyle' in styleObject) {
      if (styleObject['imageStyle'] != DEFAULT_NO_IMAGE_STYLE) {
        imageStyle = styleObject['imageStyle'];
      }
    } else {
      imageStyle = DEFAULT_IMAGE_STYLE;
    }
    const textStyle = /** @type {Text} */
        ('textStyle' in styleObject ?
          styleObject['textStyle'] : DEFAULT_TEXT_STYLE);
    let strokeStyle = /** @type {Stroke} */
        ('strokeStyle' in styleObject ?
          styleObject['strokeStyle'] : DEFAULT_STROKE_STYLE$1);
    const outline = /** @type {boolean|undefined} */
        (styleObject['outline']);
    if (outline !== undefined && !outline) {
      strokeStyle = null;
    }
    return [new Style$1({
      fill: fillStyle,
      image: imageStyle,
      stroke: strokeStyle,
      text: textStyle,
      zIndex: undefined // FIXME
    })];
  }


  /**
   * Reads an array of geometries and creates arrays for common geometry
   * properties. Then sets them to the multi geometry.
   * @param {MultiPoint|MultiLineString|MultiPolygon} multiGeometry A multi-geometry.
   * @param {Array<import("../geom/Geometry.js").default>} geometries List of geometries.
   */
  function setCommonGeometryProperties(multiGeometry, geometries) {
    const ii = geometries.length;
    const extrudes = new Array(geometries.length);
    const tessellates = new Array(geometries.length);
    const altitudeModes = new Array(geometries.length);
    let hasExtrude, hasTessellate, hasAltitudeMode;
    hasExtrude = hasTessellate = hasAltitudeMode = false;
    for (let i = 0; i < ii; ++i) {
      const geometry = geometries[i];
      extrudes[i] = geometry.get('extrude');
      tessellates[i] = geometry.get('tessellate');
      altitudeModes[i] = geometry.get('altitudeMode');
      hasExtrude = hasExtrude || extrudes[i] !== undefined;
      hasTessellate = hasTessellate || tessellates[i] !== undefined;
      hasAltitudeMode = hasAltitudeMode || altitudeModes[i];
    }
    if (hasExtrude) {
      multiGeometry.set('extrude', extrudes);
    }
    if (hasTessellate) {
      multiGeometry.set('tessellate', tessellates);
    }
    if (hasAltitudeMode) {
      multiGeometry.set('altitudeMode', altitudeModes);
    }
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const DATA_PARSERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'displayName': makeObjectPropertySetter(readString),
      'value': makeObjectPropertySetter(readString)
    });


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function dataParser(node, objectStack) {
    const name = node.getAttribute('name');
    parseNode(DATA_PARSERS, node, objectStack);
    const featureObject = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    if (name !== null) {
      featureObject[name] = featureObject.value;
    } else if (featureObject.displayName !== null) {
      featureObject[featureObject.displayName] = featureObject.value;
    }
    delete featureObject['value'];
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const EXTENDED_DATA_PARSERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'Data': dataParser,
      'SchemaData': schemaDataParser
    });


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function extendedDataParser(node, objectStack) {
    parseNode(EXTENDED_DATA_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function regionParser(node, objectStack) {
    parseNode(REGION_PARSERS, node, objectStack);
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const PAIR_PARSERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'Style': makeObjectPropertySetter(readStyle),
      'key': makeObjectPropertySetter(readString),
      'styleUrl': makeObjectPropertySetter(readURI)
    });


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function pairDataParser(node, objectStack) {
    const pairObject = pushParseAndPop(
      {}, PAIR_PARSERS, node, objectStack);
    if (!pairObject) {
      return;
    }
    const key = /** @type {string|undefined} */
        (pairObject['key']);
    if (key && key == 'normal') {
      const styleUrl = /** @type {string|undefined} */
          (pairObject['styleUrl']);
      if (styleUrl) {
        objectStack[objectStack.length - 1] = styleUrl;
      }
      const style = /** @type {Style} */
          (pairObject['Style']);
      if (style) {
        objectStack[objectStack.length - 1] = style;
      }
    }
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function placemarkStyleMapParser(node, objectStack) {
    const styleMapValue = readStyleMapValue(node, objectStack);
    if (!styleMapValue) {
      return;
    }
    const placemarkObject = objectStack[objectStack.length - 1];
    if (Array.isArray(styleMapValue)) {
      placemarkObject['Style'] = styleMapValue;
    } else if (typeof styleMapValue === 'string') {
      placemarkObject['styleUrl'] = styleMapValue;
    } else {
      assert(false, 38); // `styleMapValue` has an unknown type
    }
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const SCHEMA_DATA_PARSERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'SimpleData': simpleDataParser
    });


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function schemaDataParser(node, objectStack) {
    parseNode(SCHEMA_DATA_PARSERS, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function simpleDataParser(node, objectStack) {
    const name = node.getAttribute('name');
    if (name !== null) {
      const data = readString(node);
      const featureObject = /** @type {Object} */ (objectStack[objectStack.length - 1]);
      featureObject[name] = data;
    }
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const LAT_LON_ALT_BOX_PARSERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'altitudeMode': makeObjectPropertySetter(readString),
      'minAltitude': makeObjectPropertySetter(readDecimal),
      'maxAltitude': makeObjectPropertySetter(readDecimal),
      'north': makeObjectPropertySetter(readDecimal),
      'south': makeObjectPropertySetter(readDecimal),
      'east': makeObjectPropertySetter(readDecimal),
      'west': makeObjectPropertySetter(readDecimal)
    });


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function latLonAltBoxParser(node, objectStack) {
    const object = pushParseAndPop({}, LAT_LON_ALT_BOX_PARSERS, node, objectStack);
    if (!object) {
      return;
    }
    const regionObject = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const extent = [
      parseFloat(object['west']),
      parseFloat(object['south']),
      parseFloat(object['east']),
      parseFloat(object['north'])
    ];
    regionObject['extent'] = extent;
    regionObject['altitudeMode'] = object['altitudeMode'];
    regionObject['minAltitude'] = parseFloat(object['minAltitude']);
    regionObject['maxAltitude'] = parseFloat(object['maxAltitude']);
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const LOD_PARSERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'minLodPixels': makeObjectPropertySetter(readDecimal),
      'maxLodPixels': makeObjectPropertySetter(readDecimal),
      'minFadeExtent': makeObjectPropertySetter(readDecimal),
      'maxFadeExtent': makeObjectPropertySetter(readDecimal)
    });


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function lodParser(node, objectStack) {
    const object = pushParseAndPop({}, LOD_PARSERS, node, objectStack);
    if (!object) {
      return;
    }
    const lodObject = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    lodObject['minLodPixels'] = parseFloat(object['minLodPixels']);
    lodObject['maxLodPixels'] = parseFloat(object['maxLodPixels']);
    lodObject['minFadeExtent'] = parseFloat(object['minFadeExtent']);
    lodObject['maxFadeExtent'] = parseFloat(object['maxFadeExtent']);
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const INNER_BOUNDARY_IS_PARSERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'LinearRing': makeReplacer(readFlatLinearRing)
    });


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function innerBoundaryIsParser(node, objectStack) {
    /** @type {Array<number>|undefined} */
    const flatLinearRing = pushParseAndPop(undefined,
      INNER_BOUNDARY_IS_PARSERS, node, objectStack);
    if (flatLinearRing) {
      const flatLinearRings = /** @type {Array<Array<number>>} */
          (objectStack[objectStack.length - 1]);
      flatLinearRings.push(flatLinearRing);
    }
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const OUTER_BOUNDARY_IS_PARSERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'LinearRing': makeReplacer(readFlatLinearRing)
    });


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function outerBoundaryIsParser(node, objectStack) {
    /** @type {Array<number>|undefined} */
    const flatLinearRing = pushParseAndPop(undefined,
      OUTER_BOUNDARY_IS_PARSERS, node, objectStack);
    if (flatLinearRing) {
      const flatLinearRings = /** @type {Array<Array<number>>} */
          (objectStack[objectStack.length - 1]);
      flatLinearRings[0] = flatLinearRing;
    }
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function linkParser(node, objectStack) {
    parseNode(LINK_PARSERS$1, node, objectStack);
  }


  /**
   * @param {Node} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function whenParser(node, objectStack) {
    const gxTrackObject = /** @type {GxTrackObject} */
        (objectStack[objectStack.length - 1]);
    const whens = gxTrackObject.whens;
    const s = getAllTextContent(node, false);
    const when = Date.parse(s);
    whens.push(isNaN(when) ? 0 : when);
  }


  /**
   * @param {Node} node Node to append a TextNode with the color to.
   * @param {import("../color.js").Color|string} color Color.
   */
  function writeColorTextNode(node, color) {
    const rgba = asArray(color);
    const opacity = (rgba.length == 4) ? rgba[3] : 1;
    /** @type {Array<string|number>} */
    const abgr = [opacity * 255, rgba[2], rgba[1], rgba[0]];
    for (let i = 0; i < 4; ++i) {
      const hex = Math.floor(/** @type {number} */ (abgr[i])).toString(16);
      abgr[i] = (hex.length == 1) ? '0' + hex : hex;
    }
    writeStringTextNode(node, abgr.join(''));
  }


  /**
   * @param {Node} node Node to append a TextNode with the coordinates to.
   * @param {Array<number>} coordinates Coordinates.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeCoordinatesTextNode(node, coordinates, objectStack) {
    const context = objectStack[objectStack.length - 1];

    const layout = context['layout'];
    const stride = context['stride'];

    let dimension;
    if (layout == GeometryLayout.XY ||
        layout == GeometryLayout.XYM) {
      dimension = 2;
    } else if (layout == GeometryLayout.XYZ ||
        layout == GeometryLayout.XYZM) {
      dimension = 3;
    } else {
      assert(false, 34); // Invalid geometry layout
    }

    const ii = coordinates.length;
    let text = '';
    if (ii > 0) {
      text += coordinates[0];
      for (let d = 1; d < dimension; ++d) {
        text += ',' + coordinates[d];
      }
      for (let i = stride; i < ii; i += stride) {
        text += ' ' + coordinates[i];
        for (let d = 1; d < dimension; ++d) {
          text += ',' + coordinates[i + d];
        }
      }
    }
    writeStringTextNode(node, text);
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const EXTENDEDDATA_NODE_SERIALIZERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'Data': makeChildAppender(writeDataNode),
      'value': makeChildAppender(writeDataNodeValue),
      'displayName': makeChildAppender(writeDataNodeName)
    });


  /**
   * @param {Element} node Node.
   * @param {{name: *, value: *}} pair Name value pair.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeDataNode(node, pair, objectStack) {
    node.setAttribute('name', pair.name);
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    const value = pair.value;

    if (typeof value == 'object') {
      if (value !== null && value.displayName) {
        pushSerializeAndPop(context, EXTENDEDDATA_NODE_SERIALIZERS,
          OBJECT_PROPERTY_NODE_FACTORY, [value.displayName], objectStack, ['displayName']);
      }

      if (value !== null && value.value) {
        pushSerializeAndPop(context, EXTENDEDDATA_NODE_SERIALIZERS,
          OBJECT_PROPERTY_NODE_FACTORY, [value.value], objectStack, ['value']);
      }
    } else {
      pushSerializeAndPop(context, EXTENDEDDATA_NODE_SERIALIZERS,
        OBJECT_PROPERTY_NODE_FACTORY, [value], objectStack, ['value']);
    }
  }


  /**
   * @param {Node} node Node to append a TextNode with the name to.
   * @param {string} name DisplayName.
   */
  function writeDataNodeName(node, name) {
    writeCDATASection(node, name);
  }


  /**
   * @param {Node} node Node to append a CDATA Section with the value to.
   * @param {string} value Value.
   */
  function writeDataNodeValue(node, value) {
    writeStringTextNode(node, value);
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const DOCUMENT_SERIALIZERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'Placemark': makeChildAppender(writePlacemark)
    });


  /**
   * @const
   * @param {*} value Value.
   * @param {Array<*>} objectStack Object stack.
   * @param {string=} opt_nodeName Node name.
   * @return {Node|undefined} Node.
   */
  const DOCUMENT_NODE_FACTORY = function(value, objectStack, opt_nodeName) {
    const parentNode = objectStack[objectStack.length - 1].node;
    return createElementNS(parentNode.namespaceURI, 'Placemark');
  };


  /**
   * @param {Node} node Node.
   * @param {Array<Feature>} features Features.
   * @param {Array<*>} objectStack Object stack.
   * @this {KML}
   */
  function writeDocument(node, features, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    pushSerializeAndPop(context, DOCUMENT_SERIALIZERS,
      DOCUMENT_NODE_FACTORY, features, objectStack, undefined,
      this);
  }


  /**
   * A factory for creating Data nodes.
   * @const
   * @type {function(*, Array<*>): (Node|undefined)}
   */
  const DATA_NODE_FACTORY = makeSimpleNodeFactory('Data');


  /**
   * @param {Node} node Node.
   * @param {{names: Array<string>, values: (Array<*>)}} namesAndValues Names and values.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeExtendedData(node, namesAndValues, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    const names = namesAndValues.names;
    const values = namesAndValues.values;
    const length = names.length;

    for (let i = 0; i < length; i++) {
      pushSerializeAndPop(context, EXTENDEDDATA_NODE_SERIALIZERS,
        DATA_NODE_FACTORY, [{name: names[i], value: values[i]}], objectStack);
    }
  }


  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  const ICON_SEQUENCE = makeStructureNS(
    NAMESPACE_URIS$1, [
      'href'
    ],
    makeStructureNS(GX_NAMESPACE_URIS, [
      'x', 'y', 'w', 'h'
    ]));


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const ICON_SERIALIZERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'href': makeChildAppender(writeStringTextNode)
    }, makeStructureNS(
      GX_NAMESPACE_URIS, {
        'x': makeChildAppender(writeDecimalTextNode),
        'y': makeChildAppender(writeDecimalTextNode),
        'w': makeChildAppender(writeDecimalTextNode),
        'h': makeChildAppender(writeDecimalTextNode)
      }));


  /**
   * @const
   * @param {*} value Value.
   * @param {Array<*>} objectStack Object stack.
   * @param {string=} opt_nodeName Node name.
   * @return {Node|undefined} Node.
   */
  const GX_NODE_FACTORY = function(value, objectStack, opt_nodeName) {
    return createElementNS(GX_NAMESPACE_URIS[0],
      'gx:' + opt_nodeName);
  };


  /**
   * @param {Node} node Node.
   * @param {Object} icon Icon object.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeIcon(node, icon, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    const parentNode = objectStack[objectStack.length - 1].node;
    let orderedKeys = ICON_SEQUENCE[parentNode.namespaceURI];
    let values = makeSequence(icon, orderedKeys);
    pushSerializeAndPop(context,
      ICON_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY,
      values, objectStack, orderedKeys);
    orderedKeys =
        ICON_SEQUENCE[GX_NAMESPACE_URIS[0]];
    values = makeSequence(icon, orderedKeys);
    pushSerializeAndPop(context, ICON_SERIALIZERS,
      GX_NODE_FACTORY, values, objectStack, orderedKeys);
  }


  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  const ICON_STYLE_SEQUENCE = makeStructureNS(
    NAMESPACE_URIS$1, [
      'scale', 'heading', 'Icon', 'hotSpot'
    ]);


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const ICON_STYLE_SERIALIZERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'Icon': makeChildAppender(writeIcon),
      'heading': makeChildAppender(writeDecimalTextNode),
      'hotSpot': makeChildAppender(writeVec2),
      'scale': makeChildAppender(writeScaleTextNode)
    });


  /**
   * @param {Node} node Node.
   * @param {import("../style/Icon.js").default} style Icon style.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeIconStyle(node, style, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    const properties = {};
    const src = style.getSrc();
    const size = style.getSize();
    const iconImageSize = style.getImageSize();
    const iconProperties = {
      'href': src
    };

    if (size) {
      iconProperties['w'] = size[0];
      iconProperties['h'] = size[1];
      const anchor = style.getAnchor(); // top-left
      const origin = style.getOrigin(); // top-left

      if (origin && iconImageSize && origin[0] !== 0 && origin[1] !== size[1]) {
        iconProperties['x'] = origin[0];
        iconProperties['y'] = iconImageSize[1] - (origin[1] + size[1]);
      }

      if (anchor && (anchor[0] !== size[0] / 2 || anchor[1] !== size[1] / 2)) {
        const /** @type {Vec2} */ hotSpot = {
          x: anchor[0],
          xunits: IconAnchorUnits.PIXELS,
          y: size[1] - anchor[1],
          yunits: IconAnchorUnits.PIXELS
        };
        properties['hotSpot'] = hotSpot;
      }
    }

    properties['Icon'] = iconProperties;

    const scale = style.getScale();
    if (scale !== 1) {
      properties['scale'] = scale;
    }

    const rotation = style.getRotation();
    if (rotation !== 0) {
      properties['heading'] = rotation; // 0-360
    }

    const parentNode = objectStack[objectStack.length - 1].node;
    const orderedKeys = ICON_STYLE_SEQUENCE[parentNode.namespaceURI];
    const values = makeSequence(properties, orderedKeys);
    pushSerializeAndPop(context, ICON_STYLE_SERIALIZERS,
      OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);
  }


  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  const LABEL_STYLE_SEQUENCE = makeStructureNS(
    NAMESPACE_URIS$1, [
      'color', 'scale'
    ]);


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const LABEL_STYLE_SERIALIZERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'color': makeChildAppender(writeColorTextNode),
      'scale': makeChildAppender(writeScaleTextNode)
    });


  /**
   * @param {Node} node Node.
   * @param {Text} style style.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeLabelStyle(node, style, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    const properties = {};
    const fill = style.getFill();
    if (fill) {
      properties['color'] = fill.getColor();
    }
    const scale = style.getScale();
    if (scale && scale !== 1) {
      properties['scale'] = scale;
    }
    const parentNode = objectStack[objectStack.length - 1].node;
    const orderedKeys =
        LABEL_STYLE_SEQUENCE[parentNode.namespaceURI];
    const values = makeSequence(properties, orderedKeys);
    pushSerializeAndPop(context, LABEL_STYLE_SERIALIZERS,
      OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);
  }


  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  const LINE_STYLE_SEQUENCE = makeStructureNS(
    NAMESPACE_URIS$1, [
      'color', 'width'
    ]);


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const LINE_STYLE_SERIALIZERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'color': makeChildAppender(writeColorTextNode),
      'width': makeChildAppender(writeDecimalTextNode)
    });


  /**
   * @param {Node} node Node.
   * @param {Stroke} style style.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeLineStyle(node, style, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    const properties = {
      'color': style.getColor(),
      'width': style.getWidth()
    };
    const parentNode = objectStack[objectStack.length - 1].node;
    const orderedKeys = LINE_STYLE_SEQUENCE[parentNode.namespaceURI];
    const values = makeSequence(properties, orderedKeys);
    pushSerializeAndPop(context, LINE_STYLE_SERIALIZERS,
      OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);
  }


  /**
   * @const
   * @type {Object<string, string>}
   */
  const GEOMETRY_TYPE_TO_NODENAME$1 = {
    'Point': 'Point',
    'LineString': 'LineString',
    'LinearRing': 'LinearRing',
    'Polygon': 'Polygon',
    'MultiPoint': 'MultiGeometry',
    'MultiLineString': 'MultiGeometry',
    'MultiPolygon': 'MultiGeometry',
    'GeometryCollection': 'MultiGeometry'
  };


  /**
   * @const
   * @param {*} value Value.
   * @param {Array<*>} objectStack Object stack.
   * @param {string=} opt_nodeName Node name.
   * @return {Node|undefined} Node.
   */
  const GEOMETRY_NODE_FACTORY = function(value, objectStack, opt_nodeName) {
    if (value) {
      const parentNode = objectStack[objectStack.length - 1].node;
      return createElementNS(parentNode.namespaceURI,
        GEOMETRY_TYPE_TO_NODENAME$1[/** @type {import("../geom/Geometry.js").default} */ (value).getType()]);
    }
  };


  /**
   * A factory for creating Point nodes.
   * @const
   * @type {function(*, Array<*>, string=): (Node|undefined)}
   */
  const POINT_NODE_FACTORY = makeSimpleNodeFactory('Point');


  /**
   * A factory for creating LineString nodes.
   * @const
   * @type {function(*, Array<*>, string=): (Node|undefined)}
   */
  const LINE_STRING_NODE_FACTORY = makeSimpleNodeFactory('LineString');


  /**
   * A factory for creating LinearRing nodes.
   * @const
   * @type {function(*, Array<*>, string=): (Node|undefined)}
   */
  const LINEAR_RING_NODE_FACTORY = makeSimpleNodeFactory('LinearRing');


  /**
   * A factory for creating Polygon nodes.
   * @const
   * @type {function(*, Array<*>, string=): (Node|undefined)}
   */
  const POLYGON_NODE_FACTORY = makeSimpleNodeFactory('Polygon');


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const MULTI_GEOMETRY_SERIALIZERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'LineString': makeChildAppender(
        writePrimitiveGeometry),
      'Point': makeChildAppender(
        writePrimitiveGeometry),
      'Polygon': makeChildAppender(writePolygon),
      'GeometryCollection': makeChildAppender(
        writeMultiGeometry)
    });


  /**
   * @param {Node} node Node.
   * @param {import("../geom/Geometry.js").default} geometry Geometry.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeMultiGeometry(node, geometry, objectStack) {
    /** @type {import("../xml.js").NodeStackItem} */
    const context = {node: node};
    const type = geometry.getType();
    /** @type {Array<import("../geom/Geometry.js").default>} */
    let geometries;
    /** @type {function(*, Array<*>, string=): (Node|undefined)} */
    let factory;
    if (type == GeometryType.GEOMETRY_COLLECTION) {
      geometries = /** @type {GeometryCollection} */ (geometry).getGeometries();
      factory = GEOMETRY_NODE_FACTORY;
    } else if (type == GeometryType.MULTI_POINT) {
      geometries = /** @type {MultiPoint} */ (geometry).getPoints();
      factory = POINT_NODE_FACTORY;
    } else if (type == GeometryType.MULTI_LINE_STRING) {
      geometries =
          (/** @type {MultiLineString} */ (geometry)).getLineStrings();
      factory = LINE_STRING_NODE_FACTORY;
    } else if (type == GeometryType.MULTI_POLYGON) {
      geometries =
          (/** @type {MultiPolygon} */ (geometry)).getPolygons();
      factory = POLYGON_NODE_FACTORY;
    } else {
      assert(false, 39); // Unknown geometry type
    }
    pushSerializeAndPop(context,
      MULTI_GEOMETRY_SERIALIZERS, factory,
      geometries, objectStack);
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const BOUNDARY_IS_SERIALIZERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'LinearRing': makeChildAppender(
        writePrimitiveGeometry)
    });


  /**
   * @param {Node} node Node.
   * @param {import("../geom/LinearRing.js").default} linearRing Linear ring.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeBoundaryIs(node, linearRing, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    pushSerializeAndPop(context,
      BOUNDARY_IS_SERIALIZERS,
      LINEAR_RING_NODE_FACTORY, [linearRing], objectStack);
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const PLACEMARK_SERIALIZERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'ExtendedData': makeChildAppender(writeExtendedData),
      'MultiGeometry': makeChildAppender(writeMultiGeometry),
      'LineString': makeChildAppender(writePrimitiveGeometry),
      'LinearRing': makeChildAppender(writePrimitiveGeometry),
      'Point': makeChildAppender(writePrimitiveGeometry),
      'Polygon': makeChildAppender(writePolygon),
      'Style': makeChildAppender(writeStyle),
      'address': makeChildAppender(writeStringTextNode),
      'description': makeChildAppender(writeStringTextNode),
      'name': makeChildAppender(writeStringTextNode),
      'open': makeChildAppender(writeBooleanTextNode),
      'phoneNumber': makeChildAppender(writeStringTextNode),
      'styleUrl': makeChildAppender(writeStringTextNode),
      'visibility': makeChildAppender(writeBooleanTextNode)
    });


  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  const PLACEMARK_SEQUENCE = makeStructureNS(
    NAMESPACE_URIS$1, [
      'name', 'open', 'visibility', 'address', 'phoneNumber', 'description',
      'styleUrl', 'Style'
    ]);


  /**
   * A factory for creating ExtendedData nodes.
   * @const
   * @type {function(*, Array<*>): (Node|undefined)}
   */
  const EXTENDEDDATA_NODE_FACTORY = makeSimpleNodeFactory('ExtendedData');


  /**
   * FIXME currently we do serialize arbitrary/custom feature properties
   * (ExtendedData).
   * @param {Element} node Node.
   * @param {Feature} feature Feature.
   * @param {Array<*>} objectStack Object stack.
   * @this {KML}
   */
  function writePlacemark(node, feature, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};

    // set id
    if (feature.getId()) {
      node.setAttribute('id', /** @type {string} */ (feature.getId()));
    }

    // serialize properties (properties unknown to KML are not serialized)
    const properties = feature.getProperties();

    // don't export these to ExtendedData
    const filter = {'address': 1, 'description': 1, 'name': 1, 'open': 1,
      'phoneNumber': 1, 'styleUrl': 1, 'visibility': 1};
    filter[feature.getGeometryName()] = 1;
    const keys = Object.keys(properties || {}).sort().filter(function(v) {
      return !filter[v];
    });

    const styleFunction = feature.getStyleFunction();
    if (styleFunction) {
      // FIXME the styles returned by the style function are supposed to be
      // resolution-independent here
      const styles = styleFunction(feature, 0);
      if (styles) {
        const style = Array.isArray(styles) ? styles[0] : styles;
        if (this.writeStyles_) {
          properties['Style'] = style;
        }
        const textStyle = style.getText();
        if (textStyle) {
          properties['name'] = textStyle.getText();
        }
      }
    }
    const parentNode = objectStack[objectStack.length - 1].node;
    const orderedKeys = PLACEMARK_SEQUENCE[parentNode.namespaceURI];
    const values = makeSequence(properties, orderedKeys);
    pushSerializeAndPop(context, PLACEMARK_SERIALIZERS,
      OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);

    if (keys.length > 0) {
      const sequence = makeSequence(properties, keys);
      const namesAndValues = {names: keys, values: sequence};
      pushSerializeAndPop(context, PLACEMARK_SERIALIZERS,
        EXTENDEDDATA_NODE_FACTORY, [namesAndValues], objectStack);
    }

    // serialize geometry
    const options = /** @type {import("./Feature.js").WriteOptions} */ (objectStack[0]);
    let geometry = feature.getGeometry();
    if (geometry) {
      geometry = transformGeometryWithOptions(geometry, true, options);
    }
    pushSerializeAndPop(context, PLACEMARK_SERIALIZERS,
      GEOMETRY_NODE_FACTORY, [geometry], objectStack);
  }


  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  const PRIMITIVE_GEOMETRY_SEQUENCE = makeStructureNS(
    NAMESPACE_URIS$1, [
      'extrude', 'tessellate', 'altitudeMode', 'coordinates'
    ]);


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const PRIMITIVE_GEOMETRY_SERIALIZERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'extrude': makeChildAppender(writeBooleanTextNode),
      'tessellate': makeChildAppender(writeBooleanTextNode),
      'altitudeMode': makeChildAppender(writeStringTextNode),
      'coordinates': makeChildAppender(writeCoordinatesTextNode)
    });


  /**
   * @param {Node} node Node.
   * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
   * @param {Array<*>} objectStack Object stack.
   */
  function writePrimitiveGeometry(node, geometry, objectStack) {
    const flatCoordinates = geometry.getFlatCoordinates();
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    context['layout'] = geometry.getLayout();
    context['stride'] = geometry.getStride();

    // serialize properties (properties unknown to KML are not serialized)
    const properties = geometry.getProperties();
    properties.coordinates = flatCoordinates;

    const parentNode = objectStack[objectStack.length - 1].node;
    const orderedKeys = PRIMITIVE_GEOMETRY_SEQUENCE[parentNode.namespaceURI];
    const values = makeSequence(properties, orderedKeys);
    pushSerializeAndPop(context, PRIMITIVE_GEOMETRY_SERIALIZERS,
      OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const POLYGON_SERIALIZERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'outerBoundaryIs': makeChildAppender(
        writeBoundaryIs),
      'innerBoundaryIs': makeChildAppender(
        writeBoundaryIs)
    });


  /**
   * A factory for creating innerBoundaryIs nodes.
   * @const
   * @type {function(*, Array<*>, string=): (Node|undefined)}
   */
  const INNER_BOUNDARY_NODE_FACTORY = makeSimpleNodeFactory('innerBoundaryIs');


  /**
   * A factory for creating outerBoundaryIs nodes.
   * @const
   * @type {function(*, Array<*>, string=): (Node|undefined)}
   */
  const OUTER_BOUNDARY_NODE_FACTORY = makeSimpleNodeFactory('outerBoundaryIs');


  /**
   * @param {Node} node Node.
   * @param {Polygon} polygon Polygon.
   * @param {Array<*>} objectStack Object stack.
   */
  function writePolygon(node, polygon, objectStack) {
    const linearRings = polygon.getLinearRings();
    const outerRing = linearRings.shift();
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    // inner rings
    pushSerializeAndPop(context,
      POLYGON_SERIALIZERS,
      INNER_BOUNDARY_NODE_FACTORY,
      linearRings, objectStack);
    // outer ring
    pushSerializeAndPop(context,
      POLYGON_SERIALIZERS,
      OUTER_BOUNDARY_NODE_FACTORY,
      [outerRing], objectStack);
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const POLY_STYLE_SERIALIZERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'color': makeChildAppender(writeColorTextNode)
    });


  /**
   * A factory for creating coordinates nodes.
   * @const
   * @type {function(*, Array<*>, string=): (Node|undefined)}
   */
  const COLOR_NODE_FACTORY = makeSimpleNodeFactory('color');


  /**
   * @param {Node} node Node.
   * @param {Fill} style Style.
   * @param {Array<*>} objectStack Object stack.
   */
  function writePolyStyle(node, style, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    pushSerializeAndPop(context, POLY_STYLE_SERIALIZERS,
      COLOR_NODE_FACTORY, [style.getColor()], objectStack);
  }


  /**
   * @param {Node} node Node to append a TextNode with the scale to.
   * @param {number|undefined} scale Scale.
   */
  function writeScaleTextNode(node, scale) {
    // the Math is to remove any excess decimals created by float arithmetic
    writeDecimalTextNode(node,
      Math.round(scale * 1e6) / 1e6);
  }


  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  const STYLE_SEQUENCE = makeStructureNS(
    NAMESPACE_URIS$1, [
      'IconStyle', 'LabelStyle', 'LineStyle', 'PolyStyle'
    ]);


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const STYLE_SERIALIZERS = makeStructureNS(
    NAMESPACE_URIS$1, {
      'IconStyle': makeChildAppender(writeIconStyle),
      'LabelStyle': makeChildAppender(writeLabelStyle),
      'LineStyle': makeChildAppender(writeLineStyle),
      'PolyStyle': makeChildAppender(writePolyStyle)
    });


  /**
   * @param {Node} node Node.
   * @param {Style} style Style.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeStyle(node, style, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    const properties = {};
    const fillStyle = style.getFill();
    const strokeStyle = style.getStroke();
    const imageStyle = style.getImage();
    const textStyle = style.getText();
    if (imageStyle && typeof /** @type {?} */ (imageStyle).getSrc === 'function') {
      properties['IconStyle'] = imageStyle;
    }
    if (textStyle) {
      properties['LabelStyle'] = textStyle;
    }
    if (strokeStyle) {
      properties['LineStyle'] = strokeStyle;
    }
    if (fillStyle) {
      properties['PolyStyle'] = fillStyle;
    }
    const parentNode = objectStack[objectStack.length - 1].node;
    const orderedKeys = STYLE_SEQUENCE[parentNode.namespaceURI];
    const values = makeSequence(properties, orderedKeys);
    pushSerializeAndPop(context, STYLE_SERIALIZERS,
      OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);
  }


  /**
   * @param {Element} node Node to append a TextNode with the Vec2 to.
   * @param {Vec2} vec2 Vec2.
   */
  function writeVec2(node, vec2) {
    node.setAttribute('x', String(vec2.x));
    node.setAttribute('y', String(vec2.y));
    node.setAttribute('xunits', vec2.xunits);
    node.setAttribute('yunits', vec2.yunits);
  }

  var read = function (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = (nBytes * 8) - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? (nBytes - 1) : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];

    i += d;

    e = s & ((1 << (-nBits)) - 1);
    s >>= (-nBits);
    nBits += eLen;
    for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & ((1 << (-nBits)) - 1);
    e >>= (-nBits);
    nBits += mLen;
    for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  };

  var write = function (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = (nBytes * 8) - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
    var i = isLE ? 0 : (nBytes - 1);
    var d = isLE ? 1 : -1;
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = ((value * c) - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = (e << mLen) | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  };

  var ieee754 = {
  	read: read,
  	write: write
  };

  var ieee754$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': ieee754,
    __moduleExports: ieee754,
    read: read,
    write: write
  });

  var ieee754$2 = ( ieee754$1 && ieee754 ) || ieee754$1;

  var pbf = Pbf;



  function Pbf(buf) {
      this.buf = ArrayBuffer.isView && ArrayBuffer.isView(buf) ? buf : new Uint8Array(buf || 0);
      this.pos = 0;
      this.type = 0;
      this.length = this.buf.length;
  }

  Pbf.Varint  = 0; // varint: int32, int64, uint32, uint64, sint32, sint64, bool, enum
  Pbf.Fixed64 = 1; // 64-bit: double, fixed64, sfixed64
  Pbf.Bytes   = 2; // length-delimited: string, bytes, embedded messages, packed repeated fields
  Pbf.Fixed32 = 5; // 32-bit: float, fixed32, sfixed32

  var SHIFT_LEFT_32 = (1 << 16) * (1 << 16),
      SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;

  Pbf.prototype = {

      destroy: function() {
          this.buf = null;
      },

      // === READING =================================================================

      readFields: function(readField, result, end) {
          end = end || this.length;

          while (this.pos < end) {
              var val = this.readVarint(),
                  tag = val >> 3,
                  startPos = this.pos;

              this.type = val & 0x7;
              readField(tag, result, this);

              if (this.pos === startPos) this.skip(val);
          }
          return result;
      },

      readMessage: function(readField, result) {
          return this.readFields(readField, result, this.readVarint() + this.pos);
      },

      readFixed32: function() {
          var val = readUInt32(this.buf, this.pos);
          this.pos += 4;
          return val;
      },

      readSFixed32: function() {
          var val = readInt32(this.buf, this.pos);
          this.pos += 4;
          return val;
      },

      // 64-bit int handling is based on github.com/dpw/node-buffer-more-ints (MIT-licensed)

      readFixed64: function() {
          var val = readUInt32(this.buf, this.pos) + readUInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
          this.pos += 8;
          return val;
      },

      readSFixed64: function() {
          var val = readUInt32(this.buf, this.pos) + readInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
          this.pos += 8;
          return val;
      },

      readFloat: function() {
          var val = ieee754$2.read(this.buf, this.pos, true, 23, 4);
          this.pos += 4;
          return val;
      },

      readDouble: function() {
          var val = ieee754$2.read(this.buf, this.pos, true, 52, 8);
          this.pos += 8;
          return val;
      },

      readVarint: function(isSigned) {
          var buf = this.buf,
              val, b;

          b = buf[this.pos++]; val  =  b & 0x7f;        if (b < 0x80) return val;
          b = buf[this.pos++]; val |= (b & 0x7f) << 7;  if (b < 0x80) return val;
          b = buf[this.pos++]; val |= (b & 0x7f) << 14; if (b < 0x80) return val;
          b = buf[this.pos++]; val |= (b & 0x7f) << 21; if (b < 0x80) return val;
          b = buf[this.pos];   val |= (b & 0x0f) << 28;

          return readVarintRemainder(val, isSigned, this);
      },

      readVarint64: function() { // for compatibility with v2.0.1
          return this.readVarint(true);
      },

      readSVarint: function() {
          var num = this.readVarint();
          return num % 2 === 1 ? (num + 1) / -2 : num / 2; // zigzag encoding
      },

      readBoolean: function() {
          return Boolean(this.readVarint());
      },

      readString: function() {
          var end = this.readVarint() + this.pos,
              str = readUtf8(this.buf, this.pos, end);
          this.pos = end;
          return str;
      },

      readBytes: function() {
          var end = this.readVarint() + this.pos,
              buffer = this.buf.subarray(this.pos, end);
          this.pos = end;
          return buffer;
      },

      // verbose for performance reasons; doesn't affect gzipped size

      readPackedVarint: function(arr, isSigned) {
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readVarint(isSigned));
          return arr;
      },
      readPackedSVarint: function(arr) {
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readSVarint());
          return arr;
      },
      readPackedBoolean: function(arr) {
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readBoolean());
          return arr;
      },
      readPackedFloat: function(arr) {
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readFloat());
          return arr;
      },
      readPackedDouble: function(arr) {
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readDouble());
          return arr;
      },
      readPackedFixed32: function(arr) {
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readFixed32());
          return arr;
      },
      readPackedSFixed32: function(arr) {
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readSFixed32());
          return arr;
      },
      readPackedFixed64: function(arr) {
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readFixed64());
          return arr;
      },
      readPackedSFixed64: function(arr) {
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readSFixed64());
          return arr;
      },

      skip: function(val) {
          var type = val & 0x7;
          if (type === Pbf.Varint) while (this.buf[this.pos++] > 0x7f) {}
          else if (type === Pbf.Bytes) this.pos = this.readVarint() + this.pos;
          else if (type === Pbf.Fixed32) this.pos += 4;
          else if (type === Pbf.Fixed64) this.pos += 8;
          else throw new Error('Unimplemented type: ' + type);
      },

      // === WRITING =================================================================

      writeTag: function(tag, type) {
          this.writeVarint((tag << 3) | type);
      },

      realloc: function(min) {
          var length = this.length || 16;

          while (length < this.pos + min) length *= 2;

          if (length !== this.length) {
              var buf = new Uint8Array(length);
              buf.set(this.buf);
              this.buf = buf;
              this.length = length;
          }
      },

      finish: function() {
          this.length = this.pos;
          this.pos = 0;
          return this.buf.subarray(0, this.length);
      },

      writeFixed32: function(val) {
          this.realloc(4);
          writeInt32(this.buf, val, this.pos);
          this.pos += 4;
      },

      writeSFixed32: function(val) {
          this.realloc(4);
          writeInt32(this.buf, val, this.pos);
          this.pos += 4;
      },

      writeFixed64: function(val) {
          this.realloc(8);
          writeInt32(this.buf, val & -1, this.pos);
          writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
          this.pos += 8;
      },

      writeSFixed64: function(val) {
          this.realloc(8);
          writeInt32(this.buf, val & -1, this.pos);
          writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
          this.pos += 8;
      },

      writeVarint: function(val) {
          val = +val || 0;

          if (val > 0xfffffff || val < 0) {
              writeBigVarint(val, this);
              return;
          }

          this.realloc(4);

          this.buf[this.pos++] =           val & 0x7f  | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
          this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
          this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
          this.buf[this.pos++] =   (val >>> 7) & 0x7f;
      },

      writeSVarint: function(val) {
          this.writeVarint(val < 0 ? -val * 2 - 1 : val * 2);
      },

      writeBoolean: function(val) {
          this.writeVarint(Boolean(val));
      },

      writeString: function(str) {
          str = String(str);
          this.realloc(str.length * 4);

          this.pos++; // reserve 1 byte for short string length

          var startPos = this.pos;
          // write the string directly to the buffer and see how much was written
          this.pos = writeUtf8(this.buf, str, this.pos);
          var len = this.pos - startPos;

          if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);

          // finally, write the message length in the reserved place and restore the position
          this.pos = startPos - 1;
          this.writeVarint(len);
          this.pos += len;
      },

      writeFloat: function(val) {
          this.realloc(4);
          ieee754$2.write(this.buf, val, this.pos, true, 23, 4);
          this.pos += 4;
      },

      writeDouble: function(val) {
          this.realloc(8);
          ieee754$2.write(this.buf, val, this.pos, true, 52, 8);
          this.pos += 8;
      },

      writeBytes: function(buffer) {
          var len = buffer.length;
          this.writeVarint(len);
          this.realloc(len);
          for (var i = 0; i < len; i++) this.buf[this.pos++] = buffer[i];
      },

      writeRawMessage: function(fn, obj) {
          this.pos++; // reserve 1 byte for short message length

          // write the message directly to the buffer and see how much was written
          var startPos = this.pos;
          fn(obj, this);
          var len = this.pos - startPos;

          if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);

          // finally, write the message length in the reserved place and restore the position
          this.pos = startPos - 1;
          this.writeVarint(len);
          this.pos += len;
      },

      writeMessage: function(tag, fn, obj) {
          this.writeTag(tag, Pbf.Bytes);
          this.writeRawMessage(fn, obj);
      },

      writePackedVarint:   function(tag, arr) { this.writeMessage(tag, writePackedVarint, arr);   },
      writePackedSVarint:  function(tag, arr) { this.writeMessage(tag, writePackedSVarint, arr);  },
      writePackedBoolean:  function(tag, arr) { this.writeMessage(tag, writePackedBoolean, arr);  },
      writePackedFloat:    function(tag, arr) { this.writeMessage(tag, writePackedFloat, arr);    },
      writePackedDouble:   function(tag, arr) { this.writeMessage(tag, writePackedDouble, arr);   },
      writePackedFixed32:  function(tag, arr) { this.writeMessage(tag, writePackedFixed32, arr);  },
      writePackedSFixed32: function(tag, arr) { this.writeMessage(tag, writePackedSFixed32, arr); },
      writePackedFixed64:  function(tag, arr) { this.writeMessage(tag, writePackedFixed64, arr);  },
      writePackedSFixed64: function(tag, arr) { this.writeMessage(tag, writePackedSFixed64, arr); },

      writeBytesField: function(tag, buffer) {
          this.writeTag(tag, Pbf.Bytes);
          this.writeBytes(buffer);
      },
      writeFixed32Field: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed32);
          this.writeFixed32(val);
      },
      writeSFixed32Field: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed32);
          this.writeSFixed32(val);
      },
      writeFixed64Field: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed64);
          this.writeFixed64(val);
      },
      writeSFixed64Field: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed64);
          this.writeSFixed64(val);
      },
      writeVarintField: function(tag, val) {
          this.writeTag(tag, Pbf.Varint);
          this.writeVarint(val);
      },
      writeSVarintField: function(tag, val) {
          this.writeTag(tag, Pbf.Varint);
          this.writeSVarint(val);
      },
      writeStringField: function(tag, str) {
          this.writeTag(tag, Pbf.Bytes);
          this.writeString(str);
      },
      writeFloatField: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed32);
          this.writeFloat(val);
      },
      writeDoubleField: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed64);
          this.writeDouble(val);
      },
      writeBooleanField: function(tag, val) {
          this.writeVarintField(tag, Boolean(val));
      }
  };

  function readVarintRemainder(l, s, p) {
      var buf = p.buf,
          h, b;

      b = buf[p.pos++]; h  = (b & 0x70) >> 4;  if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 3;  if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 10; if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 17; if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 24; if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x01) << 31; if (b < 0x80) return toNum(l, h, s);

      throw new Error('Expected varint not more than 10 bytes');
  }

  function readPackedEnd(pbf) {
      return pbf.type === Pbf.Bytes ?
          pbf.readVarint() + pbf.pos : pbf.pos + 1;
  }

  function toNum(low, high, isSigned) {
      if (isSigned) {
          return high * 0x100000000 + (low >>> 0);
      }

      return ((high >>> 0) * 0x100000000) + (low >>> 0);
  }

  function writeBigVarint(val, pbf) {
      var low, high;

      if (val >= 0) {
          low  = (val % 0x100000000) | 0;
          high = (val / 0x100000000) | 0;
      } else {
          low  = ~(-val % 0x100000000);
          high = ~(-val / 0x100000000);

          if (low ^ 0xffffffff) {
              low = (low + 1) | 0;
          } else {
              low = 0;
              high = (high + 1) | 0;
          }
      }

      if (val >= 0x10000000000000000 || val < -0x10000000000000000) {
          throw new Error('Given varint doesn\'t fit into 10 bytes');
      }

      pbf.realloc(10);

      writeBigVarintLow(low, high, pbf);
      writeBigVarintHigh(high, pbf);
  }

  function writeBigVarintLow(low, high, pbf) {
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos]   = low & 0x7f;
  }

  function writeBigVarintHigh(high, pbf) {
      var lsb = (high & 0x07) << 4;

      pbf.buf[pbf.pos++] |= lsb         | ((high >>>= 3) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f;
  }

  function makeRoomForExtraLength(startPos, len, pbf) {
      var extraLen =
          len <= 0x3fff ? 1 :
          len <= 0x1fffff ? 2 :
          len <= 0xfffffff ? 3 : Math.ceil(Math.log(len) / (Math.LN2 * 7));

      // if 1 byte isn't enough for encoding message length, shift the data to the right
      pbf.realloc(extraLen);
      for (var i = pbf.pos - 1; i >= startPos; i--) pbf.buf[i + extraLen] = pbf.buf[i];
  }

  function writePackedVarint(arr, pbf)   { for (var i = 0; i < arr.length; i++) pbf.writeVarint(arr[i]);   }
  function writePackedSVarint(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeSVarint(arr[i]);  }
  function writePackedFloat(arr, pbf)    { for (var i = 0; i < arr.length; i++) pbf.writeFloat(arr[i]);    }
  function writePackedDouble(arr, pbf)   { for (var i = 0; i < arr.length; i++) pbf.writeDouble(arr[i]);   }
  function writePackedBoolean(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeBoolean(arr[i]);  }
  function writePackedFixed32(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeFixed32(arr[i]);  }
  function writePackedSFixed32(arr, pbf) { for (var i = 0; i < arr.length; i++) pbf.writeSFixed32(arr[i]); }
  function writePackedFixed64(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeFixed64(arr[i]);  }
  function writePackedSFixed64(arr, pbf) { for (var i = 0; i < arr.length; i++) pbf.writeSFixed64(arr[i]); }

  // Buffer code below from https://github.com/feross/buffer, MIT-licensed

  function readUInt32(buf, pos) {
      return ((buf[pos]) |
          (buf[pos + 1] << 8) |
          (buf[pos + 2] << 16)) +
          (buf[pos + 3] * 0x1000000);
  }

  function writeInt32(buf, val, pos) {
      buf[pos] = val;
      buf[pos + 1] = (val >>> 8);
      buf[pos + 2] = (val >>> 16);
      buf[pos + 3] = (val >>> 24);
  }

  function readInt32(buf, pos) {
      return ((buf[pos]) |
          (buf[pos + 1] << 8) |
          (buf[pos + 2] << 16)) +
          (buf[pos + 3] << 24);
  }

  function readUtf8(buf, pos, end) {
      var str = '';
      var i = pos;

      while (i < end) {
          var b0 = buf[i];
          var c = null; // codepoint
          var bytesPerSequence =
              b0 > 0xEF ? 4 :
              b0 > 0xDF ? 3 :
              b0 > 0xBF ? 2 : 1;

          if (i + bytesPerSequence > end) break;

          var b1, b2, b3;

          if (bytesPerSequence === 1) {
              if (b0 < 0x80) {
                  c = b0;
              }
          } else if (bytesPerSequence === 2) {
              b1 = buf[i + 1];
              if ((b1 & 0xC0) === 0x80) {
                  c = (b0 & 0x1F) << 0x6 | (b1 & 0x3F);
                  if (c <= 0x7F) {
                      c = null;
                  }
              }
          } else if (bytesPerSequence === 3) {
              b1 = buf[i + 1];
              b2 = buf[i + 2];
              if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80) {
                  c = (b0 & 0xF) << 0xC | (b1 & 0x3F) << 0x6 | (b2 & 0x3F);
                  if (c <= 0x7FF || (c >= 0xD800 && c <= 0xDFFF)) {
                      c = null;
                  }
              }
          } else if (bytesPerSequence === 4) {
              b1 = buf[i + 1];
              b2 = buf[i + 2];
              b3 = buf[i + 3];
              if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {
                  c = (b0 & 0xF) << 0x12 | (b1 & 0x3F) << 0xC | (b2 & 0x3F) << 0x6 | (b3 & 0x3F);
                  if (c <= 0xFFFF || c >= 0x110000) {
                      c = null;
                  }
              }
          }

          if (c === null) {
              c = 0xFFFD;
              bytesPerSequence = 1;

          } else if (c > 0xFFFF) {
              c -= 0x10000;
              str += String.fromCharCode(c >>> 10 & 0x3FF | 0xD800);
              c = 0xDC00 | c & 0x3FF;
          }

          str += String.fromCharCode(c);
          i += bytesPerSequence;
      }

      return str;
  }

  function writeUtf8(buf, str, pos) {
      for (var i = 0, c, lead; i < str.length; i++) {
          c = str.charCodeAt(i); // code point

          if (c > 0xD7FF && c < 0xE000) {
              if (lead) {
                  if (c < 0xDC00) {
                      buf[pos++] = 0xEF;
                      buf[pos++] = 0xBF;
                      buf[pos++] = 0xBD;
                      lead = c;
                      continue;
                  } else {
                      c = lead - 0xD800 << 10 | c - 0xDC00 | 0x10000;
                      lead = null;
                  }
              } else {
                  if (c > 0xDBFF || (i + 1 === str.length)) {
                      buf[pos++] = 0xEF;
                      buf[pos++] = 0xBF;
                      buf[pos++] = 0xBD;
                  } else {
                      lead = c;
                  }
                  continue;
              }
          } else if (lead) {
              buf[pos++] = 0xEF;
              buf[pos++] = 0xBF;
              buf[pos++] = 0xBD;
              lead = null;
          }

          if (c < 0x80) {
              buf[pos++] = c;
          } else {
              if (c < 0x800) {
                  buf[pos++] = c >> 0x6 | 0xC0;
              } else {
                  if (c < 0x10000) {
                      buf[pos++] = c >> 0xC | 0xE0;
                  } else {
                      buf[pos++] = c >> 0x12 | 0xF0;
                      buf[pos++] = c >> 0xC & 0x3F | 0x80;
                  }
                  buf[pos++] = c >> 0x6 & 0x3F | 0x80;
              }
              buf[pos++] = c & 0x3F | 0x80;
          }
      }
      return pos;
  }

  /**
   * @module ol/render/Feature
   */


  /**
   * @type {import("../transform.js").Transform}
   */
  const tmpTransform$2 = create();


  /**
   * Lightweight, read-only, {@link module:ol/Feature~Feature} and {@link module:ol/geom/Geometry~Geometry} like
   * structure, optimized for vector tile rendering and styling. Geometry access
   * through the API is limited to getting the type and extent of the geometry.
   */
  class RenderFeature {
    /**
     * @param {GeometryType} type Geometry type.
     * @param {Array<number>} flatCoordinates Flat coordinates. These always need
     *     to be right-handed for polygons.
     * @param {Array<number>|Array<Array<number>>} ends Ends or Endss.
     * @param {Object<string, *>} properties Properties.
     * @param {number|string|undefined} id Feature id.
     */
    constructor(type, flatCoordinates, ends, properties, id) {
      /**
       * @private
       * @type {import("../extent.js").Extent|undefined}
       */
      this.extent_;

      /**
       * @private
       * @type {number|string|undefined}
       */
      this.id_ = id;

      /**
       * @private
       * @type {GeometryType}
       */
      this.type_ = type;

      /**
       * @private
       * @type {Array<number>}
       */
      this.flatCoordinates_ = flatCoordinates;

      /**
       * @private
       * @type {Array<number>}
       */
      this.flatInteriorPoints_ = null;

      /**
       * @private
       * @type {Array<number>}
       */
      this.flatMidpoints_ = null;

      /**
       * @private
       * @type {Array<number>|Array<Array<number>>}
       */
      this.ends_ = ends;

      /**
       * @private
       * @type {Object<string, *>}
       */
      this.properties_ = properties;

    }

    /**
     * Get a feature property by its key.
     * @param {string} key Key
     * @return {*} Value for the requested key.
     * @api
     */
    get(key) {
      return this.properties_[key];
    }

    /**
     * Get the extent of this feature's geometry.
     * @return {import("../extent.js").Extent} Extent.
     * @api
     */
    getExtent() {
      if (!this.extent_) {
        this.extent_ = this.type_ === GeometryType.POINT ?
          createOrUpdateFromCoordinate(this.flatCoordinates_) :
          createOrUpdateFromFlatCoordinates(
            this.flatCoordinates_, 0, this.flatCoordinates_.length, 2);

      }
      return this.extent_;
    }

    /**
     * @return {Array<number>} Flat interior points.
     */
    getFlatInteriorPoint() {
      if (!this.flatInteriorPoints_) {
        const flatCenter = getCenter(this.getExtent());
        this.flatInteriorPoints_ = getInteriorPointOfArray(
          this.flatCoordinates_, 0, /** @type {Array<number>} */ (this.ends_), 2, flatCenter, 0);
      }
      return this.flatInteriorPoints_;
    }

    /**
     * @return {Array<number>} Flat interior points.
     */
    getFlatInteriorPoints() {
      if (!this.flatInteriorPoints_) {
        const flatCenters = linearRingss$1(
          this.flatCoordinates_, 0, /** @type {Array<Array<number>>} */ (this.ends_), 2);
        this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(
          this.flatCoordinates_, 0, /** @type {Array<Array<number>>} */ (this.ends_), 2, flatCenters);
      }
      return this.flatInteriorPoints_;
    }

    /**
     * @return {Array<number>} Flat midpoint.
     */
    getFlatMidpoint() {
      if (!this.flatMidpoints_) {
        this.flatMidpoints_ = interpolatePoint(
          this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, 0.5);
      }
      return this.flatMidpoints_;
    }

    /**
     * @return {Array<number>} Flat midpoints.
     */
    getFlatMidpoints() {
      if (!this.flatMidpoints_) {
        this.flatMidpoints_ = [];
        const flatCoordinates = this.flatCoordinates_;
        let offset = 0;
        const ends = /** @type {Array<number>} */ (this.ends_);
        for (let i = 0, ii = ends.length; i < ii; ++i) {
          const end = ends[i];
          const midpoint = interpolatePoint(
            flatCoordinates, offset, end, 2, 0.5);
          extend$1(this.flatMidpoints_, midpoint);
          offset = end;
        }
      }
      return this.flatMidpoints_;
    }

    /**
     * Get the feature identifier.  This is a stable identifier for the feature and
     * is set when reading data from a remote source.
     * @return {number|string|undefined} Id.
     * @api
     */
    getId() {
      return this.id_;
    }

    /**
     * @return {Array<number>} Flat coordinates.
     */
    getOrientedFlatCoordinates() {
      return this.flatCoordinates_;
    }

    /**
     * For API compatibility with {@link module:ol/Feature~Feature}, this method is useful when
     * determining the geometry type in style function (see {@link #getType}).
     * @return {RenderFeature} Feature.
     * @api
     */
    getGeometry() {
      return this;
    }

    /**
     * @param {number} squaredTolerance Squared tolerance.
     * @return {RenderFeature} Simplified geometry.
     */
    getSimplifiedGeometry(squaredTolerance) {
      return this;
    }

    /**
     * Get the feature properties.
     * @return {Object<string, *>} Feature properties.
     * @api
     */
    getProperties() {
      return this.properties_;
    }

    /**
     * @return {number} Stride.
     */
    getStride() {
      return 2;
    }

    /**
     * @return {undefined}
     */
    getStyleFunction() {
      return undefined;
    }

    /**
     * Get the type of this feature's geometry.
     * @return {GeometryType} Geometry type.
     * @api
     */
    getType() {
      return this.type_;
    }

    /**
     * Transform geometry coordinates from tile pixel space to projected.
     * The SRS of the source and destination are expected to be the same.
     *
     * @param {import("../proj.js").ProjectionLike} source The current projection
     * @param {import("../proj.js").ProjectionLike} destination The desired projection.
     */
    transform(source, destination) {
      source = get$2(source);
      const pixelExtent = source.getExtent();
      const projectedExtent = source.getWorldExtent();
      const scale = getHeight(projectedExtent) / getHeight(pixelExtent);
      compose(tmpTransform$2,
        projectedExtent[0], projectedExtent[3],
        scale, -scale, 0,
        0, 0);
      transform2D(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2,
        tmpTransform$2, this.flatCoordinates_);
    }
  }


  /**
   * @return {Array<number>|Array<Array<number>>} Ends or endss.
   */
  RenderFeature.prototype.getEnds =
  RenderFeature.prototype.getEndss = function() {
    return this.ends_;
  };


  /**
   * @return {Array<number>} Flat coordinates.
   */
  RenderFeature.prototype.getFlatCoordinates =
      RenderFeature.prototype.getOrientedFlatCoordinates;

  /**
   * @module ol/format/MVT
   */


  /**
   * @typedef {Object} Options
   * @property {import("../Feature.js").FeatureClass} [featureClass] Class for features returned by
   * {@link module:ol/format/MVT#readFeatures}. Set to {@link module:ol/Feature~Feature} to get full editing and geometry
   * support at the cost of decreased rendering performance. The default is
   * {@link module:ol/render/Feature~RenderFeature}, which is optimized for rendering and hit detection.
   * @property {string} [geometryName='geometry'] Geometry name to use when creating features.
   * @property {string} [layerName='layer'] Name of the feature attribute that holds the layer name.
   * @property {Array<string>} [layers] Layers to read features from. If not provided, features will be read from all
   * @property {string} [idProperty] Optional property that will be assigned as the feature id and removed from the properties.
   * layers.
   */


  /**
   * @classdesc
   * Feature format for reading data in the Mapbox MVT format.
   *
   * @param {Options=} opt_options Options.
   * @api
   */
  class MVT extends FeatureFormat {

    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {
      super();

      const options = opt_options ? opt_options : {};

      /**
       * @type {Projection}
       */
      this.dataProjection = new Projection({
        code: '',
        units: Units.TILE_PIXELS
      });

      /**
       * @private
       * @type {import("../Feature.js").FeatureClass}
       */
      this.featureClass_ = options.featureClass ? options.featureClass : RenderFeature;

      /**
       * @private
       * @type {string|undefined}
       */
      this.geometryName_ = options.geometryName;

      /**
       * @private
       * @type {string}
       */
      this.layerName_ = options.layerName ? options.layerName : 'layer';

      /**
       * @private
       * @type {Array<string>}
       */
      this.layers_ = options.layers ? options.layers : null;

      /**
       * @private
       * @type {string}
       */
      this.idProperty_ = options.idProperty;

    }

    /**
     * Read the raw geometry from the pbf offset stored in a raw feature's geometry
     * property.
     * @param {PBF} pbf PBF.
     * @param {Object} feature Raw feature.
     * @param {Array<number>} flatCoordinates Array to store flat coordinates in.
     * @param {Array<number>} ends Array to store ends in.
     * @private
     */
    readRawGeometry_(pbf, feature, flatCoordinates, ends) {
      pbf.pos = feature.geometry;

      const end = pbf.readVarint() + pbf.pos;
      let cmd = 1;
      let length = 0;
      let x = 0;
      let y = 0;
      let coordsLen = 0;
      let currentEnd = 0;

      while (pbf.pos < end) {
        if (!length) {
          const cmdLen = pbf.readVarint();
          cmd = cmdLen & 0x7;
          length = cmdLen >> 3;
        }

        length--;

        if (cmd === 1 || cmd === 2) {
          x += pbf.readSVarint();
          y += pbf.readSVarint();

          if (cmd === 1) { // moveTo
            if (coordsLen > currentEnd) {
              ends.push(coordsLen);
              currentEnd = coordsLen;
            }
          }

          flatCoordinates.push(x, y);
          coordsLen += 2;

        } else if (cmd === 7) {

          if (coordsLen > currentEnd) {
            // close polygon
            flatCoordinates.push(
              flatCoordinates[currentEnd], flatCoordinates[currentEnd + 1]);
            coordsLen += 2;
          }

        } else {
          assert(false, 59); // Invalid command found in the PBF
        }
      }

      if (coordsLen > currentEnd) {
        ends.push(coordsLen);
        currentEnd = coordsLen;
      }

    }

    /**
     * @private
     * @param {PBF} pbf PBF
     * @param {Object} rawFeature Raw Mapbox feature.
     * @param {import("./Feature.js").ReadOptions} options Read options.
     * @return {import("../Feature.js").FeatureLike} Feature.
     */
    createFeature_(pbf, rawFeature, options) {
      const type = rawFeature.type;
      if (type === 0) {
        return null;
      }

      let feature;
      const values = rawFeature.properties;

      let id;
      if (!this.idProperty_) {
        id = rawFeature.id;
      } else {
        id = values[this.idProperty_];
        delete values[this.idProperty_];
      }

      values[this.layerName_] = rawFeature.layer.name;

      const flatCoordinates = [];
      const ends = [];
      this.readRawGeometry_(pbf, rawFeature, flatCoordinates, ends);

      const geometryType = getGeometryType(type, ends.length);

      if (this.featureClass_ === RenderFeature) {
        feature = new this.featureClass_(geometryType, flatCoordinates, ends, values, id);
        feature.transform(options.dataProjection, options.featureProjection);
      } else {
        let geom;
        if (geometryType == GeometryType.POLYGON) {
          const endss = [];
          let offset = 0;
          let prevEndIndex = 0;
          for (let i = 0, ii = ends.length; i < ii; ++i) {
            const end = ends[i];
            if (!linearRingIsClockwise(flatCoordinates, offset, end, 2)) {
              endss.push(ends.slice(prevEndIndex, i));
              prevEndIndex = i;
            }
            offset = end;
          }
          if (endss.length > 1) {
            geom = new MultiPolygon(flatCoordinates, GeometryLayout.XY, endss);
          } else {
            geom = new Polygon(flatCoordinates, GeometryLayout.XY, ends);
          }
        } else {
          geom = geometryType === GeometryType.POINT ? new Point(flatCoordinates, GeometryLayout.XY) :
            geometryType === GeometryType.LINE_STRING ? new LineString(flatCoordinates, GeometryLayout.XY) :
              geometryType === GeometryType.POLYGON ? new Polygon(flatCoordinates, GeometryLayout.XY, ends) :
                geometryType === GeometryType.MULTI_POINT ? new MultiPoint(flatCoordinates, GeometryLayout.XY) :
                  geometryType === GeometryType.MULTI_LINE_STRING ? new MultiLineString(flatCoordinates, GeometryLayout.XY, ends) :
                    null;
        }
        const ctor = /** @type {typeof import("../Feature.js").default} */ (this.featureClass_);
        feature = new ctor();
        if (this.geometryName_) {
          feature.setGeometryName(this.geometryName_);
        }
        const geometry = transformGeometryWithOptions(geom, false, options);
        feature.setGeometry(geometry);
        feature.setId(id);
        feature.setProperties(values, true);
      }

      return feature;
    }

    /**
     * @inheritDoc
     */
    getType() {
      return FormatType.ARRAY_BUFFER;
    }

    /**
     * Read all features.
     *
     * @param {ArrayBuffer} source Source.
     * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
     * @return {Array<import("../Feature.js").FeatureLike>} Features.
     * @api
     */
    readFeatures(source, opt_options) {
      const layers = this.layers_;
      const options = /** @type {import("./Feature.js").ReadOptions} */ (this.adaptOptions(opt_options));
      const dataProjection = get$2(options.dataProjection);
      dataProjection.setWorldExtent(options.extent);
      options.dataProjection = dataProjection;

      const pbf$1 = new pbf(/** @type {ArrayBuffer} */ (source));
      const pbfLayers = pbf$1.readFields(layersPBFReader, {});
      const features = [];
      for (const name in pbfLayers) {
        if (layers && layers.indexOf(name) == -1) {
          continue;
        }
        const pbfLayer = pbfLayers[name];

        const extent = pbfLayer ? [0, 0, pbfLayer.extent, pbfLayer.extent] : null;
        dataProjection.setExtent(extent);

        for (let i = 0, ii = pbfLayer.length; i < ii; ++i) {
          const rawFeature = readRawFeature(pbf$1, pbfLayer, i);
          features.push(this.createFeature_(pbf$1, rawFeature, options));
        }
      }

      return features;
    }

    /**
     * @inheritDoc
     * @api
     */
    readProjection(source) {
      return this.dataProjection;
    }

    /**
     * Sets the layers that features will be read from.
     * @param {Array<string>} layers Layers.
     * @api
     */
    setLayers(layers) {
      this.layers_ = layers;
    }

  }


  /**
   * Reader callback for parsing layers.
   * @param {number} tag The tag.
   * @param {Object} layers The layers object.
   * @param {PBF} pbf The PBF.
   */
  function layersPBFReader(tag, layers, pbf) {
    if (tag === 3) {
      const layer = {
        keys: [],
        values: [],
        features: []
      };
      const end = pbf.readVarint() + pbf.pos;
      pbf.readFields(layerPBFReader, layer, end);
      layer.length = layer.features.length;
      if (layer.length) {
        layers[layer.name] = layer;
      }
    }
  }

  /**
   * Reader callback for parsing layer.
   * @param {number} tag The tag.
   * @param {Object} layer The layer object.
   * @param {PBF} pbf The PBF.
   */
  function layerPBFReader(tag, layer, pbf) {
    if (tag === 15) {
      layer.version = pbf.readVarint();
    } else if (tag === 1) {
      layer.name = pbf.readString();
    } else if (tag === 5) {
      layer.extent = pbf.readVarint();
    } else if (tag === 2) {
      layer.features.push(pbf.pos);
    } else if (tag === 3) {
      layer.keys.push(pbf.readString());
    } else if (tag === 4) {
      let value = null;
      const end = pbf.readVarint() + pbf.pos;
      while (pbf.pos < end) {
        tag = pbf.readVarint() >> 3;
        value = tag === 1 ? pbf.readString() :
          tag === 2 ? pbf.readFloat() :
            tag === 3 ? pbf.readDouble() :
              tag === 4 ? pbf.readVarint64() :
                tag === 5 ? pbf.readVarint() :
                  tag === 6 ? pbf.readSVarint() :
                    tag === 7 ? pbf.readBoolean() : null;
      }
      layer.values.push(value);
    }
  }

  /**
   * Reader callback for parsing feature.
   * @param {number} tag The tag.
   * @param {Object} feature The feature object.
   * @param {PBF} pbf The PBF.
   */
  function featurePBFReader(tag, feature, pbf) {
    if (tag == 1) {
      feature.id = pbf.readVarint();
    } else if (tag == 2) {
      const end = pbf.readVarint() + pbf.pos;
      while (pbf.pos < end) {
        const key = feature.layer.keys[pbf.readVarint()];
        const value = feature.layer.values[pbf.readVarint()];
        feature.properties[key] = value;
      }
    } else if (tag == 3) {
      feature.type = pbf.readVarint();
    } else if (tag == 4) {
      feature.geometry = pbf.pos;
    }
  }


  /**
   * Read a raw feature from the pbf offset stored at index `i` in the raw layer.
   * @param {PBF} pbf PBF.
   * @param {Object} layer Raw layer.
   * @param {number} i Index of the feature in the raw layer's `features` array.
   * @return {Object} Raw feature.
   */
  function readRawFeature(pbf, layer, i) {
    pbf.pos = layer.features[i];
    const end = pbf.readVarint() + pbf.pos;

    const feature = {
      layer: layer,
      type: 0,
      properties: {}
    };
    pbf.readFields(featurePBFReader, feature, end);
    return feature;
  }


  /**
   * @param {number} type The raw feature's geometry type
   * @param {number} numEnds Number of ends of the flat coordinates of the
   * geometry.
   * @return {GeometryType} The geometry type.
   */
  function getGeometryType(type, numEnds) {
    /** @type {GeometryType} */
    let geometryType;
    if (type === 1) {
      geometryType = numEnds === 1 ?
        GeometryType.POINT : GeometryType.MULTI_POINT;
    } else if (type === 2) {
      geometryType = numEnds === 1 ?
        GeometryType.LINE_STRING :
        GeometryType.MULTI_LINE_STRING;
    } else if (type === 3) {
      geometryType = GeometryType.POLYGON;
      // MultiPolygon not relevant for rendering - winding order determines
      // outer rings of polygons.
    }
    return geometryType;
  }

  /**
   * @module ol/format/XLink
   */


  /**
   * @const
   * @type {string}
   */
  const NAMESPACE_URI = 'http://www.w3.org/1999/xlink';


  /**
   * @param {Element} node Node.
   * @return {string|undefined} href.
   */
  function readHref(node) {
    return node.getAttributeNS(NAMESPACE_URI, 'href');
  }

  /**
   * @module ol/format/XML
   */

  /**
   * @classdesc
   * Generic format for reading non-feature XML data
   *
   * @abstract
   */
  class XML {
    /**
     * Read the source document.
     *
     * @param {Document|Element|string} source The XML source.
     * @return {Object} An object representing the source.
     * @api
     */
    read(source) {
      if (!source) {
        return null;
      } else if (typeof source === 'string') {
        const doc = parse(source);
        return this.readFromDocument(doc);
      } else if (isDocument(source)) {
        return this.readFromDocument(/** @type {Document} */ (source));
      } else {
        return this.readFromNode(/** @type {Element} */ (source));
      }
    }

    /**
     * @abstract
     * @param {Document} doc Document.
     * @return {Object} Object
     */
    readFromDocument(doc) {}

    /**
     * @abstract
     * @param {Element} node Node.
     * @return {Object} Object
     */
    readFromNode(node) {}
  }

  /**
   * @module ol/format/OWS
   */


  /**
   * @const
   * @type {Array<null|string>}
   */
  const NAMESPACE_URIS$2 = [null, 'http://www.opengis.net/ows/1.1'];


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const PARSERS = makeStructureNS(
    NAMESPACE_URIS$2, {
      'ServiceIdentification': makeObjectPropertySetter(readServiceIdentification),
      'ServiceProvider': makeObjectPropertySetter(readServiceProvider),
      'OperationsMetadata': makeObjectPropertySetter(readOperationsMetadata)
    });


  class OWS extends XML {
    constructor() {
      super();
    }

    /**
     * @inheritDoc
     */
    readFromDocument(doc) {
      for (let n = doc.firstChild; n; n = n.nextSibling) {
        if (n.nodeType == Node.ELEMENT_NODE) {
          return this.readFromNode(n);
        }
      }
      return null;
    }

    /**
     * @inheritDoc
     */
    readFromNode(node) {
      const owsObject = pushParseAndPop({},
        PARSERS, node, []);
      return owsObject ? owsObject : null;
    }
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const ADDRESS_PARSERS = makeStructureNS(
    NAMESPACE_URIS$2, {
      'DeliveryPoint': makeObjectPropertySetter(readString),
      'City': makeObjectPropertySetter(readString),
      'AdministrativeArea': makeObjectPropertySetter(readString),
      'PostalCode': makeObjectPropertySetter(readString),
      'Country': makeObjectPropertySetter(readString),
      'ElectronicMailAddress': makeObjectPropertySetter(readString)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const ALLOWED_VALUES_PARSERS = makeStructureNS(
    NAMESPACE_URIS$2, {
      'Value': makeObjectPropertyPusher(readValue)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const CONSTRAINT_PARSERS = makeStructureNS(
    NAMESPACE_URIS$2, {
      'AllowedValues': makeObjectPropertySetter(readAllowedValues)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const CONTACT_INFO_PARSERS = makeStructureNS(
    NAMESPACE_URIS$2, {
      'Phone': makeObjectPropertySetter(readPhone),
      'Address': makeObjectPropertySetter(readAddress)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const DCP_PARSERS = makeStructureNS(
    NAMESPACE_URIS$2, {
      'HTTP': makeObjectPropertySetter(readHttp)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const HTTP_PARSERS = makeStructureNS(
    NAMESPACE_URIS$2, {
      'Get': makeObjectPropertyPusher(readGet),
      'Post': undefined // TODO
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const OPERATION_PARSERS = makeStructureNS(
    NAMESPACE_URIS$2, {
      'DCP': makeObjectPropertySetter(readDcp)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const OPERATIONS_METADATA_PARSERS = makeStructureNS(
    NAMESPACE_URIS$2, {
      'Operation': readOperation
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const PHONE_PARSERS = makeStructureNS(
    NAMESPACE_URIS$2, {
      'Voice': makeObjectPropertySetter(readString),
      'Facsimile': makeObjectPropertySetter(readString)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const REQUEST_METHOD_PARSERS = makeStructureNS(
    NAMESPACE_URIS$2, {
      'Constraint': makeObjectPropertyPusher(readConstraint)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const SERVICE_CONTACT_PARSERS =
      makeStructureNS(
        NAMESPACE_URIS$2, {
          'IndividualName': makeObjectPropertySetter(readString),
          'PositionName': makeObjectPropertySetter(readString),
          'ContactInfo': makeObjectPropertySetter(readContactInfo)
        });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const SERVICE_IDENTIFICATION_PARSERS =
      makeStructureNS(
        NAMESPACE_URIS$2, {
          'Abstract': makeObjectPropertySetter(readString),
          'AccessConstraints': makeObjectPropertySetter(readString),
          'Fees': makeObjectPropertySetter(readString),
          'Title': makeObjectPropertySetter(readString),
          'ServiceTypeVersion': makeObjectPropertySetter(readString),
          'ServiceType': makeObjectPropertySetter(readString)
        });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const SERVICE_PROVIDER_PARSERS =
      makeStructureNS(
        NAMESPACE_URIS$2, {
          'ProviderName': makeObjectPropertySetter(readString),
          'ProviderSite': makeObjectPropertySetter(readHref),
          'ServiceContact': makeObjectPropertySetter(readServiceContact)
        });


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The address.
   */
  function readAddress(node, objectStack) {
    return pushParseAndPop({},
      ADDRESS_PARSERS, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The values.
   */
  function readAllowedValues(node, objectStack) {
    return pushParseAndPop({},
      ALLOWED_VALUES_PARSERS, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The constraint.
   */
  function readConstraint(node, objectStack) {
    const name = node.getAttribute('name');
    if (!name) {
      return undefined;
    }
    return pushParseAndPop({'name': name},
      CONSTRAINT_PARSERS, node,
      objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The contact info.
   */
  function readContactInfo(node, objectStack) {
    return pushParseAndPop({},
      CONTACT_INFO_PARSERS, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The DCP.
   */
  function readDcp(node, objectStack) {
    return pushParseAndPop({},
      DCP_PARSERS, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The GET object.
   */
  function readGet(node, objectStack) {
    const href = readHref(node);
    if (!href) {
      return undefined;
    }
    return pushParseAndPop({'href': href},
      REQUEST_METHOD_PARSERS, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The HTTP object.
   */
  function readHttp(node, objectStack) {
    return pushParseAndPop({}, HTTP_PARSERS, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The operation.
   */
  function readOperation(node, objectStack) {
    const name = node.getAttribute('name');
    const value = pushParseAndPop({},
      OPERATION_PARSERS, node, objectStack);
    if (!value) {
      return undefined;
    }
    const object = /** @type {Object} */
        (objectStack[objectStack.length - 1]);
    object[name] = value;
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The operations metadata.
   */
  function readOperationsMetadata(node, objectStack) {
    return pushParseAndPop({},
      OPERATIONS_METADATA_PARSERS, node,
      objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The phone.
   */
  function readPhone(node, objectStack) {
    return pushParseAndPop({},
      PHONE_PARSERS, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The service identification.
   */
  function readServiceIdentification(node, objectStack) {
    return pushParseAndPop(
      {}, SERVICE_IDENTIFICATION_PARSERS, node,
      objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The service contact.
   */
  function readServiceContact(node, objectStack) {
    return pushParseAndPop(
      {}, SERVICE_CONTACT_PARSERS, node,
      objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The service provider.
   */
  function readServiceProvider(node, objectStack) {
    return pushParseAndPop(
      {}, SERVICE_PROVIDER_PARSERS, node,
      objectStack);
  }


  /**
   * @param {Node} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {string|undefined} The value.
   */
  function readValue(node, objectStack) {
    return readString(node);
  }

  /**
   * @module ol/geom/flat/flip
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {Array<number>=} opt_dest Destination.
   * @param {number=} opt_destOffset Destination offset.
   * @return {Array<number>} Flat coordinates.
   */
  function flipXY(flatCoordinates, offset, end, stride, opt_dest, opt_destOffset) {
    let dest, destOffset;
    if (opt_dest !== undefined) {
      dest = opt_dest;
      destOffset = opt_destOffset !== undefined ? opt_destOffset : 0;
    } else {
      dest = [];
      destOffset = 0;
    }
    let j = offset;
    while (j < end) {
      const x = flatCoordinates[j++];
      dest[destOffset++] = flatCoordinates[j++];
      dest[destOffset++] = x;
      for (let k = 2; k < stride; ++k) {
        dest[destOffset++] = flatCoordinates[j++];
      }
    }
    dest.length = destOffset;
    return dest;
  }

  /**
   * @module ol/format/Polyline
   */


  /**
   * @typedef {Object} Options
   * @property {number} [factor=1e5] The factor by which the coordinates values will be scaled.
   * @property {GeometryLayout} [geometryLayout='XY'] Layout of the
   * feature geometries created by the format reader.
   */


  /**
   * @classdesc
   * Feature format for reading and writing data in the Encoded
   * Polyline Algorithm Format.
   *
   * When reading features, the coordinates are assumed to be in two dimensions
   * and in [latitude, longitude] order.
   *
   * As Polyline sources contain a single feature,
   * {@link module:ol/format/Polyline~Polyline#readFeatures} will return the
   * feature in an array.
   *
   * @api
   */
  class Polyline extends TextFeature {

    /**
     * @param {Options=} opt_options Optional configuration object.
     */
    constructor(opt_options) {
      super();

      const options = opt_options ? opt_options : {};


      /**
       * @inheritDoc
       */
      this.dataProjection = get$2('EPSG:4326');

      /**
       * @private
       * @type {number}
       */
      this.factor_ = options.factor ? options.factor : 1e5;

      /**
       * @private
       * @type {GeometryLayout}
       */
      this.geometryLayout_ = options.geometryLayout ?
        options.geometryLayout : GeometryLayout.XY;
    }

    /**
     * @inheritDoc
     */
    readFeatureFromText(text, opt_options) {
      const geometry = this.readGeometryFromText(text, opt_options);
      return new Feature(geometry);
    }

    /**
     * @inheritDoc
     */
    readFeaturesFromText(text, opt_options) {
      const feature = this.readFeatureFromText(text, opt_options);
      return [feature];
    }

    /**
     * @inheritDoc
     */
    readGeometryFromText(text, opt_options) {
      const stride = getStrideForLayout(this.geometryLayout_);
      const flatCoordinates = decodeDeltas(text, stride, this.factor_);
      flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);
      const coordinates = inflateCoordinates(flatCoordinates, 0, flatCoordinates.length, stride);
      const lineString = new LineString(coordinates, this.geometryLayout_);

      return transformGeometryWithOptions(lineString, false, this.adaptOptions(opt_options));
    }

    /**
     * @inheritDoc
     */
    writeFeatureText(feature, opt_options) {
      const geometry = feature.getGeometry();
      if (geometry) {
        return this.writeGeometryText(geometry, opt_options);
      } else {
        assert(false, 40); // Expected `feature` to have a geometry
        return '';
      }
    }

    /**
     * @inheritDoc
     */
    writeFeaturesText(features, opt_options) {
      return this.writeFeatureText(features[0], opt_options);
    }

    /**
     * @inheritDoc
     */
    writeGeometryText(geometry, opt_options) {
      geometry = /** @type {LineString} */
        (transformGeometryWithOptions(geometry, true, this.adaptOptions(opt_options)));
      const flatCoordinates = geometry.getFlatCoordinates();
      const stride = geometry.getStride();
      flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);
      return encodeDeltas(flatCoordinates, stride, this.factor_);
    }
  }


  /**
   * Encode a list of n-dimensional points and return an encoded string
   *
   * Attention: This function will modify the passed array!
   *
   * @param {Array<number>} numbers A list of n-dimensional points.
   * @param {number} stride The number of dimension of the points in the list.
   * @param {number=} opt_factor The factor by which the numbers will be
   *     multiplied. The remaining decimal places will get rounded away.
   *     Default is `1e5`.
   * @return {string} The encoded string.
   * @api
   */
  function encodeDeltas(numbers, stride, opt_factor) {
    const factor = opt_factor ? opt_factor : 1e5;
    let d;

    const lastNumbers = new Array(stride);
    for (d = 0; d < stride; ++d) {
      lastNumbers[d] = 0;
    }

    for (let i = 0, ii = numbers.length; i < ii;) {
      for (d = 0; d < stride; ++d, ++i) {
        const num = numbers[i];
        const delta = num - lastNumbers[d];
        lastNumbers[d] = num;

        numbers[i] = delta;
      }
    }

    return encodeFloats(numbers, factor);
  }


  /**
   * Decode a list of n-dimensional points from an encoded string
   *
   * @param {string} encoded An encoded string.
   * @param {number} stride The number of dimension of the points in the
   *     encoded string.
   * @param {number=} opt_factor The factor by which the resulting numbers will
   *     be divided. Default is `1e5`.
   * @return {Array<number>} A list of n-dimensional points.
   * @api
   */
  function decodeDeltas(encoded, stride, opt_factor) {
    const factor = opt_factor ? opt_factor : 1e5;
    let d;

    /** @type {Array<number>} */
    const lastNumbers = new Array(stride);
    for (d = 0; d < stride; ++d) {
      lastNumbers[d] = 0;
    }

    const numbers = decodeFloats(encoded, factor);

    for (let i = 0, ii = numbers.length; i < ii;) {
      for (d = 0; d < stride; ++d, ++i) {
        lastNumbers[d] += numbers[i];

        numbers[i] = lastNumbers[d];
      }
    }

    return numbers;
  }


  /**
   * Encode a list of floating point numbers and return an encoded string
   *
   * Attention: This function will modify the passed array!
   *
   * @param {Array<number>} numbers A list of floating point numbers.
   * @param {number=} opt_factor The factor by which the numbers will be
   *     multiplied. The remaining decimal places will get rounded away.
   *     Default is `1e5`.
   * @return {string} The encoded string.
   * @api
   */
  function encodeFloats(numbers, opt_factor) {
    const factor = opt_factor ? opt_factor : 1e5;
    for (let i = 0, ii = numbers.length; i < ii; ++i) {
      numbers[i] = Math.round(numbers[i] * factor);
    }

    return encodeSignedIntegers(numbers);
  }


  /**
   * Decode a list of floating point numbers from an encoded string
   *
   * @param {string} encoded An encoded string.
   * @param {number=} opt_factor The factor by which the result will be divided.
   *     Default is `1e5`.
   * @return {Array<number>} A list of floating point numbers.
   * @api
   */
  function decodeFloats(encoded, opt_factor) {
    const factor = opt_factor ? opt_factor : 1e5;
    const numbers = decodeSignedIntegers(encoded);
    for (let i = 0, ii = numbers.length; i < ii; ++i) {
      numbers[i] /= factor;
    }
    return numbers;
  }


  /**
   * Encode a list of signed integers and return an encoded string
   *
   * Attention: This function will modify the passed array!
   *
   * @param {Array<number>} numbers A list of signed integers.
   * @return {string} The encoded string.
   */
  function encodeSignedIntegers(numbers) {
    for (let i = 0, ii = numbers.length; i < ii; ++i) {
      const num = numbers[i];
      numbers[i] = (num < 0) ? ~(num << 1) : (num << 1);
    }
    return encodeUnsignedIntegers(numbers);
  }


  /**
   * Decode a list of signed integers from an encoded string
   *
   * @param {string} encoded An encoded string.
   * @return {Array<number>} A list of signed integers.
   */
  function decodeSignedIntegers(encoded) {
    const numbers = decodeUnsignedIntegers(encoded);
    for (let i = 0, ii = numbers.length; i < ii; ++i) {
      const num = numbers[i];
      numbers[i] = (num & 1) ? ~(num >> 1) : (num >> 1);
    }
    return numbers;
  }


  /**
   * Encode a list of unsigned integers and return an encoded string
   *
   * @param {Array<number>} numbers A list of unsigned integers.
   * @return {string} The encoded string.
   */
  function encodeUnsignedIntegers(numbers) {
    let encoded = '';
    for (let i = 0, ii = numbers.length; i < ii; ++i) {
      encoded += encodeUnsignedInteger(numbers[i]);
    }
    return encoded;
  }


  /**
   * Decode a list of unsigned integers from an encoded string
   *
   * @param {string} encoded An encoded string.
   * @return {Array<number>} A list of unsigned integers.
   */
  function decodeUnsignedIntegers(encoded) {
    const numbers = [];
    let current = 0;
    let shift = 0;
    for (let i = 0, ii = encoded.length; i < ii; ++i) {
      const b = encoded.charCodeAt(i) - 63;
      current |= (b & 0x1f) << shift;
      if (b < 0x20) {
        numbers.push(current);
        current = 0;
        shift = 0;
      } else {
        shift += 5;
      }
    }
    return numbers;
  }


  /**
   * Encode one single unsigned integer and return an encoded string
   *
   * @param {number} num Unsigned integer that should be encoded.
   * @return {string} The encoded string.
   */
  function encodeUnsignedInteger(num) {
    let value, encoded = '';
    while (num >= 0x20) {
      value = (0x20 | (num & 0x1f)) + 63;
      encoded += String.fromCharCode(value);
      num >>= 5;
    }
    value = num + 63;
    encoded += String.fromCharCode(value);
    return encoded;
  }

  /**
   * @module ol/format/TopoJSON
   */

  /**
   * @typedef {import("topojson-specification").Topology} TopoJSONTopology
   * @typedef {import("topojson-specification").GeometryCollection} TopoJSONGeometryCollection
   * @typedef {import("topojson-specification").GeometryObject} TopoJSONGeometry
   * @typedef {import("topojson-specification").Point} TopoJSONPoint
   * @typedef {import("topojson-specification").MultiPoint} TopoJSONMultiPoint
   * @typedef {import("topojson-specification").LineString} TopoJSONLineString
   * @typedef {import("topojson-specification").MultiLineString} TopoJSONMultiLineString
   * @typedef {import("topojson-specification").Polygon} TopoJSONPolygon
   * @typedef {import("topojson-specification").MultiPolygon} TopoJSONMultiPolygon
   */

  /**
   * @typedef {Object} Options
   * @property {import("../proj.js").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.
   * @property {string} [layerName] Set the name of the TopoJSON topology
   * `objects`'s children as feature property with the specified name. This means
   * that when set to `'layer'`, a topology like
   * ```
   * {
   *   "type": "Topology",
   *   "objects": {
   *     "example": {
   *       "type": "GeometryCollection",
   *       "geometries": []
   *     }
   *   }
   * }
   * ```
   * will result in features that have a property `'layer'` set to `'example'`.
   * When not set, no property will be added to features.
   * @property {Array<string>} [layers] Names of the TopoJSON topology's
   * `objects`'s children to read features from.  If not provided, features will
   * be read from all children.
   */


  /**
   * @classdesc
   * Feature format for reading data in the TopoJSON format.
   *
   * @api
   */
  class TopoJSON extends JSONFeature {

    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {
      super();

      const options = opt_options ? opt_options : {};

      /**
       * @private
       * @type {string|undefined}
       */
      this.layerName_ = options.layerName;

      /**
       * @private
       * @type {Array<string>}
       */
      this.layers_ = options.layers ? options.layers : null;

      /**
       * @inheritDoc
       */
      this.dataProjection = get$2(
        options.dataProjection ?
          options.dataProjection : 'EPSG:4326');

    }

    /**
     * @inheritDoc
     */
    readFeaturesFromObject(object, opt_options) {
      if (object.type == 'Topology') {
        const topoJSONTopology = /** @type {TopoJSONTopology} */ (object);
        let transform, scale = null, translate = null;
        if (topoJSONTopology['transform']) {
          transform = topoJSONTopology['transform'];
          scale = transform['scale'];
          translate = transform['translate'];
        }
        const arcs = topoJSONTopology['arcs'];
        if (transform) {
          transformArcs(arcs, scale, translate);
        }
        /** @type {Array<Feature>} */
        const features = [];
        const topoJSONFeatures = topoJSONTopology['objects'];
        const property = this.layerName_;
        let feature;
        for (const objectName in topoJSONFeatures) {
          if (this.layers_ && this.layers_.indexOf(objectName) == -1) {
            continue;
          }
          if (topoJSONFeatures[objectName].type === 'GeometryCollection') {
            feature = /** @type {TopoJSONGeometryCollection} */ (topoJSONFeatures[objectName]);
            features.push.apply(features, readFeaturesFromGeometryCollection(
              feature, arcs, scale, translate, property, objectName, opt_options));
          } else {
            feature = /** @type {TopoJSONGeometry} */ (topoJSONFeatures[objectName]);
            features.push(readFeatureFromGeometry(
              feature, arcs, scale, translate, property, objectName, opt_options));
          }
        }
        return features;
      } else {
        return [];
      }
    }

    /**
     * @inheritDoc
     */
    readProjectionFromObject(object) {
      return this.dataProjection;
    }

  }


  /**
   * @const
   * @type {Object<string, function(TopoJSONGeometry, Array, ...Array=): import("../geom/Geometry.js").default>}
   */
  const GEOMETRY_READERS$1 = {
    'Point': readPointGeometry$2,
    'LineString': readLineStringGeometry$2,
    'Polygon': readPolygonGeometry$2,
    'MultiPoint': readMultiPointGeometry$2,
    'MultiLineString': readMultiLineStringGeometry$2,
    'MultiPolygon': readMultiPolygonGeometry$2
  };


  /**
   * Concatenate arcs into a coordinate array.
   * @param {Array<number>} indices Indices of arcs to concatenate.  Negative
   *     values indicate arcs need to be reversed.
   * @param {Array<Array<import("../coordinate.js").Coordinate>>} arcs Array of arcs (already
   *     transformed).
   * @return {Array<import("../coordinate.js").Coordinate>} Coordinates array.
   */
  function concatenateArcs(indices, arcs) {
    /** @type {Array<import("../coordinate.js").Coordinate>} */
    const coordinates = [];
    let index, arc;
    for (let i = 0, ii = indices.length; i < ii; ++i) {
      index = indices[i];
      if (i > 0) {
        // splicing together arcs, discard last point
        coordinates.pop();
      }
      if (index >= 0) {
        // forward arc
        arc = arcs[index];
      } else {
        // reverse arc
        arc = arcs[~index].slice().reverse();
      }
      coordinates.push.apply(coordinates, arc);
    }
    // provide fresh copies of coordinate arrays
    for (let j = 0, jj = coordinates.length; j < jj; ++j) {
      coordinates[j] = coordinates[j].slice();
    }
    return coordinates;
  }


  /**
   * Create a point from a TopoJSON geometry object.
   *
   * @param {TopoJSONPoint} object TopoJSON object.
   * @param {Array<number>} scale Scale for each dimension.
   * @param {Array<number>} translate Translation for each dimension.
   * @return {Point} Geometry.
   */
  function readPointGeometry$2(object, scale, translate) {
    const coordinates = object['coordinates'];
    if (scale && translate) {
      transformVertex(coordinates, scale, translate);
    }
    return new Point(coordinates);
  }


  /**
   * Create a multi-point from a TopoJSON geometry object.
   *
   * @param {TopoJSONMultiPoint} object TopoJSON object.
   * @param {Array<number>} scale Scale for each dimension.
   * @param {Array<number>} translate Translation for each dimension.
   * @return {MultiPoint} Geometry.
   */
  function readMultiPointGeometry$2(object, scale, translate) {
    const coordinates = object['coordinates'];
    if (scale && translate) {
      for (let i = 0, ii = coordinates.length; i < ii; ++i) {
        transformVertex(coordinates[i], scale, translate);
      }
    }
    return new MultiPoint(coordinates);
  }


  /**
   * Create a linestring from a TopoJSON geometry object.
   *
   * @param {TopoJSONLineString} object TopoJSON object.
   * @param {Array<Array<import("../coordinate.js").Coordinate>>} arcs Array of arcs.
   * @return {LineString} Geometry.
   */
  function readLineStringGeometry$2(object, arcs) {
    const coordinates = concatenateArcs(object['arcs'], arcs);
    return new LineString(coordinates);
  }


  /**
   * Create a multi-linestring from a TopoJSON geometry object.
   *
   * @param {TopoJSONMultiLineString} object TopoJSON object.
   * @param {Array<Array<import("../coordinate.js").Coordinate>>} arcs Array of arcs.
   * @return {MultiLineString} Geometry.
   */
  function readMultiLineStringGeometry$2(object, arcs) {
    const coordinates = [];
    for (let i = 0, ii = object['arcs'].length; i < ii; ++i) {
      coordinates[i] = concatenateArcs(object['arcs'][i], arcs);
    }
    return new MultiLineString(coordinates);
  }


  /**
   * Create a polygon from a TopoJSON geometry object.
   *
   * @param {TopoJSONPolygon} object TopoJSON object.
   * @param {Array<Array<import("../coordinate.js").Coordinate>>} arcs Array of arcs.
   * @return {Polygon} Geometry.
   */
  function readPolygonGeometry$2(object, arcs) {
    const coordinates = [];
    for (let i = 0, ii = object['arcs'].length; i < ii; ++i) {
      coordinates[i] = concatenateArcs(object['arcs'][i], arcs);
    }
    return new Polygon(coordinates);
  }


  /**
   * Create a multi-polygon from a TopoJSON geometry object.
   *
   * @param {TopoJSONMultiPolygon} object TopoJSON object.
   * @param {Array<Array<import("../coordinate.js").Coordinate>>} arcs Array of arcs.
   * @return {MultiPolygon} Geometry.
   */
  function readMultiPolygonGeometry$2(object, arcs) {
    const coordinates = [];
    for (let i = 0, ii = object['arcs'].length; i < ii; ++i) {
      // for each polygon
      const polyArray = object['arcs'][i];
      const ringCoords = [];
      for (let j = 0, jj = polyArray.length; j < jj; ++j) {
        // for each ring
        ringCoords[j] = concatenateArcs(polyArray[j], arcs);
      }
      coordinates[i] = ringCoords;
    }
    return new MultiPolygon(coordinates);
  }


  /**
   * Create features from a TopoJSON GeometryCollection object.
   *
   * @param {TopoJSONGeometryCollection} collection TopoJSON Geometry
   *     object.
   * @param {Array<Array<import("../coordinate.js").Coordinate>>} arcs Array of arcs.
   * @param {Array<number>} scale Scale for each dimension.
   * @param {Array<number>} translate Translation for each dimension.
   * @param {string|undefined} property Property to set the `GeometryCollection`'s parent
   *     object to.
   * @param {string} name Name of the `Topology`'s child object.
   * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
   * @return {Array<Feature>} Array of features.
   */
  function readFeaturesFromGeometryCollection(collection, arcs, scale, translate, property, name, opt_options) {
    const geometries = collection['geometries'];
    const features = [];
    for (let i = 0, ii = geometries.length; i < ii; ++i) {
      features[i] = readFeatureFromGeometry(
        geometries[i], arcs, scale, translate, property, name, opt_options);
    }
    return features;
  }


  /**
   * Create a feature from a TopoJSON geometry object.
   *
   * @param {TopoJSONGeometry} object TopoJSON geometry object.
   * @param {Array<Array<import("../coordinate.js").Coordinate>>} arcs Array of arcs.
   * @param {Array<number>} scale Scale for each dimension.
   * @param {Array<number>} translate Translation for each dimension.
   * @param {string|undefined} property Property to set the `GeometryCollection`'s parent
   *     object to.
   * @param {string} name Name of the `Topology`'s child object.
   * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
   * @return {Feature} Feature.
   */
  function readFeatureFromGeometry(object, arcs, scale, translate, property, name, opt_options) {
    let geometry;
    const type = object.type;
    const geometryReader = GEOMETRY_READERS$1[type];
    if ((type === 'Point') || (type === 'MultiPoint')) {
      geometry = geometryReader(object, scale, translate);
    } else {
      geometry = geometryReader(object, arcs);
    }
    const feature = new Feature();
    feature.setGeometry(transformGeometryWithOptions(geometry, false, opt_options));
    if (object.id !== undefined) {
      feature.setId(object.id);
    }
    let properties = object.properties;
    if (property) {
      if (!properties) {
        properties = {};
      }
      properties[property] = name;
    }
    if (properties) {
      feature.setProperties(properties, true);
    }
    return feature;
  }


  /**
   * Apply a linear transform to array of arcs.  The provided array of arcs is
   * modified in place.
   *
   * @param {Array<Array<import("../coordinate.js").Coordinate>>} arcs Array of arcs.
   * @param {Array<number>} scale Scale for each dimension.
   * @param {Array<number>} translate Translation for each dimension.
   */
  function transformArcs(arcs, scale, translate) {
    for (let i = 0, ii = arcs.length; i < ii; ++i) {
      transformArc(arcs[i], scale, translate);
    }
  }


  /**
   * Apply a linear transform to an arc.  The provided arc is modified in place.
   *
   * @param {Array<import("../coordinate.js").Coordinate>} arc Arc.
   * @param {Array<number>} scale Scale for each dimension.
   * @param {Array<number>} translate Translation for each dimension.
   */
  function transformArc(arc, scale, translate) {
    let x = 0;
    let y = 0;
    for (let i = 0, ii = arc.length; i < ii; ++i) {
      const vertex = arc[i];
      x += vertex[0];
      y += vertex[1];
      vertex[0] = x;
      vertex[1] = y;
      transformVertex(vertex, scale, translate);
    }
  }


  /**
   * Apply a linear transform to a vertex.  The provided vertex is modified in
   * place.
   *
   * @param {import("../coordinate.js").Coordinate} vertex Vertex.
   * @param {Array<number>} scale Scale for each dimension.
   * @param {Array<number>} translate Translation for each dimension.
   */
  function transformVertex(vertex, scale, translate) {
    vertex[0] = vertex[0] * scale[0] + translate[0];
    vertex[1] = vertex[1] * scale[1] + translate[1];
  }

  /**
   * @module ol/format/GML2
   */


  /**
   * @const
   * @type {string}
   */
  const schemaLocation$1 = GMLNS + ' http://schemas.opengis.net/gml/2.1.2/feature.xsd';


  /**
   * @const
   * @type {Object<string, string>}
   */
  const MULTIGEOMETRY_TO_MEMBER_NODENAME$1 = {
    'MultiLineString': 'lineStringMember',
    'MultiCurve': 'curveMember',
    'MultiPolygon': 'polygonMember',
    'MultiSurface': 'surfaceMember'
  };


  /**
   * @classdesc
   * Feature format for reading and writing data in the GML format,
   * version 2.1.2.
   *
   * @api
   */
  class GML2 extends GMLBase {

    /**
     * @param {import("./GMLBase.js").Options=} opt_options Optional configuration object.
     */
    constructor(opt_options) {
      const options = /** @type {import("./GMLBase.js").Options} */
          (opt_options ? opt_options : {});

      super(options);

      this.FEATURE_COLLECTION_PARSERS[GMLNS][
        'featureMember'] =
          makeArrayPusher(this.readFeaturesInternal);

      /**
       * @inheritDoc
       */
      this.schemaLocation = options.schemaLocation ?
        options.schemaLocation : schemaLocation$1;

    }

    /**
     * @param {Node} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     * @return {Array<number>|undefined} Flat coordinates.
     */
    readFlatCoordinates_(node, objectStack) {
      const s = getAllTextContent(node, false).replace(/^\s*|\s*$/g, '');
      const context = /** @type {import("../xml.js").NodeStackItem} */ (objectStack[0]);
      const containerSrs = context['srsName'];
      let axisOrientation = 'enu';
      if (containerSrs) {
        const proj = get$2(containerSrs);
        if (proj) {
          axisOrientation = proj.getAxisOrientation();
        }
      }
      const coordsGroups = s.trim().split(/\s+/);
      const flatCoordinates = [];
      for (let i = 0, ii = coordsGroups.length; i < ii; i++) {
        const coords = coordsGroups[i].split(/,+/);
        const x = parseFloat(coords[0]);
        const y = parseFloat(coords[1]);
        const z = (coords.length === 3) ? parseFloat(coords[2]) : 0;
        if (axisOrientation.substr(0, 2) === 'en') {
          flatCoordinates.push(x, y, z);
        } else {
          flatCoordinates.push(y, x, z);
        }
      }
      return flatCoordinates;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     * @return {import("../extent.js").Extent|undefined} Envelope.
     */
    readBox_(node, objectStack) {
      /** @type {Array<number>} */
      const flatCoordinates = pushParseAndPop([null],
        this.BOX_PARSERS_, node, objectStack, this);
      return createOrUpdate(flatCoordinates[1][0],
        flatCoordinates[1][1], flatCoordinates[1][3],
        flatCoordinates[1][4]);
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     */
    innerBoundaryIsParser_(node, objectStack) {
      /** @type {Array<number>|undefined} */
      const flatLinearRing = pushParseAndPop(undefined,
        this.RING_PARSERS, node, objectStack, this);
      if (flatLinearRing) {
        const flatLinearRings = /** @type {Array<Array<number>>} */
            (objectStack[objectStack.length - 1]);
        flatLinearRings.push(flatLinearRing);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     */
    outerBoundaryIsParser_(node, objectStack) {
      /** @type {Array<number>|undefined} */
      const flatLinearRing = pushParseAndPop(undefined,
        this.RING_PARSERS, node, objectStack, this);
      if (flatLinearRing) {
        const flatLinearRings = /** @type {Array<Array<number>>} */
            (objectStack[objectStack.length - 1]);
        flatLinearRings[0] = flatLinearRing;
      }
    }

    /**
     * @const
     * @param {*} value Value.
     * @param {Array<*>} objectStack Object stack.
     * @param {string=} opt_nodeName Node name.
     * @return {Element|undefined} Node.
     * @private
     */
    GEOMETRY_NODE_FACTORY_(value, objectStack, opt_nodeName) {
      const context = objectStack[objectStack.length - 1];
      const multiSurface = context['multiSurface'];
      const surface = context['surface'];
      const multiCurve = context['multiCurve'];
      let nodeName;
      if (!Array.isArray(value)) {
        nodeName = /** @type {import("../geom/Geometry.js").default} */ (value).getType();
        if (nodeName === 'MultiPolygon' && multiSurface === true) {
          nodeName = 'MultiSurface';
        } else if (nodeName === 'Polygon' && surface === true) {
          nodeName = 'Surface';
        } else if (nodeName === 'MultiLineString' && multiCurve === true) {
          nodeName = 'MultiCurve';
        }
      } else {
        nodeName = 'Envelope';
      }
      return createElementNS('http://www.opengis.net/gml',
        nodeName);
    }

    /**
     * @param {Element} node Node.
     * @param {import("../Feature.js").default} feature Feature.
     * @param {Array<*>} objectStack Node stack.
     */
    writeFeatureElement(node, feature, objectStack) {
      const fid = feature.getId();
      if (fid) {
        node.setAttribute('fid', /** @type {string} */ (fid));
      }
      const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);
      const featureNS = context['featureNS'];
      const geometryName = feature.getGeometryName();
      if (!context.serializers) {
        context.serializers = {};
        context.serializers[featureNS] = {};
      }
      const properties = feature.getProperties();
      const keys = [];
      const values = [];
      for (const key in properties) {
        const value = properties[key];
        if (value !== null) {
          keys.push(key);
          values.push(value);
          if (key == geometryName || typeof /** @type {?} */ (value).getSimplifiedGeometry === 'function') {
            if (!(key in context.serializers[featureNS])) {
              context.serializers[featureNS][key] = makeChildAppender(
                this.writeGeometryElement, this);
            }
          } else {
            if (!(key in context.serializers[featureNS])) {
              context.serializers[featureNS][key] = makeChildAppender(writeStringTextNode);
            }
          }
        }
      }
      const item = assign({}, context);
      item.node = node;
      pushSerializeAndPop(/** @type {import("../xml.js").NodeStackItem} */
        (item), context.serializers,
        makeSimpleNodeFactory(undefined, featureNS),
        values,
        objectStack, keys);
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/LineString.js").default} geometry LineString geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeCurveOrLineString_(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const srsName = context['srsName'];
      if (node.nodeName !== 'LineStringSegment' && srsName) {
        node.setAttribute('srsName', srsName);
      }
      if (node.nodeName === 'LineString' ||
          node.nodeName === 'LineStringSegment') {
        const coordinates = this.createCoordinatesNode_(node.namespaceURI);
        node.appendChild(coordinates);
        this.writeCoordinates_(coordinates, geometry, objectStack);
      } else if (node.nodeName === 'Curve') {
        const segments = createElementNS(node.namespaceURI, 'segments');
        node.appendChild(segments);
        this.writeCurveSegments_(segments,
          geometry, objectStack);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/LineString.js").default} line LineString geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeLineStringOrCurveMember_(node, line, objectStack) {
      const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);
      if (child) {
        node.appendChild(child);
        this.writeCurveOrLineString_(child, line, objectStack);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/MultiLineString.js").default} geometry MultiLineString geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeMultiCurveOrLineString_(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsName = context['srsName'];
      const curve = context['curve'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const lines = geometry.getLineStrings();
      pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName, curve: curve},
        this.LINESTRINGORCURVEMEMBER_SERIALIZERS_,
        this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines,
        objectStack, undefined, this);
    }

    /**
     * @param {Node} node Node.
     * @param {import("../geom/Geometry.js").default|import("../extent.js").Extent} geometry Geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeGeometryElement(node, geometry, objectStack) {
      const context = /** @type {import("./Feature.js").WriteOptions} */ (objectStack[objectStack.length - 1]);
      const item = assign({}, context);
      item['node'] = node;
      let value;
      if (Array.isArray(geometry)) {
        value = transformExtentWithOptions(/** @type {import("../extent.js").Extent} */ (geometry), context);
      } else {
        value = transformGeometryWithOptions(/** @type {import("../geom/Geometry.js").default} */ (geometry), true, context);
      }
      pushSerializeAndPop(/** @type {import("../xml.js").NodeStackItem} */
        (item), this.GEOMETRY_SERIALIZERS_,
        this.GEOMETRY_NODE_FACTORY_, [value],
        objectStack, undefined, this);
    }

    /**
     * @param {string} namespaceURI XML namespace.
     * @returns {Element} coordinates node.
     * @private
     */
    createCoordinatesNode_(namespaceURI) {
      const coordinates = createElementNS(namespaceURI, 'coordinates');
      coordinates.setAttribute('decimal', '.');
      coordinates.setAttribute('cs', ',');
      coordinates.setAttribute('ts', ' ');

      return coordinates;
    }

    /**
     * @param {Node} node Node.
     * @param {import("../geom/LineString.js").default|import("../geom/LinearRing.js").default} value Geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeCoordinates_(node, value, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsName = context['srsName'];
      // only 2d for simple features profile
      const points = value.getCoordinates();
      const len = points.length;
      const parts = new Array(len);
      for (let i = 0; i < len; ++i) {
        const point = points[i];
        parts[i] = this.getCoords_(point, srsName, hasZ);
      }
      writeStringTextNode(node, parts.join(' '));
    }

    /**
     * @param {Node} node Node.
     * @param {import("../geom/LineString.js").default} line LineString geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeCurveSegments_(node, line, objectStack) {
      const child = createElementNS(node.namespaceURI, 'LineStringSegment');
      node.appendChild(child);
      this.writeCurveOrLineString_(child, line, objectStack);
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/Polygon.js").default} geometry Polygon geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeSurfaceOrPolygon_(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsName = context['srsName'];
      if (node.nodeName !== 'PolygonPatch' && srsName) {
        node.setAttribute('srsName', srsName);
      }
      if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {
        const rings = geometry.getLinearRings();
        pushSerializeAndPop(
          {node: node, hasZ: hasZ, srsName: srsName},
          this.RING_SERIALIZERS_,
          this.RING_NODE_FACTORY_,
          rings, objectStack, undefined, this);
      } else if (node.nodeName === 'Surface') {
        const patches = createElementNS(node.namespaceURI, 'patches');
        node.appendChild(patches);
        this.writeSurfacePatches_(
          patches, geometry, objectStack);
      }
    }

    /**
     * @param {*} value Value.
     * @param {Array<*>} objectStack Object stack.
     * @param {string=} opt_nodeName Node name.
     * @return {Node} Node.
     * @private
     */
    RING_NODE_FACTORY_(value, objectStack, opt_nodeName) {
      const context = objectStack[objectStack.length - 1];
      const parentNode = context.node;
      const exteriorWritten = context['exteriorWritten'];
      if (exteriorWritten === undefined) {
        context['exteriorWritten'] = true;
      }
      return createElementNS(parentNode.namespaceURI,
        exteriorWritten !== undefined ? 'innerBoundaryIs' : 'outerBoundaryIs');
    }

    /**
     * @param {Node} node Node.
     * @param {import("../geom/Polygon.js").default} polygon Polygon geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeSurfacePatches_(node, polygon, objectStack) {
      const child = createElementNS(node.namespaceURI, 'PolygonPatch');
      node.appendChild(child);
      this.writeSurfaceOrPolygon_(child, polygon, objectStack);
    }

    /**
     * @param {Node} node Node.
     * @param {import("../geom/LinearRing.js").default} ring LinearRing geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeRing_(node, ring, objectStack) {
      const linearRing = createElementNS(node.namespaceURI, 'LinearRing');
      node.appendChild(linearRing);
      this.writeLinearRing_(linearRing, ring, objectStack);
    }

    /**
     * @param {Array<number>} point Point geometry.
     * @param {string=} opt_srsName Optional srsName
     * @param {boolean=} opt_hasZ whether the geometry has a Z coordinate (is 3D) or not.
     * @return {string} The coords string.
     * @private
     */
    getCoords_(point, opt_srsName, opt_hasZ) {
      let axisOrientation = 'enu';
      if (opt_srsName) {
        axisOrientation = get$2(opt_srsName).getAxisOrientation();
      }
      let coords = ((axisOrientation.substr(0, 2) === 'en') ?
        point[0] + ',' + point[1] :
        point[1] + ',' + point[0]);
      if (opt_hasZ) {
        // For newly created points, Z can be undefined.
        const z = point[2] || 0;
        coords += ',' + z;
      }

      return coords;
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/Point.js").default} geometry Point geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writePoint_(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsName = context['srsName'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const coordinates = this.createCoordinatesNode_(node.namespaceURI);
      node.appendChild(coordinates);
      const point = geometry.getCoordinates();
      const coord = this.getCoords_(point, srsName, hasZ);
      writeStringTextNode(coordinates, coord);
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/MultiPoint.js").default} geometry MultiPoint geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeMultiPoint_(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsName = context['srsName'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const points = geometry.getPoints();
      pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName},
        this.POINTMEMBER_SERIALIZERS_,
        makeSimpleNodeFactory('pointMember'), points,
        objectStack, undefined, this);
    }

    /**
     * @param {Node} node Node.
     * @param {import("../geom/Point.js").default} point Point geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writePointMember_(node, point, objectStack) {
      const child = createElementNS(node.namespaceURI, 'Point');
      node.appendChild(child);
      this.writePoint_(child, point, objectStack);
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/LinearRing.js").default} geometry LinearRing geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeLinearRing_(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const srsName = context['srsName'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const coordinates = this.createCoordinatesNode_(node.namespaceURI);
      node.appendChild(coordinates);
      this.writeCoordinates_(coordinates, geometry, objectStack);
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/MultiPolygon.js").default} geometry MultiPolygon geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeMultiSurfaceOrPolygon_(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsName = context['srsName'];
      const surface = context['surface'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const polygons = geometry.getPolygons();
      pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName, surface: surface},
        this.SURFACEORPOLYGONMEMBER_SERIALIZERS_,
        this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons,
        objectStack, undefined, this);
    }

    /**
     * @param {Node} node Node.
     * @param {import("../geom/Polygon.js").default} polygon Polygon geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeSurfaceOrPolygonMember_(node, polygon, objectStack) {
      const child = this.GEOMETRY_NODE_FACTORY_(
        polygon, objectStack);
      if (child) {
        node.appendChild(child);
        this.writeSurfaceOrPolygon_(child, polygon, objectStack);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeEnvelope(node, extent, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const srsName = context['srsName'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const keys = ['lowerCorner', 'upperCorner'];
      const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];
      pushSerializeAndPop(/** @type {import("../xml.js").NodeStackItem} */
        ({node: node}), this.ENVELOPE_SERIALIZERS_,
        OBJECT_PROPERTY_NODE_FACTORY,
        values,
        objectStack, keys, this);
    }

    /**
     * @const
     * @param {*} value Value.
     * @param {Array<*>} objectStack Object stack.
     * @param {string=} opt_nodeName Node name.
     * @return {Node|undefined} Node.
     * @private
     */
    MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, opt_nodeName) {
      const parentNode = objectStack[objectStack.length - 1].node;
      return createElementNS('http://www.opengis.net/gml',
        MULTIGEOMETRY_TO_MEMBER_NODENAME$1[parentNode.nodeName]);
    }
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   * @protected
   */
  GML2.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {
    'http://www.opengis.net/gml': {
      'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates_)
    }
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   * @protected
   */
  GML2.prototype.FLAT_LINEAR_RINGS_PARSERS = {
    'http://www.opengis.net/gml': {
      'innerBoundaryIs': GML2.prototype.innerBoundaryIsParser_,
      'outerBoundaryIs': GML2.prototype.outerBoundaryIsParser_
    }
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   * @private
   */
  GML2.prototype.BOX_PARSERS_ = {
    'http://www.opengis.net/gml': {
      'coordinates': makeArrayPusher(
        GML2.prototype.readFlatCoordinates_)
    }
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   * @protected
   */
  GML2.prototype.GEOMETRY_PARSERS = {
    'http://www.opengis.net/gml': {
      'Point': makeReplacer(GMLBase.prototype.readPoint),
      'MultiPoint': makeReplacer(
        GMLBase.prototype.readMultiPoint),
      'LineString': makeReplacer(
        GMLBase.prototype.readLineString),
      'MultiLineString': makeReplacer(
        GMLBase.prototype.readMultiLineString),
      'LinearRing': makeReplacer(
        GMLBase.prototype.readLinearRing),
      'Polygon': makeReplacer(GMLBase.prototype.readPolygon),
      'MultiPolygon': makeReplacer(
        GMLBase.prototype.readMultiPolygon),
      'Box': makeReplacer(GML2.prototype.readBox_)
    }
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   * @private
   */
  GML2.prototype.GEOMETRY_SERIALIZERS_ = {
    'http://www.opengis.net/gml': {
      'Curve': makeChildAppender(
        GML2.prototype.writeCurveOrLineString_),
      'MultiCurve': makeChildAppender(
        GML2.prototype.writeMultiCurveOrLineString_),
      'Point': makeChildAppender(GML2.prototype.writePoint_),
      'MultiPoint': makeChildAppender(
        GML2.prototype.writeMultiPoint_),
      'LineString': makeChildAppender(
        GML2.prototype.writeCurveOrLineString_),
      'MultiLineString': makeChildAppender(
        GML2.prototype.writeMultiCurveOrLineString_),
      'LinearRing': makeChildAppender(
        GML2.prototype.writeLinearRing_),
      'Polygon': makeChildAppender(
        GML2.prototype.writeSurfaceOrPolygon_),
      'MultiPolygon': makeChildAppender(
        GML2.prototype.writeMultiSurfaceOrPolygon_),
      'Surface': makeChildAppender(
        GML2.prototype.writeSurfaceOrPolygon_),
      'MultiSurface': makeChildAppender(
        GML2.prototype.writeMultiSurfaceOrPolygon_),
      'Envelope': makeChildAppender(
        GML2.prototype.writeEnvelope)
    }
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   * @private
   */
  GML2.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS_ = {
    'http://www.opengis.net/gml': {
      'lineStringMember': makeChildAppender(
        GML2.prototype.writeLineStringOrCurveMember_),
      'curveMember': makeChildAppender(
        GML2.prototype.writeLineStringOrCurveMember_)
    }
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   * @private
   */
  GML2.prototype.RING_SERIALIZERS_ = {
    'http://www.opengis.net/gml': {
      'outerBoundaryIs': makeChildAppender(GML2.prototype.writeRing_),
      'innerBoundaryIs': makeChildAppender(GML2.prototype.writeRing_)
    }
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   * @private
   */
  GML2.prototype.POINTMEMBER_SERIALIZERS_ = {
    'http://www.opengis.net/gml': {
      'pointMember': makeChildAppender(
        GML2.prototype.writePointMember_)
    }
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   * @private
   */
  GML2.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS_ = {
    'http://www.opengis.net/gml': {
      'surfaceMember': makeChildAppender(
        GML2.prototype.writeSurfaceOrPolygonMember_),
      'polygonMember': makeChildAppender(
        GML2.prototype.writeSurfaceOrPolygonMember_)
    }
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   * @private
   */
  GML2.prototype.ENVELOPE_SERIALIZERS_ = {
    'http://www.opengis.net/gml': {
      'lowerCorner': makeChildAppender(writeStringTextNode),
      'upperCorner': makeChildAppender(writeStringTextNode)
    }
  };

  /**
   * @module ol/format/filter/Filter
   */


  /**
   * @classdesc
   * Abstract class; normally only used for creating subclasses and not instantiated in apps.
   * Base class for WFS GetFeature filters.
   *
   * @abstract
   */
  class Filter {
    /**
     * @param {!string} tagName The XML tag name for this filter.
     */
    constructor(tagName) {

      /**
       * @private
       * @type {!string}
       */
      this.tagName_ = tagName;
    }

    /**
     * The XML tag name for a filter.
     * @returns {!string} Name.
     */
    getTagName() {
      return this.tagName_;
    }
  }

  /**
   * @module ol/format/filter/LogicalNary
   */

  /**
   * @classdesc
   * Abstract class; normally only used for creating subclasses and not instantiated in apps.
   * Base class for WFS GetFeature n-ary logical filters.
   *
   * @abstract
   */
  class LogicalNary extends Filter {

    /**
     * @param {!string} tagName The XML tag name for this filter.
     * @param {Array<import("./Filter.js").default>} conditions Conditions.
     */
    constructor(tagName, conditions) {

      super(tagName);

      /**
       * @type {Array<import("./Filter.js").default>}
       */
      this.conditions = conditions;
      assert(this.conditions.length >= 2, 57); // At least 2 conditions are required.
    }

  }

  /**
   * @module ol/format/filter/And
   */

  /**
   * @classdesc
   * Represents a logical `<And>` operator between two or more filter conditions.
   *
   * @abstract
   */
  class And extends LogicalNary {

    /**
     * @param {...import("./Filter.js").default} conditions Conditions.
     */
    constructor(conditions) {
      super('And', Array.prototype.slice.call(arguments));
    }

  }

  /**
   * @module ol/format/filter/Bbox
   */

  /**
   * @classdesc
   * Represents a `<BBOX>` operator to test whether a geometry-valued property
   * intersects a fixed bounding box
   *
   * @api
   */
  class Bbox extends Filter {

    /**
     * @param {!string} geometryName Geometry name to use.
     * @param {!import("../../extent.js").Extent} extent Extent.
     * @param {string=} opt_srsName SRS name. No srsName attribute will be set
     * on geometries when this is not provided.
     */
    constructor(geometryName, extent, opt_srsName) {

      super('BBOX');

      /**
       * @type {!string}
       */
      this.geometryName = geometryName;

      /**
       * @type {import("../../extent.js").Extent}
       */
      this.extent = extent;

      /**
       * @type {string|undefined}
       */
      this.srsName = opt_srsName;
    }

  }

  /**
   * @module ol/format/filter
   */


  /**
   * Create a logical `<And>` operator between two or more filter conditions.
   *
   * @param {...import("./filter/Filter.js").default} conditions Filter conditions.
   * @returns {!And} `<And>` operator.
   * @api
   */
  function and(conditions) {
    const params = [null].concat(Array.prototype.slice.call(arguments));
    return new (Function.prototype.bind.apply(And, params));
  }


  /**
   * Create a `<BBOX>` operator to test whether a geometry-valued property
   * intersects a fixed bounding box
   *
   * @param {!string} geometryName Geometry name to use.
   * @param {!import("../extent.js").Extent} extent Extent.
   * @param {string=} opt_srsName SRS name. No srsName attribute will be
   *    set on geometries when this is not provided.
   * @returns {!Bbox} `<BBOX>` operator.
   * @api
   */
  function bbox$1(geometryName, extent, opt_srsName) {
    return new Bbox(geometryName, extent, opt_srsName);
  }

  /**
   * @module ol/format/WFS
   */


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const FEATURE_COLLECTION_PARSERS = {
    'http://www.opengis.net/gml': {
      'boundedBy': makeObjectPropertySetter(
        GMLBase.prototype.readGeometryElement, 'bounds')
    }
  };


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const TRANSACTION_SUMMARY_PARSERS = {
    'http://www.opengis.net/wfs': {
      'totalInserted': makeObjectPropertySetter(readNonNegativeInteger),
      'totalUpdated': makeObjectPropertySetter(readNonNegativeInteger),
      'totalDeleted': makeObjectPropertySetter(readNonNegativeInteger)
    }
  };


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const TRANSACTION_RESPONSE_PARSERS = {
    'http://www.opengis.net/wfs': {
      'TransactionSummary': makeObjectPropertySetter(
        readTransactionSummary, 'transactionSummary'),
      'InsertResults': makeObjectPropertySetter(
        readInsertResults, 'insertIds')
    }
  };


  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const QUERY_SERIALIZERS = {
    'http://www.opengis.net/wfs': {
      'PropertyName': makeChildAppender(writeStringTextNode)
    }
  };


  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const TRANSACTION_SERIALIZERS = {
    'http://www.opengis.net/wfs': {
      'Insert': makeChildAppender(writeFeature),
      'Update': makeChildAppender(writeUpdate),
      'Delete': makeChildAppender(writeDelete),
      'Property': makeChildAppender(writeProperty),
      'Native': makeChildAppender(writeNative)
    }
  };


  /**
   * @typedef {Object} Options
   * @property {Object<string, string>|string} [featureNS] The namespace URI used for features.
   * @property {Array<string>|string} [featureType] The feature type to parse. Only used for read operations.
   * @property {GMLBase} [gmlFormat] The GML format to use to parse the response. Default is `ol/format/GML3`.
   * @property {string} [schemaLocation] Optional schemaLocation to use for serialization, this will override the default.
   */


  /**
   * @typedef {Object} WriteGetFeatureOptions
   * @property {string} featureNS The namespace URI used for features.
   * @property {string} featurePrefix The prefix for the feature namespace.
   * @property {Array<string>} featureTypes The feature type names.
   * @property {string} [srsName] SRS name. No srsName attribute will be set on
   * geometries when this is not provided.
   * @property {string} [handle] Handle.
   * @property {string} [outputFormat] Output format.
   * @property {number} [maxFeatures] Maximum number of features to fetch.
   * @property {string} [geometryName] Geometry name to use in a BBOX filter.
   * @property {Array<string>} [propertyNames] Optional list of property names to serialize.
   * @property {string} [viewParams] viewParams GeoServer vendor parameter.
   * @property {number} [startIndex] Start index to use for WFS paging. This is a
   * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services.
   * @property {number} [count] Number of features to retrieve when paging. This is a
   * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services. Please note that some
   * Web Feature Services have repurposed `maxfeatures` instead.
   * @property {import("../extent.js").Extent} [bbox] Extent to use for the BBOX filter.
   * @property {import("./filter/Filter.js").default} [filter] Filter condition. See
   * {@link module:ol/format/Filter} for more information.
   * @property {string} [resultType] Indicates what response should be returned,
   * E.g. `hits` only includes the `numberOfFeatures` attribute in the response and no features.
   */


  /**
   * @typedef {Object} WriteTransactionOptions
   * @property {string} featureNS The namespace URI used for features.
   * @property {string} featurePrefix The prefix for the feature namespace.
   * @property {string} featureType The feature type name.
   * @property {string} [srsName] SRS name. No srsName attribute will be set on
   * geometries when this is not provided.
   * @property {string} [handle] Handle.
   * @property {boolean} [hasZ] Must be set to true if the transaction is for
   * a 3D layer. This will allow the Z coordinate to be included in the transaction.
   * @property {Array<Object>} nativeElements Native elements. Currently not supported.
   * @property {import("./GMLBase.js").Options} [gmlOptions] GML options for the WFS transaction writer.
   * @property {string} [version='1.1.0'] WFS version to use for the transaction. Can be either `1.0.0` or `1.1.0`.
   */


  /**
   * Number of features; bounds/extent.
   * @typedef {Object} FeatureCollectionMetadata
   * @property {number} numberOfFeatures
   * @property {import("../extent.js").Extent} bounds
   */


  /**
   * Total deleted; total inserted; total updated; array of insert ids.
   * @typedef {Object} TransactionResponse
   * @property {number} totalDeleted
   * @property {number} totalInserted
   * @property {number} totalUpdated
   * @property {Array<string>} insertIds
   */


  /**
   * @type {string}
   */
  const FEATURE_PREFIX = 'feature';


  /**
   * @type {string}
   */
  const XMLNS = 'http://www.w3.org/2000/xmlns/';


  /**
   * @type {string}
   */
  const OGCNS = 'http://www.opengis.net/ogc';


  /**
   * @type {string}
   */
  const WFSNS = 'http://www.opengis.net/wfs';


  /**
   * @type {string}
   */
  const FESNS = 'http://www.opengis.net/fes';


  /**
   * @type {Object<string, string>}
   */
  const SCHEMA_LOCATIONS = {
    '1.1.0': 'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.1.0/wfs.xsd',
    '1.0.0': 'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.0.0/wfs.xsd'
  };


  /**
   * @const
   * @type {string}
   */
  const DEFAULT_VERSION = '1.1.0';


  /**
   * @classdesc
   * Feature format for reading and writing data in the WFS format.
   * By default, supports WFS version 1.1.0. You can pass a GML format
   * as option if you want to read a WFS that contains GML2 (WFS 1.0.0).
   * Also see {@link module:ol/format/GMLBase~GMLBase} which is used by this format.
   *
   * @api
   */
  class WFS extends XMLFeature {

    /**
     * @param {Options=} opt_options Optional configuration object.
     */
    constructor(opt_options) {
      super();

      const options = opt_options ? opt_options : {};

      /**
       * @private
       * @type {Array<string>|string|undefined}
       */
      this.featureType_ = options.featureType;

      /**
       * @private
       * @type {Object<string, string>|string|undefined}
       */
      this.featureNS_ = options.featureNS;

      /**
       * @private
       * @type {GMLBase}
       */
      this.gmlFormat_ = options.gmlFormat ?
        options.gmlFormat : new GML3();

      /**
       * @private
       * @type {string}
       */
      this.schemaLocation_ = options.schemaLocation ?
        options.schemaLocation : SCHEMA_LOCATIONS[DEFAULT_VERSION];
    }

    /**
     * @return {Array<string>|string|undefined} featureType
     */
    getFeatureType() {
      return this.featureType_;
    }

    /**
     * @param {Array<string>|string|undefined} featureType Feature type(s) to parse.
     */
    setFeatureType(featureType) {
      this.featureType_ = featureType;
    }

    /**
     * @inheritDoc
     */
    readFeaturesFromNode(node, opt_options) {
      /** @type {import("../xml.js").NodeStackItem} */
      const context = {
        node: node
      };
      assign(context, {
        'featureType': this.featureType_,
        'featureNS': this.featureNS_
      });

      assign(context, this.getReadOptions(node, opt_options ? opt_options : {}));
      const objectStack = [context];
      this.gmlFormat_.FEATURE_COLLECTION_PARSERS[GMLNS][
        'featureMember'] =
          makeArrayPusher(GMLBase.prototype.readFeaturesInternal);
      let features = pushParseAndPop([],
        this.gmlFormat_.FEATURE_COLLECTION_PARSERS, node,
        objectStack, this.gmlFormat_);
      if (!features) {
        features = [];
      }
      return features;
    }

    /**
     * Read transaction response of the source.
     *
     * @param {Document|Element|Object|string} source Source.
     * @return {TransactionResponse|undefined} Transaction response.
     * @api
     */
    readTransactionResponse(source) {
      if (!source) {
        return undefined;
      } else if (typeof source === 'string') {
        const doc = parse(source);
        return this.readTransactionResponseFromDocument(doc);
      } else if (isDocument(source)) {
        return this.readTransactionResponseFromDocument(
          /** @type {Document} */ (source));
      } else {
        return this.readTransactionResponseFromNode(/** @type {Element} */ (source));
      }
    }

    /**
     * Read feature collection metadata of the source.
     *
     * @param {Document|Element|Object|string} source Source.
     * @return {FeatureCollectionMetadata|undefined}
     *     FeatureCollection metadata.
     * @api
     */
    readFeatureCollectionMetadata(source) {
      if (!source) {
        return undefined;
      } else if (typeof source === 'string') {
        const doc = parse(source);
        return this.readFeatureCollectionMetadataFromDocument(doc);
      } else if (isDocument(source)) {
        return this.readFeatureCollectionMetadataFromDocument(
          /** @type {Document} */ (source));
      } else {
        return this.readFeatureCollectionMetadataFromNode(
          /** @type {Element} */ (source));
      }
    }

    /**
     * @param {Document} doc Document.
     * @return {FeatureCollectionMetadata|undefined}
     *     FeatureCollection metadata.
     */
    readFeatureCollectionMetadataFromDocument(doc) {
      for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {
        if (n.nodeType == Node.ELEMENT_NODE) {
          return this.readFeatureCollectionMetadataFromNode(/** @type {Element} */ (n));
        }
      }
      return undefined;
    }

    /**
     * @param {Element} node Node.
     * @return {FeatureCollectionMetadata|undefined}
     *     FeatureCollection metadata.
     */
    readFeatureCollectionMetadataFromNode(node) {
      const result = {};
      const value = readNonNegativeIntegerString(
        node.getAttribute('numberOfFeatures'));
      result['numberOfFeatures'] = value;
      return pushParseAndPop(
        /** @type {FeatureCollectionMetadata} */ (result),
        FEATURE_COLLECTION_PARSERS, node, [], this.gmlFormat_);
    }

    /**
     * @param {Document} doc Document.
     * @return {TransactionResponse|undefined} Transaction response.
     */
    readTransactionResponseFromDocument(doc) {
      for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {
        if (n.nodeType == Node.ELEMENT_NODE) {
          return this.readTransactionResponseFromNode(/** @type {Element} */ (n));
        }
      }
      return undefined;
    }

    /**
     * @param {Element} node Node.
     * @return {TransactionResponse|undefined} Transaction response.
     */
    readTransactionResponseFromNode(node) {
      return pushParseAndPop(
        /** @type {TransactionResponse} */({}),
        TRANSACTION_RESPONSE_PARSERS, node, []);
    }

    /**
     * Encode format as WFS `GetFeature` and return the Node.
     *
     * @param {WriteGetFeatureOptions} options Options.
     * @return {Node} Result.
     * @api
     */
    writeGetFeature(options) {
      const node = createElementNS(WFSNS, 'GetFeature');
      node.setAttribute('service', 'WFS');
      node.setAttribute('version', '1.1.0');
      let filter;
      if (options) {
        if (options.handle) {
          node.setAttribute('handle', options.handle);
        }
        if (options.outputFormat) {
          node.setAttribute('outputFormat', options.outputFormat);
        }
        if (options.maxFeatures !== undefined) {
          node.setAttribute('maxFeatures', String(options.maxFeatures));
        }
        if (options.resultType) {
          node.setAttribute('resultType', options.resultType);
        }
        if (options.startIndex !== undefined) {
          node.setAttribute('startIndex', String(options.startIndex));
        }
        if (options.count !== undefined) {
          node.setAttribute('count', String(options.count));
        }
        if (options.viewParams !== undefined) {
          node.setAttribute('viewParams', options.viewParams);
        }
        filter = options.filter;
        if (options.bbox) {
          assert(options.geometryName,
            12); // `options.geometryName` must also be provided when `options.bbox` is set
          const bbox = bbox$1(
            /** @type {string} */ (options.geometryName), options.bbox, options.srsName);
          if (filter) {
            // if bbox and filter are both set, combine the two into a single filter
            filter = and(filter, bbox);
          } else {
            filter = bbox;
          }
        }
      }
      node.setAttributeNS(XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', this.schemaLocation_);
      /** @type {import("../xml.js").NodeStackItem} */
      const context = {
        node: node
      };
      assign(context, {
        'srsName': options.srsName,
        'featureNS': options.featureNS ? options.featureNS : this.featureNS_,
        'featurePrefix': options.featurePrefix,
        'geometryName': options.geometryName,
        'filter': filter,
        'propertyNames': options.propertyNames ? options.propertyNames : []
      });

      assert(Array.isArray(options.featureTypes),
        11); // `options.featureTypes` should be an Array
      writeGetFeature(node, /** @type {!Array<string>} */ (options.featureTypes), [context]);
      return node;
    }

    /**
     * Encode format as WFS `Transaction` and return the Node.
     *
     * @param {Array<import("../Feature.js").default>} inserts The features to insert.
     * @param {Array<import("../Feature.js").default>} updates The features to update.
     * @param {Array<import("../Feature.js").default>} deletes The features to delete.
     * @param {WriteTransactionOptions} options Write options.
     * @return {Node} Result.
     * @api
     */
    writeTransaction(inserts, updates, deletes, options) {
      const objectStack = [];
      const node = createElementNS(WFSNS, 'Transaction');
      const version = options.version ? options.version : DEFAULT_VERSION;
      const gmlVersion = version === '1.0.0' ? 2 : 3;
      node.setAttribute('service', 'WFS');
      node.setAttribute('version', version);
      let baseObj;
      /** @type {import("../xml.js").NodeStackItem} */
      let obj;
      if (options) {
        baseObj = options.gmlOptions ? options.gmlOptions : {};
        if (options.handle) {
          node.setAttribute('handle', options.handle);
        }
      }
      const schemaLocation = SCHEMA_LOCATIONS[version];
      node.setAttributeNS(XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', schemaLocation);
      const featurePrefix = options.featurePrefix ? options.featurePrefix : FEATURE_PREFIX;
      if (inserts) {
        obj = assign({node: node}, {'featureNS': options.featureNS,
          'featureType': options.featureType, 'featurePrefix': featurePrefix,
          'gmlVersion': gmlVersion, 'hasZ': options.hasZ, 'srsName': options.srsName});
        assign(obj, baseObj);
        pushSerializeAndPop(obj,
          TRANSACTION_SERIALIZERS,
          makeSimpleNodeFactory('Insert'), inserts,
          objectStack);
      }
      if (updates) {
        obj = assign({node: node}, {'featureNS': options.featureNS,
          'featureType': options.featureType, 'featurePrefix': featurePrefix,
          'gmlVersion': gmlVersion, 'hasZ': options.hasZ, 'srsName': options.srsName});
        assign(obj, baseObj);
        pushSerializeAndPop(obj,
          TRANSACTION_SERIALIZERS,
          makeSimpleNodeFactory('Update'), updates,
          objectStack);
      }
      if (deletes) {
        pushSerializeAndPop({node: node, 'featureNS': options.featureNS,
          'featureType': options.featureType, 'featurePrefix': featurePrefix,
          'gmlVersion': gmlVersion, 'srsName': options.srsName},
        TRANSACTION_SERIALIZERS,
        makeSimpleNodeFactory('Delete'), deletes,
        objectStack);
      }
      if (options.nativeElements) {
        pushSerializeAndPop({node: node, 'featureNS': options.featureNS,
          'featureType': options.featureType, 'featurePrefix': featurePrefix,
          'gmlVersion': gmlVersion, 'srsName': options.srsName},
        TRANSACTION_SERIALIZERS,
        makeSimpleNodeFactory('Native'), options.nativeElements,
        objectStack);
      }
      return node;
    }

    /**
     * @inheritDoc
     */
    readProjectionFromDocument(doc) {
      for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {
        if (n.nodeType == Node.ELEMENT_NODE) {
          return this.readProjectionFromNode(n);
        }
      }
      return null;
    }

    /**
     * @inheritDoc
     */
    readProjectionFromNode(node) {
      if (node.firstElementChild &&
          node.firstElementChild.firstElementChild) {
        node = node.firstElementChild.firstElementChild;
        for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
          if (!(n.childNodes.length === 0 ||
              (n.childNodes.length === 1 &&
              n.firstChild.nodeType === 3))) {
            const objectStack = [{}];
            this.gmlFormat_.readGeometryElement(n, objectStack);
            return get$2(objectStack.pop().srsName);
          }
        }
      }

      return null;
    }
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Transaction Summary.
   */
  function readTransactionSummary(node, objectStack) {
    return pushParseAndPop(
      {}, TRANSACTION_SUMMARY_PARSERS, node, objectStack);
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const OGC_FID_PARSERS = {
    'http://www.opengis.net/ogc': {
      'FeatureId': makeArrayPusher(function(node, objectStack) {
        return node.getAttribute('fid');
      })
    }
  };


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function fidParser(node, objectStack) {
    parseNode(OGC_FID_PARSERS, node, objectStack);
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const INSERT_RESULTS_PARSERS = {
    'http://www.opengis.net/wfs': {
      'Feature': fidParser
    }
  };


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Array<string>|undefined} Insert results.
   */
  function readInsertResults(node, objectStack) {
    return pushParseAndPop(
      [], INSERT_RESULTS_PARSERS, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {import("../Feature.js").default} feature Feature.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeFeature(node, feature, objectStack) {
    const context = objectStack[objectStack.length - 1];
    const featureType = context['featureType'];
    const featureNS = context['featureNS'];
    const gmlVersion = context['gmlVersion'];
    const child = createElementNS(featureNS, featureType);
    node.appendChild(child);
    if (gmlVersion === 2) {
      GML2.prototype.writeFeatureElement(child, feature, objectStack);
    } else {
      GML3.prototype.writeFeatureElement(child, feature, objectStack);
    }
  }


  /**
   * @param {Node} node Node.
   * @param {number|string} fid Feature identifier.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeOgcFidFilter(node, fid, objectStack) {
    const filter = createElementNS(OGCNS, 'Filter');
    const child = createElementNS(OGCNS, 'FeatureId');
    filter.appendChild(child);
    child.setAttribute('fid', /** @type {string} */ (fid));
    node.appendChild(filter);
  }


  /**
   * @param {string|undefined} featurePrefix The prefix of the feature.
   * @param {string} featureType The type of the feature.
   * @returns {string} The value of the typeName property.
   */
  function getTypeName(featurePrefix, featureType) {
    featurePrefix = featurePrefix ? featurePrefix : FEATURE_PREFIX;
    const prefix = featurePrefix + ':';
    // The featureType already contains the prefix.
    if (featureType.indexOf(prefix) === 0) {
      return featureType;
    } else {
      return prefix + featureType;
    }
  }


  /**
   * @param {Element} node Node.
   * @param {import("../Feature.js").default} feature Feature.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeDelete(node, feature, objectStack) {
    const context = objectStack[objectStack.length - 1];
    assert(feature.getId() !== undefined, 26); // Features must have an id set
    const featureType = context['featureType'];
    const featurePrefix = context['featurePrefix'];
    const featureNS = context['featureNS'];
    const typeName = getTypeName(featurePrefix, featureType);
    node.setAttribute('typeName', typeName);
    node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);
    const fid = feature.getId();
    if (fid !== undefined) {
      writeOgcFidFilter(node, fid);
    }
  }


  /**
   * @param {Element} node Node.
   * @param {import("../Feature.js").default} feature Feature.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeUpdate(node, feature, objectStack) {
    const context = objectStack[objectStack.length - 1];
    assert(feature.getId() !== undefined, 27); // Features must have an id set
    const featureType = context['featureType'];
    const featurePrefix = context['featurePrefix'];
    const featureNS = context['featureNS'];
    const typeName = getTypeName(featurePrefix, featureType);
    const geometryName = feature.getGeometryName();
    node.setAttribute('typeName', typeName);
    node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);
    const fid = feature.getId();
    if (fid !== undefined) {
      const keys = feature.getKeys();
      const values = [];
      for (let i = 0, ii = keys.length; i < ii; i++) {
        const value = feature.get(keys[i]);
        if (value !== undefined) {
          let name = keys[i];
          if (value && typeof /** @type {?} */ (value).getSimplifiedGeometry === 'function') {
            name = geometryName;
          }
          values.push({name: name, value: value});
        }
      }
      pushSerializeAndPop(/** @type {import("../xml.js").NodeStackItem} */ (
        {'gmlVersion': context['gmlVersion'], node: node,
          'hasZ': context['hasZ'], 'srsName': context['srsName']}),
      TRANSACTION_SERIALIZERS,
      makeSimpleNodeFactory('Property'), values,
      objectStack);
      writeOgcFidFilter(node, fid);
    }
  }


  /**
   * @param {Node} node Node.
   * @param {Object} pair Property name and value.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeProperty(node, pair, objectStack) {
    const name = createElementNS(WFSNS, 'Name');
    const context = objectStack[objectStack.length - 1];
    const gmlVersion = context['gmlVersion'];
    node.appendChild(name);
    writeStringTextNode(name, pair.name);
    if (pair.value !== undefined && pair.value !== null) {
      const value = createElementNS(WFSNS, 'Value');
      node.appendChild(value);
      if (pair.value && typeof /** @type {?} */ (pair.value).getSimplifiedGeometry === 'function') {
        if (gmlVersion === 2) {
          GML2.prototype.writeGeometryElement(value,
            pair.value, objectStack);
        } else {
          GML3.prototype.writeGeometryElement(value,
            pair.value, objectStack);
        }
      } else {
        writeStringTextNode(value, pair.value);
      }
    }
  }


  /**
   * @param {Element} node Node.
   * @param {{vendorId: string, safeToIgnore: boolean, value: string}} nativeElement The native element.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeNative(node, nativeElement, objectStack) {
    if (nativeElement.vendorId) {
      node.setAttribute('vendorId', nativeElement.vendorId);
    }
    if (nativeElement.safeToIgnore !== undefined) {
      node.setAttribute('safeToIgnore', String(nativeElement.safeToIgnore));
    }
    if (nativeElement.value !== undefined) {
      writeStringTextNode(node, nativeElement.value);
    }
  }


  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const GETFEATURE_SERIALIZERS = {
    'http://www.opengis.net/wfs': {
      'Query': makeChildAppender(writeQuery)
    },
    'http://www.opengis.net/ogc': {
      'During': makeChildAppender(writeDuringFilter),
      'And': makeChildAppender(writeLogicalFilter),
      'Or': makeChildAppender(writeLogicalFilter),
      'Not': makeChildAppender(writeNotFilter),
      'BBOX': makeChildAppender(writeBboxFilter),
      'Contains': makeChildAppender(writeContainsFilter),
      'Intersects': makeChildAppender(writeIntersectsFilter),
      'Within': makeChildAppender(writeWithinFilter),
      'PropertyIsEqualTo': makeChildAppender(writeComparisonFilter),
      'PropertyIsNotEqualTo': makeChildAppender(writeComparisonFilter),
      'PropertyIsLessThan': makeChildAppender(writeComparisonFilter),
      'PropertyIsLessThanOrEqualTo': makeChildAppender(writeComparisonFilter),
      'PropertyIsGreaterThan': makeChildAppender(writeComparisonFilter),
      'PropertyIsGreaterThanOrEqualTo': makeChildAppender(writeComparisonFilter),
      'PropertyIsNull': makeChildAppender(writeIsNullFilter),
      'PropertyIsBetween': makeChildAppender(writeIsBetweenFilter),
      'PropertyIsLike': makeChildAppender(writeIsLikeFilter)
    }
  };


  /**
   * @param {Element} node Node.
   * @param {string} featureType Feature type.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeQuery(node, featureType, objectStack) {
    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const featurePrefix = context['featurePrefix'];
    const featureNS = context['featureNS'];
    const propertyNames = context['propertyNames'];
    const srsName = context['srsName'];
    let typeName;
    // If feature prefix is not defined, we must not use the default prefix.
    if (featurePrefix) {
      typeName = getTypeName(featurePrefix, featureType);
    } else {
      typeName = featureType;
    }
    node.setAttribute('typeName', typeName);
    if (srsName) {
      node.setAttribute('srsName', srsName);
    }
    if (featureNS) {
      node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);
    }
    const item = /** @type {import("../xml.js").NodeStackItem} */ (assign({}, context));
    item.node = node;
    pushSerializeAndPop(item,
      QUERY_SERIALIZERS,
      makeSimpleNodeFactory('PropertyName'), propertyNames,
      objectStack);
    const filter = context['filter'];
    if (filter) {
      const child = createElementNS(OGCNS, 'Filter');
      node.appendChild(child);
      writeFilterCondition(child, filter, objectStack);
    }
  }


  /**
   * @param {Node} node Node.
   * @param {import("./filter/Filter.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeFilterCondition(node, filter, objectStack) {
    /** @type {import("../xml.js").NodeStackItem} */
    const item = {node: node};
    pushSerializeAndPop(item,
      GETFEATURE_SERIALIZERS,
      makeSimpleNodeFactory(filter.getTagName()),
      [filter], objectStack);
  }


  /**
   * @param {Node} node Node.
   * @param {import("./filter/Bbox.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeBboxFilter(node, filter, objectStack) {
    const context = objectStack[objectStack.length - 1];
    context['srsName'] = filter.srsName;

    writeOgcPropertyName(node, filter.geometryName);
    GML3.prototype.writeGeometryElement(node, filter.extent, objectStack);
  }


  /**
   * @param {Node} node Node.
   * @param {import("./filter/Contains.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeContainsFilter(node, filter, objectStack) {
    const context = objectStack[objectStack.length - 1];
    context['srsName'] = filter.srsName;

    writeOgcPropertyName(node, filter.geometryName);
    GML3.prototype.writeGeometryElement(node, filter.geometry, objectStack);
  }


  /**
   * @param {Node} node Node.
   * @param {import("./filter/Intersects.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeIntersectsFilter(node, filter, objectStack) {
    const context = objectStack[objectStack.length - 1];
    context['srsName'] = filter.srsName;

    writeOgcPropertyName(node, filter.geometryName);
    GML3.prototype.writeGeometryElement(node, filter.geometry, objectStack);
  }


  /**
   * @param {Node} node Node.
   * @param {import("./filter/Within.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeWithinFilter(node, filter, objectStack) {
    const context = objectStack[objectStack.length - 1];
    context['srsName'] = filter.srsName;

    writeOgcPropertyName(node, filter.geometryName);
    GML3.prototype.writeGeometryElement(node, filter.geometry, objectStack);
  }


  /**
   * @param {Node} node Node.
   * @param {import("./filter/During.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeDuringFilter(node, filter, objectStack) {

    const valueReference = createElementNS(FESNS, 'ValueReference');
    writeStringTextNode(valueReference, filter.propertyName);
    node.appendChild(valueReference);

    const timePeriod = createElementNS(GMLNS, 'TimePeriod');

    node.appendChild(timePeriod);

    const begin = createElementNS(GMLNS, 'begin');
    timePeriod.appendChild(begin);
    writeTimeInstant(begin, filter.begin);

    const end = createElementNS(GMLNS, 'end');
    timePeriod.appendChild(end);
    writeTimeInstant(end, filter.end);
  }


  /**
   * @param {Node} node Node.
   * @param {import("./filter/LogicalNary.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeLogicalFilter(node, filter, objectStack) {
    /** @type {import("../xml.js").NodeStackItem} */
    const item = {node: node};
    const conditions = filter.conditions;
    for (let i = 0, ii = conditions.length; i < ii; ++i) {
      const condition = conditions[i];
      pushSerializeAndPop(item,
        GETFEATURE_SERIALIZERS,
        makeSimpleNodeFactory(condition.getTagName()),
        [condition], objectStack);
    }
  }


  /**
   * @param {Node} node Node.
   * @param {import("./filter/Not.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeNotFilter(node, filter, objectStack) {
    /** @type {import("../xml.js").NodeStackItem} */
    const item = {node: node};
    const condition = filter.condition;
    pushSerializeAndPop(item,
      GETFEATURE_SERIALIZERS,
      makeSimpleNodeFactory(condition.getTagName()),
      [condition], objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {import("./filter/ComparisonBinary.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeComparisonFilter(node, filter, objectStack) {
    if (filter.matchCase !== undefined) {
      node.setAttribute('matchCase', filter.matchCase.toString());
    }
    writeOgcPropertyName(node, filter.propertyName);
    writeOgcLiteral(node, '' + filter.expression);
  }


  /**
   * @param {Node} node Node.
   * @param {import("./filter/IsNull.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeIsNullFilter(node, filter, objectStack) {
    writeOgcPropertyName(node, filter.propertyName);
  }


  /**
   * @param {Node} node Node.
   * @param {import("./filter/IsBetween.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeIsBetweenFilter(node, filter, objectStack) {
    writeOgcPropertyName(node, filter.propertyName);

    const lowerBoundary = createElementNS(OGCNS, 'LowerBoundary');
    node.appendChild(lowerBoundary);
    writeOgcLiteral(lowerBoundary, '' + filter.lowerBoundary);

    const upperBoundary = createElementNS(OGCNS, 'UpperBoundary');
    node.appendChild(upperBoundary);
    writeOgcLiteral(upperBoundary, '' + filter.upperBoundary);
  }


  /**
   * @param {Element} node Node.
   * @param {import("./filter/IsLike.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeIsLikeFilter(node, filter, objectStack) {
    node.setAttribute('wildCard', filter.wildCard);
    node.setAttribute('singleChar', filter.singleChar);
    node.setAttribute('escapeChar', filter.escapeChar);
    if (filter.matchCase !== undefined) {
      node.setAttribute('matchCase', filter.matchCase.toString());
    }
    writeOgcPropertyName(node, filter.propertyName);
    writeOgcLiteral(node, '' + filter.pattern);
  }


  /**
   * @param {string} tagName Tag name.
   * @param {Node} node Node.
   * @param {string} value Value.
   */
  function writeOgcExpression(tagName, node, value) {
    const property = createElementNS(OGCNS, tagName);
    writeStringTextNode(property, value);
    node.appendChild(property);
  }


  /**
   * @param {Node} node Node.
   * @param {string} value PropertyName value.
   */
  function writeOgcPropertyName(node, value) {
    writeOgcExpression('PropertyName', node, value);
  }


  /**
   * @param {Node} node Node.
   * @param {string} value PropertyName value.
   */
  function writeOgcLiteral(node, value) {
    writeOgcExpression('Literal', node, value);
  }


  /**
   * @param {Node} node Node.
   * @param {string} time PropertyName value.
   */
  function writeTimeInstant(node, time) {
    const timeInstant = createElementNS(GMLNS, 'TimeInstant');
    node.appendChild(timeInstant);

    const timePosition = createElementNS(GMLNS, 'timePosition');
    timeInstant.appendChild(timePosition);
    writeStringTextNode(timePosition, time);
  }


  /**
   * @param {Node} node Node.
   * @param {Array<string>} featureTypes Feature types.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeGetFeature(node, featureTypes, objectStack) {
    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const item = /** @type {import("../xml.js").NodeStackItem} */ (assign({}, context));
    item.node = node;
    pushSerializeAndPop(item,
      GETFEATURE_SERIALIZERS,
      makeSimpleNodeFactory('Query'), featureTypes,
      objectStack);
  }

  /**
   * @module ol/format/WKT
   */


  /**
   * Geometry constructors
   * @enum {function (new:import("../geom/Geometry.js").default, Array, GeometryLayout)}
   */
  const GeometryConstructor = {
    'POINT': Point,
    'LINESTRING': LineString,
    'POLYGON': Polygon,
    'MULTIPOINT': MultiPoint,
    'MULTILINESTRING': MultiLineString,
    'MULTIPOLYGON': MultiPolygon
  };


  /**
   * @typedef {Object} Options
   * @property {boolean} [splitCollection=false] Whether to split GeometryCollections into
   * multiple features on reading.
   */

  /**
   * @typedef {Object} Token
   * @property {number} type
   * @property {number|string} [value]
   * @property {number} position
   */

  /**
   * @const
   * @type {string}
   */
  const EMPTY = 'EMPTY';


  /**
   * @const
   * @type {string}
   */
  const Z = 'Z';


  /**
   * @const
   * @type {string}
   */
  const M = 'M';


  /**
   * @const
   * @type {string}
   */
  const ZM = 'ZM';


  /**
   * @const
   * @enum {number}
   */
  const TokenType = {
    TEXT: 1,
    LEFT_PAREN: 2,
    RIGHT_PAREN: 3,
    NUMBER: 4,
    COMMA: 5,
    EOF: 6
  };

  /**
   * @const
   * @type {Object<string, string>}
   */
  const WKTGeometryType = {};
  for (const type in GeometryType) {
    WKTGeometryType[type] = GeometryType[type].toUpperCase();
  }


  /**
   * Class to tokenize a WKT string.
   */
  class Lexer {

    /**
     * @param {string} wkt WKT string.
     */
    constructor(wkt) {

      /**
       * @type {string}
       */
      this.wkt = wkt;

      /**
       * @type {number}
       * @private
       */
      this.index_ = -1;
    }

    /**
     * @param {string} c Character.
     * @return {boolean} Whether the character is alphabetic.
     * @private
     */
    isAlpha_(c) {
      return c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z';
    }

    /**
     * @param {string} c Character.
     * @param {boolean=} opt_decimal Whether the string number
     *     contains a dot, i.e. is a decimal number.
     * @return {boolean} Whether the character is numeric.
     * @private
     */
    isNumeric_(c, opt_decimal) {
      const decimal = opt_decimal !== undefined ? opt_decimal : false;
      return c >= '0' && c <= '9' || c == '.' && !decimal;
    }

    /**
     * @param {string} c Character.
     * @return {boolean} Whether the character is whitespace.
     * @private
     */
    isWhiteSpace_(c) {
      return c == ' ' || c == '\t' || c == '\r' || c == '\n';
    }

    /**
     * @return {string} Next string character.
     * @private
     */
    nextChar_() {
      return this.wkt.charAt(++this.index_);
    }

    /**
     * Fetch and return the next token.
     * @return {!Token} Next string token.
     */
    nextToken() {
      const c = this.nextChar_();
      const position = this.index_;
      /** @type {number|string} */
      let value = c;
      let type;

      if (c == '(') {
        type = TokenType.LEFT_PAREN;
      } else if (c == ',') {
        type = TokenType.COMMA;
      } else if (c == ')') {
        type = TokenType.RIGHT_PAREN;
      } else if (this.isNumeric_(c) || c == '-') {
        type = TokenType.NUMBER;
        value = this.readNumber_();
      } else if (this.isAlpha_(c)) {
        type = TokenType.TEXT;
        value = this.readText_();
      } else if (this.isWhiteSpace_(c)) {
        return this.nextToken();
      } else if (c === '') {
        type = TokenType.EOF;
      } else {
        throw new Error('Unexpected character: ' + c);
      }

      return {position: position, value: value, type: type};
    }

    /**
     * @return {number} Numeric token value.
     * @private
     */
    readNumber_() {
      let c;
      const index = this.index_;
      let decimal = false;
      let scientificNotation = false;
      do {
        if (c == '.') {
          decimal = true;
        } else if (c == 'e' || c == 'E') {
          scientificNotation = true;
        }
        c = this.nextChar_();
      } while (
        this.isNumeric_(c, decimal) ||
          // if we haven't detected a scientific number before, 'e' or 'E'
          // hint that we should continue to read
          !scientificNotation && (c == 'e' || c == 'E') ||
          // once we know that we have a scientific number, both '-' and '+'
          // are allowed
          scientificNotation && (c == '-' || c == '+')
      );
      return parseFloat(this.wkt.substring(index, this.index_--));
    }

    /**
     * @return {string} String token value.
     * @private
     */
    readText_() {
      let c;
      const index = this.index_;
      do {
        c = this.nextChar_();
      } while (this.isAlpha_(c));
      return this.wkt.substring(index, this.index_--).toUpperCase();
    }
  }

  /**
   * Class to parse the tokens from the WKT string.
   */
  class Parser {

    /**
     * @param {Lexer} lexer The lexer.
     */
    constructor(lexer) {

      /**
       * @type {Lexer}
       * @private
       */
      this.lexer_ = lexer;

      /**
       * @type {Token}
       * @private
       */
      this.token_;

      /**
       * @type {GeometryLayout}
       * @private
       */
      this.layout_ = GeometryLayout.XY;
    }

    /**
     * Fetch the next token form the lexer and replace the active token.
     * @private
     */
    consume_() {
      this.token_ = this.lexer_.nextToken();
    }

    /**
     * Tests if the given type matches the type of the current token.
     * @param {TokenType} type Token type.
     * @return {boolean} Whether the token matches the given type.
     */
    isTokenType(type) {
      const isMatch = this.token_.type == type;
      return isMatch;
    }

    /**
     * If the given type matches the current token, consume it.
     * @param {TokenType} type Token type.
     * @return {boolean} Whether the token matches the given type.
     */
    match(type) {
      const isMatch = this.isTokenType(type);
      if (isMatch) {
        this.consume_();
      }
      return isMatch;
    }

    /**
     * Try to parse the tokens provided by the lexer.
     * @return {import("../geom/Geometry.js").default} The geometry.
     */
    parse() {
      this.consume_();
      const geometry = this.parseGeometry_();
      return geometry;
    }

    /**
     * Try to parse the dimensional info.
     * @return {GeometryLayout} The layout.
     * @private
     */
    parseGeometryLayout_() {
      let layout = GeometryLayout.XY;
      const dimToken = this.token_;
      if (this.isTokenType(TokenType.TEXT)) {
        const dimInfo = dimToken.value;
        if (dimInfo === Z) {
          layout = GeometryLayout.XYZ;
        } else if (dimInfo === M) {
          layout = GeometryLayout.XYM;
        } else if (dimInfo === ZM) {
          layout = GeometryLayout.XYZM;
        }
        if (layout !== GeometryLayout.XY) {
          this.consume_();
        }
      }
      return layout;
    }

    /**
     * @return {!Array<import("../geom/Geometry.js").default>} A collection of geometries.
     * @private
     */
    parseGeometryCollectionText_() {
      if (this.match(TokenType.LEFT_PAREN)) {
        const geometries = [];
        do {
          geometries.push(this.parseGeometry_());
        } while (this.match(TokenType.COMMA));
        if (this.match(TokenType.RIGHT_PAREN)) {
          return geometries;
        }
      } else if (this.isEmptyGeometry_()) {
        return [];
      }
      throw new Error(this.formatErrorMessage_());
    }

    /**
     * @return {Array<number>} All values in a point.
     * @private
     */
    parsePointText_() {
      if (this.match(TokenType.LEFT_PAREN)) {
        const coordinates = this.parsePoint_();
        if (this.match(TokenType.RIGHT_PAREN)) {
          return coordinates;
        }
      } else if (this.isEmptyGeometry_()) {
        return null;
      }
      throw new Error(this.formatErrorMessage_());
    }

    /**
     * @return {!Array<!Array<number>>} All points in a linestring.
     * @private
     */
    parseLineStringText_() {
      if (this.match(TokenType.LEFT_PAREN)) {
        const coordinates = this.parsePointList_();
        if (this.match(TokenType.RIGHT_PAREN)) {
          return coordinates;
        }
      } else if (this.isEmptyGeometry_()) {
        return [];
      }
      throw new Error(this.formatErrorMessage_());
    }

    /**
     * @return {!Array<!Array<!Array<number>>>} All points in a polygon.
     * @private
     */
    parsePolygonText_() {
      if (this.match(TokenType.LEFT_PAREN)) {
        const coordinates = this.parseLineStringTextList_();
        if (this.match(TokenType.RIGHT_PAREN)) {
          return coordinates;
        }
      } else if (this.isEmptyGeometry_()) {
        return [];
      }
      throw new Error(this.formatErrorMessage_());
    }

    /**
     * @return {!Array<!Array<number>>} All points in a multipoint.
     * @private
     */
    parseMultiPointText_() {
      if (this.match(TokenType.LEFT_PAREN)) {
        let coordinates;
        if (this.token_.type == TokenType.LEFT_PAREN) {
          coordinates = this.parsePointTextList_();
        } else {
          coordinates = this.parsePointList_();
        }
        if (this.match(TokenType.RIGHT_PAREN)) {
          return coordinates;
        }
      } else if (this.isEmptyGeometry_()) {
        return [];
      }
      throw new Error(this.formatErrorMessage_());
    }

    /**
     * @return {!Array<!Array<!Array<number>>>} All linestring points
     *                                          in a multilinestring.
     * @private
     */
    parseMultiLineStringText_() {
      if (this.match(TokenType.LEFT_PAREN)) {
        const coordinates = this.parseLineStringTextList_();
        if (this.match(TokenType.RIGHT_PAREN)) {
          return coordinates;
        }
      } else if (this.isEmptyGeometry_()) {
        return [];
      }
      throw new Error(this.formatErrorMessage_());
    }

    /**
     * @return {!Array<!Array<!Array<!Array<number>>>>} All polygon points in a multipolygon.
     * @private
     */
    parseMultiPolygonText_() {
      if (this.match(TokenType.LEFT_PAREN)) {
        const coordinates = this.parsePolygonTextList_();
        if (this.match(TokenType.RIGHT_PAREN)) {
          return coordinates;
        }
      } else if (this.isEmptyGeometry_()) {
        return [];
      }
      throw new Error(this.formatErrorMessage_());
    }

    /**
     * @return {!Array<number>} A point.
     * @private
     */
    parsePoint_() {
      const coordinates = [];
      const dimensions = this.layout_.length;
      for (let i = 0; i < dimensions; ++i) {
        const token = this.token_;
        if (this.match(TokenType.NUMBER)) {
          coordinates.push(/** @type {number} */ (token.value));
        } else {
          break;
        }
      }
      if (coordinates.length == dimensions) {
        return coordinates;
      }
      throw new Error(this.formatErrorMessage_());
    }

    /**
     * @return {!Array<!Array<number>>} An array of points.
     * @private
     */
    parsePointList_() {
      const coordinates = [this.parsePoint_()];
      while (this.match(TokenType.COMMA)) {
        coordinates.push(this.parsePoint_());
      }
      return coordinates;
    }

    /**
     * @return {!Array<!Array<number>>} An array of points.
     * @private
     */
    parsePointTextList_() {
      const coordinates = [this.parsePointText_()];
      while (this.match(TokenType.COMMA)) {
        coordinates.push(this.parsePointText_());
      }
      return coordinates;
    }

    /**
     * @return {!Array<!Array<!Array<number>>>} An array of points.
     * @private
     */
    parseLineStringTextList_() {
      const coordinates = [this.parseLineStringText_()];
      while (this.match(TokenType.COMMA)) {
        coordinates.push(this.parseLineStringText_());
      }
      return coordinates;
    }

    /**
     * @return {!Array<!Array<!Array<!Array<number>>>>} An array of points.
     * @private
     */
    parsePolygonTextList_() {
      const coordinates = [this.parsePolygonText_()];
      while (this.match(TokenType.COMMA)) {
        coordinates.push(this.parsePolygonText_());
      }
      return coordinates;
    }

    /**
     * @return {boolean} Whether the token implies an empty geometry.
     * @private
     */
    isEmptyGeometry_() {
      const isEmpty = this.isTokenType(TokenType.TEXT) &&
          this.token_.value == EMPTY;
      if (isEmpty) {
        this.consume_();
      }
      return isEmpty;
    }

    /**
     * Create an error message for an unexpected token error.
     * @return {string} Error message.
     * @private
     */
    formatErrorMessage_() {
      return 'Unexpected `' + this.token_.value + '` at position ' +
          this.token_.position + ' in `' + this.lexer_.wkt + '`';
    }

    /**
     * @return {!import("../geom/Geometry.js").default} The geometry.
     * @private
     */
    parseGeometry_() {
      const token = this.token_;
      if (this.match(TokenType.TEXT)) {
        const geomType = token.value;
        this.layout_ = this.parseGeometryLayout_();
        if (geomType == 'GEOMETRYCOLLECTION') {
          const geometries = this.parseGeometryCollectionText_();
          return new GeometryCollection(geometries);
        } else {
          const ctor = GeometryConstructor[geomType];
          if (!ctor) {
            throw new Error('Invalid geometry type: ' + geomType);
          }

          let coordinates;
          switch (geomType) {
            case 'POINT': {
              coordinates = this.parsePointText_();
              break;
            }
            case 'LINESTRING': {
              coordinates = this.parseLineStringText_();
              break;
            }
            case 'POLYGON': {
              coordinates = this.parsePolygonText_();
              break;
            }
            case 'MULTIPOINT': {
              coordinates = this.parseMultiPointText_();
              break;
            }
            case 'MULTILINESTRING': {
              coordinates = this.parseMultiLineStringText_();
              break;
            }
            case 'MULTIPOLYGON': {
              coordinates = this.parseMultiPolygonText_();
              break;
            }
            default: {
              throw new Error('Invalid geometry type: ' + geomType);
            }
          }

          if (!coordinates) {
            if (ctor === GeometryConstructor['POINT']) {
              coordinates = [NaN, NaN];
            } else {
              coordinates = [];
            }
          }
          return new ctor(coordinates, this.layout_);
        }
      }
      throw new Error(this.formatErrorMessage_());
    }
  }


  /**
   * @classdesc
   * Geometry format for reading and writing data in the `WellKnownText` (WKT)
   * format.
   *
   * @api
   */
  class WKT extends TextFeature {

    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {
      super();

      const options = opt_options ? opt_options : {};


      /**
       * Split GeometryCollection into multiple features.
       * @type {boolean}
       * @private
       */
      this.splitCollection_ = options.splitCollection !== undefined ?
        options.splitCollection : false;

    }

    /**
     * Parse a WKT string.
     * @param {string} wkt WKT string.
     * @return {import("../geom/Geometry.js").default|undefined}
     *     The geometry created.
     * @private
     */
    parse_(wkt) {
      const lexer = new Lexer(wkt);
      const parser = new Parser(lexer);
      return parser.parse();
    }

    /**
     * @inheritDoc
     */
    readFeatureFromText(text, opt_options) {
      const geom = this.readGeometryFromText(text, opt_options);
      if (geom) {
        const feature = new Feature();
        feature.setGeometry(geom);
        return feature;
      }
      return null;
    }

    /**
     * @inheritDoc
     */
    readFeaturesFromText(text, opt_options) {
      let geometries = [];
      const geometry = this.readGeometryFromText(text, opt_options);
      if (this.splitCollection_ &&
          geometry.getType() == GeometryType.GEOMETRY_COLLECTION) {
        geometries = (/** @type {GeometryCollection} */ (geometry))
          .getGeometriesArray();
      } else {
        geometries = [geometry];
      }
      const features = [];
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        const feature = new Feature();
        feature.setGeometry(geometries[i]);
        features.push(feature);
      }
      return features;
    }

    /**
     * @inheritDoc
     */
    readGeometryFromText(text, opt_options) {
      const geometry = this.parse_(text);
      if (geometry) {
        return transformGeometryWithOptions(geometry, false, opt_options);
      } else {
        return null;
      }
    }

    /**
     * @inheritDoc
     */
    writeFeatureText(feature, opt_options) {
      const geometry = feature.getGeometry();
      if (geometry) {
        return this.writeGeometryText(geometry, opt_options);
      }
      return '';
    }

    /**
     * @inheritDoc
     */
    writeFeaturesText(features, opt_options) {
      if (features.length == 1) {
        return this.writeFeatureText(features[0], opt_options);
      }
      const geometries = [];
      for (let i = 0, ii = features.length; i < ii; ++i) {
        geometries.push(features[i].getGeometry());
      }
      const collection = new GeometryCollection(geometries);
      return this.writeGeometryText(collection, opt_options);
    }

    /**
     * @inheritDoc
     */
    writeGeometryText(geometry, opt_options) {
      return encode(transformGeometryWithOptions(geometry, true, opt_options));
    }
  }


  /**
   * @param {Point} geom Point geometry.
   * @return {string} Coordinates part of Point as WKT.
   */
  function encodePointGeometry(geom) {
    const coordinates = geom.getCoordinates();
    if (coordinates.length === 0) {
      return '';
    }
    return coordinates.join(' ');
  }


  /**
   * @param {MultiPoint} geom MultiPoint geometry.
   * @return {string} Coordinates part of MultiPoint as WKT.
   */
  function encodeMultiPointGeometry(geom) {
    const array = [];
    const components = geom.getPoints();
    for (let i = 0, ii = components.length; i < ii; ++i) {
      array.push('(' + encodePointGeometry(components[i]) + ')');
    }
    return array.join(',');
  }


  /**
   * @param {GeometryCollection} geom GeometryCollection geometry.
   * @return {string} Coordinates part of GeometryCollection as WKT.
   */
  function encodeGeometryCollectionGeometry(geom) {
    const array = [];
    const geoms = geom.getGeometries();
    for (let i = 0, ii = geoms.length; i < ii; ++i) {
      array.push(encode(geoms[i]));
    }
    return array.join(',');
  }


  /**
   * @param {LineString|import("../geom/LinearRing.js").default} geom LineString geometry.
   * @return {string} Coordinates part of LineString as WKT.
   */
  function encodeLineStringGeometry(geom) {
    const coordinates = geom.getCoordinates();
    const array = [];
    for (let i = 0, ii = coordinates.length; i < ii; ++i) {
      array.push(coordinates[i].join(' '));
    }
    return array.join(',');
  }


  /**
   * @param {MultiLineString} geom MultiLineString geometry.
   * @return {string} Coordinates part of MultiLineString as WKT.
   */
  function encodeMultiLineStringGeometry(geom) {
    const array = [];
    const components = geom.getLineStrings();
    for (let i = 0, ii = components.length; i < ii; ++i) {
      array.push('(' + encodeLineStringGeometry(components[i]) + ')');
    }
    return array.join(',');
  }


  /**
   * @param {Polygon} geom Polygon geometry.
   * @return {string} Coordinates part of Polygon as WKT.
   */
  function encodePolygonGeometry(geom) {
    const array = [];
    const rings = geom.getLinearRings();
    for (let i = 0, ii = rings.length; i < ii; ++i) {
      array.push('(' + encodeLineStringGeometry(rings[i]) + ')');
    }
    return array.join(',');
  }


  /**
   * @param {MultiPolygon} geom MultiPolygon geometry.
   * @return {string} Coordinates part of MultiPolygon as WKT.
   */
  function encodeMultiPolygonGeometry(geom) {
    const array = [];
    const components = geom.getPolygons();
    for (let i = 0, ii = components.length; i < ii; ++i) {
      array.push('(' + encodePolygonGeometry(components[i]) + ')');
    }
    return array.join(',');
  }

  /**
   * @param {import("../geom/SimpleGeometry.js").default} geom SimpleGeometry geometry.
   * @return {string} Potential dimensional information for WKT type.
   */
  function encodeGeometryLayout(geom) {
    const layout = geom.getLayout();
    let dimInfo = '';
    if (layout === GeometryLayout.XYZ || layout === GeometryLayout.XYZM) {
      dimInfo += Z;
    }
    if (layout === GeometryLayout.XYM || layout === GeometryLayout.XYZM) {
      dimInfo += M;
    }
    return dimInfo;
  }


  /**
   * @const
   * @type {Object<string, function(import("../geom/Geometry.js").default): string>}
   */
  const GeometryEncoder = {
    'Point': encodePointGeometry,
    'LineString': encodeLineStringGeometry,
    'Polygon': encodePolygonGeometry,
    'MultiPoint': encodeMultiPointGeometry,
    'MultiLineString': encodeMultiLineStringGeometry,
    'MultiPolygon': encodeMultiPolygonGeometry,
    'GeometryCollection': encodeGeometryCollectionGeometry
  };


  /**
   * Encode a geometry as WKT.
   * @param {!import("../geom/Geometry.js").default} geom The geometry to encode.
   * @return {string} WKT string for the geometry.
   */
  function encode(geom) {
    let type = geom.getType();
    const geometryEncoder = GeometryEncoder[type];
    const enc = geometryEncoder(geom);
    type = type.toUpperCase();
    if (typeof /** @type {?} */ (geom).getFlatCoordinates === 'function') {
      const dimInfo = encodeGeometryLayout(/** @type {import("../geom/SimpleGeometry.js").default} */ (geom));
      if (dimInfo.length > 0) {
        type += ' ' + dimInfo;
      }
    }
    if (enc.length === 0) {
      return type + ' ' + EMPTY;
    }
    return type + '(' + enc + ')';
  }

  /**
   * @module ol/format/WMSCapabilities
   */


  /**
   * @const
   * @type {Array<null|string>}
   */
  const NAMESPACE_URIS$3 = [
    null,
    'http://www.opengis.net/wms'
  ];


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const PARSERS$1 = makeStructureNS(
    NAMESPACE_URIS$3, {
      'Service': makeObjectPropertySetter(readService),
      'Capability': makeObjectPropertySetter(readCapability)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const CAPABILITY_PARSERS = makeStructureNS(
    NAMESPACE_URIS$3, {
      'Request': makeObjectPropertySetter(readRequest),
      'Exception': makeObjectPropertySetter(readException),
      'Layer': makeObjectPropertySetter(readCapabilityLayer)
    });


  /**
   * @classdesc
   * Format for reading WMS capabilities data
   *
   * @api
   */
  class WMSCapabilities extends XML {
    constructor() {
      super();

      /**
       * @type {string|undefined}
       */
      this.version = undefined;
    }

    /**
     * @inheritDoc
     */
    readFromDocument(doc) {
      for (let n = doc.firstChild; n; n = n.nextSibling) {
        if (n.nodeType == Node.ELEMENT_NODE) {
          return this.readFromNode(n);
        }
      }
      return null;
    }

    /**
     * @inheritDoc
     */
    readFromNode(node) {
      this.version = node.getAttribute('version').trim();
      const wmsCapabilityObject = pushParseAndPop({
        'version': this.version
      }, PARSERS$1, node, []);
      return wmsCapabilityObject ? wmsCapabilityObject : null;
    }
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const SERVICE_PARSERS = makeStructureNS(
    NAMESPACE_URIS$3, {
      'Name': makeObjectPropertySetter(readString),
      'Title': makeObjectPropertySetter(readString),
      'Abstract': makeObjectPropertySetter(readString),
      'KeywordList': makeObjectPropertySetter(readKeywordList),
      'OnlineResource': makeObjectPropertySetter(readHref),
      'ContactInformation': makeObjectPropertySetter(readContactInformation),
      'Fees': makeObjectPropertySetter(readString),
      'AccessConstraints': makeObjectPropertySetter(readString),
      'LayerLimit': makeObjectPropertySetter(readNonNegativeInteger),
      'MaxWidth': makeObjectPropertySetter(readNonNegativeInteger),
      'MaxHeight': makeObjectPropertySetter(readNonNegativeInteger)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const CONTACT_INFORMATION_PARSERS = makeStructureNS(
    NAMESPACE_URIS$3, {
      'ContactPersonPrimary': makeObjectPropertySetter(readContactPersonPrimary),
      'ContactPosition': makeObjectPropertySetter(readString),
      'ContactAddress': makeObjectPropertySetter(readContactAddress),
      'ContactVoiceTelephone': makeObjectPropertySetter(readString),
      'ContactFacsimileTelephone': makeObjectPropertySetter(readString),
      'ContactElectronicMailAddress': makeObjectPropertySetter(readString)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const CONTACT_PERSON_PARSERS = makeStructureNS(
    NAMESPACE_URIS$3, {
      'ContactPerson': makeObjectPropertySetter(readString),
      'ContactOrganization': makeObjectPropertySetter(readString)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const CONTACT_ADDRESS_PARSERS = makeStructureNS(
    NAMESPACE_URIS$3, {
      'AddressType': makeObjectPropertySetter(readString),
      'Address': makeObjectPropertySetter(readString),
      'City': makeObjectPropertySetter(readString),
      'StateOrProvince': makeObjectPropertySetter(readString),
      'PostCode': makeObjectPropertySetter(readString),
      'Country': makeObjectPropertySetter(readString)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const EXCEPTION_PARSERS = makeStructureNS(
    NAMESPACE_URIS$3, {
      'Format': makeArrayPusher(readString)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const LAYER_PARSERS = makeStructureNS(
    NAMESPACE_URIS$3, {
      'Name': makeObjectPropertySetter(readString),
      'Title': makeObjectPropertySetter(readString),
      'Abstract': makeObjectPropertySetter(readString),
      'KeywordList': makeObjectPropertySetter(readKeywordList),
      'CRS': makeObjectPropertyPusher(readString),
      'EX_GeographicBoundingBox': makeObjectPropertySetter(readEXGeographicBoundingBox),
      'BoundingBox': makeObjectPropertyPusher(readBoundingBox),
      'Dimension': makeObjectPropertyPusher(readDimension),
      'Attribution': makeObjectPropertySetter(readAttribution),
      'AuthorityURL': makeObjectPropertyPusher(readAuthorityURL),
      'Identifier': makeObjectPropertyPusher(readString),
      'MetadataURL': makeObjectPropertyPusher(readMetadataURL),
      'DataURL': makeObjectPropertyPusher(readFormatOnlineresource),
      'FeatureListURL': makeObjectPropertyPusher(readFormatOnlineresource),
      'Style': makeObjectPropertyPusher(readStyle$1),
      'MinScaleDenominator': makeObjectPropertySetter(readDecimal),
      'MaxScaleDenominator': makeObjectPropertySetter(readDecimal),
      'Layer': makeObjectPropertyPusher(readLayer)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const ATTRIBUTION_PARSERS = makeStructureNS(
    NAMESPACE_URIS$3, {
      'Title': makeObjectPropertySetter(readString),
      'OnlineResource': makeObjectPropertySetter(readHref),
      'LogoURL': makeObjectPropertySetter(readSizedFormatOnlineresource)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const EX_GEOGRAPHIC_BOUNDING_BOX_PARSERS =
      makeStructureNS(NAMESPACE_URIS$3, {
        'westBoundLongitude': makeObjectPropertySetter(readDecimal),
        'eastBoundLongitude': makeObjectPropertySetter(readDecimal),
        'southBoundLatitude': makeObjectPropertySetter(readDecimal),
        'northBoundLatitude': makeObjectPropertySetter(readDecimal)
      });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const REQUEST_PARSERS = makeStructureNS(
    NAMESPACE_URIS$3, {
      'GetCapabilities': makeObjectPropertySetter(readOperationType),
      'GetMap': makeObjectPropertySetter(readOperationType),
      'GetFeatureInfo': makeObjectPropertySetter(readOperationType)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const OPERATIONTYPE_PARSERS = makeStructureNS(
    NAMESPACE_URIS$3, {
      'Format': makeObjectPropertyPusher(readString),
      'DCPType': makeObjectPropertyPusher(readDCPType)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const DCPTYPE_PARSERS = makeStructureNS(
    NAMESPACE_URIS$3, {
      'HTTP': makeObjectPropertySetter(readHTTP)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const HTTP_PARSERS$1 = makeStructureNS(
    NAMESPACE_URIS$3, {
      'Get': makeObjectPropertySetter(readFormatOnlineresource),
      'Post': makeObjectPropertySetter(readFormatOnlineresource)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const STYLE_PARSERS$1 = makeStructureNS(
    NAMESPACE_URIS$3, {
      'Name': makeObjectPropertySetter(readString),
      'Title': makeObjectPropertySetter(readString),
      'Abstract': makeObjectPropertySetter(readString),
      'LegendURL': makeObjectPropertyPusher(readSizedFormatOnlineresource),
      'StyleSheetURL': makeObjectPropertySetter(readFormatOnlineresource),
      'StyleURL': makeObjectPropertySetter(readFormatOnlineresource)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const FORMAT_ONLINERESOURCE_PARSERS =
      makeStructureNS(NAMESPACE_URIS$3, {
        'Format': makeObjectPropertySetter(readString),
        'OnlineResource': makeObjectPropertySetter(readHref)
      });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const KEYWORDLIST_PARSERS = makeStructureNS(
    NAMESPACE_URIS$3, {
      'Keyword': makeArrayPusher(readString)
    });


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Attribution object.
   */
  function readAttribution(node, objectStack) {
    return pushParseAndPop({}, ATTRIBUTION_PARSERS, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object} Bounding box object.
   */
  function readBoundingBox(node, objectStack) {
    const extent = [
      readDecimalString(node.getAttribute('minx')),
      readDecimalString(node.getAttribute('miny')),
      readDecimalString(node.getAttribute('maxx')),
      readDecimalString(node.getAttribute('maxy'))
    ];

    const resolutions = [
      readDecimalString(node.getAttribute('resx')),
      readDecimalString(node.getAttribute('resy'))
    ];

    return {
      'crs': node.getAttribute('CRS'),
      'extent': extent,
      'res': resolutions
    };
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {import("../extent.js").Extent|undefined} Bounding box object.
   */
  function readEXGeographicBoundingBox(node, objectStack) {
    const geographicBoundingBox = pushParseAndPop(
      {},
      EX_GEOGRAPHIC_BOUNDING_BOX_PARSERS,
      node, objectStack);
    if (!geographicBoundingBox) {
      return undefined;
    }
    const westBoundLongitude = /** @type {number|undefined} */
          (geographicBoundingBox['westBoundLongitude']);
    const southBoundLatitude = /** @type {number|undefined} */
          (geographicBoundingBox['southBoundLatitude']);
    const eastBoundLongitude = /** @type {number|undefined} */
          (geographicBoundingBox['eastBoundLongitude']);
    const northBoundLatitude = /** @type {number|undefined} */
          (geographicBoundingBox['northBoundLatitude']);
    if (westBoundLongitude === undefined || southBoundLatitude === undefined ||
          eastBoundLongitude === undefined || northBoundLatitude === undefined) {
      return undefined;
    }
    return [
      westBoundLongitude, southBoundLatitude,
      eastBoundLongitude, northBoundLatitude
    ];
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Capability object.
   */
  function readCapability(node, objectStack) {
    return pushParseAndPop({}, CAPABILITY_PARSERS, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Service object.
   */
  function readService(node, objectStack) {
    return pushParseAndPop({}, SERVICE_PARSERS, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Contact information object.
   */
  function readContactInformation(node, objectStack) {
    return pushParseAndPop({}, CONTACT_INFORMATION_PARSERS, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Contact person object.
   */
  function readContactPersonPrimary(node, objectStack) {
    return pushParseAndPop({}, CONTACT_PERSON_PARSERS, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Contact address object.
   */
  function readContactAddress(node, objectStack) {
    return pushParseAndPop({}, CONTACT_ADDRESS_PARSERS, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Array<string>|undefined} Format array.
   */
  function readException(node, objectStack) {
    return pushParseAndPop([], EXCEPTION_PARSERS, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Layer object.
   */
  function readCapabilityLayer(node, objectStack) {
    return pushParseAndPop({}, LAYER_PARSERS, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Layer object.
   */
  function readLayer(node, objectStack) {
    const parentLayerObject = /**  @type {!Object<string,*>} */ (objectStack[objectStack.length - 1]);

    const layerObject = pushParseAndPop({}, LAYER_PARSERS, node, objectStack);

    if (!layerObject) {
      return undefined;
    }
    let queryable = readBooleanString(node.getAttribute('queryable'));
    if (queryable === undefined) {
      queryable = parentLayerObject['queryable'];
    }
    layerObject['queryable'] = queryable !== undefined ? queryable : false;

    let cascaded = readNonNegativeIntegerString(
      node.getAttribute('cascaded'));
    if (cascaded === undefined) {
      cascaded = parentLayerObject['cascaded'];
    }
    layerObject['cascaded'] = cascaded;

    let opaque = readBooleanString(node.getAttribute('opaque'));
    if (opaque === undefined) {
      opaque = parentLayerObject['opaque'];
    }
    layerObject['opaque'] = opaque !== undefined ? opaque : false;

    let noSubsets = readBooleanString(node.getAttribute('noSubsets'));
    if (noSubsets === undefined) {
      noSubsets = parentLayerObject['noSubsets'];
    }
    layerObject['noSubsets'] = noSubsets !== undefined ? noSubsets : false;

    let fixedWidth = readDecimalString(node.getAttribute('fixedWidth'));
    if (!fixedWidth) {
      fixedWidth = parentLayerObject['fixedWidth'];
    }
    layerObject['fixedWidth'] = fixedWidth;

    let fixedHeight = readDecimalString(node.getAttribute('fixedHeight'));
    if (!fixedHeight) {
      fixedHeight = parentLayerObject['fixedHeight'];
    }
    layerObject['fixedHeight'] = fixedHeight;

    // See 7.2.4.8
    const addKeys = ['Style', 'CRS', 'AuthorityURL'];
    addKeys.forEach(function(key) {
      if (key in parentLayerObject) {
        const childValue = layerObject[key] || [];
        layerObject[key] = childValue.concat(parentLayerObject[key]);
      }
    });

    const replaceKeys = ['EX_GeographicBoundingBox', 'BoundingBox', 'Dimension',
      'Attribution', 'MinScaleDenominator', 'MaxScaleDenominator'];
    replaceKeys.forEach(function(key) {
      if (!(key in layerObject)) {
        const parentValue = parentLayerObject[key];
        layerObject[key] = parentValue;
      }
    });

    return layerObject;
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object} Dimension object.
   */
  function readDimension(node, objectStack) {
    const dimensionObject = {
      'name': node.getAttribute('name'),
      'units': node.getAttribute('units'),
      'unitSymbol': node.getAttribute('unitSymbol'),
      'default': node.getAttribute('default'),
      'multipleValues': readBooleanString(node.getAttribute('multipleValues')),
      'nearestValue': readBooleanString(node.getAttribute('nearestValue')),
      'current': readBooleanString(node.getAttribute('current')),
      'values': readString(node)
    };
    return dimensionObject;
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Online resource object.
   */
  function readFormatOnlineresource(node, objectStack) {
    return pushParseAndPop({}, FORMAT_ONLINERESOURCE_PARSERS, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Request object.
   */
  function readRequest(node, objectStack) {
    return pushParseAndPop({}, REQUEST_PARSERS, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} DCP type object.
   */
  function readDCPType(node, objectStack) {
    return pushParseAndPop({}, DCPTYPE_PARSERS, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} HTTP object.
   */
  function readHTTP(node, objectStack) {
    return pushParseAndPop({}, HTTP_PARSERS$1, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Operation type object.
   */
  function readOperationType(node, objectStack) {
    return pushParseAndPop({}, OPERATIONTYPE_PARSERS, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Online resource object.
   */
  function readSizedFormatOnlineresource(node, objectStack) {
    const formatOnlineresource = readFormatOnlineresource(node, objectStack);
    if (formatOnlineresource) {
      const size = [
        readNonNegativeIntegerString(node.getAttribute('width')),
        readNonNegativeIntegerString(node.getAttribute('height'))
      ];
      formatOnlineresource['size'] = size;
      return formatOnlineresource;
    }
    return undefined;
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Authority URL object.
   */
  function readAuthorityURL(node, objectStack) {
    const authorityObject = readFormatOnlineresource(node, objectStack);
    if (authorityObject) {
      authorityObject['name'] = node.getAttribute('name');
      return authorityObject;
    }
    return undefined;
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Metadata URL object.
   */
  function readMetadataURL(node, objectStack) {
    const metadataObject = readFormatOnlineresource(node, objectStack);
    if (metadataObject) {
      metadataObject['type'] = node.getAttribute('type');
      return metadataObject;
    }
    return undefined;
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Style object.
   */
  function readStyle$1(node, objectStack) {
    return pushParseAndPop({}, STYLE_PARSERS$1, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Array<string>|undefined} Keyword list.
   */
  function readKeywordList(node, objectStack) {
    return pushParseAndPop([], KEYWORDLIST_PARSERS, node, objectStack);
  }

  /**
   * @module ol/format/WMSGetFeatureInfo
   */


  /**
   * @typedef {Object} Options
   * @property {Array<string>} [layers] If set, only features of the given layers will be returned by the format when read.
   */


  /**
   * @const
   * @type {string}
   */
  const featureIdentifier = '_feature';


  /**
   * @const
   * @type {string}
   */
  const layerIdentifier = '_layer';


  /**
   * @classdesc
   * Format for reading WMSGetFeatureInfo format. It uses
   * {@link module:ol/format/GML2~GML2} to read features.
   *
   * @api
   */
  class WMSGetFeatureInfo extends XMLFeature {

    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {
      super();

      const options = opt_options ? opt_options : {};

      /**
       * @private
       * @type {string}
       */
      this.featureNS_ = 'http://mapserver.gis.umn.edu/mapserver';


      /**
       * @private
       * @type {GML2}
       */
      this.gmlFormat_ = new GML2();


      /**
       * @private
       * @type {Array<string>}
       */
      this.layers_ = options.layers ? options.layers : null;
    }

    /**
     * @return {Array<string>} layers
     */
    getLayers() {
      return this.layers_;
    }

    /**
     * @param {Array<string>} layers Layers to parse.
     */
    setLayers(layers) {
      this.layers_ = layers;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<import("../Feature.js").default>} Features.
     * @private
     */
    readFeatures_(node, objectStack) {
      node.setAttribute('namespaceURI', this.featureNS_);
      const localName = node.localName;
      /** @type {Array<import("../Feature.js").default>} */
      let features = [];
      if (node.childNodes.length === 0) {
        return features;
      }
      if (localName == 'msGMLOutput') {
        for (let i = 0, ii = node.childNodes.length; i < ii; i++) {
          const layer = node.childNodes[i];
          if (layer.nodeType !== Node.ELEMENT_NODE) {
            continue;
          }

          const layerElement = /** @type {Element} */ (layer);
          const context = objectStack[0];

          const toRemove = layerIdentifier;
          const layerName = layerElement.localName.replace(toRemove, '');

          if (this.layers_ && !includes(this.layers_, layerName)) {
            continue;
          }

          const featureType = layerName +
              featureIdentifier;

          context['featureType'] = featureType;
          context['featureNS'] = this.featureNS_;

          /** @type {Object<string, import("../xml.js").Parser>} */
          const parsers = {};
          parsers[featureType] = makeArrayPusher(
            this.gmlFormat_.readFeatureElement, this.gmlFormat_);
          const parsersNS = makeStructureNS(
            [context['featureNS'], null], parsers);
          layerElement.setAttribute('namespaceURI', this.featureNS_);
          const layerFeatures = pushParseAndPop(
            [], parsersNS, layerElement, objectStack, this.gmlFormat_);
          if (layerFeatures) {
            extend$1(features, layerFeatures);
          }
        }
      }
      if (localName == 'FeatureCollection') {
        const gmlFeatures = pushParseAndPop([],
          this.gmlFormat_.FEATURE_COLLECTION_PARSERS, node,
          [{}], this.gmlFormat_);
        if (gmlFeatures) {
          features = gmlFeatures;
        }
      }
      return features;
    }

    /**
     * @inheritDoc
     */
    readFeaturesFromNode(node, opt_options) {
      const options = {};
      if (opt_options) {
        assign(options, this.getReadOptions(node, opt_options));
      }
      return this.readFeatures_(node, [options]);
    }

  }

  /**
   * @module ol/format/WMTSCapabilities
   */


  /**
   * @const
   * @type {Array<null|string>}
   */
  const NAMESPACE_URIS$4 = [
    null,
    'http://www.opengis.net/wmts/1.0'
  ];


  /**
   * @const
   * @type {Array<null|string>}
   */
  const OWS_NAMESPACE_URIS = [
    null,
    'http://www.opengis.net/ows/1.1'
  ];


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const PARSERS$2 = makeStructureNS(
    NAMESPACE_URIS$4, {
      'Contents': makeObjectPropertySetter(readContents)
    });


  /**
   * @classdesc
   * Format for reading WMTS capabilities data.
   *
   * @api
   */
  class WMTSCapabilities extends XML {
    constructor() {
      super();

      /**
       * @type {OWS}
       * @private
       */
      this.owsParser_ = new OWS();
    }

    /**
     * @inheritDoc
     */
    readFromDocument(doc) {
      for (let n = doc.firstChild; n; n = n.nextSibling) {
        if (n.nodeType == Node.ELEMENT_NODE) {
          return this.readFromNode(n);
        }
      }
      return null;
    }

    /**
     * @inheritDoc
     */
    readFromNode(node) {
      const version = node.getAttribute('version').trim();
      let WMTSCapabilityObject = this.owsParser_.readFromNode(node);
      if (!WMTSCapabilityObject) {
        return null;
      }
      WMTSCapabilityObject['version'] = version;
      WMTSCapabilityObject = pushParseAndPop(WMTSCapabilityObject, PARSERS$2, node, []);
      return WMTSCapabilityObject ? WMTSCapabilityObject : null;
    }
  }


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const CONTENTS_PARSERS = makeStructureNS(
    NAMESPACE_URIS$4, {
      'Layer': makeObjectPropertyPusher(readLayer$1),
      'TileMatrixSet': makeObjectPropertyPusher(readTileMatrixSet)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const LAYER_PARSERS$1 = makeStructureNS(
    NAMESPACE_URIS$4, {
      'Style': makeObjectPropertyPusher(readStyle$2),
      'Format': makeObjectPropertyPusher(readString),
      'TileMatrixSetLink': makeObjectPropertyPusher(readTileMatrixSetLink),
      'Dimension': makeObjectPropertyPusher(readDimensions),
      'ResourceURL': makeObjectPropertyPusher(readResourceUrl)
    }, makeStructureNS(OWS_NAMESPACE_URIS, {
      'Title': makeObjectPropertySetter(readString),
      'Abstract': makeObjectPropertySetter(readString),
      'WGS84BoundingBox': makeObjectPropertySetter(readWgs84BoundingBox),
      'Identifier': makeObjectPropertySetter(readString)
    }));


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const STYLE_PARSERS$2 = makeStructureNS(
    NAMESPACE_URIS$4, {
      'LegendURL': makeObjectPropertyPusher(readLegendUrl)
    }, makeStructureNS(OWS_NAMESPACE_URIS, {
      'Title': makeObjectPropertySetter(readString),
      'Identifier': makeObjectPropertySetter(readString)
    }));


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const TMS_LINKS_PARSERS = makeStructureNS(
    NAMESPACE_URIS$4, {
      'TileMatrixSet': makeObjectPropertySetter(readString),
      'TileMatrixSetLimits': makeObjectPropertySetter(readTileMatrixLimitsList)
    });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const TMS_LIMITS_LIST_PARSERS = makeStructureNS(
    NAMESPACE_URIS$4, {
      'TileMatrixLimits': makeArrayPusher(readTileMatrixLimits)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const TMS_LIMITS_PARSERS = makeStructureNS(
    NAMESPACE_URIS$4, {
      'TileMatrix': makeObjectPropertySetter(readString),
      'MinTileRow': makeObjectPropertySetter(readNonNegativeInteger),
      'MaxTileRow': makeObjectPropertySetter(readNonNegativeInteger),
      'MinTileCol': makeObjectPropertySetter(readNonNegativeInteger),
      'MaxTileCol': makeObjectPropertySetter(readNonNegativeInteger)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const DIMENSION_PARSERS = makeStructureNS(
    NAMESPACE_URIS$4, {
      'Default': makeObjectPropertySetter(readString),
      'Value': makeObjectPropertyPusher(readString)
    }, makeStructureNS(OWS_NAMESPACE_URIS, {
      'Identifier': makeObjectPropertySetter(readString)
    }));


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const WGS84_BBOX_READERS = makeStructureNS(
    OWS_NAMESPACE_URIS, {
      'LowerCorner': makeArrayPusher(readCoordinates),
      'UpperCorner': makeArrayPusher(readCoordinates)
    });


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const TMS_PARSERS = makeStructureNS(
    NAMESPACE_URIS$4, {
      'WellKnownScaleSet': makeObjectPropertySetter(readString),
      'TileMatrix': makeObjectPropertyPusher(readTileMatrix)
    }, makeStructureNS(OWS_NAMESPACE_URIS, {
      'SupportedCRS': makeObjectPropertySetter(readString),
      'Identifier': makeObjectPropertySetter(readString)
    }));


  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const TM_PARSERS = makeStructureNS(
    NAMESPACE_URIS$4, {
      'TopLeftCorner': makeObjectPropertySetter(readCoordinates),
      'ScaleDenominator': makeObjectPropertySetter(readDecimal),
      'TileWidth': makeObjectPropertySetter(readNonNegativeInteger),
      'TileHeight': makeObjectPropertySetter(readNonNegativeInteger),
      'MatrixWidth': makeObjectPropertySetter(readNonNegativeInteger),
      'MatrixHeight': makeObjectPropertySetter(readNonNegativeInteger)
    }, makeStructureNS(OWS_NAMESPACE_URIS, {
      'Identifier': makeObjectPropertySetter(readString)
    }));


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Attribution object.
   */
  function readContents(node, objectStack) {
    return pushParseAndPop({}, CONTENTS_PARSERS, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Layers object.
   */
  function readLayer$1(node, objectStack) {
    return pushParseAndPop({}, LAYER_PARSERS$1, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Tile Matrix Set object.
   */
  function readTileMatrixSet(node, objectStack) {
    return pushParseAndPop({}, TMS_PARSERS, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Style object.
   */
  function readStyle$2(node, objectStack) {
    const style = pushParseAndPop({}, STYLE_PARSERS$2, node, objectStack);
    if (!style) {
      return undefined;
    }
    const isDefault = node.getAttribute('isDefault') === 'true';
    style['isDefault'] = isDefault;
    return style;

  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Tile Matrix Set Link object.
   */
  function readTileMatrixSetLink(node, objectStack) {
    return pushParseAndPop({}, TMS_LINKS_PARSERS, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Dimension object.
   */
  function readDimensions(node, objectStack) {
    return pushParseAndPop({}, DIMENSION_PARSERS, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Resource URL object.
   */
  function readResourceUrl(node, objectStack) {
    const format = node.getAttribute('format');
    const template = node.getAttribute('template');
    const resourceType = node.getAttribute('resourceType');
    const resource = {};
    if (format) {
      resource['format'] = format;
    }
    if (template) {
      resource['template'] = template;
    }
    if (resourceType) {
      resource['resourceType'] = resourceType;
    }
    return resource;
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} WGS84 BBox object.
   */
  function readWgs84BoundingBox(node, objectStack) {
    const coordinates = pushParseAndPop([], WGS84_BBOX_READERS, node, objectStack);
    if (coordinates.length != 2) {
      return undefined;
    }
    return boundingExtent(coordinates);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Legend object.
   */
  function readLegendUrl(node, objectStack) {
    const legend = {};
    legend['format'] = node.getAttribute('format');
    legend['href'] = readHref(node);
    return legend;
  }


  /**
   * @param {Node} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Coordinates object.
   */
  function readCoordinates(node, objectStack) {
    const coordinates = readString(node).split(/\s+/);
    if (!coordinates || coordinates.length != 2) {
      return undefined;
    }
    const x = +coordinates[0];
    const y = +coordinates[1];
    if (isNaN(x) || isNaN(y)) {
      return undefined;
    }
    return [x, y];
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} TileMatrix object.
   */
  function readTileMatrix(node, objectStack) {
    return pushParseAndPop({}, TM_PARSERS, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} TileMatrixSetLimits Object.
   */
  function readTileMatrixLimitsList(node, objectStack) {
    return pushParseAndPop([], TMS_LIMITS_LIST_PARSERS, node, objectStack);
  }


  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} TileMatrixLimits Array.
   */
  function readTileMatrixLimits(node, objectStack) {
    return pushParseAndPop({}, TMS_LIMITS_PARSERS, node, objectStack);
  }

  /**
   * @module ol/format
   */

  var format = /*#__PURE__*/Object.freeze({
    __proto__: null,
    EsriJSON: EsriJSON,
    GeoJSON: GeoJSON,
    GML: GML,
    GPX: GPX,
    IGC: IGC,
    IIIFInfo: IIIFInfo,
    KML: KML,
    MVT: MVT,
    OWS: OWS,
    Polyline: Polyline,
    TopoJSON: TopoJSON,
    WFS: WFS,
    WKT: WKT,
    WMSCapabilities: WMSCapabilities,
    WMSGetFeatureInfo: WMSGetFeatureInfo,
    WMTSCapabilities: WMTSCapabilities
  });

  /**
   * @module ol/geom
   */

  var geom = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Circle: Circle,
    Geometry: Geometry,
    GeometryCollection: GeometryCollection,
    LineString: LineString,
    MultiLineString: MultiLineString,
    MultiPoint: MultiPoint,
    MultiPolygon: MultiPolygon,
    Point: Point,
    Polygon: Polygon
  });

  /**
   * @module ol/webgl
   */


  /**
   * Constants taken from goog.webgl
   */

  /**
   * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing vertices data, such as
   * position, color, texture coordinate, etc. These vertices are then referenced by an index buffer
   * to be drawn on screen (see {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER}).
   * @const
   * @type {number}
   * @api
   */
  const ARRAY_BUFFER = 0x8892;


  /**
   * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing indices data.
   * Index buffers are essentially lists of references to vertices defined in a vertex buffer
   * (see {@link module:ol/webgl.ARRAY_BUFFER}), and define the primitives (triangles) to be drawn.
   * @const
   * @type {number}
   * @api
   */
  const ELEMENT_ARRAY_BUFFER = 0x8893;


  /**
   * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.
   * @const
   * @type {number}
   * @api
   */
  const STREAM_DRAW = 0x88E0;


  /**
   * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.
   * @const
   * @type {number}
   * @api
   */
  const STATIC_DRAW = 0x88E4;


  /**
   * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.
   * @const
   * @type {number}
   * @api
   */
  const DYNAMIC_DRAW = 0x88E8;


  /**
   * @const
   * @type {number}
   */
  const UNSIGNED_BYTE = 0x1401;


  /**
   * @const
   * @type {number}
   */
  const UNSIGNED_SHORT = 0x1403;


  /**
   * @const
   * @type {number}
   */
  const UNSIGNED_INT = 0x1405;


  /**
   * @const
   * @type {number}
   */
  const FLOAT = 0x1406;

  /** end of goog.webgl constants
   */


  /**
   * @const
   * @type {Array<string>}
   */
  const CONTEXT_IDS = [
    'experimental-webgl',
    'webgl',
    'webkit-3d',
    'moz-webgl'
  ];


  /**
   * @param {HTMLCanvasElement} canvas Canvas.
   * @param {Object=} opt_attributes Attributes.
   * @return {WebGLRenderingContext} WebGL rendering context.
   */
  function getContext(canvas, opt_attributes) {
    const ii = CONTEXT_IDS.length;
    for (let i = 0; i < ii; ++i) {
      try {
        const context = canvas.getContext(CONTEXT_IDS[i], opt_attributes);
        if (context) {
          return /** @type {!WebGLRenderingContext} */ (context);
        }
      } catch (e) {
        // pass
      }
    }
    return null;
  }

  /**
   * @type {Array<string>}
   */
  let supportedExtensions;

  /**
   * @return {Array<string>} List of supported WebGL extensions.
   */
  function getSupportedExtensions() {
    if (!supportedExtensions) {
      const canvas = document.createElement('canvas');
      const gl = getContext(canvas);
      if (gl) {
        supportedExtensions = gl.getSupportedExtensions();
      }
    }
    return supportedExtensions;
  }

  var webgl = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ARRAY_BUFFER: ARRAY_BUFFER,
    ELEMENT_ARRAY_BUFFER: ELEMENT_ARRAY_BUFFER,
    STREAM_DRAW: STREAM_DRAW,
    STATIC_DRAW: STATIC_DRAW,
    DYNAMIC_DRAW: DYNAMIC_DRAW,
    UNSIGNED_BYTE: UNSIGNED_BYTE,
    UNSIGNED_SHORT: UNSIGNED_SHORT,
    UNSIGNED_INT: UNSIGNED_INT,
    FLOAT: FLOAT,
    getContext: getContext,
    getSupportedExtensions: getSupportedExtensions
  });

  /**
   * @module ol/webgl/Buffer
   */

  /**
   * Used to describe the intended usage for the data: `STATIC_DRAW`, `STREAM_DRAW`
   * or `DYNAMIC_DRAW`.
   * @enum {number}
   */
  const BufferUsage = {
    STATIC_DRAW: STATIC_DRAW,
    STREAM_DRAW: STREAM_DRAW,
    DYNAMIC_DRAW: DYNAMIC_DRAW
  };

  /**
   * @classdesc
   * Object used to store an array of data as well as usage information for that data.
   * Stores typed arrays internally, either Float32Array or Uint16/32Array depending on
   * the buffer type (ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER) and available extensions.
   *
   * To populate the array, you can either use:
   * * A size using `#ofSize(buffer)`
   * * An `ArrayBuffer` object using `#fromArrayBuffer(buffer)`
   * * A plain array using `#fromArray(array)`
   *
   * Note:
   * See the documentation of [WebGLRenderingContext.bufferData](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)
   * for more info on buffer usage.
   * @api
   */
  class WebGLArrayBuffer {

    /**
     * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.
     * @param {number=} opt_usage Intended usage, either `STATIC_DRAW`, `STREAM_DRAW` or `DYNAMIC_DRAW`.
     * Default is `DYNAMIC_DRAW`.
     */
    constructor(type, opt_usage) {

      /**
       * @private
       * @type {Float32Array|Uint32Array}
       */
      this.array = null;

      /**
       * @private
       * @type {number}
       */
      this.type = type;

      assert(type === ARRAY_BUFFER || type === ELEMENT_ARRAY_BUFFER, 62);

      /**
       * @private
       * @type {number}
       */
      this.usage = opt_usage !== undefined ? opt_usage : BufferUsage.STATIC_DRAW;
    }

    /**
     * Populates the buffer with an array of the given size (all values will be zeroes).
     * @param {number} size Array size
     */
    ofSize(size) {
      this.array = new (getArrayClassForType(this.type))(size);
    }

    /**
     * Populates the buffer with an array of the given size (all values will be zeroes).
     * @param {Array<number>} array Numerical array
     */
    fromArray(array) {
      this.array = (getArrayClassForType(this.type)).from(array);
    }

    /**
     * Populates the buffer with a raw binary array buffer.
     * @param {ArrayBuffer} buffer Raw binary buffer to populate the array with. Note that this buffer must have been
     * initialized for the same typed array class.
     */
    fromArrayBuffer(buffer) {
      this.array = new (getArrayClassForType(this.type))(buffer);
    }

    /**
     * @return {number} Buffer type.
     */
    getType() {
      return this.type;
    }

    /**
     * @return {Float32Array|Uint32Array} Array.
     */
    getArray() {
      return this.array;
    }

    /**
     * @return {number} Usage.
     */
    getUsage() {
      return this.usage;
    }
  }

  /**
   * Returns a typed array constructor based on the given buffer type
   * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.
   * @returns {Float32ArrayConstructor|Uint32ArrayConstructor} The typed array class to use for this buffer.
   */
  function getArrayClassForType(type) {
    switch (type) {
      case ARRAY_BUFFER:
        return Float32Array;
      case ELEMENT_ARRAY_BUFFER:
        return Uint32Array;
      default:
        return Float32Array;
    }
  }

  /**
   * @module ol/webgl/ContextEventType
   */

  /**
   * @enum {string}
   */
  var ContextEventType = {
    LOST: 'webglcontextlost',
    RESTORED: 'webglcontextrestored'
  };

  /**
   * @module ol/vec/mat4
   */


  /**
   * @return {Array<number>} "4x4 matrix representing a 3D identity transform."
   */
  function create$1() {
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
  }


  /**
   * @param {Array<number>} mat4 Flattened 4x4 matrix receiving the result.
   * @param {import("../transform.js").Transform} transform Transformation matrix.
   * @return {Array<number>} "2D transformation matrix as flattened 4x4 matrix."
   */
  function fromTransform(mat4, transform) {
    mat4[0] = transform[0];
    mat4[1] = transform[1];
    mat4[4] = transform[2];
    mat4[5] = transform[3];
    mat4[12] = transform[4];
    mat4[13] = transform[5];
    return mat4;
  }

  /**
   * @module ol/webgl/PostProcessingPass
   */

  const DEFAULT_VERTEX_SHADER = `
  precision mediump float;
  
  attribute vec2 a_position;
  varying vec2 v_texCoord;
  varying vec2 v_screenCoord;
  
  uniform vec2 u_screenSize;
   
  void main() {
    v_texCoord = a_position * 0.5 + 0.5;
    v_screenCoord = v_texCoord * u_screenSize;
    gl_Position = vec4(a_position, 0.0, 1.0);
  }
`;

  const DEFAULT_FRAGMENT_SHADER = `
  precision mediump float;
   
  uniform sampler2D u_image;
   
  varying vec2 v_texCoord;
  varying vec2 v_screenCoord;
   
  void main() {
    gl_FragColor = texture2D(u_image, v_texCoord);
  }
`;

  /**
   * @typedef {Object} Options
   * @property {WebGLRenderingContext} webGlContext WebGL context; mandatory.
   * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than
   * the main canvas that will then be sampled up (useful for saving resource on blur steps).
   * @property {string} [vertexShader] Vertex shader source
   * @property {string} [fragmentShader] Fragment shader source
   * @property {Object.<string,import("./Helper").UniformValue>} [uniforms] Uniform definitions for the post process step
   */

  /**
   * @typedef {Object} UniformInternalDescription
   * @property {import("./Helper").UniformValue} value Value
   * @property {number} location Location
   * @property {WebGLTexture} [texture] Texture
   * @private
   */

  /**
   * @classdesc
   * This class is used to define Post Processing passes with custom shaders and uniforms.
   * This is used internally by {@link module:ol/webgl/Helper~WebGLHelper}.
   *
   * Please note that the final output on the DOM canvas is expected to have premultiplied alpha, which means that
   * a pixel which is 100% red with an opacity of 50% must have a color of (r=0.5, g=0, b=0, a=0.5).
   * Failing to provide pixel colors with premultiplied alpha will result in render anomalies.
   *
   * The default post-processing pass does *not* multiply color values with alpha value, it expects color values to be
   * premultiplied.
   *
   * Default shaders are shown hereafter:
   *
   * * Vertex shader:
   *
   *   ```
   *   precision mediump float;
   *
   *   attribute vec2 a_position;
   *   varying vec2 v_texCoord;
   *   varying vec2 v_screenCoord;
   *
   *   uniform vec2 u_screenSize;
   *
   *   void main() {
   *     v_texCoord = a_position * 0.5 + 0.5;
   *     v_screenCoord = v_texCoord * u_screenSize;
   *     gl_Position = vec4(a_position, 0.0, 1.0);
   *   }
   *   ```
   *
   * * Fragment shader:
   *
   *   ```
   *   precision mediump float;
   *
   *   uniform sampler2D u_image;
   *
   *   varying vec2 v_texCoord;
   *   varying vec2 v_screenCoord;
   *
   *   void main() {
   *     gl_FragColor = texture2D(u_image, v_texCoord);
   *   }
   *   ```
   *
   * @api
   */
  class WebGLPostProcessingPass {

    /**
     * @param {Options=} options Options.
     */
    constructor(options) {
      this.gl_ = options.webGlContext;
      const gl = this.gl_;

      this.scaleRatio_ = options.scaleRatio || 1;

      this.renderTargetTexture_ = gl.createTexture();
      this.renderTargetTextureSize_ = null;

      this.frameBuffer_ = gl.createFramebuffer();

      // compile the program for the frame buffer
      // TODO: make compilation errors show up
      const vertexShader = gl.createShader(gl.VERTEX_SHADER);
      gl.shaderSource(vertexShader, options.vertexShader || DEFAULT_VERTEX_SHADER);
      gl.compileShader(vertexShader);
      const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
      gl.shaderSource(fragmentShader, options.fragmentShader || DEFAULT_FRAGMENT_SHADER);
      gl.compileShader(fragmentShader);
      this.renderTargetProgram_ = gl.createProgram();
      gl.attachShader(this.renderTargetProgram_, vertexShader);
      gl.attachShader(this.renderTargetProgram_, fragmentShader);
      gl.linkProgram(this.renderTargetProgram_);

      // bind the vertices buffer for the frame buffer
      this.renderTargetVerticesBuffer_ = gl.createBuffer();
      const verticesArray = [
        -1, -1,
        1, -1,
        -1, 1,
        1, -1,
        1, 1,
        -1, 1
      ];
      gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(verticesArray), gl.STATIC_DRAW);

      this.renderTargetAttribLocation_ = gl.getAttribLocation(this.renderTargetProgram_, 'a_position');
      this.renderTargetUniformLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_screenSize');
      this.renderTargetTextureLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_image');

      /**
       * Holds info about custom uniforms used in the post processing pass
       * @type {Array<UniformInternalDescription>}
       * @private
       */
      this.uniforms_ = [];
      options.uniforms && Object.keys(options.uniforms).forEach(function(name) {
        this.uniforms_.push({
          value: options.uniforms[name],
          location: gl.getUniformLocation(this.renderTargetProgram_, name)
        });
      }.bind(this));
    }

    /**
     * Get the WebGL rendering context
     * @return {WebGLRenderingContext} The rendering context.
     * @api
     */
    getGL() {
      return this.gl_;
    }

    /**
     * Initialize the render target texture of the post process, make sure it is at the
     * right size and bind it as a render target for the next draw calls.
     * The last step to be initialized will be the one where the primitives are rendered.
     * @param {import("../PluggableMap.js").FrameState} frameState current frame state
     * @api
     */
    init(frameState) {
      const gl = this.getGL();
      const canvas = gl.canvas;
      const size = frameState.size;

      // rendering goes to my buffer
      gl.bindFramebuffer(gl.FRAMEBUFFER, this.getFrameBuffer());
      gl.viewport(0, 0, canvas.width * this.scaleRatio_, canvas.height * this.scaleRatio_);

      // if size has changed: adjust canvas & render target texture
      if (!this.renderTargetTextureSize_ ||
        this.renderTargetTextureSize_[0] !== size[0] || this.renderTargetTextureSize_[1] !== size[1]) {
        this.renderTargetTextureSize_ = size;

        // create a new texture
        const level = 0;
        const internalFormat = gl.RGBA;
        const border = 0;
        const format = gl.RGBA;
        const type = gl.UNSIGNED_BYTE;
        const data = null;
        gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);
        gl.texImage2D(gl.TEXTURE_2D, level, internalFormat,
          canvas.width * this.scaleRatio_, canvas.height * this.scaleRatio_, border,
          format, type, data);

        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);

        // bind the texture to the framebuffer
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.renderTargetTexture_, 0);
      }
    }

    /**
     * Render to the next postprocessing pass (or to the canvas if final pass).
     * @param {import("../PluggableMap.js").FrameState} frameState current frame state
     * @param {WebGLPostProcessingPass} [nextPass] Next pass, optional
     * @api
     */
    apply(frameState, nextPass) {
      const gl = this.getGL();
      const canvas = gl.canvas;

      gl.bindFramebuffer(gl.FRAMEBUFFER, nextPass ? nextPass.getFrameBuffer() : null);
      gl.activeTexture(gl.TEXTURE0);
      gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);

      // render the frame buffer to the canvas
      gl.clearColor(0.0, 0.0, 0.0, 0.0);
      gl.clear(gl.COLOR_BUFFER_BIT);
      gl.enable(gl.BLEND);
      gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
      gl.viewport(0, 0, canvas.width, canvas.height);

      gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);

      gl.useProgram(this.renderTargetProgram_);
      gl.enableVertexAttribArray(this.renderTargetAttribLocation_);
      gl.vertexAttribPointer(this.renderTargetAttribLocation_, 2, gl.FLOAT, false, 0, 0);
      gl.uniform2f(this.renderTargetUniformLocation_, canvas.width, canvas.height);
      gl.uniform1i(this.renderTargetTextureLocation_, 0);

      this.applyUniforms(frameState);

      gl.drawArrays(gl.TRIANGLES, 0, 6);
    }

    /**
     * @returns {WebGLFramebuffer} Frame buffer
     * @api
     */
    getFrameBuffer() {
      return this.frameBuffer_;
    }

    /**
     * Sets the custom uniforms based on what was given in the constructor.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @private
     */
    applyUniforms(frameState) {
      const gl = this.getGL();

      let value;
      let textureSlot = 1;
      this.uniforms_.forEach(function(uniform) {
        value = typeof uniform.value === 'function' ? uniform.value(frameState) : uniform.value;

        // apply value based on type
        if (value instanceof HTMLCanvasElement || value instanceof ImageData) {
          // create a texture & put data
          if (!uniform.texture) {
            uniform.texture = gl.createTexture();
          }
          gl.activeTexture(gl[`TEXTURE${textureSlot}`]);
          gl.bindTexture(gl.TEXTURE_2D, uniform.texture);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);

          if (value instanceof ImageData) {
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, value.width, value.height, 0,
              gl.UNSIGNED_BYTE, new Uint8Array(value.data));
          } else {
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, value);
          }

          // fill texture slots
          gl.uniform1i(uniform.location, textureSlot++);

        } else if (Array.isArray(value)) {
          switch (value.length) {
            case 2:
              gl.uniform2f(uniform.location, value[0], value[1]);
              return;
            case 3:
              gl.uniform3f(uniform.location, value[0], value[1], value[2]);
              return;
            case 4:
              gl.uniform4f(uniform.location, value[0], value[1], value[2], value[3]);
              return;
            default: return;
          }
        } else if (typeof value === 'number') {
          gl.uniform1f(uniform.location, value);
        }
      });
    }
  }

  /**
   * @module ol/webgl/Helper
   */

  /**
   * Uniform names used in the default shaders: `PROJECTION_MATRIX`, `OFFSET_SCALE_MATRIX`.
   * and `OFFSET_ROTATION_MATRIX`.
   * @enum {string}
   */
  const DefaultUniform = {
    PROJECTION_MATRIX: 'u_projectionMatrix',
    OFFSET_SCALE_MATRIX: 'u_offsetScaleMatrix',
    OFFSET_ROTATION_MATRIX: 'u_offsetRotateMatrix'
  };

  /**
   * Attribute names used in the default shaders: `POSITION`, `TEX_COORD`, `OPACITY`,
   * `ROTATE_WITH_VIEW`, `OFFSETS` and `COLOR`
   * @enum {string}
   */
  const DefaultAttrib = {
    POSITION: 'a_position',
    TEX_COORD: 'a_texCoord',
    OPACITY: 'a_opacity',
    ROTATE_WITH_VIEW: 'a_rotateWithView',
    OFFSETS: 'a_offsets',
    COLOR: 'a_color'
  };

  /**
   * @typedef {number|Array<number>|HTMLCanvasElement|HTMLImageElement|ImageData|import("../transform").Transform} UniformLiteralValue
   */

  /**
   * Uniform value can be a number, array of numbers (2 to 4), canvas element or a callback returning
   * one of the previous types.
   * @typedef {UniformLiteralValue|function(import("../PluggableMap.js").FrameState):UniformLiteralValue} UniformValue
   */

  /**
   * @typedef {Object} PostProcessesOptions
   * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than
   * the main canvas which will then be sampled up (useful for saving resource on blur steps).
   * @property {string} [vertexShader] Vertex shader source
   * @property {string} [fragmentShader] Fragment shader source
   * @property {Object.<string,UniformValue>} [uniforms] Uniform definitions for the post process step
   */

  /**
   * @typedef {Object} Options
   * @property {Object.<string,UniformValue>} [uniforms] Uniform definitions; property names must match the uniform
   * names in the provided or default shaders.
   * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions
   */

  /**
   * @typedef {Object} UniformInternalDescription
   * @property {string} name Name
   * @property {UniformValue=} value Value
   * @property {WebGLTexture} [texture] Texture
   * @private
   */

  /**
   * @classdesc
   * This class is intended to provide low-level functions related to WebGL rendering, so that accessing
   * directly the WebGL API should not be required anymore.
   *
   * Several operations are handled by the `WebGLHelper` class:
   *
   * ### Define custom shaders and uniforms
   *
   *   *Shaders* are low-level programs executed on the GPU and written in GLSL. There are two types of shaders:
   *
   *   Vertex shaders are used to manipulate the position and attribute of *vertices* of rendered primitives (ie. corners of a square).
   *   Outputs are:
   *
   *   * `gl_Position`: position of the vertex in screen space
   *
   *   * Varyings usually prefixed with `v_` are passed on to the fragment shader
   *
   *   Fragment shaders are used to control the actual color of the pixels drawn on screen. Their only output is `gl_FragColor`.
   *
   *   Both shaders can take *uniforms* or *attributes* as input. Attributes are explained later. Uniforms are common, read-only values that
   *   can be changed at every frame and can be of type float, arrays of float or images.
   *
   *   Shaders must be compiled and assembled into a program like so:
   *   ```js
   *   // here we simply create two shaders and assemble them in a program which is then used
   *   // for subsequent rendering calls
   *   const vertexShader = new WebGLVertex(VERTEX_SHADER);
   *   const fragmentShader = new WebGLFragment(FRAGMENT_SHADER);
   *   this.program = this.context.getProgram(fragmentShader, vertexShader);
   *   this.context.useProgram(this.program);
   *   ```
   *
   *   Uniforms are defined using the `uniforms` option and can either be explicit values or callbacks taking the frame state as argument.
   *   You can also change their value along the way like so:
   *   ```js
   *   this.context.setUniformFloatValue('u_value', valueAsNumber);
   *   ```
   *
   * ### Defining post processing passes
   *
   *   *Post processing* describes the act of rendering primitives to a texture, and then rendering this texture to the final canvas
   *   while applying special effects in screen space.
   *   Typical uses are: blurring, color manipulation, depth of field, filtering...
   *
   *   The `WebGLHelper` class offers the possibility to define post processes at creation time using the `postProcesses` option.
   *   A post process step accepts the following options:
   *
   *   * `fragmentShader` and `vertexShader`: text literals in GLSL language that will be compiled and used in the post processing step.
   *   * `uniforms`: uniforms can be defined for the post processing steps just like for the main render.
   *   * `scaleRatio`: allows using an intermediate texture smaller or higher than the final canvas in the post processing step.
   *     This is typically used in blur steps to reduce the performance overhead by using an already downsampled texture as input.
   *
   *   The {@link module:ol/webgl/PostProcessingPass~WebGLPostProcessingPass} class is used internally, refer to its documentation for more info.
   *
   * ### Binding WebGL buffers and flushing data into them
   *
   *   Data that must be passed to the GPU has to be transferred using {@link module:ol/webgl/Buffer~WebGLArrayBuffer} objects.
   *   A buffer has to be created only once, but must be bound every time the buffer content will be used for rendering.
   *   This is done using {@link bindBuffer}.
   *   When the buffer's array content has changed, the new data has to be flushed to the GPU memory; this is done using
   *   {@link flushBufferData}. Note: this operation is expensive and should be done as infrequently as possible.
   *
   *   When binding an array buffer, a `target` parameter must be given: it should be either {@link module:ol/webgl.ARRAY_BUFFER}
   *   (if the buffer contains vertices data) or {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER} (if the buffer contains indices data).
   *
   *   Examples below:
   *   ```js
   *   // at initialization phase
   *   this.verticesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);
   *   this.indicesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);
   *
   *   // when array values have changed
   *   this.context.flushBufferData(ARRAY_BUFFER, this.verticesBuffer);
   *   this.context.flushBufferData(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);
   *
   *   // at rendering phase
   *   this.context.bindBuffer(ARRAY_BUFFER, this.verticesBuffer);
   *   this.context.bindBuffer(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);
   *   ```
   *
   * ### Specifying attributes
   *
   *   The GPU only receives the data as arrays of numbers. These numbers must be handled differently depending on what it describes (position, texture coordinate...).
   *   Attributes are used to specify these uses. Use {@link enableAttributeArray} and either
   *   the default attribute names in {@link module:ol/webgl/Helper.DefaultAttrib} or custom ones.
   *
   *   Please note that you will have to specify the type and offset of the attributes in the data array. You can refer to the documentation of [WebGLRenderingContext.vertexAttribPointer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer) for more explanation.
   *   ```js
   *   // here we indicate that the data array has the following structure:
   *   // [posX, posY, offsetX, offsetY, texCoordU, texCoordV, posX, posY, ...]
   *   let bytesPerFloat = Float32Array.BYTES_PER_ELEMENT;
   *   this.context.enableAttributeArray(DefaultAttrib.POSITION, 2, FLOAT, bytesPerFloat * 6, 0);
   *   this.context.enableAttributeArray(DefaultAttrib.OFFSETS, 2, FLOAT, bytesPerFloat * 6, bytesPerFloat * 2);
   *   this.context.enableAttributeArray(DefaultAttrib.TEX_COORD, 2, FLOAT, bytesPerFloat * 6, bytesPerFloat * 4);
   *   ```
   *
   * ### Rendering primitives
   *
   *   Once all the steps above have been achieved, rendering primitives to the screen is done using {@link prepareDraw}, {@link drawElements} and {@link finalizeDraw}.
   *   ```js
   *   // frame preparation step
   *   this.context.prepareDraw(frameState);
   *
   *   // call this for every data array that has to be rendered on screen
   *   this.context.drawElements(0, this.indicesBuffer.getArray().length);
   *
   *   // finalize the rendering by applying post processes
   *   this.context.finalizeDraw(frameState);
   *   ```
   *
   * For an example usage of this class, refer to {@link module:ol/renderer/webgl/PointsLayer~WebGLPointsLayerRenderer}.
   *
   *
   * @api
   */
  class WebGLHelper extends Disposable {
    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {
      super();
      const options = opt_options || {};

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.canvas_ = document.createElement('canvas');
      this.canvas_.style.position = 'absolute';


      /**
       * @private
       * @type {WebGLRenderingContext}
       */
      this.gl_ = getContext(this.canvas_);
      const gl = this.getGL();

      /**
       * @private
       * @type {!Object<string, BufferCacheEntry>}
       */
      this.bufferCache_ = {};

      /**
       * @private
       * @type {!Array<WebGLShader>}
       */
      this.shaderCache_ = [];

      /**
       * @private
       * @type {!Array<WebGLProgram>}
       */
      this.programCache_ = [];

      /**
       * @private
       * @type {WebGLProgram}
       */
      this.currentProgram_ = null;

      assert(includes(getSupportedExtensions(), 'OES_element_index_uint'), 63);
      gl.getExtension('OES_element_index_uint');

      listen(this.canvas_, ContextEventType.LOST,
        this.handleWebGLContextLost, this);
      listen(this.canvas_, ContextEventType.RESTORED,
        this.handleWebGLContextRestored, this);

      /**
       * @private
       * @type {import("../transform.js").Transform}
       */
      this.offsetRotateMatrix_ = create();

      /**
       * @private
       * @type {import("../transform.js").Transform}
       */
      this.offsetScaleMatrix_ = create();

      /**
       * @private
       * @type {Array<number>}
       */
      this.tmpMat4_ = create$1();

      /**
       * @private
       * @type {Object.<string, WebGLUniformLocation>}
       */
      this.uniformLocations_ = {};

      /**
       * @private
       * @type {Object.<string, number>}
       */
      this.attribLocations_ = {};

      /**
       * Holds info about custom uniforms used in the post processing pass.
       * If the uniform is a texture, the WebGL Texture object will be stored here.
       * @type {Array<UniformInternalDescription>}
       * @private
       */
      this.uniforms_ = [];
      if (options.uniforms) {
        for (const name in options.uniforms) {
          this.uniforms_.push({
            name: name,
            value: options.uniforms[name]
          });
        }
      }

      /**
       * An array of PostProcessingPass objects is kept in this variable, built from the steps provided in the
       * options. If no post process was given, a default one is used (so as not to have to make an exception to
       * the frame buffer logic).
       * @type {Array<WebGLPostProcessingPass>}
       * @private
       */
      this.postProcessPasses_ = options.postProcesses ? options.postProcesses.map(function(options) {
        return new WebGLPostProcessingPass({
          webGlContext: gl,
          scaleRatio: options.scaleRatio,
          vertexShader: options.vertexShader,
          fragmentShader: options.fragmentShader,
          uniforms: options.uniforms
        });
      }) : [new WebGLPostProcessingPass({webGlContext: gl})];

      /**
       * @type {string|null}
       * @private
       */
      this.shaderCompileErrors_ = null;
    }

    /**
     * Just bind the buffer if it's in the cache. Otherwise create
     * the WebGL buffer, bind it, populate it, and add an entry to
     * the cache.
     * @param {import("./Buffer").default} buffer Buffer.
     * @api
     */
    bindBuffer(buffer) {
      const gl = this.getGL();
      const bufferKey = getUid(buffer);
      let bufferCache = this.bufferCache_[bufferKey];
      if (!bufferCache) {
        const webGlBuffer = gl.createBuffer();
        bufferCache = this.bufferCache_[bufferKey] = {
          buffer: buffer,
          webGlBuffer: webGlBuffer
        };
      }
      gl.bindBuffer(buffer.getType(), bufferCache.webGlBuffer);
    }

    /**
     * Update the data contained in the buffer array; this is required for the
     * new data to be rendered
     * @param {import("./Buffer").default} buffer Buffer.
     * @api
     */
    flushBufferData(buffer) {
      const gl = this.getGL();
      this.bindBuffer(buffer);
      gl.bufferData(buffer.getType(), buffer.getArray(), buffer.getUsage());
    }

    /**
     * @param {import("./Buffer.js").default} buf Buffer.
     */
    deleteBuffer(buf) {
      const gl = this.getGL();
      const bufferKey = getUid(buf);
      const bufferCacheEntry = this.bufferCache_[bufferKey];
      if (!gl.isContextLost()) {
        gl.deleteBuffer(bufferCacheEntry.buffer);
      }
      delete this.bufferCache_[bufferKey];
    }

    /**
     * @inheritDoc
     */
    disposeInternal() {
      unlistenAll(this.canvas_);
      const gl = this.getGL();
      if (!gl.isContextLost()) {
        for (const key in this.bufferCache_) {
          gl.deleteBuffer(this.bufferCache_[key].buffer);
        }
        for (const key in this.programCache_) {
          gl.deleteProgram(this.programCache_[key]);
        }
        for (const key in this.shaderCache_) {
          gl.deleteShader(this.shaderCache_[key]);
        }
      }
    }

    /**
     * Clear the buffer & set the viewport to draw.
     * Post process passes will be initialized here, the first one being bound as a render target for
     * subsequent draw calls.
     * @param {import("../PluggableMap.js").FrameState} frameState current frame state
     * @api
     */
    prepareDraw(frameState) {
      const gl = this.getGL();
      const canvas = this.getCanvas();
      const size = frameState.size;
      const pixelRatio = frameState.pixelRatio;

      canvas.width = size[0] * pixelRatio;
      canvas.height = size[1] * pixelRatio;
      canvas.style.width = size[0] + 'px';
      canvas.style.height = size[1] + 'px';

      gl.useProgram(this.currentProgram_);

      // loop backwards in post processes list
      for (let i = this.postProcessPasses_.length - 1; i >= 0; i--) {
        this.postProcessPasses_[i].init(frameState);
      }

      gl.bindTexture(gl.TEXTURE_2D, null);

      gl.clearColor(0.0, 0.0, 0.0, 0.0);
      gl.clear(gl.COLOR_BUFFER_BIT);
      gl.enable(gl.BLEND);
      gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);

      gl.useProgram(this.currentProgram_);
      this.applyFrameState(frameState);
      this.applyUniforms(frameState);
    }

    /**
     * Clear the render target & bind it for future draw operations.
     * This is similar to `prepareDraw`, only post processes will not be applied.
     * Note: the whole viewport will be drawn to the render target, regardless of its size.
     * @param {import("../PluggableMap.js").FrameState} frameState current frame state
     * @param {import("./RenderTarget.js").default} renderTarget Render target to draw to
     * @param {boolean} [opt_disableAlphaBlend] If true, no alpha blending will happen.
     */
    prepareDrawToRenderTarget(frameState, renderTarget, opt_disableAlphaBlend) {
      const gl = this.getGL();

      gl.bindFramebuffer(gl.FRAMEBUFFER, renderTarget.getFramebuffer());
      gl.bindTexture(gl.TEXTURE_2D, renderTarget.getTexture());
      gl.clearColor(0.0, 0.0, 0.0, 0.0);
      gl.clear(gl.COLOR_BUFFER_BIT);
      gl.enable(gl.BLEND);
      gl.blendFunc(gl.ONE, opt_disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);

      gl.useProgram(this.currentProgram_);
      this.applyFrameState(frameState);
      this.applyUniforms(frameState);
    }

    /**
     * Execute a draw call based on the currently bound program, texture, buffers, attributes.
     * @param {number} start Start index.
     * @param {number} end End index.
     * @api
     */
    drawElements(start, end) {
      const gl = this.getGL();
      const elementType = gl.UNSIGNED_INT;
      const elementSize = 4;

      const numItems = end - start;
      const offsetInBytes = start * elementSize;
      gl.drawElements(gl.TRIANGLES, numItems, elementType, offsetInBytes);
    }

    /**
     * Apply the successive post process passes which will eventually render to the actual canvas.
     * @param {import("../PluggableMap.js").FrameState} frameState current frame state
     * @api
     */
    finalizeDraw(frameState) {
      // apply post processes using the next one as target
      for (let i = 0; i < this.postProcessPasses_.length; i++) {
        this.postProcessPasses_[i].apply(frameState, this.postProcessPasses_[i + 1] || null);
      }
    }

    /**
     * @return {HTMLCanvasElement} Canvas.
     * @api
     */
    getCanvas() {
      return this.canvas_;
    }

    /**
     * Get the WebGL rendering context
     * @return {WebGLRenderingContext} The rendering context.
     * @api
     */
    getGL() {
      return this.gl_;
    }

    /**
     * Sets the default matrix uniforms for a given frame state. This is called internally in `prepareDraw`.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @private
     */
    applyFrameState(frameState) {
      const size = frameState.size;
      const rotation = frameState.viewState.rotation;

      const offsetScaleMatrix = reset(this.offsetScaleMatrix_);
      scale$1(offsetScaleMatrix, 2 / size[0], 2 / size[1]);

      const offsetRotateMatrix = reset(this.offsetRotateMatrix_);
      if (rotation !== 0) {
        rotate$1(offsetRotateMatrix, -rotation);
      }

      this.setUniformMatrixValue(DefaultUniform.OFFSET_SCALE_MATRIX, fromTransform(this.tmpMat4_, offsetScaleMatrix));
      this.setUniformMatrixValue(DefaultUniform.OFFSET_ROTATION_MATRIX, fromTransform(this.tmpMat4_, offsetRotateMatrix));
    }

    /**
     * Sets the custom uniforms based on what was given in the constructor. This is called internally in `prepareDraw`.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @private
     */
    applyUniforms(frameState) {
      const gl = this.getGL();

      let value;
      let textureSlot = 0;
      this.uniforms_.forEach(function(uniform) {
        value = typeof uniform.value === 'function' ? uniform.value(frameState) : uniform.value;

        // apply value based on type
        if (value instanceof HTMLCanvasElement || value instanceof HTMLImageElement || value instanceof ImageData) {
          // create a texture & put data
          if (!uniform.texture) {
            uniform.texture = gl.createTexture();
          }
          gl.activeTexture(gl[`TEXTURE${textureSlot}`]);
          gl.bindTexture(gl.TEXTURE_2D, uniform.texture);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, value);

          // fill texture slots by increasing index
          gl.uniform1i(this.getUniformLocation(uniform.name), textureSlot++);

        } else if (Array.isArray(value) && value.length === 6) {
          this.setUniformMatrixValue(uniform.name, fromTransform(this.tmpMat4_, value));
        } else if (Array.isArray(value) && value.length <= 4) {
          switch (value.length) {
            case 2:
              gl.uniform2f(this.getUniformLocation(uniform.name), value[0], value[1]);
              return;
            case 3:
              gl.uniform3f(this.getUniformLocation(uniform.name), value[0], value[1], value[2]);
              return;
            case 4:
              gl.uniform4f(this.getUniformLocation(uniform.name), value[0], value[1], value[2], value[3]);
              return;
            default:
              return;
          }
        } else if (typeof value === 'number') {
          gl.uniform1f(this.getUniformLocation(uniform.name), value);
        }
      }.bind(this));
    }

    /**
     * Use a program.  If the program is already in use, this will return `false`.
     * @param {WebGLProgram} program Program.
     * @return {boolean} Changed.
     * @api
     */
    useProgram(program) {
      if (program == this.currentProgram_) {
        return false;
      } else {
        const gl = this.getGL();
        gl.useProgram(program);
        this.currentProgram_ = program;
        this.uniformLocations_ = {};
        this.attribLocations_ = {};
        return true;
      }
    }

    /**
     * Will attempt to compile a vertex or fragment shader based on source
     * On error, the shader will be returned but
     * `gl.getShaderParameter(shader, gl.COMPILE_STATUS)` will return `true`
     * Use `gl.getShaderInfoLog(shader)` to have details
     * @param {string} source Shader source
     * @param {ShaderType} type VERTEX_SHADER or FRAGMENT_SHADER
     * @return {WebGLShader} Shader object
     */
    compileShader(source, type) {
      const gl = this.getGL();
      const shader = gl.createShader(type);
      gl.shaderSource(shader, source);
      gl.compileShader(shader);
      this.shaderCache_.push(shader);
      return shader;
    }

    /**
     * Create a program for a vertex and fragment shader. The shaders compilation may have failed:
     * use `WebGLHelper.getShaderCompileErrors()`to have details if any.
     * @param {string} fragmentShaderSource Fragment shader source.
     * @param {string} vertexShaderSource Vertex shader source.
     * @return {WebGLProgram} Program
     * @api
     */
    getProgram(fragmentShaderSource, vertexShaderSource) {
      const gl = this.getGL();

      const fragmentShader = this.compileShader(fragmentShaderSource, gl.FRAGMENT_SHADER);
      const vertexShader = this.compileShader(vertexShaderSource, gl.VERTEX_SHADER);
      this.shaderCompileErrors_ = null;

      if (gl.getShaderInfoLog(fragmentShader)) {
        this.shaderCompileErrors_ =
          `Fragment shader compilation failed:\n${gl.getShaderInfoLog(fragmentShader)}`;
      }
      if (gl.getShaderInfoLog(vertexShader)) {
        this.shaderCompileErrors_ = (this.shaderCompileErrors_ || '') +
          `Vertex shader compilation failed:\n${gl.getShaderInfoLog(vertexShader)}`;
      }

      const program = gl.createProgram();
      gl.attachShader(program, fragmentShader);
      gl.attachShader(program, vertexShader);
      gl.linkProgram(program);
      this.programCache_.push(program);
      return program;
    }

    /**
     * Will return the last shader compilation errors. If no error happened, will return null;
     * @return {string|null} Errors description, or null if last compilation was successful
     * @api
     */
    getShaderCompileErrors() {
      return this.shaderCompileErrors_;
    }

    /**
     * Will get the location from the shader or the cache
     * @param {string} name Uniform name
     * @return {WebGLUniformLocation} uniformLocation
     * @api
     */
    getUniformLocation(name) {
      if (this.uniformLocations_[name] === undefined) {
        this.uniformLocations_[name] = this.getGL().getUniformLocation(this.currentProgram_, name);
      }
      return this.uniformLocations_[name];
    }

    /**
     * Will get the location from the shader or the cache
     * @param {string} name Attribute name
     * @return {number} attribLocation
     * @api
     */
    getAttributeLocation(name) {
      if (this.attribLocations_[name] === undefined) {
        this.attribLocations_[name] = this.getGL().getAttribLocation(this.currentProgram_, name);
      }
      return this.attribLocations_[name];
    }

    /**
     * Modifies the given transform to apply the rotation/translation/scaling of the given frame state.
     * The resulting transform can be used to convert world space coordinates to view coordinates.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../transform").Transform} transform Transform to update.
     * @return {import("../transform").Transform} The updated transform object.
     * @api
     */
    makeProjectionTransform(frameState, transform) {
      const size = frameState.size;
      const rotation = frameState.viewState.rotation;
      const resolution = frameState.viewState.resolution;
      const center = frameState.viewState.center;

      reset(transform);
      compose(transform,
        0, 0,
        2 / (resolution * size[0]), 2 / (resolution * size[1]),
        -rotation,
        -center[0], -center[1]
      );
      return transform;
    }

    /**
     * Give a value for a standard float uniform
     * @param {string} uniform Uniform name
     * @param {number} value Value
     * @api
     */
    setUniformFloatValue(uniform, value) {
      this.getGL().uniform1f(this.getUniformLocation(uniform), value);
    }

    /**
     * Give a value for a standard matrix4 uniform
     * @param {string} uniform Uniform name
     * @param {Array<number>} value Matrix value
     * @api
     */
    setUniformMatrixValue(uniform, value) {
      this.getGL().uniformMatrix4fv(this.getUniformLocation(uniform), false, value);
    }

    /**
     * Will set the currently bound buffer to an attribute of the shader program
     * @param {string} attribName Attribute name
     * @param {number} size Number of components per attributes
     * @param {number} type UNSIGNED_INT, UNSIGNED_BYTE, UNSIGNED_SHORT or FLOAT
     * @param {number} stride Stride in bytes (0 means attribs are packed)
     * @param {number} offset Offset in bytes
     * @api
     */
    enableAttributeArray(attribName, size, type, stride, offset) {
      const location = this.getAttributeLocation(attribName);
      // the attribute has not been found in the shaders; do not enable it
      if (location < 0) {
        return;
      }
      this.getGL().enableVertexAttribArray(location);
      this.getGL().vertexAttribPointer(location, size, type,
        false, stride, offset);
    }

    /**
     * WebGL context was lost
     * @private
     */
    handleWebGLContextLost() {
      clear(this.bufferCache_);
      clear(this.shaderCache_);
      clear(this.programCache_);
      this.currentProgram_ = null;
    }

    /**
     * WebGL context was restored
     * @private
     */
    handleWebGLContextRestored() {
    }

    // TODO: shutdown program

    /**
     * Will create or reuse a given webgl texture and apply the given size. If no image data
     * specified, the texture will be empty, otherwise image data will be used and the `size`
     * parameter will be ignored.
     * Note: wrap parameters are set to clamp to edge, min filter is set to linear.
     * @param {Array<number>} size Expected size of the texture
     * @param {ImageData|HTMLImageElement|HTMLCanvasElement} [opt_data] Image data/object to bind to the texture
     * @param {WebGLTexture} [opt_texture] Existing texture to reuse
     * @return {WebGLTexture} The generated texture
     * @api
     */
    createTexture(size, opt_data, opt_texture) {
      const gl = this.getGL();
      const texture = opt_texture || gl.createTexture();

      // set params & size
      const level = 0;
      const internalFormat = gl.RGBA;
      const border = 0;
      const format = gl.RGBA;
      const type = gl.UNSIGNED_BYTE;
      gl.bindTexture(gl.TEXTURE_2D, texture);
      if (opt_data) {
        gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, format, type, opt_data);
      } else {
        gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, size[0], size[1], border, format, type, null);
      }
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);

      return texture;
    }
  }

  /**
   * @module ol/renderer/webgl/Layer
   */


  /**
   * @enum {string}
   */
  const WebGLWorkerMessageType = {
    GENERATE_BUFFERS: 'GENERATE_BUFFERS'
  };

  /**
   * @typedef {Object} WebGLWorkerGenerateBuffersMessage
   * This message will trigger the generation of a vertex and an index buffer based on the given render instructions.
   * When the buffers are generated, the worked will send a message of the same type to the main thread, with
   * the generated buffers in it.
   * Note that any addition properties present in the message *will* be sent back to the main thread.
   * @property {WebGLWorkerMessageType} type Message type
   * @property {ArrayBuffer} renderInstructions Render instructions raw binary buffer.
   * @property {ArrayBuffer} [vertexBuffer] Vertices array raw binary buffer (sent by the worker).
   * @property {ArrayBuffer} [indexBuffer] Indices array raw binary buffer (sent by the worker).
   * @property {number} [customAttributesCount] Amount of custom attributes count in the render instructions.
   */

  /**
   * @typedef {Object} PostProcessesOptions
   * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than
   * the main canvas that will then be sampled up (useful for saving resource on blur steps).
   * @property {string} [vertexShader] Vertex shader source
   * @property {string} [fragmentShader] Fragment shader source
   * @property {Object.<string,import("../../webgl/Helper").UniformValue>} [uniforms] Uniform definitions for the post process step
   */

  /**
   * @typedef {Object} Options
   * @property {Object.<string,import("../../webgl/Helper").UniformValue>} [uniforms] Uniform definitions for the post process steps
   * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions
   */

  /**
   * @classdesc
   * Base WebGL renderer class.
   * Holds all logic related to data manipulation & some common rendering logic
   */
  class WebGLLayerRenderer extends LayerRenderer {

    /**
     * @param {import("../../layer/Layer.js").default} layer Layer.
     * @param {Options=} [opt_options] Options.
     */
    constructor(layer, opt_options) {
      super(layer);

      const options = opt_options || {};

      /**
       * @type {WebGLHelper}
       * @protected
       */
      this.helper = new WebGLHelper({
        postProcesses: options.postProcesses,
        uniforms: options.uniforms
      });
    }

    /**
     * @inheritDoc
     */
    disposeInternal() {
      super.disposeInternal();
    }

    /**
     * Will return the last shader compilation errors. If no error happened, will return null;
     * @return {string|null} Errors, or null if last compilation was successful
     * @api
     */
    getShaderCompileErrors() {
      return this.helper.getShaderCompileErrors();
    }

  }


  /**
   * @param {Float32Array} instructions Instructons array in which to write.
   * @param {number} elementIndex Index from which render instructions will be written.
   * @param {number} x Point center X coordinate
   * @param {number} y Point center Y coordinate
   * @param {number} u0 Left texture coordinate
   * @param {number} v0 Bottom texture coordinate
   * @param {number} u1 Right texture coordinate
   * @param {number} v1 Top texture coordinate
   * @param {number} size Radius of the point
   * @param {number} opacity Opacity
   * @param {boolean} rotateWithView If true, the point will stay aligned with the view
   * @param {Array<number>} color Array holding red, green, blue, alpha values
   * @return {number} Index from which the next element should be written
   * @private
   */
  function writePointFeatureInstructions(instructions, elementIndex, x, y, u0, v0, u1, v1, size, opacity, rotateWithView, color) {
    let i = elementIndex;
    instructions[i++] = x;
    instructions[i++] = y;
    instructions[i++] = u0;
    instructions[i++] = v0;
    instructions[i++] = u1;
    instructions[i++] = v1;
    instructions[i++] = size;
    instructions[i++] = opacity;
    instructions[i++] = rotateWithView ? 1 : 0;
    instructions[i++] = color[0];
    instructions[i++] = color[1];
    instructions[i++] = color[2];
    instructions[i++] = color[3];
    return i;
  }

  const tmpArray_ = [];
  const bufferPositions_ = {vertexPosition: 0, indexPosition: 0};

  const POINT_INSTRUCTIONS_COUNT = 13;
  const POINT_VERTEX_STRIDE = 12;

  function writePointVertex(buffer, pos, x, y, offsetX, offsetY, u, v, opacity, rotateWithView, red, green, blue, alpha) {
    buffer[pos + 0] = x;
    buffer[pos + 1] = y;
    buffer[pos + 2] = offsetX;
    buffer[pos + 3] = offsetY;
    buffer[pos + 4] = u;
    buffer[pos + 5] = v;
    buffer[pos + 6] = opacity;
    buffer[pos + 7] = rotateWithView;
    buffer[pos + 8] = red;
    buffer[pos + 9] = green;
    buffer[pos + 10] = blue;
    buffer[pos + 11] = alpha;
  }

  function writeCustomAttrs(buffer, pos, customAttrs) {
    if (customAttrs.length) {
      buffer.set(customAttrs, pos);
    }
  }

  /**
   * An object holding positions both in an index and a vertex buffer.
   * @typedef {Object} BufferPositions
   * @property {number} vertexPosition Position in the vertex buffer
   * @property {number} indexPosition Position in the index buffer
   */

  /**
   * Pushes a quad (two triangles) based on a point geometry
   * @param {Float32Array} instructions Array of render instructions for points.
   * @param {number} elementIndex Index from which render instructions will be read.
   * @param {Float32Array} vertexBuffer Buffer in the form of a typed array.
   * @param {Uint32Array} indexBuffer Buffer in the form of a typed array.
   * @param {BufferPositions} [bufferPositions] Buffer write positions; if not specified, positions will be set at 0.
   * @param {number} [count] Amount of render instructions that will be read. Default value is POINT_INSTRUCTIONS_COUNT
   * but a higher value can be provided; all values beyond the default count will be put in the vertices buffer as
   * is, thus allowing specifying custom attributes. Please note: this value should not vary inside the same buffer or
   * rendering will break.
   * @return {BufferPositions} New buffer positions where to write next
   * @property {number} vertexPosition New position in the vertex buffer where future writes should start.
   * @property {number} indexPosition New position in the index buffer where future writes should start.
   * @private
   */
  function writePointFeatureToBuffers(instructions, elementIndex, vertexBuffer, indexBuffer, bufferPositions, count) {
    const count_ = count > POINT_INSTRUCTIONS_COUNT ? count : POINT_INSTRUCTIONS_COUNT;

    const x = instructions[elementIndex + 0];
    const y = instructions[elementIndex + 1];
    const u0 = instructions[elementIndex + 2];
    const v0 = instructions[elementIndex + 3];
    const u1 = instructions[elementIndex + 4];
    const v1 = instructions[elementIndex + 5];
    const size = instructions[elementIndex + 6];
    const opacity = instructions[elementIndex + 7];
    const rotateWithView = instructions[elementIndex + 8];
    const red = instructions[elementIndex + 9];
    const green = instructions[elementIndex + 10];
    const blue = instructions[elementIndex + 11];
    const alpha = instructions[elementIndex + 12];

    // the default vertex buffer stride is 12, plus additional custom values if any
    const baseStride = POINT_VERTEX_STRIDE;
    const stride = baseStride + count_ - POINT_INSTRUCTIONS_COUNT;

    // read custom numerical attributes on the feature
    const customAttrs = tmpArray_;
    customAttrs.length = count_ - POINT_INSTRUCTIONS_COUNT;
    for (let i = 0; i < customAttrs.length; i++) {
      customAttrs[i] = instructions[elementIndex + POINT_INSTRUCTIONS_COUNT + i];
    }

    let vPos = bufferPositions ? bufferPositions.vertexPosition : 0;
    let iPos = bufferPositions ? bufferPositions.indexPosition : 0;
    const baseIndex = vPos / stride;

    // push vertices for each of the four quad corners (first standard then custom attributes)
    writePointVertex(vertexBuffer, vPos, x, y, -size / 2, -size / 2, u0, v0, opacity, rotateWithView, red, green, blue, alpha);
    writeCustomAttrs(vertexBuffer, vPos + baseStride, customAttrs);
    vPos += stride;

    writePointVertex(vertexBuffer, vPos, x, y, +size / 2, -size / 2, u1, v0, opacity, rotateWithView, red, green, blue, alpha);
    writeCustomAttrs(vertexBuffer, vPos + baseStride, customAttrs);
    vPos += stride;

    writePointVertex(vertexBuffer, vPos, x, y, +size / 2, +size / 2, u1, v1, opacity, rotateWithView, red, green, blue, alpha);
    writeCustomAttrs(vertexBuffer, vPos + baseStride, customAttrs);
    vPos += stride;

    writePointVertex(vertexBuffer, vPos, x, y, -size / 2, +size / 2, u0, v1, opacity, rotateWithView, red, green, blue, alpha);
    writeCustomAttrs(vertexBuffer, vPos + baseStride, customAttrs);
    vPos += stride;

    indexBuffer[iPos++] = baseIndex; indexBuffer[iPos++] = baseIndex + 1; indexBuffer[iPos++] = baseIndex + 3;
    indexBuffer[iPos++] = baseIndex + 1; indexBuffer[iPos++] = baseIndex + 2; indexBuffer[iPos++] = baseIndex + 3;

    bufferPositions_.vertexPosition = vPos;
    bufferPositions_.indexPosition = iPos;

    return bufferPositions_;
  }

  /**
   * Returns a texture of 1x1 pixel, white
   * @private
   * @return {ImageData} Image data.
   */
  function getBlankImageData() {
    const canvas = document.createElement('canvas');
    const image = canvas.getContext('2d').createImageData(1, 1);
    image.data[0] = image.data[1] = image.data[2] = image.data[3] = 255;
    return image;
  }

  /**
   * Generates a color array based on a numerical id
   * Note: the range for each component is 0 to 1 with 256 steps
   * @param {number} id Id
   * @param {Array<number>} [opt_array] Reusable array
   * @return {Array<number>} Color array containing the encoded id
   */
  function colorEncodeId(id, opt_array) {
    const array = opt_array || [];
    const radix = 256;
    const divide = radix - 1;
    array[0] = Math.floor(id / radix / radix / radix) / divide;
    array[1] = (Math.floor(id / radix / radix) % radix) / divide;
    array[2] = (Math.floor(id / radix) % radix) / divide;
    array[3] = (id % radix) / divide;
    return array;
  }


  /**
   * Reads an id from a color-encoded array
   * Note: the expected range for each component is 0 to 1 with 256 steps.
   * @param {Array<number>} color Color array containing the encoded id
   * @return {number} Decoded id
   */
  function colorDecodeId(color) {
    let id = 0;
    const radix = 256;
    const mult = radix - 1;
    id += Math.round(color[0] * radix * radix * radix * mult);
    id += Math.round(color[1] * radix * radix * mult);
    id += Math.round(color[2] * radix * mult);
    id += Math.round(color[3] * mult);
    return id;
  }

  /**
   * A worker that does cpu-heavy tasks related to webgl rendering.
   * @module ol/worker/webgl
   */

  onmessage = event => {
    const received = event.data;
    if (received.type === WebGLWorkerMessageType.GENERATE_BUFFERS) {
      const renderInstructions = new Float32Array(received.renderInstructions);
      const customAttributesCount = received.customAttributesCount || 0;
      const instructionsCount = POINT_INSTRUCTIONS_COUNT + customAttributesCount;

      const elementsCount = renderInstructions.length / instructionsCount;
      const indicesCount = elementsCount * 6;
      const verticesCount = elementsCount * 4 * (POINT_VERTEX_STRIDE + customAttributesCount);
      const indexBuffer = new Uint32Array(indicesCount);
      const vertexBuffer = new Float32Array(verticesCount);

      let bufferPositions = null;
      for (let i = 0; i < renderInstructions.length; i += instructionsCount) {
        bufferPositions = writePointFeatureToBuffers(
          renderInstructions,
          i,
          vertexBuffer,
          indexBuffer,
          bufferPositions,
          instructionsCount);
      }

      /** @type {import('../renderer/webgl/Layer').WebGLWorkerGenerateBuffersMessage} */
      const message = assign({
        vertexBuffer: vertexBuffer.buffer,
        indexBuffer: indexBuffer.buffer,
        renderInstructions: renderInstructions.buffer
      }, received);

      postMessage(message, [vertexBuffer.buffer, indexBuffer.buffer, renderInstructions.buffer]);
    }
  };

  let create$2;

  /**
   * A wrapper class to simplify rendering to a texture instead of the final canvas
   * @module ol/webgl/RenderTarget
   */

  // for pixel color reading
  const tmpArray4 = new Uint8Array(4);

  /**
   * @classdesc
   * This class is a wrapper around the association of both a `WebGLTexture` and a `WebGLFramebuffer` instances,
   * simplifying initialization and binding for rendering.
   * @api
   */
  class WebGLRenderTarget {

    /**
     * @param {import("./Helper.js").default} helper WebGL helper; mandatory.
     * @param {Array<number>} [opt_size] Expected size of the render target texture; note: this can be changed later on.
     */
    constructor(helper, opt_size) {
      /**
       * @private
       * @type {import("./Helper.js").default}
       */
      this.helper_ = helper;
      const gl = helper.getGL();

      /**
       * @private
       * @type {WebGLTexture}
       */
      this.texture_ = gl.createTexture();

      /**
       * @private
       * @type {WebGLFramebuffer}
       */
      this.framebuffer_ = gl.createFramebuffer();

      /**
       * @type {Array<number>}
       * @private
       */
      this.size_ = opt_size || [1, 1];

      /**
       * @type {Uint8Array}
       * @private
       */
      this.data_ = new Uint8Array(0);

      /**
       * @type {boolean}
       * @private
       */
      this.dataCacheDirty_ = true;

      this.updateSize_();
    }

    /**
     * Changes the size of the render target texture. Note: will do nothing if the size
     * is already the same.
     * @param {Array<number>} size Expected size of the render target texture
     * @api
     */
    setSize(size) {
      if (equals$1(size, this.size_)) {
        return;
      }
      this.size_[0] = size[0];
      this.size_[1] = size[1];
      this.updateSize_();
    }

    /**
     * Returns the size of the render target texture
     * @return {Array<number>} Size of the render target texture
     * @api
     */
    getSize() {
      return this.size_;
    }

    /**
     * This will cause following calls to `#readAll` or `#readPixel` to download the content of the
     * render target into memory, which is an expensive operation.
     * This content will be kept in cache but should be cleared after each new render.
     * @api
     */
    clearCachedData() {
      this.dataCacheDirty_ = true;
    }

    /**
     * Returns the full content of the frame buffer as a series of r, g, b, a components
     * in the 0-255 range (unsigned byte).
     * @return {Uint8Array} Integer array of color values
     * @api
     */
    readAll() {
      if (this.dataCacheDirty_) {
        const size = this.size_;
        const gl = this.helper_.getGL();

        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);
        gl.readPixels(0, 0, size[0], size[1], gl.RGBA, gl.UNSIGNED_BYTE, this.data_);
        this.dataCacheDirty_ = false;
      }
      return this.data_;
    }

    /**
     * Reads one pixel of the frame buffer as an array of r, g, b, a components
     * in the 0-255 range (unsigned byte).
     * @param {number} x Pixel coordinate
     * @param {number} y Pixel coordinate
     * @returns {Uint8Array} Integer array with one color value (4 components)
     * @api
     */
    readPixel(x, y) {
      this.readAll();
      const index = Math.floor(x) + (this.size_[1] - Math.floor(y) - 1) * this.size_[0];
      tmpArray4[0] = this.data_[index * 4];
      tmpArray4[1] = this.data_[index * 4 + 1];
      tmpArray4[2] = this.data_[index * 4 + 2];
      tmpArray4[3] = this.data_[index * 4 + 3];
      return tmpArray4;
    }

    /**
     * @return {WebGLTexture} Texture to render to
     */
    getTexture() {
      return this.texture_;
    }

    /**
     * @return {WebGLFramebuffer} Frame buffer of the render target
     */
    getFramebuffer() {
      return this.framebuffer_;
    }

    /**
     * @private
     */
    updateSize_() {
      const size = this.size_;
      const gl = this.helper_.getGL();

      this.texture_ = this.helper_.createTexture(size, null, this.texture_);

      gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);
      gl.viewport(0, 0, size[0], size[1]);
      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture_, 0);

      this.data_ = new Uint8Array(size[0] * size[1] * 4);
    }
  }

  /**
   * @module ol/renderer/webgl/PointsLayer
   */

  const VERTEX_SHADER = `
  precision mediump float;
  attribute vec2 a_position;
  attribute vec2 a_texCoord;
  attribute float a_rotateWithView;
  attribute vec2 a_offsets;
  attribute float a_opacity;
  attribute vec4 a_color;

  uniform mat4 u_projectionMatrix;
  uniform mat4 u_offsetScaleMatrix;
  uniform mat4 u_offsetRotateMatrix;

  varying vec2 v_texCoord;
  varying float v_opacity;
  varying vec4 v_color;

  void main(void) {
    mat4 offsetMatrix = u_offsetScaleMatrix;
    if (a_rotateWithView == 1.0) {
      offsetMatrix = u_offsetScaleMatrix * u_offsetRotateMatrix;
    }
    vec4 offsets = offsetMatrix * vec4(a_offsets, 0.0, 0.0);
    gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;
    v_texCoord = a_texCoord;
    v_opacity = a_opacity;
    v_color = a_color;
  }`;

  const FRAGMENT_SHADER = `
  precision mediump float;

  uniform sampler2D u_texture;

  varying vec2 v_texCoord;
  varying float v_opacity;
  varying vec4 v_color;

  void main(void) {
    if (v_opacity == 0.0) {
      discard;
    }
    vec4 textureColor = texture2D(u_texture, v_texCoord);
    gl_FragColor = v_color * textureColor;
    gl_FragColor.a *= v_opacity;
    gl_FragColor.rgb *= gl_FragColor.a;
  }`;

  const HIT_FRAGMENT_SHADER = `
  precision mediump float;

  uniform sampler2D u_texture;

  varying vec2 v_texCoord;
  varying float v_opacity;
  varying vec4 v_color;

  void main(void) {
    if (v_opacity == 0.0) {
      discard;
    }
    vec4 textureColor = texture2D(u_texture, v_texCoord);
    if (textureColor.a < 0.1) {
      discard;
    }
    gl_FragColor = v_color;
  }`;

  /**
   * @typedef {Object} Options
   * @property {function(import("../../Feature").default):number} [sizeCallback] Will be called on every feature in the
   * source to compute the size of the quad on screen (in pixels). This is only done on source change.
   * @property {function(import("../../Feature").default, number):number} [coordCallback] Will be called on every feature in the
   * source to compute the coordinate of the quad center on screen (in pixels). This is only done on source change.
   * The second argument is 0 for `x` component and 1 for `y`.
   * @property {function(import("../../Feature").default, number):number} [texCoordCallback] Will be called on every feature in the
   * source to compute the texture coordinates of each corner of the quad (without effect if no `texture` option defined). This is only done on source change.
   * The second argument is 0 for `u0` component, 1 for `v0`, 2 for `u1`, and 3 for `v1`.
   * @property {function(import("../../Feature").default, Array<number>=):Array<number>} [colorCallback] Will be called on every feature in the
   * source to compute the color for use in the fragment shader (available as the `v_color` varying). This is only done on source change.
   * The return value should be between an array of R, G, B, A values between 0 and 1.  To reduce unnecessary
   * allocation, the function is called with a reusable array that can serve as the return value after updating
   * the R, G, B, and A values.
   * @property {function(import("../../Feature").default):number} [opacityCallback] Will be called on every feature in the
   * source to compute the opacity of the quad on screen (from 0 to 1). This is only done on source change.
   * Note: this is multiplied with the color of the point which can also have an alpha value < 1.
   * @property {function(import("../../Feature").default):boolean} [rotateWithViewCallback] Will be called on every feature in the
   * source to compute whether the quad on screen must stay upwards (`false`) or follow the view rotation (`true`). Default is `false`.
   * This is only done on source change.
   * @property {HTMLCanvasElement|HTMLImageElement|ImageData} [texture] Texture to use on points. `texCoordCallback` and `sizeCallback`
   * must be defined for this to have any effect.
   * @property {string} [vertexShader] Vertex shader source
   * @property {string} [fragmentShader] Fragment shader source
   * @property {Object.<string,import("../../webgl/Helper").UniformValue>} [uniforms] Uniform definitions for the post process steps
   * Please note that `u_texture` is reserved for the main texture slot.
   * @property {Array<import("./Layer").PostProcessesOptions>} [postProcesses] Post-processes definitions
   */

  /**
   * @classdesc
   * WebGL vector renderer optimized for points.
   * All features will be rendered as quads (two triangles forming a square). New data will be flushed to the GPU
   * every time the vector source changes.
   *
   * Use shaders to customize the final output. The following attributes are available:
   * * `vec2 a_position`
   * * `vec2 a_texCoord`
   * * `vec2 a_offsets`
   * * `float a_rotateWithView`
   * * `float a_opacity`
   * * `float a_color`
   *
   * The following uniform is used for the main texture: `u_texture`.
   *
   * Please note that the main shader output should have premultiplied alpha, otherwise visual anomalies may occur.
   *
   * Points are rendered as quads with the following structure:
   *
   * ```
   *   (u0, v1)      (u1, v1)
   *  [3]----------[2]
   *   |`           |
   *   |  `         |
   *   |    `       |
   *   |      `     |
   *   |        `   |
   *   |          ` |
   *  [0]----------[1]
   *   (u0, v0)      (u1, v0)
   *  ```
   *
   * This uses {@link module:ol/webgl/Helper~WebGLHelper} internally.
   *
   * Default shaders are shown hereafter:
   *
   * * Vertex shader:
   *   ```
   *   precision mediump float;
   *
   *   attribute vec2 a_position;
   *   attribute vec2 a_texCoord;
   *   attribute float a_rotateWithView;
   *   attribute vec2 a_offsets;
   *   attribute float a_opacity;
   *   attribute vec4 a_color;
   *
   *   uniform mat4 u_projectionMatrix;
   *   uniform mat4 u_offsetScaleMatrix;
   *   uniform mat4 u_offsetRotateMatrix;
   *
   *   varying vec2 v_texCoord;
   *   varying float v_opacity;
   *   varying vec4 v_color;
   *
   *   void main(void) {
   *     mat4 offsetMatrix = u_offsetScaleMatrix;
   *     if (a_rotateWithView == 1.0) {
   *       offsetMatrix = u_offsetScaleMatrix * u_offsetRotateMatrix;
   *     }
   *     vec4 offsets = offsetMatrix * vec4(a_offsets, 0.0, 0.0);
   *     gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;
   *     v_texCoord = a_texCoord;
   *     v_opacity = a_opacity;
   *     v_color = a_color;
   *   }
   *   ```
   *
   * * Fragment shader:
   *   ```
   *   precision mediump float;
   *
   *   uniform sampler2D u_texture;
   *
   *   varying vec2 v_texCoord;
   *   varying float v_opacity;
   *   varying vec4 v_color;
   *
   *   void main(void) {
   *     if (v_opacity == 0.0) {
   *       discard;
   *     }
   *     vec4 textureColor = texture2D(u_texture, v_texCoord);
   *     gl_FragColor = v_color * textureColor;
   *     gl_FragColor.a *= v_opacity;
   *     gl_FragColor.rgb *= gl_FragColor.a;
   *   }
   *   ```
   *
   * @api
   */
  class WebGLPointsLayerRenderer extends WebGLLayerRenderer {

    /**
     * @param {import("../../layer/Vector.js").default} vectorLayer Vector layer.
     * @param {Options=} [opt_options] Options.
     */
    constructor(vectorLayer, opt_options) {
      const options = opt_options || {};

      const uniforms = options.uniforms || {};
      uniforms.u_texture = options.texture || getBlankImageData();
      const projectionMatrixTransform = create();
      uniforms[DefaultUniform.PROJECTION_MATRIX] = projectionMatrixTransform;

      super(vectorLayer, {
        uniforms: uniforms,
        postProcesses: options.postProcesses
      });

      this.sourceRevision_ = -1;

      this.verticesBuffer_ = new WebGLArrayBuffer(ARRAY_BUFFER, DYNAMIC_DRAW);
      this.hitVerticesBuffer_ = new WebGLArrayBuffer(ARRAY_BUFFER, DYNAMIC_DRAW);
      this.indicesBuffer_ = new WebGLArrayBuffer(ELEMENT_ARRAY_BUFFER, DYNAMIC_DRAW);

      this.program_ = this.helper.getProgram(
        options.fragmentShader || FRAGMENT_SHADER,
        options.vertexShader || VERTEX_SHADER
      );
      this.hitProgram_ = this.helper.getProgram(
        HIT_FRAGMENT_SHADER,
        options.vertexShader || VERTEX_SHADER
      );

      this.sizeCallback_ = options.sizeCallback || function() {
        return 1;
      };
      this.coordCallback_ = options.coordCallback || function(feature, index) {
        const geom = feature.getGeometry();
        return geom.getCoordinates()[index];
      };
      this.opacityCallback_ = options.opacityCallback || function() {
        return 1;
      };
      this.texCoordCallback_ = options.texCoordCallback || function(feature, index) {
        return index < 2 ? 0 : 1;
      };

      this.colorArray_ = [1, 1, 1, 1];
      this.colorCallback_ = options.colorCallback || function(feature, color) {
        return this.colorArray_;
      };

      this.rotateWithViewCallback_ = options.rotateWithViewCallback || function() {
        return false;
      };

      this.previousExtent_ = createEmpty();

      /**
       * This transform is updated on every frame and is the composition of:
       * - invert of the world->screen transform that was used when rebuilding buffers (see `this.renderTransform_`)
       * - current world->screen transform
       * @type {import("../../transform.js").Transform}
       * @private
       */
      this.currentTransform_ = projectionMatrixTransform;

      /**
       * This transform is updated when buffers are rebuilt and converts world space coordinates to screen space
       * @type {import("../../transform.js").Transform}
       * @private
       */
      this.renderTransform_ = create();

      /**
       * @type {import("../../transform.js").Transform}
       * @private
       */
      this.invertRenderTransform_ = create();

      /**
       * @type {Float32Array}
       * @private
       */
      this.renderInstructions_ = new Float32Array(0);

      /**
       * These instructions are used for hit detection
       * @type {Float32Array}
       * @private
       */
      this.hitRenderInstructions_ = new Float32Array(0);

      /**
       * @type {WebGLRenderTarget}
       * @private
       */
      this.hitRenderTarget_ = new WebGLRenderTarget(this.helper);

      this.worker_ = create$2();
      this.worker_.addEventListener('message', function(event) {
        const received = event.data;
        if (received.type === WebGLWorkerMessageType.GENERATE_BUFFERS) {
          const projectionTransform = received.projectionTransform;
          if (received.hitDetection) {
            this.hitVerticesBuffer_.fromArrayBuffer(received.vertexBuffer);
            this.helper.flushBufferData(this.hitVerticesBuffer_);
          } else {
            this.verticesBuffer_.fromArrayBuffer(received.vertexBuffer);
            this.helper.flushBufferData(this.verticesBuffer_);
          }
          this.indicesBuffer_.fromArrayBuffer(received.indexBuffer);
          this.helper.flushBufferData(this.indicesBuffer_);

          this.renderTransform_ = projectionTransform;
          makeInverse(this.invertRenderTransform_, this.renderTransform_);
          if (received.hitDetection) {
            this.hitRenderInstructions_ = new Float32Array(event.data.renderInstructions);
          } else {
            this.renderInstructions_ = new Float32Array(event.data.renderInstructions);
          }
        }
      }.bind(this));
    }

    /**
     * @inheritDoc
     */
    renderFrame(frameState) {
      const renderCount = this.indicesBuffer_.getArray() ? this.indicesBuffer_.getArray().length : 0;
      this.helper.drawElements(0, renderCount);
      this.helper.finalizeDraw(frameState);
      const canvas = this.helper.getCanvas();

      const layerState = frameState.layerStatesArray[frameState.layerIndex];
      const opacity = layerState.opacity;
      if (opacity !== parseFloat(canvas.style.opacity)) {
        canvas.style.opacity = opacity;
      }

      this.renderHitDetection(frameState);
      this.hitRenderTarget_.clearCachedData();

      return canvas;
    }

    /**
     * @inheritDoc
     */
    prepareFrame(frameState) {
      const vectorLayer = /** @type {import("../../layer/Vector.js").default} */ (this.getLayer());
      const vectorSource = vectorLayer.getSource();
      const viewState = frameState.viewState;

      const stride = POINT_VERTEX_STRIDE;

      // the source has changed: clear the feature cache & reload features
      const sourceChanged = this.sourceRevision_ < vectorSource.getRevision();
      if (sourceChanged) {
        this.sourceRevision_ = vectorSource.getRevision();

        const projection = viewState.projection;
        const resolution = viewState.resolution;
        vectorSource.loadFeatures([-Infinity, -Infinity, Infinity, Infinity], resolution, projection);
      }

      const viewNotMoving = !frameState.viewHints[ViewHint.ANIMATING] && !frameState.viewHints[ViewHint.INTERACTING];
      const extentChanged = !equals(this.previousExtent_, frameState.extent);
      if ((sourceChanged || extentChanged) && viewNotMoving) {
        this.rebuildBuffers_(frameState);
        this.previousExtent_ = frameState.extent.slice();
      }

      // apply the current projection transform with the invert of the one used to fill buffers
      this.helper.makeProjectionTransform(frameState, this.currentTransform_);
      multiply(this.currentTransform_, this.invertRenderTransform_);

      this.helper.useProgram(this.program_);
      this.helper.prepareDraw(frameState);

      // write new data
      this.helper.bindBuffer(this.verticesBuffer_);
      this.helper.bindBuffer(this.indicesBuffer_);

      const bytesPerFloat = Float32Array.BYTES_PER_ELEMENT;
      this.helper.enableAttributeArray(DefaultAttrib.POSITION, 2, FLOAT, bytesPerFloat * stride, 0);
      this.helper.enableAttributeArray(DefaultAttrib.OFFSETS, 2, FLOAT, bytesPerFloat * stride, bytesPerFloat * 2);
      this.helper.enableAttributeArray(DefaultAttrib.TEX_COORD, 2, FLOAT, bytesPerFloat * stride, bytesPerFloat * 4);
      this.helper.enableAttributeArray(DefaultAttrib.OPACITY, 1, FLOAT, bytesPerFloat * stride, bytesPerFloat * 6);
      this.helper.enableAttributeArray(DefaultAttrib.ROTATE_WITH_VIEW, 1, FLOAT, bytesPerFloat * stride, bytesPerFloat * 7);
      this.helper.enableAttributeArray(DefaultAttrib.COLOR, 4, FLOAT, bytesPerFloat * stride, bytesPerFloat * 8);

      return true;
    }

    /**
     * Rebuild internal webgl buffers based on current view extent; costly, should not be called too much
     * @param {import("../../PluggableMap").FrameState} frameState Frame state.
     * @private
     */
    rebuildBuffers_(frameState) {
      const vectorLayer = /** @type {import("../../layer/Vector.js").default} */ (this.getLayer());
      const vectorSource = vectorLayer.getSource();

      // saves the projection transform for the current frame state
      const projectionTransform = create();
      this.helper.makeProjectionTransform(frameState, projectionTransform);

      const features = vectorSource.getFeatures();
      const totalInstructionsCount = POINT_INSTRUCTIONS_COUNT * features.length;
      if (!this.renderInstructions_ || this.renderInstructions_.length !== totalInstructionsCount) {
        this.renderInstructions_ = new Float32Array(totalInstructionsCount);
      }
      if (!this.hitRenderInstructions_ || this.hitRenderInstructions_.length !== totalInstructionsCount) {
        this.hitRenderInstructions_ = new Float32Array(totalInstructionsCount);
      }

      // loop on features to fill the buffer
      let feature;
      const tmpCoords = [];
      const tmpColor = [];
      let elementIndex = 0;
      let u0, v0, u1, v1, size, opacity, rotateWithView, color;
      for (let i = 0; i < features.length; i++) {
        feature = features[i];
        if (!feature.getGeometry() || feature.getGeometry().getType() !== GeometryType.POINT) {
          continue;
        }

        tmpCoords[0] = this.coordCallback_(feature, 0);
        tmpCoords[1] = this.coordCallback_(feature, 1);
        apply(projectionTransform, tmpCoords);

        u0 = this.texCoordCallback_(feature, 0);
        v0 = this.texCoordCallback_(feature, 1);
        u1 = this.texCoordCallback_(feature, 2);
        v1 = this.texCoordCallback_(feature, 3);
        size = this.sizeCallback_(feature);
        opacity = this.opacityCallback_(feature);
        rotateWithView = this.rotateWithViewCallback_(feature);
        color = this.colorCallback_(feature, this.colorArray_);

        writePointFeatureInstructions(
          this.renderInstructions_,
          elementIndex,
          tmpCoords[0],
          tmpCoords[1],
          u0,
          v0,
          u1,
          v1,
          size,
          opacity,
          rotateWithView,
          color
        );

        // for hit detection, the feature uid is saved in the opacity value
        // and the index of the opacity value is encoded in the color values
        elementIndex = writePointFeatureInstructions(
          this.hitRenderInstructions_,
          elementIndex,
          tmpCoords[0],
          tmpCoords[1],
          u0,
          v0,
          u1,
          v1,
          size,
          opacity > 0 ? Number(getUid(feature)) : 0,
          rotateWithView,
          colorEncodeId(elementIndex + 7, tmpColor)
        );
      }

      /** @type import('./Layer').WebGLWorkerGenerateBuffersMessage */
      const message = {
        type: WebGLWorkerMessageType.GENERATE_BUFFERS,
        renderInstructions: this.renderInstructions_.buffer
      };
      // additional properties will be sent back as-is by the worker
      message['projectionTransform'] = projectionTransform;
      this.worker_.postMessage(message, [this.renderInstructions_.buffer]);
      this.renderInstructions_ = null;

      /** @type import('./Layer').WebGLWorkerGenerateBuffersMessage */
      const hitMessage = {
        type: WebGLWorkerMessageType.GENERATE_BUFFERS,
        renderInstructions: this.hitRenderInstructions_.buffer
      };
      hitMessage['projectionTransform'] = projectionTransform;
      hitMessage['hitDetection'] = true;
      this.worker_.postMessage(hitMessage, [this.hitRenderInstructions_.buffer]);
      this.hitRenderInstructions_ = null;
    }

    /**
     * @inheritDoc
     */
    forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, declutteredFeatures) {
      if (!this.hitRenderInstructions_) {
        return;
      }

      const pixel = apply(frameState.coordinateToPixelTransform, coordinate.slice());

      const data = this.hitRenderTarget_.readPixel(pixel[0], pixel[1]);
      const color = [
        data[0] / 255,
        data[1] / 255,
        data[2] / 255,
        data[3] / 255
      ];
      const index = colorDecodeId(color);
      const opacity = this.hitRenderInstructions_[index];
      const uid = Math.floor(opacity).toString();

      const source = this.getLayer().getSource();
      const feature = source.getFeatureByUid(uid);
      if (feature) {
        return callback(feature, this.getLayer());
      }
    }

    /**
     * Render the hit detection data to the corresponding render target
     * @param {import("../../PluggableMap.js").FrameState} frameState current frame state
     */
    renderHitDetection(frameState) {
      this.hitRenderTarget_.setSize(frameState.size);

      this.helper.useProgram(this.hitProgram_);
      this.helper.prepareDrawToRenderTarget(frameState, this.hitRenderTarget_, true);

      this.helper.bindBuffer(this.hitVerticesBuffer_);
      this.helper.bindBuffer(this.indicesBuffer_);

      const stride = POINT_VERTEX_STRIDE;
      const bytesPerFloat = Float32Array.BYTES_PER_ELEMENT;
      this.helper.enableAttributeArray(DefaultAttrib.POSITION, 2, FLOAT, bytesPerFloat * stride, 0);
      this.helper.enableAttributeArray(DefaultAttrib.OFFSETS, 2, FLOAT, bytesPerFloat * stride, bytesPerFloat * 2);
      this.helper.enableAttributeArray(DefaultAttrib.TEX_COORD, 2, FLOAT, bytesPerFloat * stride, bytesPerFloat * 4);
      this.helper.enableAttributeArray(DefaultAttrib.OPACITY, 1, FLOAT, bytesPerFloat * stride, bytesPerFloat * 6);
      this.helper.enableAttributeArray(DefaultAttrib.ROTATE_WITH_VIEW, 1, FLOAT, bytesPerFloat * stride, bytesPerFloat * 7);
      this.helper.enableAttributeArray(DefaultAttrib.COLOR, 4, FLOAT, bytesPerFloat * stride, bytesPerFloat * 8);

      const renderCount = this.indicesBuffer_.getArray() ? this.indicesBuffer_.getArray().length : 0;
      this.helper.drawElements(0, renderCount);
    }
  }

  /**
   * @module ol/layer/Heatmap
   */


  /**
   * @typedef {Object} Options
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {Array<string>} [gradient=['#00f', '#0ff', '#0f0', '#ff0', '#f00']] The color gradient
   * of the heatmap, specified as an array of CSS color strings.
   * @property {number} [radius=8] Radius size in pixels.
   * @property {number} [blur=15] Blur size in pixels.
   * @property {string|function(import("../Feature.js").default):number} [weight='weight'] The feature
   * attribute to use for the weight or a function that returns a weight from a feature. Weight values
   * should range from 0 to 1 (and values outside will be clamped to that range).
   * @property {import("../source/Vector.js").default} [source] Source.
   */


  /**
   * @enum {string}
   * @private
   */
  const Property$5 = {
    BLUR: 'blur',
    GRADIENT: 'gradient',
    RADIUS: 'radius'
  };


  /**
   * @const
   * @type {Array<string>}
   */
  const DEFAULT_GRADIENT = ['#00f', '#0ff', '#0f0', '#ff0', '#f00'];


  /**
   * @classdesc
   * Layer for rendering vector data as a heatmap.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @fires import("../render/Event.js").RenderEvent
   * @api
   */
  class Heatmap extends VectorLayer {
    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {
      const options = opt_options ? opt_options : {};

      const baseOptions = assign({}, options);

      delete baseOptions.gradient;
      delete baseOptions.radius;
      delete baseOptions.blur;
      delete baseOptions.weight;
      super(baseOptions);

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.gradient_ = null;

      listen(this,
        getChangeEventType(Property$5.GRADIENT),
        this.handleGradientChanged_, this);

      this.setGradient(options.gradient ? options.gradient : DEFAULT_GRADIENT);

      this.setBlur(options.blur !== undefined ? options.blur : 15);

      this.setRadius(options.radius !== undefined ? options.radius : 8);

      const weight = options.weight ? options.weight : 'weight';
      if (typeof weight === 'string') {
        this.weightFunction_ = function(feature) {
          return feature.get(weight);
        };
      } else {
        this.weightFunction_ = weight;
      }

      // For performance reasons, don't sort the features before rendering.
      // The render order is not relevant for a heatmap representation.
      this.setRenderOrder(null);
    }

    /**
     * Return the blur size in pixels.
     * @return {number} Blur size in pixels.
     * @api
     * @observable
     */
    getBlur() {
      return /** @type {number} */ (this.get(Property$5.BLUR));
    }

    /**
     * Return the gradient colors as array of strings.
     * @return {Array<string>} Colors.
     * @api
     * @observable
     */
    getGradient() {
      return /** @type {Array<string>} */ (this.get(Property$5.GRADIENT));
    }

    /**
     * Return the size of the radius in pixels.
     * @return {number} Radius size in pixel.
     * @api
     * @observable
     */
    getRadius() {
      return /** @type {number} */ (this.get(Property$5.RADIUS));
    }

    /**
     * @private
     */
    handleGradientChanged_() {
      this.gradient_ = createGradient(this.getGradient());
    }

    /**
     * Set the blur size in pixels.
     * @param {number} blur Blur size in pixels.
     * @api
     * @observable
     */
    setBlur(blur) {
      this.set(Property$5.BLUR, blur);
    }

    /**
     * Set the gradient colors as array of strings.
     * @param {Array<string>} colors Gradient.
     * @api
     * @observable
     */
    setGradient(colors) {
      this.set(Property$5.GRADIENT, colors);
    }

    /**
     * Set the size of the radius in pixels.
     * @param {number} radius Radius size in pixel.
     * @api
     * @observable
     */
    setRadius(radius) {
      this.set(Property$5.RADIUS, radius);
    }

    /**
     * @inheritDoc
     */
    createRenderer() {
      return new WebGLPointsLayerRenderer(this, {
        vertexShader: `
        precision mediump float;
        attribute vec2 a_position;
        attribute vec2 a_texCoord;
        attribute vec2 a_offsets;
        attribute float a_opacity;

        uniform mat4 u_projectionMatrix;
        uniform mat4 u_offsetScaleMatrix;
        uniform float u_size;

        varying vec2 v_texCoord;
        varying float v_opacity;

        void main(void) {
          vec4 offsets = u_offsetScaleMatrix * vec4(a_offsets, 0.0, 0.0);
          gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets * u_size;
          v_texCoord = a_texCoord;
          v_opacity = a_opacity;
        }`,
        fragmentShader: `
        precision mediump float;
        uniform float u_blurSlope;

        varying vec2 v_texCoord;
        varying float v_opacity;

        void main(void) {
          vec2 texCoord = v_texCoord * 2.0 - vec2(1.0, 1.0);
          float sqRadius = texCoord.x * texCoord.x + texCoord.y * texCoord.y;
          float value = (1.0 - sqrt(sqRadius)) * u_blurSlope;
          float alpha = smoothstep(0.0, 1.0, value) * v_opacity;
          gl_FragColor = vec4(alpha, alpha, alpha, alpha);
        }`,
        uniforms: {
          u_size: function() {
            return (this.get(Property$5.RADIUS) + this.get(Property$5.BLUR)) * 2;
          }.bind(this),
          u_blurSlope: function() {
            return this.get(Property$5.RADIUS) / Math.max(1, this.get(Property$5.BLUR));
          }.bind(this)
        },
        postProcesses: [
          {
            fragmentShader: `
            precision mediump float;

            uniform sampler2D u_image;
            uniform sampler2D u_gradientTexture;

            varying vec2 v_texCoord;

            void main() {
              vec4 color = texture2D(u_image, v_texCoord);
              gl_FragColor.a = color.a;
              gl_FragColor.rgb = texture2D(u_gradientTexture, vec2(0.5, color.a)).rgb;
              gl_FragColor.rgb *= gl_FragColor.a;
            }`,
            uniforms: {
              u_gradientTexture: this.gradient_
            }
          }
        ],
        opacityCallback: this.weightFunction_
      });
    }
  }


  /**
   * @param {Array<string>} colors A list of colored.
   * @return {HTMLCanvasElement} canvas with gradient texture.
   */
  function createGradient(colors) {
    const width = 1;
    const height = 256;
    const context = createCanvasContext2D(width, height);

    const gradient = context.createLinearGradient(0, 0, width, height);
    const step = 1 / (colors.length - 1);
    for (let i = 0, ii = colors.length; i < ii; ++i) {
      gradient.addColorStop(i * step, colors[i]);
    }

    context.fillStyle = gradient;
    context.fillRect(0, 0, width, height);

    return context.canvas;
  }

  /**
   * @module ol/layer/BaseImage
   */


  /**
   * @typedef {Object} Options
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {import("../PluggableMap.js").default} [map] Sets the layer as overlay on a map. The map will not manage
   * this layer in its layers collection, and the layer will be rendered on top. This is useful for
   * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
   * use {@link module:ol/Map#addLayer}.
   * @property {import("../source/Image.js").default} [source] Source for this layer.
   */


  /**
   * @classdesc
   * Server-rendered images that are available for arbitrary extents and
   * resolutions.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @extends {Layer<import("../source/Image.js").default>}
   * @api
   */
  class BaseImageLayer extends Layer {

    /**
     * @param {Options=} opt_options Layer options.
     */
    constructor(opt_options) {
      const options = opt_options ? opt_options : {};
      super(options);
    }

  }

  /**
   * @module ol/reproj/common
   */

  /**
   * Default maximum allowed threshold  (in pixels) for reprojection
   * triangulation.
   * @type {number}
   */
  const ERROR_THRESHOLD = 0.5;

  /**
   * @module ol/renderer/canvas/ImageLayer
   */

  /**
   * @classdesc
   * Canvas renderer for image layers.
   * @api
   */
  class CanvasImageLayerRenderer extends CanvasLayerRenderer {

    /**
     * @param {import("../../layer/Image.js").default} imageLayer Image layer.
     */
    constructor(imageLayer) {
      super(imageLayer);

      /**
       * @protected
       * @type {?import("../../ImageBase.js").default}
       */
      this.image_ = null;
    }

    /**
     * @inheritDoc
     */
    getImage() {
      return !this.image_ ? null : this.image_.getImage();
    }

    /**
     * @inheritDoc
     */
    prepareFrame(frameState) {
      const layerState = frameState.layerStatesArray[frameState.layerIndex];
      const pixelRatio = frameState.pixelRatio;
      const viewState = frameState.viewState;
      const viewResolution = viewState.resolution;

      const imageSource = this.getLayer().getSource();

      const hints = frameState.viewHints;

      let renderedExtent = frameState.extent;
      if (layerState.extent !== undefined) {
        renderedExtent = getIntersection(renderedExtent, layerState.extent);
      }

      if (!hints[ViewHint.ANIMATING] && !hints[ViewHint.INTERACTING] && !isEmpty$1(renderedExtent)) {
        let projection = viewState.projection;
        const image = imageSource.getImage(renderedExtent, viewResolution, pixelRatio, projection);
        if (image && this.loadImage(image)) {
          this.image_ = image;
        }
      }

      return !!this.image_;
    }

    /**
     * @inheritDoc
     */
    renderFrame(frameState, target) {
      const image = this.image_;
      const imageExtent = image.getExtent();
      const imageResolution = image.getResolution();
      const imagePixelRatio = image.getPixelRatio();
      const layerState = frameState.layerStatesArray[frameState.layerIndex];
      const pixelRatio = frameState.pixelRatio;
      const viewState = frameState.viewState;
      const viewCenter = viewState.center;
      const viewResolution = viewState.resolution;
      const size = frameState.size;
      const scale = pixelRatio * imageResolution / (viewResolution * imagePixelRatio);

      let width = Math.round(size[0] * pixelRatio);
      let height = Math.round(size[1] * pixelRatio);
      const rotation = viewState.rotation;
      if (rotation) {
        const size = Math.round(Math.sqrt(width * width + height * height));
        width = height = size;
      }

      // set forward and inverse pixel transforms
      compose(this.pixelTransform,
        frameState.size[0] / 2, frameState.size[1] / 2,
        1 / pixelRatio, 1 / pixelRatio,
        rotation,
        -width / 2, -height / 2
      );
      makeInverse(this.inversePixelTransform, this.pixelTransform);

      this.useContainer(target, this.pixelTransform, layerState.opacity);

      const context = this.context;
      const canvas = context.canvas;

      if (canvas.width != width || canvas.height != height) {
        canvas.width = width;
        canvas.height = height;
      } else if (!this.containerReused) {
        context.clearRect(0, 0, width, height);
      }

      // clipped rendering if layer extent is set
      const extent = layerState.extent;
      const clipped = extent !== undefined &&
            !containsExtent(extent, frameState.extent) &&
            intersects(extent, frameState.extent);
      if (clipped) {
        this.clip(context, frameState, extent);
      }

      const img = image.getImage();

      const transform = compose(this.tempTransform_,
        width / 2, height / 2,
        scale, scale,
        0,
        imagePixelRatio * (imageExtent[0] - viewCenter[0]) / imageResolution,
        imagePixelRatio * (viewCenter[1] - imageExtent[3]) / imageResolution);

      this.renderedResolution = imageResolution * pixelRatio / imagePixelRatio;

      const dx = transform[4];
      const dy = transform[5];
      const dw = img.width * transform[0];
      const dh = img.height * transform[3];

      this.preRender(context, frameState);
      if (dw >= 0.5 && dh >= 0.5) {
        const opacity = layerState.opacity;
        let previousAlpha;
        if (opacity !== 1) {
          previousAlpha = this.context.globalAlpha;
          this.context.globalAlpha = opacity;
        }
        this.context.drawImage(img, 0, 0, +img.width, +img.height,
          Math.round(dx), Math.round(dy), Math.round(dw), Math.round(dh));
        if (opacity !== 1) {
          this.context.globalAlpha = previousAlpha;
        }
      }
      this.postRender(context, frameState);

      if (clipped) {
        context.restore();
      }

      const canvasTransform = toString(this.pixelTransform);
      if (canvasTransform !== canvas.style.transform) {
        canvas.style.transform = canvasTransform;
      }

      return this.container;

    }

  }

  /**
   * @module ol/layer/Image
   */


  /**
   * @typedef {import("./BaseImage.js").Options} Options
   */


  /**
   * @classdesc
   * Server-rendered images that are available for arbitrary extents and
   * resolutions.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @api
   */
  class ImageLayer extends BaseImageLayer {

    /**
     * @param {Options=} opt_options Layer options.
     */
    constructor(opt_options) {
      super(opt_options);
    }

    /**
     * Create a renderer for this layer.
     * @return {import("../renderer/Layer.js").default} A layer renderer.
     * @protected
     */
    createRenderer() {
      return new CanvasImageLayerRenderer(this);
    }

  }

  /**
   * @module ol/layer/TileProperty
   */

  /**
   * @enum {string}
   */
  var TileProperty = {
    PRELOAD: 'preload',
    USE_INTERIM_TILES_ON_ERROR: 'useInterimTilesOnError'
  };

  /**
   * @module ol/layer/BaseTile
   */


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`
   * means no preloading.
   * @property {import("../source/Tile.js").default} [source] Source for this layer.
   * @property {import("../PluggableMap.js").default} [map] Sets the layer as overlay on a map. The map will not manage
   * this layer in its layers collection, and the layer will be rendered on top. This is useful for
   * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
   * use {@link module:ol/Map#addLayer}.
   * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.
   */


  /**
   * @classdesc
   * For layer sources that provide pre-rendered, tiled images in grids that are
   * organized by zoom levels for specific resolutions.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @extends {Layer<import("../source/Tile.js").default>}
   * @api
   */
  class BaseTileLayer extends Layer {
    /**
     * @param {Options=} opt_options Tile layer options.
     */
    constructor(opt_options) {
      const options = opt_options ? opt_options : {};

      const baseOptions = assign({}, options);

      delete baseOptions.preload;
      delete baseOptions.useInterimTilesOnError;
      super(baseOptions);

      this.setPreload(options.preload !== undefined ? options.preload : 0);
      this.setUseInterimTilesOnError(options.useInterimTilesOnError !== undefined ?
        options.useInterimTilesOnError : true);

    }

    /**
    * Return the level as number to which we will preload tiles up to.
    * @return {number} The level to preload tiles up to.
    * @observable
    * @api
    */
    getPreload() {
      return /** @type {number} */ (this.get(TileProperty.PRELOAD));
    }

    /**
    * Set the level as number to which we will preload tiles up to.
    * @param {number} preload The level to preload tiles up to.
    * @observable
    * @api
    */
    setPreload(preload) {
      this.set(TileProperty.PRELOAD, preload);
    }

    /**
    * Whether we use interim tiles on error.
    * @return {boolean} Use interim tiles on error.
    * @observable
    * @api
    */
    getUseInterimTilesOnError() {
      return /** @type {boolean} */ (this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR));
    }

    /**
    * Set whether we use interim tiles on error.
    * @param {boolean} useInterimTilesOnError Use interim tiles on error.
    * @observable
    * @api
    */
    setUseInterimTilesOnError(useInterimTilesOnError) {
      this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);
    }
  }

  /**
   * @module ol/renderer/canvas/TileLayer
   */

  /**
   * @classdesc
   * Canvas renderer for tile layers.
   * @api
   */
  class CanvasTileLayerRenderer extends CanvasLayerRenderer {

    /**
     * @param {import("../../layer/Tile.js").default|import("../../layer/VectorTile.js").default} tileLayer Tile layer.
     */
    constructor(tileLayer) {
      super(tileLayer);

      /**
       * Rendered extent has changed since the previous `renderFrame()` call
       * @type {boolean}
       */
      this.extentChanged = true;

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.renderedExtent_ = null;

      /**
       * @protected
       * @type {number}
       */
      this.renderedRevision;

      /**
       * @protected
       * @type {!Array<import("../../Tile.js").default>}
       */
      this.renderedTiles = [];

      /**
       * @private
       * @type {boolean}
       */
      this.newTiles_ = false;

      /**
       * @protected
       * @type {import("../../extent.js").Extent}
       */
      this.tmpExtent = createEmpty();

      /**
       * @private
       * @type {import("../../TileRange.js").default}
       */
      this.tmpTileRange_ = new TileRange(0, 0, 0, 0);

      /**
       * @protected
       * @type {number}
       */
      this.zDirection = 0;
    }

    /**
     * @protected
     * @param {import("../../Tile.js").default} tile Tile.
     * @return {boolean} Tile is drawable.
     */
    isDrawableTile(tile) {
      const tileLayer = /** @type {import("../../layer/Tile.js").default} */ (this.getLayer());
      const tileState = tile.getState();
      const useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();
      return tileState == TileState.LOADED ||
          tileState == TileState.EMPTY ||
          tileState == TileState.ERROR && !useInterimTilesOnError;
    }

    /**
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @return {!import("../../Tile.js").default} Tile.
     */
    getTile(z, x, y, frameState) {
      const pixelRatio = frameState.pixelRatio;
      const projection = frameState.viewState.projection;
      const tileLayer = /** @type {import("../../layer/Tile.js").default} */ (this.getLayer());
      const tileSource = tileLayer.getSource();
      let tile = tileSource.getTile(z, x, y, pixelRatio, projection);
      if (tile.getState() == TileState.ERROR) {
        if (!tileLayer.getUseInterimTilesOnError()) {
          // When useInterimTilesOnError is false, we consider the error tile as loaded.
          tile.setState(TileState.LOADED);
        } else if (tileLayer.getPreload() > 0) {
          // Preloaded tiles for lower resolutions might have finished loading.
          this.newTiles_ = true;
        }
      }
      if (!this.isDrawableTile(tile)) {
        tile = tile.getInterimTile();
      }
      return tile;
    }

    /**
     * @inheritDoc
     */
    loadedTileCallback(tiles, zoom, tile) {
      if (this.isDrawableTile(tile)) {
        return super.loadedTileCallback(tiles, zoom, tile);
      }
      return false;
    }

    /**
     * @inheritDoc
     */
    prepareFrame(frameState) {
      return true;
    }

    /**
     * TODO: File a TypeScript issue about inheritDoc not being followed
     * all the way.  Without this explicit return type, the VectorTileLayer
     * renderFrame function does not pass.
     *
     * @inheritDoc
     * @returns {HTMLElement} The rendered element.
     */
    renderFrame(frameState, target) {
      const layerState = frameState.layerStatesArray[frameState.layerIndex];
      const viewState = frameState.viewState;
      const projection = viewState.projection;
      const viewResolution = viewState.resolution;
      const viewCenter = viewState.center;
      const rotation = viewState.rotation;
      const pixelRatio = frameState.pixelRatio;

      const tileLayer = /** @type {import("../../layer/Tile.js").default} */ (this.getLayer());
      const tileSource = tileLayer.getSource();
      const sourceRevision = tileSource.getRevision();
      const tileGrid = tileSource.getTileGridForProjection(projection);
      const zDirection = tileSource.zDirection === undefined ? this.zDirection : tileSource.zDirection;
      const z = tileGrid.getZForResolution(viewResolution, zDirection);
      const tileResolution = tileGrid.getResolution(z);
      let extent = frameState.extent;

      if (layerState.extent) {
        extent = getIntersection(extent, layerState.extent);
      }

      const tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);

      // desired dimensions of the canvas in pixels
      let width = Math.round(frameState.size[0] * tilePixelRatio);
      let height = Math.round(frameState.size[1] * tilePixelRatio);

      if (rotation) {
        const size = Math.round(Math.sqrt(width * width + height * height));
        width = height = size;
      }

      const dx = tileResolution * width / 2 / tilePixelRatio;
      const dy = tileResolution * height / 2 / tilePixelRatio;
      const canvasExtent = [
        viewCenter[0] - dx,
        viewCenter[1] - dy,
        viewCenter[0] + dx,
        viewCenter[1] + dy
      ];

      const tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);

      /**
       * @type {Object<number, Object<string, import("../../Tile.js").default>>}
       */
      const tilesToDrawByZ = {};
      tilesToDrawByZ[z] = {};

      const findLoadedTiles = this.createLoadedTileFinder(tileSource, projection, tilesToDrawByZ);

      const tmpExtent = this.tmpExtent;
      const tmpTileRange = this.tmpTileRange_;
      this.newTiles_ = false;
      for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {
        for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {
          const tile = this.getTile(z, x, y, frameState);
          if (this.isDrawableTile(tile)) {
            const uid = getUid(this);
            if (tile.getState() == TileState.LOADED) {
              tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;
              const inTransition = tile.inTransition(uid);
              if (!this.newTiles_ && (inTransition || this.renderedTiles.indexOf(tile) === -1)) {
                this.newTiles_ = true;
              }
            }
            if (tile.getAlpha(uid, frameState.time) === 1) {
              // don't look for alt tiles if alpha is 1
              continue;
            }
          }

          const childTileRange = tileGrid.getTileCoordChildTileRange(tile.tileCoord, tmpTileRange, tmpExtent);

          let covered = false;
          if (childTileRange) {
            covered = findLoadedTiles(z + 1, childTileRange);
          }
          if (!covered) {
            tileGrid.forEachTileCoordParentTileRange(tile.tileCoord, findLoadedTiles, tmpTileRange, tmpExtent);
          }

        }
      }


      const canvasScale = tileResolution / viewResolution;

      // set forward and inverse pixel transforms
      compose(this.pixelTransform,
        frameState.size[0] / 2, frameState.size[1] / 2,
        1 / tilePixelRatio, 1 / tilePixelRatio,
        rotation,
        -width / 2, -height / 2
      );

      this.useContainer(target, this.pixelTransform, layerState.opacity);
      const context = this.context;
      const canvas = context.canvas;

      makeInverse(this.inversePixelTransform, this.pixelTransform);

      // set scale transform for calculating tile positions on the canvas
      compose(this.tempTransform_,
        width / 2, height / 2,
        canvasScale, canvasScale,
        0,
        -width / 2, -height / 2
      );

      if (canvas.width != width || canvas.height != height) {
        canvas.width = width;
        canvas.height = height;
      } else if (!this.containerReused) {
        context.clearRect(0, 0, width, height);
      }

      if (layerState.extent) {
        this.clipUnrotated(context, frameState, layerState.extent);
      }

      this.preRender(context, frameState);

      this.renderedTiles.length = 0;
      /** @type {Array<number>} */
      let zs = Object.keys(tilesToDrawByZ).map(Number);
      zs.sort(numberSafeCompareFunction);

      let clips, clipZs, currentClip;
      if (layerState.opacity === 1 && (!this.containerReused || tileSource.getOpaque(frameState.viewState.projection))) {
        zs = zs.reverse();
      } else {
        clips = [];
        clipZs = [];
      }
      for (let i = zs.length - 1; i >= 0; --i) {
        const currentZ = zs[i];
        const currentTilePixelSize = tileSource.getTilePixelSize(currentZ, pixelRatio, projection);
        const currentResolution = tileGrid.getResolution(currentZ);
        const currentScale = currentResolution / tileResolution;
        const dx = currentTilePixelSize[0] * currentScale * canvasScale;
        const dy = currentTilePixelSize[1] * currentScale * canvasScale;
        const originTileCoord = tileGrid.getTileCoordForCoordAndZ(getTopLeft(canvasExtent), currentZ);
        const originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);
        const origin = apply(this.tempTransform_, [
          tilePixelRatio * (originTileExtent[0] - canvasExtent[0]) / tileResolution,
          tilePixelRatio * (canvasExtent[3] - originTileExtent[3]) / tileResolution
        ]);
        const tileGutter = tilePixelRatio * tileSource.getGutterForProjection(projection);
        const tilesToDraw = tilesToDrawByZ[currentZ];
        for (const tileCoordKey in tilesToDraw) {
          const tile = tilesToDraw[tileCoordKey];
          const tileCoord = tile.tileCoord;

          // Calculate integer positions and sizes so that tiles align
          const floatX = (origin[0] - (originTileCoord[1] - tileCoord[1]) * dx);
          const nextX = Math.round(floatX + dx);
          const floatY = (origin[1] - (originTileCoord[2] - tileCoord[2]) * dy);
          const nextY = Math.round(floatY + dy);
          const x = Math.round(floatX);
          const y = Math.round(floatY);
          const w = nextX - x;
          const h = nextY - y;
          const transition = z === currentZ;

          const inTransition = transition && tile.getAlpha(getUid(this), frameState.time) !== 1;
          if (!inTransition) {
            if (clips) {
              // Clip mask for regions in this tile that already filled by a higher z tile
              context.save();
              currentClip = [x, y, x + w, y, x + w, y + h, x, y + h];
              for (let i = 0, ii = clips.length; i < ii; ++i) {
                if (z !== currentZ && currentZ < clipZs[i]) {
                  const clip = clips[i];
                  context.beginPath();
                  // counter-clockwise (outer ring) for current tile
                  context.moveTo(currentClip[0], currentClip[1]);
                  context.lineTo(currentClip[2], currentClip[3]);
                  context.lineTo(currentClip[4], currentClip[5]);
                  context.lineTo(currentClip[6], currentClip[7]);
                  // clockwise (inner ring) for higher z tile
                  context.moveTo(clip[6], clip[7]);
                  context.lineTo(clip[4], clip[5]);
                  context.lineTo(clip[2], clip[3]);
                  context.lineTo(clip[0], clip[1]);
                  context.clip();
                }
              }
              clips.push(currentClip);
              clipZs.push(currentZ);
            } else {
              context.clearRect(x, y, w, h);
            }
          }
          this.drawTileImage(tile, frameState, x, y, w, h, tileGutter, transition, layerState.opacity);
          if (clips && !inTransition) {
            context.restore();
          }
          this.renderedTiles.push(tile);
          this.updateUsedTiles(frameState.usedTiles, tileSource, tile);
        }
      }


      this.renderedRevision = sourceRevision;
      this.renderedResolution = tileResolution;
      this.extentChanged = !this.renderedExtent_ || !equals(this.renderedExtent_, canvasExtent);
      this.renderedExtent_ = canvasExtent;

      this.manageTilePyramid(frameState, tileSource, tileGrid, pixelRatio,
        projection, extent, z, tileLayer.getPreload());
      this.updateCacheSize_(frameState, tileSource);
      this.scheduleExpireCache(frameState, tileSource);

      this.postRender(context, frameState);

      if (layerState.extent) {
        context.restore();
      }

      const canvasTransform = toString(this.pixelTransform);
      if (canvasTransform !== canvas.style.transform) {
        canvas.style.transform = canvasTransform;
      }

      return this.container;
    }

    /**
     * @param {import("../../Tile.js").default} tile Tile.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {number} x Left of the tile.
     * @param {number} y Top of the tile.
     * @param {number} w Width of the tile.
     * @param {number} h Height of the tile.
     * @param {number} gutter Tile gutter.
     * @param {boolean} transition Apply an alpha transition.
     * @param {number} opacity Opacity.
     */
    drawTileImage(tile, frameState, x, y, w, h, gutter, transition, opacity) {
      const image = this.getTileImage(tile);
      if (!image) {
        return;
      }
      const uid = getUid(this);
      const alpha = opacity * (transition ? tile.getAlpha(uid, frameState.time) : 1);
      const alphaChanged = alpha !== this.context.globalAlpha;
      if (alphaChanged) {
        this.context.save();
        this.context.globalAlpha = alpha;
      }
      this.context.drawImage(image, gutter, gutter,
        image.width - 2 * gutter, image.height - 2 * gutter, x, y, w, h);

      if (alphaChanged) {
        this.context.restore();
      }
      if (alpha !== 1) {
        frameState.animate = true;
      } else if (transition) {
        tile.endTransition(uid);
      }
    }

    /**
     * @inheritDoc
     */
    getImage() {
      const context = this.context;
      return context ? context.canvas : null;
    }

    /**
     * Get the image from a tile.
     * @param {import("../../Tile.js").default} tile Tile.
     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
     * @protected
     */
    getTileImage(tile) {
      return /** @type {import("../../ImageTile.js").default} */ (tile).getImage();
    }

    /**
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../source/Tile.js").default} tileSource Tile source.
     * @protected
     */
    scheduleExpireCache(frameState, tileSource) {
      if (tileSource.canExpireCache()) {
        /**
         * @param {import("../../source/Tile.js").default} tileSource Tile source.
         * @param {import("../../PluggableMap.js").default} map Map.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         */
        const postRenderFunction = function(tileSource, map, frameState) {
          const tileSourceKey = getUid(tileSource);
          if (tileSourceKey in frameState.usedTiles) {
            tileSource.expireCache(frameState.viewState.projection,
              frameState.usedTiles[tileSourceKey]);
          }
        }.bind(null, tileSource);

        frameState.postRenderFunctions.push(
          /** @type {import("../../PluggableMap.js").PostRenderFunction} */ (postRenderFunction)
        );
      }
    }

    /**
     * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.
     * @param {import("../../source/Tile.js").default} tileSource Tile source.
     * @param {import('../../Tile.js').default} tile Tile.
     * @protected
     */
    updateUsedTiles(usedTiles, tileSource, tile) {
      // FIXME should we use tilesToDrawByZ instead?
      const tileSourceKey = getUid(tileSource);
      if (!(tileSourceKey in usedTiles)) {
        usedTiles[tileSourceKey] = {};
      }
      usedTiles[tileSourceKey][tile.getKey()] = true;
    }

    /**
     * Check if the cache is big enough, and increase its size if necessary.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../source/Tile.js").default} tileSource Tile source.
     * @private
     */
    updateCacheSize_(frameState, tileSource) {
      const tileSourceKey = getUid(tileSource);
      let size = 0;
      if (tileSourceKey in frameState.usedTiles) {
        size += Object.keys(frameState.usedTiles[tileSourceKey]).length;
      }
      if (tileSourceKey in frameState.wantedTiles) {
        size += Object.keys(frameState.wantedTiles[tileSourceKey]).length;
      }
      const tileCache = tileSource.tileCache;
      if (tileCache.highWaterMark < size) {
        tileCache.highWaterMark = size;
      }
    }

    /**
     * Manage tile pyramid.
     * This function performs a number of functions related to the tiles at the
     * current zoom and lower zoom levels:
     * - registers idle tiles in frameState.wantedTiles so that they are not
     *   discarded by the tile queue
     * - enqueues missing tiles
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../source/Tile.js").default} tileSource Tile source.
     * @param {import("../../tilegrid/TileGrid.js").default} tileGrid Tile grid.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../../proj/Projection.js").default} projection Projection.
     * @param {import("../../extent.js").Extent} extent Extent.
     * @param {number} currentZ Current Z.
     * @param {number} preload Load low resolution tiles up to 'preload' levels.
     * @param {function(import("../../Tile.js").default)=} opt_tileCallback Tile callback.
     * @protected
     */
    manageTilePyramid(
      frameState,
      tileSource,
      tileGrid,
      pixelRatio,
      projection,
      extent,
      currentZ,
      preload,
      opt_tileCallback
    ) {
      const tileSourceKey = getUid(tileSource);
      if (!(tileSourceKey in frameState.wantedTiles)) {
        frameState.wantedTiles[tileSourceKey] = {};
      }
      const wantedTiles = frameState.wantedTiles[tileSourceKey];
      const tileQueue = frameState.tileQueue;
      const minZoom = tileGrid.getMinZoom();
      let tile, tileRange, tileResolution, x, y, z;
      for (z = minZoom; z <= currentZ; ++z) {
        tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, tileRange);
        tileResolution = tileGrid.getResolution(z);
        for (x = tileRange.minX; x <= tileRange.maxX; ++x) {
          for (y = tileRange.minY; y <= tileRange.maxY; ++y) {
            if (currentZ - z <= preload) {
              tile = tileSource.getTile(z, x, y, pixelRatio, projection);
              if (tile.getState() == TileState.IDLE) {
                wantedTiles[tile.getKey()] = true;
                if (!tileQueue.isKeyQueued(tile.getKey())) {
                  tileQueue.enqueue([tile, tileSourceKey,
                    tileGrid.getTileCoordCenter(tile.tileCoord), tileResolution]);
                }
              }
              if (opt_tileCallback !== undefined) {
                opt_tileCallback(tile);
              }
            } else {
              tileSource.useTile(z, x, y, projection);
            }
          }
        }
      }
    }

  }


  /**
   * @function
   * @return {import("../../layer/Tile.js").default|import("../../layer/VectorTile.js").default}
   */
  CanvasTileLayerRenderer.prototype.getLayer;

  /**
   * @module ol/layer/Tile
   */


  /**
   * @classdesc
   * For layer sources that provide pre-rendered, tiled images in grids that are
   * organized by zoom levels for specific resolutions.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @api
   */
  class TileLayer extends BaseTileLayer {

    /**
     * @param {import("./BaseTile.js").Options=} opt_options Tile layer options.
     */
    constructor(opt_options) {
      super(opt_options);
    }

    /**
     * Create a renderer for this layer.
     * @return {import("../renderer/Layer.js").default} A layer renderer.
     * @protected
     */
    createRenderer() {
      return new CanvasTileLayerRenderer(this);
    }

  }

  /**
   * @module ol/renderer/canvas/VectorImageLayer
   */

  /**
   * @classdesc
   * Canvas renderer for image layers.
   * @api
   */
  class CanvasVectorImageLayerRenderer extends CanvasImageLayerRenderer {

    /**
     * @param {import("../../layer/VectorImage.js").default} layer Vector image layer.
     */
    constructor(layer) {
      super(layer);

      /**
       * @type {!Array<string>}
       */
      this.skippedFeatures_ = [];

      /**
       * @private
       * @type {import("./VectorLayer.js").default}
       */
      this.vectorRenderer_ = new CanvasVectorLayerRenderer(layer);

      /**
       * @private
       * @type {number}
       */
      this.layerImageRatio_ = layer.getImageRatio();

    }

    /**
     * @inheritDoc
     */
    disposeInternal() {
      this.vectorRenderer_.dispose();
      super.disposeInternal();
    }

    /**
     * @inheritDoc
     */
    handleFontsChanged() {
      this.vectorRenderer_.handleFontsChanged();
    }

    /**
     * @inheritDoc
     */
    prepareFrame(frameState) {
      const pixelRatio = frameState.pixelRatio;
      const viewState = frameState.viewState;
      const viewResolution = viewState.resolution;

      const hints = frameState.viewHints;
      const vectorRenderer = this.vectorRenderer_;
      let renderedExtent = frameState.extent;
      if (this.layerImageRatio_ !== 1) {
        renderedExtent = renderedExtent.slice(0);
        scaleFromCenter(renderedExtent, this.layerImageRatio_);
      }

      if (!hints[ViewHint.ANIMATING] && !hints[ViewHint.INTERACTING] && !isEmpty$1(renderedExtent)) {
        let skippedFeatures = this.skippedFeatures_;
        vectorRenderer.useContainer(null, null, 1);
        const context = vectorRenderer.context;
        const imageFrameState = /** @type {import("../../PluggableMap.js").FrameState} */ (assign({}, frameState, {
          declutterItems: [],
          size: [
            getWidth(renderedExtent) / viewResolution,
            getHeight(renderedExtent) / viewResolution
          ],
          viewState: /** @type {import("../../View.js").State} */ (assign({}, frameState.viewState, {
            rotation: 0
          }))
        }));
        const newSkippedFeatures = Object.keys(imageFrameState.skippedFeatureUids).sort();
        const image = new ImageCanvas(renderedExtent, viewResolution, pixelRatio, context.canvas, function(callback) {
          if (vectorRenderer.prepareFrame(imageFrameState) &&
                (vectorRenderer.replayGroupChanged ||
                !equals$1(skippedFeatures, newSkippedFeatures))) {
            vectorRenderer.renderFrame(imageFrameState, null);
            renderDeclutterItems(imageFrameState, null);
            skippedFeatures = newSkippedFeatures;
            callback();
          }
        });

        listen(image, EventType.CHANGE, function() {
          if (image.getState() === ImageState.LOADED) {
            this.image_ = image;
            this.skippedFeatures_ = skippedFeatures;
          }
        }, this);
        image.load();
      }

      if (this.image_) {
        const image = this.image_;
        const imageResolution = image.getResolution();
        const imagePixelRatio = image.getPixelRatio();
        this.renderedResolution = imageResolution * pixelRatio / imagePixelRatio;
      }

      return !!this.image_;
    }

    /**
     * @override
     */
    preRender() {}

    /**
     * @override
     */
    postRender() {}

    /**
     * @inheritDoc
     */
    forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, declutteredFeatures) {
      if (this.vectorRenderer_) {
        return this.vectorRenderer_.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, declutteredFeatures);
      } else {
        return super.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, declutteredFeatures);
      }
    }
  }

  /**
   * @module ol/layer/VectorImage
   */

  /**
   * @typedef {Object} Options
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {import("../render.js").OrderFunction} [renderOrder] Render order. Function to be used when sorting
   * features before rendering. By default features are drawn in the order that they are created. Use
   * `null` to avoid the sort, but get an undefined draw order.
   * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the
   * renderer when getting features from the vector source for the rendering or hit-detection.
   * Recommended value: the size of the largest symbol, line width or label.
   * @property {import("../source/Vector.js").default} [source] Source.
   * @property {import("../PluggableMap.js").default} [map] Sets the layer as overlay on a map. The map will not manage
   * this layer in its layers collection, and the layer will be rendered on top. This is useful for
   * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
   * use {@link module:ol/Map#addLayer}.
   * @property {boolean} [declutter=false] Declutter images and text on this layer. The priority is defined
   * by the `zIndex` of the style and the render order of features. Higher z-index means higher priority.
   * Within the same z-index, a feature rendered before another has higher priority.
   * @property {import("../style/Style.js").StyleLike} [style] Layer style. See
   * {@link module:ol/style} for default style which will be used if this is not defined.
   * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will
   * be recreated during animations. This means that no vectors will be shown clipped, but the
   * setting will have a performance impact for large amounts of vector data. When set to `false`,
   * batches will be recreated when no animation is active.
   * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will
   * be recreated during interactions. See also `updateWhileAnimating`.
   * @property {number} [imageRatio=1] Ratio by which the rendered extent should be larger than the
   * viewport extent. A larger ratio avoids cut images during panning, but will cause a decrease in performance.
   */


  /**
   * @classdesc
   * Vector data that is rendered client-side.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @api
   */
  class VectorImageLayer extends BaseVectorLayer {
    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {
      const options = opt_options ? opt_options : {};

      const baseOptions = assign({}, options);
      delete baseOptions.imageRatio;
      super(baseOptions);

      /**
       * @type {number}
       * @private
       */
      this.imageRatio_ = options.imageRatio !== undefined ? options.imageRatio : 1;

    }

    /**
     * @return {number} Ratio between rendered extent size and viewport extent size.
     */
    getImageRatio() {
      return this.imageRatio_;
    }

    /**
     * Create a renderer for this layer.
     * @return {import("../renderer/Layer.js").default} A layer renderer.
     * @protected
     */
    createRenderer() {
      return new CanvasVectorImageLayerRenderer(this);
    }
  }

  /**
   * @module ol/layer/VectorTileRenderType
   */

  /**
   * @enum {string}
   * Render mode for vector tiles:
   *  * `'image'`: Vector tiles are rendered as images. Great performance, but
   *    point symbols and texts are always rotated with the view and pixels are
   *    scaled during zoom animations.
   *  * `'hybrid'`: Polygon and line elements are rendered as images, so pixels
   *    are scaled during zoom animations. Point symbols and texts are accurately
   *    rendered as vectors and can stay upright on rotated views.
   * @api
   */
  var VectorTileRenderType = {
    IMAGE: 'image',
    HYBRID: 'hybrid'
  };

  /**
   * @module ol/renderer/canvas/VectorTileLayer
   */


  /**
   * @type {!Object<string, Array<import("../../render/canvas/BuilderType.js").default>>}
   */
  const IMAGE_REPLAYS = {
    'image': [ReplayType.POLYGON, ReplayType.CIRCLE,
      ReplayType.LINE_STRING, ReplayType.IMAGE, ReplayType.TEXT],
    'hybrid': [ReplayType.POLYGON, ReplayType.LINE_STRING]
  };


  /**
   * @type {!Object<string, Array<import("../../render/canvas/BuilderType.js").default>>}
   */
  const VECTOR_REPLAYS = {
    'image': [ReplayType.DEFAULT],
    'hybrid': [ReplayType.IMAGE, ReplayType.TEXT, ReplayType.DEFAULT]
  };


  /**
   * @classdesc
   * Canvas renderer for vector tile layers.
   * @api
   */
  class CanvasVectorTileLayerRenderer extends CanvasTileLayerRenderer {

    /**
     * @param {import("../../layer/VectorTile.js").default} layer VectorTile layer.
     */
    constructor(layer) {
      super(layer);

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.overlayContext_ = null;

      /**
       * @type {string}
       */
      this.overlayContextUid_;

      /**
       * The transform for rendered pixels to viewport CSS pixels for the overlay canvas.
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.overlayPixelTransform_ = create();

      /**
       * The transform for viewport CSS pixels to rendered pixels for the overlay canvas.
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.inverseOverlayPixelTransform_ = create();

      /**
       * @private
       * @type {boolean}
       */
      this.dirty_ = false;

      /**
       * @private
       * @type {number}
       */
      this.renderedLayerRevision_;

      /**
       * @private
       * @type {!Object<string, import("../../VectorRenderTile.js").default>}
       */
      this.renderTileImageQueue_ = {};

      /**
       * @type {Object<string, import("../../events.js").EventsKey>}
       */
      this.tileListenerKeys_ = {};

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.tmpTransform_ = create();

      // Use nearest lower resolution.
      this.zDirection = 1;
    }

    /**
     * @inheritDoc
     */
    useContainer(target, transform, opacity) {
      let overlayContext;
      if (target && target.childElementCount === 2) {
        overlayContext = target.lastElementChild.getContext('2d');
        if (!overlayContext) {
          target = null;
        }
      }
      const containerReused = this.containerReused;
      super.useContainer(target, transform, opacity);
      if (containerReused) {
        this.overlayContext_ = overlayContext || null;
        this.overlayContextUid_ = overlayContext ? getUid(overlayContext) : undefined;
      }
      if (!this.overlayContext_) {
        const overlayContext = createCanvasContext2D();
        const style = overlayContext.canvas.style;
        style.position = 'absolute';
        style.transformOrigin = 'top left';
        this.overlayContext_ = overlayContext;
        this.overlayContextUid_ = getUid(overlayContext);
      }
      if (this.container.childElementCount === 1) {
        this.container.appendChild(this.overlayContext_.canvas);
      }
    }

    /**
     * @param {import("../../VectorRenderTile.js").default} tile Tile.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../../proj/Projection").default} projection Projection.
     * @param {boolean} queue Queue tile for rendering.
     * @return {boolean} Tile needs to be rendered.
     */
    prepareTile(tile, pixelRatio, projection, queue) {
      let render = false;
      const tileUid = getUid(tile);
      const state = tile.getState();
      if (((state === TileState.LOADED && tile.hifi) ||
          state === TileState.ERROR || state === TileState.ABORT) &&
          tileUid in this.tileListenerKeys_) {
        unlistenByKey(this.tileListenerKeys_[tileUid]);
        delete this.tileListenerKeys_[tileUid];
      }
      if (state === TileState.LOADED || state === TileState.ERROR) {
        this.updateExecutorGroup_(tile, pixelRatio, projection);
        if (this.tileImageNeedsRender_(tile, pixelRatio, projection)) {
          render = true;
          if (queue) {
            this.renderTileImageQueue_[tileUid] = tile;
          }
        }
      }
      return render;
    }

    /**
     * @inheritDoc
     */
    getTile(z, x, y, frameState) {
      const tile = /** @type {import("../../VectorRenderTile.js").default} */ (super.getTile(z, x, y, frameState));
      const pixelRatio = frameState.pixelRatio;
      const viewState = frameState.viewState;
      const resolution = viewState.resolution;
      const projection = viewState.projection;
      if (tile.getState() < TileState.LOADED) {
        tile.wantedResolution = resolution;
        const tileUid = getUid(tile);
        if (!(tileUid in this.tileListenerKeys_)) {
          const listenerKey = listen(tile, EventType.CHANGE, this.prepareTile.bind(this, tile, pixelRatio, projection, true));
          this.tileListenerKeys_[tileUid] = listenerKey;
        }
      } else {
        const viewHints = frameState.viewHints;
        const hifi = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);
        if (hifi || !tile.wantedResolution) {
          tile.wantedResolution = resolution;
        }
        const render = this.prepareTile(tile, pixelRatio, projection, false);
        if (render) {
          this.renderTileImage_(tile, frameState);
        }
      }
      return tile;
    }

    /**
     * @inheritdoc
     */
    isDrawableTile(tile) {
      return super.isDrawableTile(tile) && tile.hasContext(this.getLayer());
    }

    /**
     * @inheritDoc
     */
    getTileImage(tile) {
      return tile.getImage(this.getLayer());
    }

    /**
     * @inheritDoc
     */
    prepareFrame(frameState) {
      const layerState = frameState.layerStatesArray[frameState.layerIndex];
      layerState.hasOverlay = true;
      const layerRevision = this.getLayer().getRevision();
      if (this.renderedLayerRevision_ != layerRevision) {
        this.renderedTiles.length = 0;
      }
      this.renderedLayerRevision_ = layerRevision;
      return super.prepareFrame(frameState);
    }

    /**
     * @param {import("../../VectorRenderTile.js").default} tile Tile.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../../proj/Projection.js").default} projection Projection.
     * @private
     */
    updateExecutorGroup_(tile, pixelRatio, projection) {
      const layer = /** @type {import("../../layer/VectorTile.js").default} */ (this.getLayer());
      const revision = layer.getRevision();
      const renderOrder = layer.getRenderOrder() || null;

      const resolution = tile.wantedResolution;
      const builderState = tile.getReplayState(layer);
      if (!builderState.dirty && builderState.renderedResolution === resolution &&
          builderState.renderedRevision == revision &&
          builderState.renderedRenderOrder == renderOrder && builderState.renderedZ === tile.sourceZ) {
        return;
      }

      const source = layer.getSource();
      const sourceTileGrid = source.getTileGrid();
      const tileGrid = source.getTileGridForProjection(projection);
      const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);

      const sourceTiles = source.getSourceTiles(pixelRatio, projection, tile);
      const layerUid = getUid(layer);
      const executorGroups = tile.executorGroups[layerUid];
      if (executorGroups) {
        for (let i = 0, ii = executorGroups.length; i < ii; ++i) {
          executorGroups[i].dispose();
        }
      }
      tile.executorGroups[layerUid] = [];
      for (let t = 0, tt = sourceTiles.length; t < tt; ++t) {
        const sourceTile = sourceTiles[t];
        if (sourceTile.getState() != TileState.LOADED) {
          continue;
        }
        const sourceTileCoord = sourceTile.tileCoord;
        const sourceTileExtent = sourceTileGrid.getTileCoordExtent(sourceTileCoord);
        const sharedExtent = getIntersection(tileExtent, sourceTileExtent);
        const bufferedExtent = equals(sourceTileExtent, sharedExtent) ? null :
          buffer(sharedExtent, layer.getRenderBuffer() * resolution, this.tmpExtent);
        builderState.dirty = false;
        const builderGroup = new BuilderGroup(0, sharedExtent, resolution,
          pixelRatio, layer.getDeclutter());
        const squaredTolerance = getSquaredTolerance(resolution, pixelRatio);

        /**
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         * @this {CanvasVectorTileLayerRenderer}
         */
        const render = function(feature) {
          let styles;
          const styleFunction = feature.getStyleFunction() || layer.getStyleFunction();
          if (styleFunction) {
            styles = styleFunction(feature, resolution);
          }
          if (styles) {
            const dirty = this.renderFeature(feature, squaredTolerance, styles, builderGroup);
            this.dirty_ = this.dirty_ || dirty;
            builderState.dirty = builderState.dirty || dirty;
          }
        };

        const features = sourceTile.getFeatures();
        if (renderOrder && renderOrder !== builderState.renderedRenderOrder) {
          features.sort(renderOrder);
        }
        for (let i = 0, ii = features.length; i < ii; ++i) {
          const feature = features[i];
          if (!bufferedExtent || intersects(bufferedExtent, feature.getGeometry().getExtent())) {
            render.call(this, feature);
          }
        }
        const executorGroupInstructions = builderGroup.finish();
        // no need to clip when the render tile is covered by a single source tile
        const replayExtent = layer.getDeclutter() && sourceTiles.length === 1 ?
          null :
          sharedExtent;
        const renderingReplayGroup = new ExecutorGroup(replayExtent, resolution,
          pixelRatio, source.getOverlaps(), executorGroupInstructions, layer.getRenderBuffer());
        tile.executorGroups[layerUid].push(renderingReplayGroup);
      }
      builderState.renderedRevision = revision;
      builderState.renderedZ = tile.sourceZ;
      builderState.renderedRenderOrder = renderOrder;
      builderState.renderedResolution = resolution;
    }

    /**
     * @inheritDoc
     */
    forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, declutteredFeatures) {
      const resolution = frameState.viewState.resolution;
      const rotation = frameState.viewState.rotation;
      hitTolerance = hitTolerance == undefined ? 0 : hitTolerance;
      const layer = /** @type {import("../../layer/VectorTile.js").default} */ (this.getLayer());
      const declutter = layer.getDeclutter();
      const source = layer.getSource();
      const tileGrid = source.getTileGridForProjection(frameState.viewState.projection);
      /** @type {!Object<string, boolean>} */
      const features = {};

      const renderedTiles = /** @type {Array<import("../../VectorRenderTile.js").default>} */ (this.renderedTiles);

      let found;
      let i, ii;
      for (i = 0, ii = renderedTiles.length; i < ii; ++i) {
        const tile = renderedTiles[i];
        if (!declutter) {
          // When not decluttering, we only need to consider the tile that contains the given
          // coordinate, because each feature will be rendered for each tile that contains it.
          const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);
          if (!containsCoordinate(tileExtent, coordinate)) {
            continue;
          }
        }
        const executorGroups = tile.executorGroups[getUid(layer)];
        for (let t = 0, tt = executorGroups.length; t < tt; ++t) {
          const executorGroup = executorGroups[t];
          found = found || executorGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, {},
            /**
             * @param {import("../../Feature.js").FeatureLike} feature Feature.
             * @return {?} Callback result.
             */
            function(feature) {
              let key = feature.getId();
              if (key === undefined) {
                key = getUid(feature);
              }
              if (!(key in features)) {
                features[key] = true;
                return callback(feature, layer);
              }
            }, layer.getDeclutter() ? declutteredFeatures : null);
        }
      }
      return found;
    }

    /**
     * @inheritDoc
     */
    handleFontsChanged() {
      const layer = this.getLayer();
      if (layer.getVisible() && this.renderedLayerRevision_ !== undefined) {
        layer.changed();
      }
    }

    /**
     * Handle changes in image style state.
     * @param {import("../../events/Event.js").default} event Image style change event.
     * @private
     */
    handleStyleImageChange_(event) {
      this.renderIfReadyAndVisible();
    }

    /**
     * @inheritDoc
     */
    renderFrame(frameState, target) {
      const viewHints = frameState.viewHints;
      const hifi = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);
      this.renderQueuedTileImages_(hifi, frameState);

      super.renderFrame(frameState, target);

      const layer = /** @type {import("../../layer/VectorTile.js").default} */ (this.getLayer());
      const renderMode = layer.getRenderMode();
      if (renderMode === VectorTileRenderType.IMAGE) {
        return this.container;
      }

      const source = layer.getSource();
      // Unqueue tiles from the image queue when we don't need any more
      const usedTiles = frameState.usedTiles[getUid(source)];
      for (const tileUid in this.renderTileImageQueue_) {
        if (!usedTiles || !(tileUid in usedTiles)) {
          delete this.renderTileImageQueue_[tileUid];
        }
      }

      const context = this.overlayContext_;
      const declutterReplays = layer.getDeclutter() ? {} : null;
      const replayTypes = VECTOR_REPLAYS[renderMode];
      const pixelRatio = frameState.pixelRatio;
      const rotation = frameState.viewState.rotation;
      const size = frameState.size;

      // set forward and inverse pixel transforms
      makeScale(this.overlayPixelTransform_, 1 / pixelRatio, 1 / pixelRatio);
      makeInverse(this.inverseOverlayPixelTransform_, this.overlayPixelTransform_);

      // resize and clear
      const canvas = context.canvas;
      const width = Math.round(size[0] * pixelRatio);
      const height = Math.round(size[1] * pixelRatio);
      if (canvas.width != width || canvas.height != height) {
        canvas.width = width;
        canvas.height = height;
        const canvasTransform = toString(this.overlayPixelTransform_);
        if (canvas.style.transform !== canvasTransform) {
          canvas.style.transform = canvasTransform;
        }
      } else if (getUid(context) === this.overlayContextUid_) {
        context.clearRect(0, 0, width, height);
      }

      const tiles = this.renderedTiles;
      const tileGrid = source.getTileGridForProjection(frameState.viewState.projection);
      const clips = [];
      const clipZs = [];
      for (let i = tiles.length - 1; i >= 0; --i) {
        const tile = /** @type {import("../../VectorRenderTile.js").default} */ (tiles[i]);
        if (tile.getState() == TileState.ABORT) {
          continue;
        }
        const tileCoord = tile.tileCoord;
        const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);
        const worldOffset = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent)[0] - tileExtent[0];
        const transform = this.getRenderTransform(frameState, width, height, worldOffset);
        const executorGroups = tile.executorGroups[getUid(layer)];
        let clipped = false;
        for (let t = 0, tt = executorGroups.length; t < tt; ++t) {
          const executorGroup = executorGroups[t];
          if (!executorGroup.hasExecutors(replayTypes)) {
            // sourceTile has no instructions of the types we want to render
            continue;
          }
          const currentZ = tile.tileCoord[0];
          let currentClip;
          if (!declutterReplays && !clipped) {
            currentClip = executorGroup.getClipCoords(transform);
            context.save();

            // Create a clip mask for regions in this low resolution tile that are
            // already filled by a higher resolution tile
            for (let j = 0, jj = clips.length; j < jj; ++j) {
              const clip = clips[j];
              if (currentZ < clipZs[j]) {
                context.beginPath();
                // counter-clockwise (outer ring) for current tile
                context.moveTo(currentClip[0], currentClip[1]);
                context.lineTo(currentClip[2], currentClip[3]);
                context.lineTo(currentClip[4], currentClip[5]);
                context.lineTo(currentClip[6], currentClip[7]);
                // clockwise (inner ring) for higher resolution tile
                context.moveTo(clip[6], clip[7]);
                context.lineTo(clip[4], clip[5]);
                context.lineTo(clip[2], clip[3]);
                context.lineTo(clip[0], clip[1]);
                context.clip();
              }
            }
          }
          executorGroup.execute(context, transform, rotation, {}, hifi, replayTypes, declutterReplays);
          if (!declutterReplays && !clipped) {
            context.restore();
            clips.push(currentClip);
            clipZs.push(currentZ);
            clipped = true;
          }
        }
      }
      if (declutterReplays) {
        const layerState = frameState.layerStatesArray[frameState.layerIndex];
        replayDeclutter(declutterReplays, context, rotation, layerState.opacity, hifi, frameState.declutterItems);
      }

      return this.container;
    }

    /**
     * @param {boolean} hifi We have time to render a high fidelity map image.
     * @param {import('../../PluggableMap.js').FrameState} frameState Frame state.
     */
    renderQueuedTileImages_(hifi, frameState) {
      // When we don't have time to render hifi, only render tiles until we have used up
      // half of the frame budget of 16 ms
      for (const uid in this.renderTileImageQueue_) {
        if (!hifi && Date.now() - frameState.time > 8) {
          frameState.animate = true;
          break;
        }
        const tile = this.renderTileImageQueue_[uid];
        delete this.renderTileImageQueue_[uid];
        this.renderTileImage_(tile, frameState);
      }
    }

    /**
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     * @param {number} squaredTolerance Squared tolerance.
     * @param {import("../../style/Style.js").default|Array<import("../../style/Style.js").default>} styles The style or array of styles.
     * @param {import("../../render/canvas/BuilderGroup.js").default} executorGroup Replay group.
     * @return {boolean} `true` if an image is loading.
     */
    renderFeature(feature, squaredTolerance, styles, executorGroup) {
      if (!styles) {
        return false;
      }
      let loading = false;
      if (Array.isArray(styles)) {
        for (let i = 0, ii = styles.length; i < ii; ++i) {
          loading = renderFeature(
            executorGroup, feature, styles[i], squaredTolerance,
            this.handleStyleImageChange_, this) || loading;
        }
      } else {
        loading = renderFeature(
          executorGroup, feature, styles, squaredTolerance,
          this.handleStyleImageChange_, this);
      }
      return loading;
    }

    /**
     * @param {import("../../VectorRenderTile.js").default} tile Tile.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../../proj/Projection.js").default} projection Projection.
     * @return {boolean} A new tile image was rendered.
     * @private
     */
    tileImageNeedsRender_(tile, pixelRatio, projection) {
      const layer = /** @type {import("../../layer/VectorTile.js").default} */ (this.getLayer());
      const replayState = tile.getReplayState(layer);
      const revision = layer.getRevision();
      const sourceZ = tile.sourceZ;
      const resolution = tile.wantedResolution;
      return replayState.renderedTileResolution !== resolution || replayState.renderedTileRevision !== revision || replayState.renderedTileZ !== sourceZ;
    }

    /**
     * @param {import("../../VectorRenderTile.js").default} tile Tile.
     * @param {import("../../PluggableMap").FrameState} frameState Frame state.
     * @private
     */
    renderTileImage_(tile, frameState) {
      const layer = /** @type {import("../../layer/VectorTile.js").default} */ (this.getLayer());
      const replayState = tile.getReplayState(layer);
      const revision = layer.getRevision();
      const executorGroups = tile.executorGroups[getUid(layer)];
      replayState.renderedTileRevision = revision;
      replayState.renderedTileZ = tile.sourceZ;

      const tileCoord = tile.wrappedTileCoord;
      const z = tileCoord[0];
      const source = layer.getSource();
      let pixelRatio = frameState.pixelRatio;
      const viewState = frameState.viewState;
      const projection = viewState.projection;
      const tileGrid = source.getTileGridForProjection(projection);
      const tileResolution = tileGrid.getResolution(tile.tileCoord[0]);
      const renderPixelRatio = frameState.pixelRatio / tile.wantedResolution * tileResolution;
      const resolution = tileGrid.getResolution(z);
      const context = tile.getContext(layer);

      // Increase tile size when overzooming for low pixel ratio, to avoid blurry tiles
      pixelRatio = Math.max(pixelRatio, renderPixelRatio / pixelRatio);
      const size = source.getTilePixelSize(z, pixelRatio, projection);
      context.canvas.width = size[0];
      context.canvas.height = size[1];
      const renderScale = pixelRatio / renderPixelRatio;
      if (renderScale !== 1) {
        const canvasTransform = reset(this.tmpTransform_);
        scale$1(canvasTransform, renderScale, renderScale);
        context.setTransform.apply(context, canvasTransform);
      }
      const tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent);
      const pixelScale = renderPixelRatio / resolution;
      const transform = reset(this.tmpTransform_);
      scale$1(transform, pixelScale, -pixelScale);
      translate$1(transform, -tileExtent[0], -tileExtent[3]);
      for (let i = 0, ii = executorGroups.length; i < ii; ++i) {
        const executorGroup = executorGroups[i];
        executorGroup.execute(context, transform, 0, {}, true, IMAGE_REPLAYS[layer.getRenderMode()]);
      }
      replayState.renderedTileResolution = tile.wantedResolution;
    }

    /**
     * @inheritDoc
     */
    getDataAtPixel(pixel, frameState, hitTolerance) {
      let data = super.getDataAtPixel(pixel, frameState, hitTolerance);
      if (data) {
        return data;
      }

      const renderPixel = apply(this.inverseOverlayPixelTransform_, pixel.slice());
      const context = this.overlayContext_;

      try {
        data = context.getImageData(Math.round(renderPixel[0]), Math.round(renderPixel[1]), 1, 1).data;
      } catch (err) {
        if (err.name === 'SecurityError') {
          // tainted canvas, we assume there is data at the given pixel (although there might not be)
          return new Uint8Array();
        }
        return data;
      }

      if (data[3] === 0) {
        return null;
      }
      return data;
    }

  }

  /**
   * @module ol/layer/VectorTile
   */


  /**
   * @typedef {Object} Options
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {import("../render.js").OrderFunction} [renderOrder] Render order. Function to be used when sorting
   * features before rendering. By default features are drawn in the order that they are created. Use
   * `null` to avoid the sort, but get an undefined draw order.
   * @property {number} [renderBuffer=100] The buffer in pixels around the tile extent used by the
   * renderer when getting features from the vector tile for the rendering or hit-detection.
   * Recommended value: Vector tiles are usually generated with a buffer, so this value should match
   * the largest possible buffer of the used tiles. It should be at least the size of the largest
   * point symbol or line width.
   * @property {import("./VectorTileRenderType.js").default|string} [renderMode='hybrid'] Render mode for vector tiles:
   *  * `'image'`: Vector tiles are rendered as images. Great performance, but point symbols and texts
   *    are always rotated with the view and pixels are scaled during zoom animations. When `declutter`
   *    is set to `true`, the decluttering is done per tile resulting in labels and point symbols getting
   *    cut off at tile boundaries.
   *  * `'hybrid'`: Polygon and line elements are rendered as images, so pixels are scaled during zoom
   *    animations. Point symbols and texts are accurately rendered as vectors and can stay upright on
   *    rotated views.
   *
   * @property {import("../source/VectorTile.js").default} [source] Source.
   * @property {import("../PluggableMap.js").default} [map] Sets the layer as overlay on a map. The map will not manage
   * this layer in its layers collection, and the layer will be rendered on top. This is useful for
   * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
   * use {@link module:ol/Map#addLayer}.
   * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all
   * image and text styles of all Vector and VectorTile layers that have set this to `true`. The priority
   * is defined by the z-index of the layer, the `zIndex` of the style and the render order of features.
   * Higher z-index means higher priority. Within the same z-index, a feature rendered before another has
   * higher priority.
   * @property {import("../style/Style.js").StyleLike} [style] Layer style. See
   * {@link module:ol/style} for default style which will be used if this is not defined.
   * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will be
   * recreated during animations. This means that no vectors will be shown clipped, but the setting
   * will have a performance impact for large amounts of vector data. When set to `false`, batches
   * will be recreated when no animation is active.
   * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will be
   * recreated during interactions. See also `updateWhileAnimating`.
   * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`
   * means no preloading.
   * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.
   */


  /**
   * @classdesc
   * Layer for vector tile data that is rendered client-side.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @param {Options=} opt_options Options.
   * @extends {BaseVectorLayer<import("../source/VectorTile.js").default>}
   * @api
   */
  class VectorTileLayer extends BaseVectorLayer {
    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {
      const options = opt_options ? opt_options : {};

      const baseOptions = /** @type {Object} */ (assign({}, options));
      delete baseOptions.preload;
      delete baseOptions.useInterimTilesOnError;

      super(/** @type {import("./BaseVector.js").Options} */ (baseOptions));

      const renderMode = options.renderMode || VectorTileRenderType.HYBRID;
      assert(renderMode == undefined ||
          renderMode == VectorTileRenderType.IMAGE ||
          renderMode == VectorTileRenderType.HYBRID,
      28); // `renderMode` must be `'image'` or `'hybrid'`

      /**
       * @private
       * @type {VectorTileRenderType}
       */
      this.renderMode_ = renderMode;

      this.setPreload(options.preload ? options.preload : 0);
      this.setUseInterimTilesOnError(options.useInterimTilesOnError !== undefined ?
        options.useInterimTilesOnError : true);

    }

    /**
     * Create a renderer for this layer.
     * @return {import("../renderer/Layer.js").default} A layer renderer.
     * @protected
     */
    createRenderer() {
      return new CanvasVectorTileLayerRenderer(this);
    }

    /**
     * @return {VectorTileRenderType} The render mode.
     */
    getRenderMode() {
      return this.renderMode_;
    }

    /**
     * Return the level as number to which we will preload tiles up to.
     * @return {number} The level to preload tiles up to.
     * @observable
     * @api
     */
    getPreload() {
      return /** @type {number} */ (this.get(TileProperty.PRELOAD));
    }

    /**
     * Whether we use interim tiles on error.
     * @return {boolean} Use interim tiles on error.
     * @observable
     * @api
     */
    getUseInterimTilesOnError() {
      return /** @type {boolean} */ (this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR));
    }

    /**
     * Set the level as number to which we will preload tiles up to.
     * @param {number} preload The level to preload tiles up to.
     * @observable
     * @api
     */
    setPreload(preload) {
      this.set(TileProperty.PRELOAD, preload);
    }

    /**
     * Set whether we use interim tiles on error.
     * @param {boolean} useInterimTilesOnError Use interim tiles on error.
     * @observable
     * @api
     */
    setUseInterimTilesOnError(useInterimTilesOnError) {
      this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);
    }
  }



  var layer = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Group: LayerGroup,
    Heatmap: Heatmap,
    Image: ImageLayer,
    Layer: Layer,
    Tile: TileLayer,
    Vector: VectorLayer,
    VectorImage: VectorImageLayer,
    VectorTile: VectorTileLayer
  });

  /**
   * @module ol/reproj
   */


  /**
   * Calculates ideal resolution to use from the source in order to achieve
   * pixel mapping as close as possible to 1:1 during reprojection.
   * The resolution is calculated regardless of what resolutions
   * are actually available in the dataset (TileGrid, Image, ...).
   *
   * @param {import("./proj/Projection.js").default} sourceProj Source projection.
   * @param {import("./proj/Projection.js").default} targetProj Target projection.
   * @param {import("./coordinate.js").Coordinate} targetCenter Target center.
   * @param {number} targetResolution Target resolution.
   * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.
   */
  function calculateSourceResolution(sourceProj, targetProj,
    targetCenter, targetResolution) {

    const sourceCenter = transform(targetCenter, targetProj, sourceProj);

    // calculate the ideal resolution of the source data
    let sourceResolution = getPointResolution(targetProj, targetResolution, targetCenter);

    const targetMetersPerUnit = targetProj.getMetersPerUnit();
    if (targetMetersPerUnit !== undefined) {
      sourceResolution *= targetMetersPerUnit;
    }
    const sourceMetersPerUnit = sourceProj.getMetersPerUnit();
    if (sourceMetersPerUnit !== undefined) {
      sourceResolution /= sourceMetersPerUnit;
    }

    // Based on the projection properties, the point resolution at the specified
    // coordinates may be slightly different. We need to reverse-compensate this
    // in order to achieve optimal results.

    const sourceExtent = sourceProj.getExtent();
    if (!sourceExtent || containsCoordinate(sourceExtent, sourceCenter)) {
      const compensationFactor = getPointResolution(sourceProj, sourceResolution, sourceCenter) /
          sourceResolution;
      if (isFinite(compensationFactor) && compensationFactor > 0) {
        sourceResolution /= compensationFactor;
      }
    }

    return sourceResolution;
  }


  /**
   * Enlarge the clipping triangle point by 1 pixel to ensure the edges overlap
   * in order to mask gaps caused by antialiasing.
   *
   * @param {number} centroidX Centroid of the triangle (x coordinate in pixels).
   * @param {number} centroidY Centroid of the triangle (y coordinate in pixels).
   * @param {number} x X coordinate of the point (in pixels).
   * @param {number} y Y coordinate of the point (in pixels).
   * @return {import("./coordinate.js").Coordinate} New point 1 px farther from the centroid.
   */
  function enlargeClipPoint(centroidX, centroidY, x, y) {
    const dX = x - centroidX;
    const dY = y - centroidY;
    const distance = Math.sqrt(dX * dX + dY * dY);
    return [Math.round(x + dX / distance), Math.round(y + dY / distance)];
  }


  /**
   * Renders the source data into new canvas based on the triangulation.
   *
   * @param {number} width Width of the canvas.
   * @param {number} height Height of the canvas.
   * @param {number} pixelRatio Pixel ratio.
   * @param {number} sourceResolution Source resolution.
   * @param {import("./extent.js").Extent} sourceExtent Extent of the data source.
   * @param {number} targetResolution Target resolution.
   * @param {import("./extent.js").Extent} targetExtent Target extent.
   * @param {import("./reproj/Triangulation.js").default} triangulation
   * Calculated triangulation.
   * @param {Array<{extent: import("./extent.js").Extent,
   *                 image: (HTMLCanvasElement|HTMLImageElement|HTMLVideoElement)}>} sources
   * Array of sources.
   * @param {number} gutter Gutter of the sources.
   * @param {boolean=} opt_renderEdges Render reprojection edges.
   * @return {HTMLCanvasElement} Canvas with reprojected data.
   */
  function render$7(width, height, pixelRatio,
    sourceResolution, sourceExtent, targetResolution, targetExtent,
    triangulation, sources, gutter, opt_renderEdges) {

    const context = createCanvasContext2D(Math.round(pixelRatio * width),
      Math.round(pixelRatio * height));

    if (sources.length === 0) {
      return context.canvas;
    }

    context.scale(pixelRatio, pixelRatio);

    const sourceDataExtent = createEmpty();
    sources.forEach(function(src, i, arr) {
      extend(sourceDataExtent, src.extent);
    });

    const canvasWidthInUnits = getWidth(sourceDataExtent);
    const canvasHeightInUnits = getHeight(sourceDataExtent);
    const stitchContext = createCanvasContext2D(
      Math.round(pixelRatio * canvasWidthInUnits / sourceResolution),
      Math.round(pixelRatio * canvasHeightInUnits / sourceResolution));

    const stitchScale = pixelRatio / sourceResolution;

    sources.forEach(function(src, i, arr) {
      const xPos = src.extent[0] - sourceDataExtent[0];
      const yPos = -(src.extent[3] - sourceDataExtent[3]);
      const srcWidth = getWidth(src.extent);
      const srcHeight = getHeight(src.extent);

      stitchContext.drawImage(
        src.image,
        gutter, gutter,
        src.image.width - 2 * gutter, src.image.height - 2 * gutter,
        xPos * stitchScale, yPos * stitchScale,
        srcWidth * stitchScale, srcHeight * stitchScale);
    });

    const targetTopLeft = getTopLeft(targetExtent);

    triangulation.getTriangles().forEach(function(triangle, i, arr) {
      /* Calculate affine transform (src -> dst)
       * Resulting matrix can be used to transform coordinate
       * from `sourceProjection` to destination pixels.
       *
       * To optimize number of context calls and increase numerical stability,
       * we also do the following operations:
       * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)
       * here before solving the linear system so [ui, vi] are pixel coordinates.
       *
       * Src points: xi, yi
       * Dst points: ui, vi
       * Affine coefficients: aij
       *
       * | x0 y0 1  0  0 0 |   |a00|   |u0|
       * | x1 y1 1  0  0 0 |   |a01|   |u1|
       * | x2 y2 1  0  0 0 | x |a02| = |u2|
       * |  0  0 0 x0 y0 1 |   |a10|   |v0|
       * |  0  0 0 x1 y1 1 |   |a11|   |v1|
       * |  0  0 0 x2 y2 1 |   |a12|   |v2|
       */
      const source = triangle.source;
      const target = triangle.target;
      let x0 = source[0][0], y0 = source[0][1];
      let x1 = source[1][0], y1 = source[1][1];
      let x2 = source[2][0], y2 = source[2][1];
      const u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;
      const v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;
      const u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;
      const v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;
      const u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;
      const v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;

      // Shift all the source points to improve numerical stability
      // of all the subsequent calculations. The [x0, y0] is used here.
      // This is also used to simplify the linear system.
      const sourceNumericalShiftX = x0;
      const sourceNumericalShiftY = y0;
      x0 = 0;
      y0 = 0;
      x1 -= sourceNumericalShiftX;
      y1 -= sourceNumericalShiftY;
      x2 -= sourceNumericalShiftX;
      y2 -= sourceNumericalShiftY;

      const augmentedMatrix = [
        [x1, y1, 0, 0, u1 - u0],
        [x2, y2, 0, 0, u2 - u0],
        [0, 0, x1, y1, v1 - v0],
        [0, 0, x2, y2, v2 - v0]
      ];
      const affineCoefs = solveLinearSystem(augmentedMatrix);
      if (!affineCoefs) {
        return;
      }

      context.save();
      context.beginPath();
      const centroidX = (u0 + u1 + u2) / 3;
      const centroidY = (v0 + v1 + v2) / 3;
      const p0 = enlargeClipPoint(centroidX, centroidY, u0, v0);
      const p1 = enlargeClipPoint(centroidX, centroidY, u1, v1);
      const p2 = enlargeClipPoint(centroidX, centroidY, u2, v2);

      context.moveTo(p1[0], p1[1]);
      context.lineTo(p0[0], p0[1]);
      context.lineTo(p2[0], p2[1]);
      context.clip();

      context.transform(
        affineCoefs[0], affineCoefs[2], affineCoefs[1], affineCoefs[3], u0, v0);

      context.translate(sourceDataExtent[0] - sourceNumericalShiftX,
        sourceDataExtent[3] - sourceNumericalShiftY);

      context.scale(sourceResolution / pixelRatio,
        -sourceResolution / pixelRatio);

      context.drawImage(stitchContext.canvas, 0, 0);
      context.restore();
    });

    if (opt_renderEdges) {
      context.save();

      context.strokeStyle = 'black';
      context.lineWidth = 1;

      triangulation.getTriangles().forEach(function(triangle, i, arr) {
        const target = triangle.target;
        const u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;
        const v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;
        const u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;
        const v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;
        const u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;
        const v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;

        context.beginPath();
        context.moveTo(u1, v1);
        context.lineTo(u0, v0);
        context.lineTo(u2, v2);
        context.closePath();
        context.stroke();
      });

      context.restore();
    }
    return context.canvas;
  }

  var reproj = /*#__PURE__*/Object.freeze({
    __proto__: null,
    calculateSourceResolution: calculateSourceResolution,
    render: render$7
  });

  /**
   * @module ol/tileurlfunction
   */


  /**
   * @param {string} template Template.
   * @param {import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
   * @return {import("./Tile.js").UrlFunction} Tile URL function.
   */
  function createFromTemplate(template, tileGrid) {
    const zRegEx = /\{z\}/g;
    const xRegEx = /\{x\}/g;
    const yRegEx = /\{y\}/g;
    const dashYRegEx = /\{-y\}/g;
    return (
      /**
       * @param {import("./tilecoord.js").TileCoord} tileCoord Tile Coordinate.
       * @param {number} pixelRatio Pixel ratio.
       * @param {import("./proj/Projection.js").default} projection Projection.
       * @return {string|undefined} Tile URL.
       */
      function(tileCoord, pixelRatio, projection) {
        if (!tileCoord) {
          return undefined;
        } else {
          return template.replace(zRegEx, tileCoord[0].toString())
            .replace(xRegEx, tileCoord[1].toString())
            .replace(yRegEx, tileCoord[2].toString())
            .replace(dashYRegEx, function() {
              const z = tileCoord[0];
              const range = tileGrid.getFullTileRange(z);
              assert(range, 55); // The {-y} placeholder requires a tile grid with extent
              const y = range.getHeight() - tileCoord[2] - 1;
              return y.toString();
            });
        }
      }
    );
  }


  /**
   * @param {Array<string>} templates Templates.
   * @param {import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
   * @return {import("./Tile.js").UrlFunction} Tile URL function.
   */
  function createFromTemplates(templates, tileGrid) {
    const len = templates.length;
    const tileUrlFunctions = new Array(len);
    for (let i = 0; i < len; ++i) {
      tileUrlFunctions[i] = createFromTemplate(templates[i], tileGrid);
    }
    return createFromTileUrlFunctions(tileUrlFunctions);
  }


  /**
   * @param {Array<import("./Tile.js").UrlFunction>} tileUrlFunctions Tile URL Functions.
   * @return {import("./Tile.js").UrlFunction} Tile URL function.
   */
  function createFromTileUrlFunctions(tileUrlFunctions) {
    if (tileUrlFunctions.length === 1) {
      return tileUrlFunctions[0];
    }
    return (
      /**
       * @param {import("./tilecoord.js").TileCoord} tileCoord Tile Coordinate.
       * @param {number} pixelRatio Pixel ratio.
       * @param {import("./proj/Projection.js").default} projection Projection.
       * @return {string|undefined} Tile URL.
       */
      function(tileCoord, pixelRatio, projection) {
        if (!tileCoord) {
          return undefined;
        } else {
          const h = hash(tileCoord);
          const index = modulo(h, tileUrlFunctions.length);
          return tileUrlFunctions[index](tileCoord, pixelRatio, projection);
        }
      }
    );
  }


  /**
   * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {number} pixelRatio Pixel ratio.
   * @param {import("./proj/Projection.js").default} projection Projection.
   * @return {string|undefined} Tile URL.
   */
  function nullTileUrlFunction(tileCoord, pixelRatio, projection) {
    return undefined;
  }


  /**
   * @param {string} url URL.
   * @return {Array<string>} Array of urls.
   */
  function expandUrl(url) {
    const urls = [];
    let match = /\{([a-z])-([a-z])\}/.exec(url);
    if (match) {
      // char range
      const startCharCode = match[1].charCodeAt(0);
      const stopCharCode = match[2].charCodeAt(0);
      let charCode;
      for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {
        urls.push(url.replace(match[0], String.fromCharCode(charCode)));
      }
      return urls;
    }
    match = match = /\{(\d+)-(\d+)\}/.exec(url);
    if (match) {
      // number range
      const stop = parseInt(match[2], 10);
      for (let i = parseInt(match[1], 10); i <= stop; i++) {
        urls.push(url.replace(match[0], i.toString()));
      }
      return urls;
    }
    urls.push(url);
    return urls;
  }

  /**
   * @module ol/net
   */


  /**
   * Simple JSONP helper. Supports error callbacks and a custom callback param.
   * The error callback will be called when no JSONP is executed after 10 seconds.
   *
   * @param {string} url Request url. A 'callback' query parameter will be
   *     appended.
   * @param {Function} callback Callback on success.
   * @param {function()=} opt_errback Callback on error.
   * @param {string=} opt_callbackParam Custom query parameter for the JSONP
   *     callback. Default is 'callback'.
   */
  function jsonp(url, callback, opt_errback, opt_callbackParam) {
    const script = document.createElement('script');
    const key = 'olc_' + getUid(callback);
    function cleanup() {
      delete window[key];
      script.parentNode.removeChild(script);
    }
    script.async = true;
    script.src = url + (url.indexOf('?') == -1 ? '?' : '&') +
        (opt_callbackParam || 'callback') + '=' + key;
    const timer = setTimeout(function() {
      cleanup();
      if (opt_errback) {
        opt_errback();
      }
    }, 10000);
    window[key] = function(data) {
      clearTimeout(timer);
      cleanup();
      callback(data);
    };
    document.getElementsByTagName('head')[0].appendChild(script);
  }

  /**
   * @module ol/reproj/Triangulation
   */


  /**
   * Single triangle; consists of 3 source points and 3 target points.
   * @typedef {Object} Triangle
   * @property {Array<import("../coordinate.js").Coordinate>} source
   * @property {Array<import("../coordinate.js").Coordinate>} target
   */


  /**
   * Maximum number of subdivision steps during raster reprojection triangulation.
   * Prevents high memory usage and large number of proj4 calls (for certain
   * transformations and areas). At most `2*(2^this)` triangles are created for
   * each triangulated extent (tile/image).
   * @type {number}
   */
  const MAX_SUBDIVISION = 10;


  /**
   * Maximum allowed size of triangle relative to world width. When transforming
   * corners of world extent between certain projections, the resulting
   * triangulation seems to have zero error and no subdivision is performed. If
   * the triangle width is more than this (relative to world width; 0-1),
   * subdivison is forced (up to `MAX_SUBDIVISION`). Default is `0.25`.
   * @type {number}
   */
  const MAX_TRIANGLE_WIDTH = 0.25;


  /**
   * @classdesc
   * Class containing triangulation of the given target extent.
   * Used for determining source data and the reprojection itself.
   */
  class Triangulation {

    /**
     * @param {import("../proj/Projection.js").default} sourceProj Source projection.
     * @param {import("../proj/Projection.js").default} targetProj Target projection.
     * @param {import("../extent.js").Extent} targetExtent Target extent to triangulate.
     * @param {import("../extent.js").Extent} maxSourceExtent Maximal source extent that can be used.
     * @param {number} errorThreshold Acceptable error (in source units).
     */
    constructor(sourceProj, targetProj, targetExtent, maxSourceExtent, errorThreshold) {

      /**
       * @type {import("../proj/Projection.js").default}
       * @private
       */
      this.sourceProj_ = sourceProj;

      /**
       * @type {import("../proj/Projection.js").default}
       * @private
       */
      this.targetProj_ = targetProj;

      /** @type {!Object<string, import("../coordinate.js").Coordinate>} */
      let transformInvCache = {};
      const transformInv = getTransform(this.targetProj_, this.sourceProj_);

      /**
       * @param {import("../coordinate.js").Coordinate} c A coordinate.
       * @return {import("../coordinate.js").Coordinate} Transformed coordinate.
       * @private
       */
      this.transformInv_ = function(c) {
        const key = c[0] + '/' + c[1];
        if (!transformInvCache[key]) {
          transformInvCache[key] = transformInv(c);
        }
        return transformInvCache[key];
      };

      /**
       * @type {import("../extent.js").Extent}
       * @private
       */
      this.maxSourceExtent_ = maxSourceExtent;

      /**
       * @type {number}
       * @private
       */
      this.errorThresholdSquared_ = errorThreshold * errorThreshold;

      /**
       * @type {Array<Triangle>}
       * @private
       */
      this.triangles_ = [];

      /**
       * Indicates that the triangulation crosses edge of the source projection.
       * @type {boolean}
       * @private
       */
      this.wrapsXInSource_ = false;

      /**
       * @type {boolean}
       * @private
       */
      this.canWrapXInSource_ = this.sourceProj_.canWrapX() &&
          !!maxSourceExtent &&
          !!this.sourceProj_.getExtent() &&
          (getWidth(maxSourceExtent) == getWidth(this.sourceProj_.getExtent()));

      /**
       * @type {?number}
       * @private
       */
      this.sourceWorldWidth_ = this.sourceProj_.getExtent() ?
        getWidth(this.sourceProj_.getExtent()) : null;

      /**
       * @type {?number}
       * @private
       */
      this.targetWorldWidth_ = this.targetProj_.getExtent() ?
        getWidth(this.targetProj_.getExtent()) : null;

      const destinationTopLeft = getTopLeft(targetExtent);
      const destinationTopRight = getTopRight(targetExtent);
      const destinationBottomRight = getBottomRight(targetExtent);
      const destinationBottomLeft = getBottomLeft(targetExtent);
      const sourceTopLeft = this.transformInv_(destinationTopLeft);
      const sourceTopRight = this.transformInv_(destinationTopRight);
      const sourceBottomRight = this.transformInv_(destinationBottomRight);
      const sourceBottomLeft = this.transformInv_(destinationBottomLeft);

      this.addQuad_(
        destinationTopLeft, destinationTopRight,
        destinationBottomRight, destinationBottomLeft,
        sourceTopLeft, sourceTopRight, sourceBottomRight, sourceBottomLeft,
        MAX_SUBDIVISION);

      if (this.wrapsXInSource_) {
        let leftBound = Infinity;
        this.triangles_.forEach(function(triangle, i, arr) {
          leftBound = Math.min(leftBound,
            triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]);
        });

        // Shift triangles to be as close to `leftBound` as possible
        // (if the distance is more than `worldWidth / 2` it can be closer.
        this.triangles_.forEach(function(triangle) {
          if (Math.max(triangle.source[0][0], triangle.source[1][0],
            triangle.source[2][0]) - leftBound > this.sourceWorldWidth_ / 2) {
            const newTriangle = [[triangle.source[0][0], triangle.source[0][1]],
              [triangle.source[1][0], triangle.source[1][1]],
              [triangle.source[2][0], triangle.source[2][1]]];
            if ((newTriangle[0][0] - leftBound) > this.sourceWorldWidth_ / 2) {
              newTriangle[0][0] -= this.sourceWorldWidth_;
            }
            if ((newTriangle[1][0] - leftBound) > this.sourceWorldWidth_ / 2) {
              newTriangle[1][0] -= this.sourceWorldWidth_;
            }
            if ((newTriangle[2][0] - leftBound) > this.sourceWorldWidth_ / 2) {
              newTriangle[2][0] -= this.sourceWorldWidth_;
            }

            // Rarely (if the extent contains both the dateline and prime meridian)
            // the shift can in turn break some triangles.
            // Detect this here and don't shift in such cases.
            const minX = Math.min(
              newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);
            const maxX = Math.max(
              newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);
            if ((maxX - minX) < this.sourceWorldWidth_ / 2) {
              triangle.source = newTriangle;
            }
          }
        }.bind(this));
      }

      transformInvCache = {};
    }

    /**
     * Adds triangle to the triangulation.
     * @param {import("../coordinate.js").Coordinate} a The target a coordinate.
     * @param {import("../coordinate.js").Coordinate} b The target b coordinate.
     * @param {import("../coordinate.js").Coordinate} c The target c coordinate.
     * @param {import("../coordinate.js").Coordinate} aSrc The source a coordinate.
     * @param {import("../coordinate.js").Coordinate} bSrc The source b coordinate.
     * @param {import("../coordinate.js").Coordinate} cSrc The source c coordinate.
     * @private
     */
    addTriangle_(a, b, c, aSrc, bSrc, cSrc) {
      this.triangles_.push({
        source: [aSrc, bSrc, cSrc],
        target: [a, b, c]
      });
    }

    /**
     * Adds quad (points in clock-wise order) to the triangulation
     * (and reprojects the vertices) if valid.
     * Performs quad subdivision if needed to increase precision.
     *
     * @param {import("../coordinate.js").Coordinate} a The target a coordinate.
     * @param {import("../coordinate.js").Coordinate} b The target b coordinate.
     * @param {import("../coordinate.js").Coordinate} c The target c coordinate.
     * @param {import("../coordinate.js").Coordinate} d The target d coordinate.
     * @param {import("../coordinate.js").Coordinate} aSrc The source a coordinate.
     * @param {import("../coordinate.js").Coordinate} bSrc The source b coordinate.
     * @param {import("../coordinate.js").Coordinate} cSrc The source c coordinate.
     * @param {import("../coordinate.js").Coordinate} dSrc The source d coordinate.
     * @param {number} maxSubdivision Maximal allowed subdivision of the quad.
     * @private
     */
    addQuad_(a, b, c, d, aSrc, bSrc, cSrc, dSrc, maxSubdivision) {

      const sourceQuadExtent = boundingExtent([aSrc, bSrc, cSrc, dSrc]);
      const sourceCoverageX = this.sourceWorldWidth_ ?
        getWidth(sourceQuadExtent) / this.sourceWorldWidth_ : null;
      const sourceWorldWidth = /** @type {number} */ (this.sourceWorldWidth_);

      // when the quad is wrapped in the source projection
      // it covers most of the projection extent, but not fully
      const wrapsX = this.sourceProj_.canWrapX() &&
                   sourceCoverageX > 0.5 && sourceCoverageX < 1;

      let needsSubdivision = false;

      if (maxSubdivision > 0) {
        if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {
          const targetQuadExtent = boundingExtent([a, b, c, d]);
          const targetCoverageX = getWidth(targetQuadExtent) / this.targetWorldWidth_;
          needsSubdivision = targetCoverageX > MAX_TRIANGLE_WIDTH ||
            needsSubdivision;
        }
        if (!wrapsX && this.sourceProj_.isGlobal() && sourceCoverageX) {
          needsSubdivision = sourceCoverageX > MAX_TRIANGLE_WIDTH ||
              needsSubdivision;
        }
      }

      if (!needsSubdivision && this.maxSourceExtent_) {
        if (!intersects(sourceQuadExtent, this.maxSourceExtent_)) {
          // whole quad outside source projection extent -> ignore
          return;
        }
      }

      if (!needsSubdivision) {
        if (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) ||
            !isFinite(bSrc[0]) || !isFinite(bSrc[1]) ||
            !isFinite(cSrc[0]) || !isFinite(cSrc[1]) ||
            !isFinite(dSrc[0]) || !isFinite(dSrc[1])) {
          if (maxSubdivision > 0) {
            needsSubdivision = true;
          } else {
            return;
          }
        }
      }

      if (maxSubdivision > 0) {
        if (!needsSubdivision) {
          const center = [(a[0] + c[0]) / 2, (a[1] + c[1]) / 2];
          const centerSrc = this.transformInv_(center);

          let dx;
          if (wrapsX) {
            const centerSrcEstimX =
                (modulo(aSrc[0], sourceWorldWidth) +
                 modulo(cSrc[0], sourceWorldWidth)) / 2;
            dx = centerSrcEstimX -
                modulo(centerSrc[0], sourceWorldWidth);
          } else {
            dx = (aSrc[0] + cSrc[0]) / 2 - centerSrc[0];
          }
          const dy = (aSrc[1] + cSrc[1]) / 2 - centerSrc[1];
          const centerSrcErrorSquared = dx * dx + dy * dy;
          needsSubdivision = centerSrcErrorSquared > this.errorThresholdSquared_;
        }
        if (needsSubdivision) {
          if (Math.abs(a[0] - c[0]) <= Math.abs(a[1] - c[1])) {
            // split horizontally (top & bottom)
            const bc = [(b[0] + c[0]) / 2, (b[1] + c[1]) / 2];
            const bcSrc = this.transformInv_(bc);
            const da = [(d[0] + a[0]) / 2, (d[1] + a[1]) / 2];
            const daSrc = this.transformInv_(da);

            this.addQuad_(
              a, b, bc, da, aSrc, bSrc, bcSrc, daSrc, maxSubdivision - 1);
            this.addQuad_(
              da, bc, c, d, daSrc, bcSrc, cSrc, dSrc, maxSubdivision - 1);
          } else {
            // split vertically (left & right)
            const ab = [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2];
            const abSrc = this.transformInv_(ab);
            const cd = [(c[0] + d[0]) / 2, (c[1] + d[1]) / 2];
            const cdSrc = this.transformInv_(cd);

            this.addQuad_(
              a, ab, cd, d, aSrc, abSrc, cdSrc, dSrc, maxSubdivision - 1);
            this.addQuad_(
              ab, b, c, cd, abSrc, bSrc, cSrc, cdSrc, maxSubdivision - 1);
          }
          return;
        }
      }

      if (wrapsX) {
        if (!this.canWrapXInSource_) {
          return;
        }
        this.wrapsXInSource_ = true;
      }

      this.addTriangle_(a, c, d, aSrc, cSrc, dSrc);
      this.addTriangle_(a, b, c, aSrc, bSrc, cSrc);
    }

    /**
     * Calculates extent of the 'source' coordinates from all the triangles.
     *
     * @return {import("../extent.js").Extent} Calculated extent.
     */
    calculateSourceExtent() {
      const extent = createEmpty();

      this.triangles_.forEach(function(triangle, i, arr) {
        const src = triangle.source;
        extendCoordinate(extent, src[0]);
        extendCoordinate(extent, src[1]);
        extendCoordinate(extent, src[2]);
      });

      return extent;
    }

    /**
     * @return {Array<Triangle>} Array of the calculated triangles.
     */
    getTriangles() {
      return this.triangles_;
    }
  }

  /**
   * @module ol/reproj/Tile
   */


  /**
   * @typedef {function(number, number, number, number) : import("../Tile.js").default} FunctionType
   */


  /**
   * @classdesc
   * Class encapsulating single reprojected tile.
   * See {@link module:ol/source/TileImage~TileImage}.
   *
   */
  class ReprojTile extends Tile {
    /**
     * @param {import("../proj/Projection.js").default} sourceProj Source projection.
     * @param {import("../tilegrid/TileGrid.js").default} sourceTileGrid Source tile grid.
     * @param {import("../proj/Projection.js").default} targetProj Target projection.
     * @param {import("../tilegrid/TileGrid.js").default} targetTileGrid Target tile grid.
     * @param {import("../tilecoord.js").TileCoord} tileCoord Coordinate of the tile.
     * @param {import("../tilecoord.js").TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.
     * @param {number} pixelRatio Pixel ratio.
     * @param {number} gutter Gutter of the source tiles.
     * @param {FunctionType} getTileFunction
     *     Function returning source tiles (z, x, y, pixelRatio).
     * @param {number=} opt_errorThreshold Acceptable reprojection error (in px).
     * @param {boolean=} opt_renderEdges Render reprojection edges.
     */
    constructor(
      sourceProj,
      sourceTileGrid,
      targetProj,
      targetTileGrid,
      tileCoord,
      wrappedTileCoord,
      pixelRatio,
      gutter,
      getTileFunction,
      opt_errorThreshold,
      opt_renderEdges
    ) {
      super(tileCoord, TileState.IDLE);

      /**
       * @private
       * @type {boolean}
       */
      this.renderEdges_ = opt_renderEdges !== undefined ? opt_renderEdges : false;

      /**
       * @private
       * @type {number}
       */
      this.pixelRatio_ = pixelRatio;

      /**
       * @private
       * @type {number}
       */
      this.gutter_ = gutter;

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.canvas_ = null;

      /**
       * @private
       * @type {import("../tilegrid/TileGrid.js").default}
       */
      this.sourceTileGrid_ = sourceTileGrid;

      /**
       * @private
       * @type {import("../tilegrid/TileGrid.js").default}
       */
      this.targetTileGrid_ = targetTileGrid;

      /**
       * @private
       * @type {import("../tilecoord.js").TileCoord}
       */
      this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;

      /**
       * @private
       * @type {!Array<import("../Tile.js").default>}
       */
      this.sourceTiles_ = [];

      /**
       * @private
       * @type {Array<import("../events.js").EventsKey>}
       */
      this.sourcesListenerKeys_ = null;

      /**
       * @private
       * @type {number}
       */
      this.sourceZ_ = 0;

      const targetExtent = targetTileGrid.getTileCoordExtent(this.wrappedTileCoord_);
      const maxTargetExtent = this.targetTileGrid_.getExtent();
      let maxSourceExtent = this.sourceTileGrid_.getExtent();

      const limitedTargetExtent = maxTargetExtent ?
        getIntersection(targetExtent, maxTargetExtent) : targetExtent;

      if (getArea(limitedTargetExtent) === 0) {
        // Tile is completely outside range -> EMPTY
        // TODO: is it actually correct that the source even creates the tile ?
        this.state = TileState.EMPTY;
        return;
      }

      const sourceProjExtent = sourceProj.getExtent();
      if (sourceProjExtent) {
        if (!maxSourceExtent) {
          maxSourceExtent = sourceProjExtent;
        } else {
          maxSourceExtent = getIntersection(maxSourceExtent, sourceProjExtent);
        }
      }

      const targetResolution = targetTileGrid.getResolution(
        this.wrappedTileCoord_[0]);

      const targetCenter = getCenter(limitedTargetExtent);
      const sourceResolution = calculateSourceResolution(
        sourceProj, targetProj, targetCenter, targetResolution);

      if (!isFinite(sourceResolution) || sourceResolution <= 0) {
        // invalid sourceResolution -> EMPTY
        // probably edges of the projections when no extent is defined
        this.state = TileState.EMPTY;
        return;
      }

      const errorThresholdInPixels = opt_errorThreshold !== undefined ?
        opt_errorThreshold : ERROR_THRESHOLD;

      /**
       * @private
       * @type {!import("./Triangulation.js").default}
       */
      this.triangulation_ = new Triangulation(
        sourceProj, targetProj, limitedTargetExtent, maxSourceExtent,
        sourceResolution * errorThresholdInPixels);

      if (this.triangulation_.getTriangles().length === 0) {
        // no valid triangles -> EMPTY
        this.state = TileState.EMPTY;
        return;
      }

      this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);
      let sourceExtent = this.triangulation_.calculateSourceExtent();

      if (maxSourceExtent) {
        if (sourceProj.canWrapX()) {
          sourceExtent[1] = clamp(
            sourceExtent[1], maxSourceExtent[1], maxSourceExtent[3]);
          sourceExtent[3] = clamp(
            sourceExtent[3], maxSourceExtent[1], maxSourceExtent[3]);
        } else {
          sourceExtent = getIntersection(sourceExtent, maxSourceExtent);
        }
      }

      if (!getArea(sourceExtent)) {
        this.state = TileState.EMPTY;
      } else {
        const sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(
          sourceExtent, this.sourceZ_);

        for (let srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {
          for (let srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {
            const tile = getTileFunction(this.sourceZ_, srcX, srcY, pixelRatio);
            if (tile) {
              this.sourceTiles_.push(tile);
            }
          }
        }

        if (this.sourceTiles_.length === 0) {
          this.state = TileState.EMPTY;
        }
      }
    }

    /**
     * @inheritDoc
     */
    disposeInternal() {
      if (this.state == TileState.LOADING) {
        this.unlistenSources_();
      }
      super.disposeInternal();
    }

    /**
     * Get the HTML Canvas element for this tile.
     * @return {HTMLCanvasElement} Canvas.
     */
    getImage() {
      return this.canvas_;
    }

    /**
     * @private
     */
    reproject_() {
      const sources = [];
      this.sourceTiles_.forEach(function(tile, i, arr) {
        if (tile && tile.getState() == TileState.LOADED) {
          sources.push({
            extent: this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord),
            image: tile.getImage()
          });
        }
      }.bind(this));
      this.sourceTiles_.length = 0;

      if (sources.length === 0) {
        this.state = TileState.ERROR;
      } else {
        const z = this.wrappedTileCoord_[0];
        const size = this.targetTileGrid_.getTileSize(z);
        const width = typeof size === 'number' ? size : size[0];
        const height = typeof size === 'number' ? size : size[1];
        const targetResolution = this.targetTileGrid_.getResolution(z);
        const sourceResolution = this.sourceTileGrid_.getResolution(this.sourceZ_);

        const targetExtent = this.targetTileGrid_.getTileCoordExtent(
          this.wrappedTileCoord_);
        this.canvas_ = render$7(width, height, this.pixelRatio_,
          sourceResolution, this.sourceTileGrid_.getExtent(),
          targetResolution, targetExtent, this.triangulation_, sources,
          this.gutter_, this.renderEdges_);

        this.state = TileState.LOADED;
      }
      this.changed();
    }

    /**
     * @inheritDoc
     */
    load() {
      if (this.state == TileState.IDLE) {
        this.state = TileState.LOADING;
        this.changed();

        let leftToLoad = 0;

        this.sourcesListenerKeys_ = [];
        this.sourceTiles_.forEach(function(tile, i, arr) {
          const state = tile.getState();
          if (state == TileState.IDLE || state == TileState.LOADING) {
            leftToLoad++;

            const sourceListenKey = listen(tile, EventType.CHANGE,
              function(e) {
                const state = tile.getState();
                if (state == TileState.LOADED ||
                      state == TileState.ERROR ||
                      state == TileState.EMPTY) {
                  unlistenByKey(sourceListenKey);
                  leftToLoad--;
                  if (leftToLoad === 0) {
                    this.unlistenSources_();
                    this.reproject_();
                  }
                }
              }, this);
            this.sourcesListenerKeys_.push(sourceListenKey);
          }
        }.bind(this));

        this.sourceTiles_.forEach(function(tile, i, arr) {
          const state = tile.getState();
          if (state == TileState.IDLE) {
            tile.load();
          }
        });

        if (leftToLoad === 0) {
          setTimeout(this.reproject_.bind(this), 0);
        }
      }
    }

    /**
     * @private
     */
    unlistenSources_() {
      this.sourcesListenerKeys_.forEach(unlistenByKey);
      this.sourcesListenerKeys_ = null;
    }
  }

  /**
   * @module ol/tilegrid/TileGrid
   */


  /**
   * @private
   * @type {import("../tilecoord.js").TileCoord}
   */
  const tmpTileCoord = [0, 0, 0];


  /**
   * @typedef {Object} Options
   * @property {import("../extent.js").Extent} [extent] Extent for the tile grid. No tiles outside this
   * extent will be requested by {@link module:ol/source/Tile} sources. When no `origin` or
   * `origins` are configured, the `origin` will be set to the top-left corner of the extent.
   * @property {number} [minZoom=0] Minimum zoom.
   * @property {import("../coordinate.js").Coordinate} [origin] The tile grid origin, i.e. where the `x`
   * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and upwards. If not
   * specified, `extent` or `origins` must be provided.
   * @property {Array<import("../coordinate.js").Coordinate>} [origins] Tile grid origins, i.e. where
   * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length
   * should match the length of the `resolutions` array, i.e. each resolution can have a different
   * origin. Tile coordinates increase left to right and upwards. If not specified, `extent` or
   * `origin` must be provided.
   * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs
   * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions
   * array will have a length of `maxZoom + 1`.
   * @property {Array<import("../size.js").Size>} [sizes] Sizes.
   * @property {number|import("../size.js").Size} [tileSize] Tile size.
   * Default is `[256, 256]`.
   * @property {Array<import("../size.js").Size>} [tileSizes] Tile sizes. If given, the array length
   * should match the length of the `resolutions` array, i.e. each resolution can have a different
   * tile size.
   */


  /**
   * @classdesc
   * Base class for setting the grid pattern for sources accessing tiled-image
   * servers.
   * @api
   */
  class TileGrid {
    /**
     * @param {Options} options Tile grid options.
     */
    constructor(options) {

      /**
       * @protected
       * @type {number}
       */
      this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;

      /**
       * @private
       * @type {!Array<number>}
       */
      this.resolutions_ = options.resolutions;
      assert(isSorted(this.resolutions_, function(a, b) {
        return b - a;
      }, true), 17); // `resolutions` must be sorted in descending order


      // check if we've got a consistent zoom factor and origin
      let zoomFactor;
      if (!options.origins) {
        for (let i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {
          if (!zoomFactor) {
            zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];
          } else {
            if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {
              zoomFactor = undefined;
              break;
            }
          }
        }
      }


      /**
       * @private
       * @type {number|undefined}
       */
      this.zoomFactor_ = zoomFactor;


      /**
       * @protected
       * @type {number}
       */
      this.maxZoom = this.resolutions_.length - 1;

      /**
       * @private
       * @type {import("../coordinate.js").Coordinate}
       */
      this.origin_ = options.origin !== undefined ? options.origin : null;

      /**
       * @private
       * @type {Array<import("../coordinate.js").Coordinate>}
       */
      this.origins_ = null;
      if (options.origins !== undefined) {
        this.origins_ = options.origins;
        assert(this.origins_.length == this.resolutions_.length,
          20); // Number of `origins` and `resolutions` must be equal
      }

      const extent = options.extent;

      if (extent !== undefined &&
          !this.origin_ && !this.origins_) {
        this.origin_ = getTopLeft(extent);
      }

      assert(
        (!this.origin_ && this.origins_) || (this.origin_ && !this.origins_),
        18); // Either `origin` or `origins` must be configured, never both

      /**
       * @private
       * @type {Array<number|import("../size.js").Size>}
       */
      this.tileSizes_ = null;
      if (options.tileSizes !== undefined) {
        this.tileSizes_ = options.tileSizes;
        assert(this.tileSizes_.length == this.resolutions_.length,
          19); // Number of `tileSizes` and `resolutions` must be equal
      }

      /**
       * @private
       * @type {number|import("../size.js").Size}
       */
      this.tileSize_ = options.tileSize !== undefined ?
        options.tileSize :
        !this.tileSizes_ ? DEFAULT_TILE_SIZE : null;
      assert(
        (!this.tileSize_ && this.tileSizes_) ||
          (this.tileSize_ && !this.tileSizes_),
        22); // Either `tileSize` or `tileSizes` must be configured, never both

      /**
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.extent_ = extent !== undefined ? extent : null;


      /**
       * @private
       * @type {Array<import("../TileRange.js").default>}
       */
      this.fullTileRanges_ = null;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.tmpSize_ = [0, 0];

      if (options.sizes !== undefined) {
        this.fullTileRanges_ = options.sizes.map(function(size, z) {
          const tileRange = new TileRange(
            Math.min(0, size[0]), Math.max(size[0] - 1, -1),
            Math.min(0, size[1]), Math.max(size[1] - 1, -1));
          return tileRange;
        }, this);
      } else if (extent) {
        this.calculateTileRanges_(extent);
      }

    }

    /**
     * Call a function with each tile coordinate for a given extent and zoom level.
     *
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} zoom Integer zoom level.
     * @param {function(import("../tilecoord.js").TileCoord): void} callback Function called with each tile coordinate.
     * @api
     */
    forEachTileCoord(extent, zoom, callback) {
      const tileRange = this.getTileRangeForExtentAndZ(extent, zoom);
      for (let i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {
        for (let j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {
          callback([zoom, i, j]);
        }
      }
    }

    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {function(number, import("../TileRange.js").default): boolean} callback Callback.
     * @param {import("../TileRange.js").default=} opt_tileRange Temporary import("../TileRange.js").default object.
     * @param {import("../extent.js").Extent=} opt_extent Temporary import("../extent.js").Extent object.
     * @return {boolean} Callback succeeded.
     */
    forEachTileCoordParentTileRange(tileCoord, callback, opt_tileRange, opt_extent) {
      let tileRange, x, y;
      let tileCoordExtent = null;
      let z = tileCoord[0] - 1;
      if (this.zoomFactor_ === 2) {
        x = tileCoord[1];
        y = tileCoord[2];
      } else {
        tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);
      }
      while (z >= this.minZoom) {
        if (this.zoomFactor_ === 2) {
          x = Math.floor(x / 2);
          y = Math.floor(y / 2);
          tileRange = createOrUpdate$2(x, x, y, y, opt_tileRange);
        } else {
          tileRange = this.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);
        }
        if (callback(z, tileRange)) {
          return true;
        }
        --z;
      }
      return false;
    }

    /**
     * Get the extent for this tile grid, if it was configured.
     * @return {import("../extent.js").Extent} Extent.
     * @api
     */
    getExtent() {
      return this.extent_;
    }

    /**
     * Get the maximum zoom level for the grid.
     * @return {number} Max zoom.
     * @api
     */
    getMaxZoom() {
      return this.maxZoom;
    }

    /**
     * Get the minimum zoom level for the grid.
     * @return {number} Min zoom.
     * @api
     */
    getMinZoom() {
      return this.minZoom;
    }

    /**
     * Get the origin for the grid at the given zoom level.
     * @param {number} z Integer zoom level.
     * @return {import("../coordinate.js").Coordinate} Origin.
     * @api
     */
    getOrigin(z) {
      if (this.origin_) {
        return this.origin_;
      } else {
        return this.origins_[z];
      }
    }

    /**
     * Get the resolution for the given zoom level.
     * @param {number} z Integer zoom level.
     * @return {number} Resolution.
     * @api
     */
    getResolution(z) {
      return this.resolutions_[z];
    }

    /**
     * Get the list of resolutions for the tile grid.
     * @return {Array<number>} Resolutions.
     * @api
     */
    getResolutions() {
      return this.resolutions_;
    }

    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("../TileRange.js").default=} opt_tileRange Temporary import("../TileRange.js").default object.
     * @param {import("../extent.js").Extent=} opt_extent Temporary import("../extent.js").Extent object.
     * @return {import("../TileRange.js").default} Tile range.
     */
    getTileCoordChildTileRange(tileCoord, opt_tileRange, opt_extent) {
      if (tileCoord[0] < this.maxZoom) {
        if (this.zoomFactor_ === 2) {
          const minX = tileCoord[1] * 2;
          const minY = tileCoord[2] * 2;
          return createOrUpdate$2(minX, minX + 1, minY, minY + 1, opt_tileRange);
        }
        const tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);
        return this.getTileRangeForExtentAndZ(
          tileCoordExtent, tileCoord[0] + 1, opt_tileRange);
      }
      return null;
    }

    /**
     * Get the extent for a tile range.
     * @param {number} z Integer zoom level.
     * @param {import("../TileRange.js").default} tileRange Tile range.
     * @param {import("../extent.js").Extent=} opt_extent Temporary import("../extent.js").Extent object.
     * @return {import("../extent.js").Extent} Extent.
     */
    getTileRangeExtent(z, tileRange, opt_extent) {
      const origin = this.getOrigin(z);
      const resolution = this.getResolution(z);
      const tileSize = toSize(this.getTileSize(z), this.tmpSize_);
      const minX = origin[0] + tileRange.minX * tileSize[0] * resolution;
      const maxX = origin[0] + (tileRange.maxX + 1) * tileSize[0] * resolution;
      const minY = origin[1] + tileRange.minY * tileSize[1] * resolution;
      const maxY = origin[1] + (tileRange.maxY + 1) * tileSize[1] * resolution;
      return createOrUpdate(minX, minY, maxX, maxY, opt_extent);
    }

    /**
     * Get a tile range for the given extent and integer zoom level.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} z Integer zoom level.
     * @param {import("../TileRange.js").default=} opt_tileRange Temporary tile range object.
     * @return {import("../TileRange.js").default} Tile range.
     */
    getTileRangeForExtentAndZ(extent, z, opt_tileRange) {
      const tileCoord = tmpTileCoord;
      this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tileCoord);
      const minX = tileCoord[1];
      const minY = tileCoord[2];
      this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tileCoord);
      return createOrUpdate$2(minX, tileCoord[1], minY, tileCoord[2], opt_tileRange);
    }

    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @return {import("../coordinate.js").Coordinate} Tile center.
     */
    getTileCoordCenter(tileCoord) {
      const origin = this.getOrigin(tileCoord[0]);
      const resolution = this.getResolution(tileCoord[0]);
      const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);
      return [
        origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,
        origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution
      ];
    }

    /**
     * Get the extent of a tile coordinate.
     *
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("../extent.js").Extent=} opt_extent Temporary extent object.
     * @return {import("../extent.js").Extent} Extent.
     * @api
     */
    getTileCoordExtent(tileCoord, opt_extent) {
      const origin = this.getOrigin(tileCoord[0]);
      const resolution = this.getResolution(tileCoord[0]);
      const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);
      const minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;
      const minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;
      const maxX = minX + tileSize[0] * resolution;
      const maxY = minY + tileSize[1] * resolution;
      return createOrUpdate(minX, minY, maxX, maxY, opt_extent);
    }

    /**
     * Get the tile coordinate for the given map coordinate and resolution.  This
     * method considers that coordinates that intersect tile boundaries should be
     * assigned the higher tile coordinate.
     *
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {number} resolution Resolution.
     * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Destination import("../tilecoord.js").TileCoord object.
     * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
     * @api
     */
    getTileCoordForCoordAndResolution(coordinate, resolution, opt_tileCoord) {
      return this.getTileCoordForXYAndResolution_(
        coordinate[0], coordinate[1], resolution, false, opt_tileCoord);
    }

    /**
     * Note that this method should not be called for resolutions that correspond
     * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.
     * @param {number} x X.
     * @param {number} y Y.
     * @param {number} resolution Resolution (for a non-integer zoom level).
     * @param {boolean} reverseIntersectionPolicy Instead of letting edge
     *     intersections go to the higher tile coordinate, let edge intersections
     *     go to the lower tile coordinate.
     * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Temporary import("../tilecoord.js").TileCoord object.
     * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
     * @private
     */
    getTileCoordForXYAndResolution_(x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) {
      const z = this.getZForResolution(resolution);
      const scale = resolution / this.getResolution(z);
      const origin = this.getOrigin(z);
      const tileSize = toSize(this.getTileSize(z), this.tmpSize_);

      const adjustX = reverseIntersectionPolicy ? 0.5 : 0;
      const adjustY = reverseIntersectionPolicy ? 0.5 : 0;
      const xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);
      const yFromOrigin = Math.floor((origin[1] - y) / resolution + adjustY);
      let tileCoordX = scale * xFromOrigin / tileSize[0];
      let tileCoordY = scale * yFromOrigin / tileSize[1];

      if (reverseIntersectionPolicy) {
        tileCoordX = Math.ceil(tileCoordX) - 1;
        tileCoordY = Math.ceil(tileCoordY) - 1;
      } else {
        tileCoordX = Math.floor(tileCoordX);
        tileCoordY = Math.floor(tileCoordY);
      }

      return createOrUpdate$1(z, tileCoordX, tileCoordY, opt_tileCoord);
    }

    /**
     * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,
     * they should have separate implementations.  This method is for integer zoom
     * levels.  The other method should only be called for resolutions corresponding
     * to non-integer zoom levels.
     * @param {number} x Map x coordinate.
     * @param {number} y Map y coordinate.
     * @param {number} z Integer zoom level.
     * @param {boolean} reverseIntersectionPolicy Instead of letting edge
     *     intersections go to the higher tile coordinate, let edge intersections
     *     go to the lower tile coordinate.
     * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Temporary import("../tilecoord.js").TileCoord object.
     * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
     * @private
     */
    getTileCoordForXYAndZ_(x, y, z, reverseIntersectionPolicy, opt_tileCoord) {
      const origin = this.getOrigin(z);
      const resolution = this.getResolution(z);
      const tileSize = toSize(this.getTileSize(z), this.tmpSize_);

      const adjustX = reverseIntersectionPolicy ? 0.5 : 0;
      const adjustY = reverseIntersectionPolicy ? 0.5 : 0;
      const xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);
      const yFromOrigin = Math.floor((origin[1] - y) / resolution + adjustY);
      let tileCoordX = xFromOrigin / tileSize[0];
      let tileCoordY = yFromOrigin / tileSize[1];

      if (reverseIntersectionPolicy) {
        tileCoordX = Math.ceil(tileCoordX) - 1;
        tileCoordY = Math.ceil(tileCoordY) - 1;
      } else {
        tileCoordX = Math.floor(tileCoordX);
        tileCoordY = Math.floor(tileCoordY);
      }

      return createOrUpdate$1(z, tileCoordX, tileCoordY, opt_tileCoord);
    }

    /**
     * Get a tile coordinate given a map coordinate and zoom level.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {number} z Zoom level.
     * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Destination import("../tilecoord.js").TileCoord object.
     * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
     * @api
     */
    getTileCoordForCoordAndZ(coordinate, z, opt_tileCoord) {
      return this.getTileCoordForXYAndZ_(
        coordinate[0], coordinate[1], z, false, opt_tileCoord);
    }

    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @return {number} Tile resolution.
     */
    getTileCoordResolution(tileCoord) {
      return this.resolutions_[tileCoord[0]];
    }

    /**
     * Get the tile size for a zoom level. The type of the return value matches the
     * `tileSize` or `tileSizes` that the tile grid was configured with. To always
     * get an `import("../size.js").Size`, run the result through `import("../size.js").Size.toSize()`.
     * @param {number} z Z.
     * @return {number|import("../size.js").Size} Tile size.
     * @api
     */
    getTileSize(z) {
      if (this.tileSize_) {
        return this.tileSize_;
      } else {
        return this.tileSizes_[z];
      }
    }

    /**
     * @param {number} z Zoom level.
     * @return {import("../TileRange.js").default} Extent tile range for the specified zoom level.
     */
    getFullTileRange(z) {
      if (!this.fullTileRanges_) {
        return null;
      } else {
        return this.fullTileRanges_[z];
      }
    }

    /**
     * @param {number} resolution Resolution.
     * @param {number=} opt_direction If 0, the nearest resolution will be used.
     *     If 1, the nearest lower resolution will be used. If -1, the nearest
     *     higher resolution will be used. Default is 0.
     * @return {number} Z.
     * @api
     */
    getZForResolution(resolution, opt_direction) {
      const z = linearFindNearest(this.resolutions_, resolution, opt_direction || 0);
      return clamp(z, this.minZoom, this.maxZoom);
    }

    /**
     * @param {!import("../extent.js").Extent} extent Extent for this tile grid.
     * @private
     */
    calculateTileRanges_(extent) {
      const length = this.resolutions_.length;
      const fullTileRanges = new Array(length);
      for (let z = this.minZoom; z < length; ++z) {
        fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);
      }
      this.fullTileRanges_ = fullTileRanges;
    }
  }

  /**
   * @module ol/tilegrid
   */


  /**
   * @param {import("./proj/Projection.js").default} projection Projection.
   * @return {!TileGrid} Default tile grid for the
   * passed projection.
   */
  function getForProjection(projection) {
    let tileGrid = projection.getDefaultTileGrid();
    if (!tileGrid) {
      tileGrid = createForProjection(projection);
      projection.setDefaultTileGrid(tileGrid);
    }
    return tileGrid;
  }


  /**
   * @param {TileGrid} tileGrid Tile grid.
   * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {import("./proj/Projection.js").default} projection Projection.
   * @return {import("./tilecoord.js").TileCoord} Tile coordinate.
   */
  function wrapX(tileGrid, tileCoord, projection) {
    const z = tileCoord[0];
    const center = tileGrid.getTileCoordCenter(tileCoord);
    const projectionExtent = extentFromProjection(projection);
    if (!containsCoordinate(projectionExtent, center)) {
      const worldWidth = getWidth(projectionExtent);
      const worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);
      center[0] += worldWidth * worldsAway;
      return tileGrid.getTileCoordForCoordAndZ(center, z);
    } else {
      return tileCoord;
    }
  }


  /**
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {number=} opt_maxZoom Maximum zoom level (default is
   *     DEFAULT_MAX_ZOOM).
   * @param {number|import("./size.js").Size=} opt_tileSize Tile size (default uses
   *     DEFAULT_TILE_SIZE).
   * @param {Corner=} opt_corner Extent corner (default is `'top-left'`).
   * @return {!TileGrid} TileGrid instance.
   */
  function createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner) {
    const corner = opt_corner !== undefined ? opt_corner : Corner.TOP_LEFT;

    const resolutions = resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize);

    return new TileGrid({
      extent: extent,
      origin: getCorner(extent, corner),
      resolutions: resolutions,
      tileSize: opt_tileSize
    });
  }


  /**
   * @typedef {Object} XYZOptions
   * @property {import("./extent.js").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the
   * top-left corner of the extent. The zero level of the grid is defined by the resolution at which one tile fits in the
   * provided extent. If not provided, the extent of the EPSG:3857 projection is used.
   * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels
   * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.
   * @property {number} [minZoom=0] Minimum zoom.
   * @property {number|import("./size.js").Size} [tileSize=[256, 256]] Tile size in pixels.
   */


  /**
   * Creates a tile grid with a standard XYZ tiling scheme.
   * @param {XYZOptions=} opt_options Tile grid options.
   * @return {!TileGrid} Tile grid instance.
   * @api
   */
  function createXYZ(opt_options) {
    /** @type {XYZOptions} */
    const xyzOptions = opt_options || {};

    const extent = xyzOptions.extent || get$2('EPSG:3857').getExtent();

    /** @type {import("./tilegrid/TileGrid.js").Options} */
    const gridOptions = {
      extent: extent,
      minZoom: xyzOptions.minZoom,
      tileSize: xyzOptions.tileSize,
      resolutions: resolutionsFromExtent(
        extent,
        xyzOptions.maxZoom,
        xyzOptions.tileSize
      )
    };
    return new TileGrid(gridOptions);
  }


  /**
   * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {number=} opt_maxZoom Maximum zoom level (default is
   *     DEFAULT_MAX_ZOOM).
   * @param {number|import("./size.js").Size=} opt_tileSize Tile size (default uses
   *     DEFAULT_TILE_SIZE).
   * @return {!Array<number>} Resolutions array.
   */
  function resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize) {
    const maxZoom = opt_maxZoom !== undefined ?
      opt_maxZoom : DEFAULT_MAX_ZOOM;

    const height = getHeight(extent);
    const width = getWidth(extent);

    const tileSize = toSize(opt_tileSize !== undefined ?
      opt_tileSize : DEFAULT_TILE_SIZE);
    const maxResolution = Math.max(
      width / tileSize[0], height / tileSize[1]);

    const length = maxZoom + 1;
    const resolutions = new Array(length);
    for (let z = 0; z < length; ++z) {
      resolutions[z] = maxResolution / Math.pow(2, z);
    }
    return resolutions;
  }


  /**
   * @param {import("./proj.js").ProjectionLike} projection Projection.
   * @param {number=} opt_maxZoom Maximum zoom level (default is
   *     DEFAULT_MAX_ZOOM).
   * @param {number|import("./size.js").Size=} opt_tileSize Tile size (default uses
   *     DEFAULT_TILE_SIZE).
   * @param {Corner=} opt_corner Extent corner (default is `'top-left'`).
   * @return {!TileGrid} TileGrid instance.
   */
  function createForProjection(projection, opt_maxZoom, opt_tileSize, opt_corner) {
    const extent = extentFromProjection(projection);
    return createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner);
  }


  /**
   * Generate a tile grid extent from a projection.  If the projection has an
   * extent, it is used.  If not, a global extent is assumed.
   * @param {import("./proj.js").ProjectionLike} projection Projection.
   * @return {import("./extent.js").Extent} Extent.
   */
  function extentFromProjection(projection) {
    projection = get$2(projection);
    let extent = projection.getExtent();
    if (!extent) {
      const half = 180 * METERS_PER_UNIT[Units.DEGREES] / projection.getMetersPerUnit();
      extent = createOrUpdate(-half, -half, half, half);
    }
    return extent;
  }

  var tilegrid = /*#__PURE__*/Object.freeze({
    __proto__: null,
    getForProjection: getForProjection,
    wrapX: wrapX,
    createForExtent: createForExtent,
    createXYZ: createXYZ,
    createForProjection: createForProjection,
    extentFromProjection: extentFromProjection
  });

  /**
   * @module ol/source/Tile
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions]
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize]
   * @property {boolean} [opaque]
   * @property {number} [tilePixelRatio]
   * @property {import("../proj.js").ProjectionLike} [projection]
   * @property {import("./State.js").default} [state]
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid]
   * @property {boolean} [wrapX=true]
   * @property {number} [transition]
   * @property {string} [key]
   */


  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for sources providing images divided into a tile grid.
   * @abstract
   * @api
   */
  class TileSource extends Source {
    /**
     * @param {Options} options SourceTile source options.
     */
    constructor(options) {

      super({
        attributions: options.attributions,
        attributionsCollapsible: options.attributionsCollapsible,
        projection: options.projection,
        state: options.state,
        wrapX: options.wrapX
      });

      /**
       * @private
       * @type {boolean}
       */
      this.opaque_ = options.opaque !== undefined ? options.opaque : false;

      /**
       * @private
       * @type {number}
       */
      this.tilePixelRatio_ = options.tilePixelRatio !== undefined ?
        options.tilePixelRatio : 1;

      /**
       * @protected
       * @type {import("../tilegrid/TileGrid.js").default}
       */
      this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;

      let cacheSize = options.cacheSize;
      if (cacheSize === undefined) {
        const tileSize = [256, 256];
        const tileGrid = options.tileGrid;
        if (tileGrid) {
          toSize(tileGrid.getTileSize(tileGrid.getMinZoom()), tileSize);
        }
        const canUseScreen = typeof screen !== 'undefined';
        const width = canUseScreen ? (screen.availWidth || screen.width) : 1920;
        const height = canUseScreen ? (screen.availHeight || screen.height) : 1080;
        cacheSize = 4 * Math.ceil(width / tileSize[0]) * Math.ceil(height / tileSize[1]);
      }

      /**
       * @protected
       * @type {import("../TileCache.js").default}
       */
      this.tileCache = new TileCache(cacheSize);

      /**
       * @protected
       * @type {import("../size.js").Size}
       */
      this.tmpSize = [0, 0];

      /**
       * @private
       * @type {string}
       */
      this.key_ = options.key || '';

      /**
       * @protected
       * @type {import("../Tile.js").Options}
       */
      this.tileOptions = {transition: options.transition};

      /**
       * zDirection hint, read by the renderer. Indicates which resolution should be used
       * by a renderer if the views resolution does not match any resolution of the tile source.
       * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
       * will be used. If -1, the nearest higher resolution will be used.
       * @type {number=}
       */
      this.zDirection;
    }

    /**
     * @return {boolean} Can expire cache.
     */
    canExpireCache() {
      return this.tileCache.canExpireCache();
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {!Object<string, import("../TileRange.js").default>} usedTiles Used tiles.
     */
    expireCache(projection, usedTiles) {
      const tileCache = this.getTileCacheForProjection(projection);
      if (tileCache) {
        tileCache.expireCache(usedTiles);
      }
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {number} z Zoom level.
     * @param {import("../TileRange.js").default} tileRange Tile range.
     * @param {function(import("../Tile.js").default):(boolean|void)} callback Called with each
     *     loaded tile.  If the callback returns `false`, the tile will not be
     *     considered loaded.
     * @return {boolean} The tile range is fully covered with loaded tiles.
     */
    forEachLoadedTile(projection, z, tileRange, callback) {
      const tileCache = this.getTileCacheForProjection(projection);
      if (!tileCache) {
        return false;
      }

      let covered = true;
      let tile, tileCoordKey, loaded;
      for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {
        for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {
          tileCoordKey = getKeyZXY(z, x, y);
          loaded = false;
          if (tileCache.containsKey(tileCoordKey)) {
            tile = /** @type {!import("../Tile.js").default} */ (tileCache.get(tileCoordKey));
            loaded = tile.getState() === TileState.LOADED;
            if (loaded) {
              loaded = (callback(tile) !== false);
            }
          }
          if (!loaded) {
            covered = false;
          }
        }
      }
      return covered;
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {number} Gutter.
     */
    getGutterForProjection(projection) {
      return 0;
    }

    /**
     * Return the key to be used for all tiles in the source.
     * @return {string} The key for all tiles.
     * @protected
     */
    getKey() {
      return this.key_;
    }

    /**
     * Set the value to be used as the key for all tiles in the source.
     * @param {string} key The key for tiles.
     * @protected
     */
    setKey(key) {
      if (this.key_ !== key) {
        this.key_ = key;
        this.changed();
      }
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {boolean} Opaque.
     */
    getOpaque(projection) {
      return this.opaque_;
    }

    /**
     * @inheritDoc
     */
    getResolutions() {
      return this.tileGrid.getResolutions();
    }

    /**
     * @abstract
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {!import("../Tile.js").default} Tile.
     */
    getTile(z, x, y, pixelRatio, projection) {
      return abstract();
    }

    /**
     * Return the tile grid of the tile source.
     * @return {import("../tilegrid/TileGrid.js").default} Tile grid.
     * @api
     */
    getTileGrid() {
      return this.tileGrid;
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {!import("../tilegrid/TileGrid.js").default} Tile grid.
     */
    getTileGridForProjection(projection) {
      if (!this.tileGrid) {
        return getForProjection(projection);
      } else {
        return this.tileGrid;
      }
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {import("../TileCache.js").default} Tile cache.
     * @protected
     */
    getTileCacheForProjection(projection) {
      const thisProj = this.getProjection();
      if (thisProj && !equivalent(thisProj, projection)) {
        return null;
      } else {
        return this.tileCache;
      }
    }

    /**
     * Get the tile pixel ratio for this source. Subclasses may override this
     * method, which is meant to return a supported pixel ratio that matches the
     * provided `pixelRatio` as close as possible.
     * @param {number} pixelRatio Pixel ratio.
     * @return {number} Tile pixel ratio.
     */
    getTilePixelRatio(pixelRatio) {
      return this.tilePixelRatio_;
    }

    /**
     * @param {number} z Z.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {import("../size.js").Size} Tile size.
     */
    getTilePixelSize(z, pixelRatio, projection) {
      const tileGrid = this.getTileGridForProjection(projection);
      const tilePixelRatio = this.getTilePixelRatio(pixelRatio);
      const tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);
      if (tilePixelRatio == 1) {
        return tileSize;
      } else {
        return scale$3(tileSize, tilePixelRatio, this.tmpSize);
      }
    }

    /**
     * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate
     * is outside the resolution and extent range of the tile grid, `null` will be
     * returned.
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("../proj/Projection.js").default=} opt_projection Projection.
     * @return {import("../tilecoord.js").TileCoord} Tile coordinate to be passed to the tileUrlFunction or
     *     null if no tile URL should be created for the passed `tileCoord`.
     */
    getTileCoordForTileUrlFunction(tileCoord, opt_projection) {
      const projection = opt_projection !== undefined ?
        opt_projection : this.getProjection();
      const tileGrid = this.getTileGridForProjection(projection);
      if (this.getWrapX() && projection.isGlobal()) {
        tileCoord = wrapX(tileGrid, tileCoord, projection);
      }
      return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;
    }

    /**
     * Remove all cached tiles from the source. The next render cycle will fetch new tiles.
     * @api
     */
    clear() {
      this.tileCache.clear();
    }

    /**
     * @inheritDoc
     */
    refresh() {
      this.clear();
      super.refresh();
    }

    /**
     * Marks a tile coord as being used, without triggering a load.
     * @abstract
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {import("../proj/Projection.js").default} projection Projection.
     */
    useTile(z, x, y, projection) {}

  }


  /**
   * @classdesc
   * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this
   * type.
   */
  class TileSourceEvent extends Event {
    /**
     * @param {string} type Type.
     * @param {import("../Tile.js").default} tile The tile.
     */
    constructor(type, tile) {

      super(type);

      /**
       * The tile related to the event.
       * @type {import("../Tile.js").default}
       * @api
       */
      this.tile = tile;

    }

  }

  /**
   * @module ol/source/TileEventType
   */

  /**
   * @enum {string}
   */
  var TileEventType = {

    /**
     * Triggered when a tile starts loading.
     * @event module:ol/source/Tile.TileSourceEvent#tileloadstart
     * @api
     */
    TILELOADSTART: 'tileloadstart',

    /**
     * Triggered when a tile finishes loading, either when its data is loaded,
     * or when loading was aborted because the tile is no longer needed.
     * @event module:ol/source/Tile.TileSourceEvent#tileloadend
     * @api
     */
    TILELOADEND: 'tileloadend',

    /**
     * Triggered if tile loading results in an error.
     * @event module:ol/source/Tile.TileSourceEvent#tileloaderror
     * @api
     */
    TILELOADERROR: 'tileloaderror'

  };

  /**
   * @module ol/source/UrlTile
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions]
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize]
   * @property {boolean} [opaque]
   * @property {import("../proj.js").ProjectionLike} [projection]
   * @property {import("./State.js").default} [state]
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid]
   * @property {import("../Tile.js").LoadFunction} tileLoadFunction
   * @property {number} [tilePixelRatio]
   * @property {import("../Tile.js").UrlFunction} [tileUrlFunction]
   * @property {string} [url]
   * @property {Array<string>} [urls]
   * @property {boolean} [wrapX=true]
   * @property {number} [transition]
   * @property {string} [key]
   */


  /**
   * @classdesc
   * Base class for sources providing tiles divided into a tile grid over http.
   *
   * @fires import("./Tile.js").TileSourceEvent
   */
  class UrlTile extends TileSource {
    /**
     * @param {Options} options Image tile options.
     */
    constructor(options) {

      super({
        attributions: options.attributions,
        cacheSize: options.cacheSize,
        opaque: options.opaque,
        projection: options.projection,
        state: options.state,
        tileGrid: options.tileGrid,
        tilePixelRatio: options.tilePixelRatio,
        wrapX: options.wrapX,
        transition: options.transition,
        key: options.key,
        attributionsCollapsible: options.attributionsCollapsible
      });

      /**
       * @private
       * @type {boolean}
       */
      this.generateTileUrlFunction_ = !options.tileUrlFunction;

      /**
       * @protected
       * @type {import("../Tile.js").LoadFunction}
       */
      this.tileLoadFunction = options.tileLoadFunction;

      /**
       * @protected
       * @type {import("../Tile.js").UrlFunction}
       */
      this.tileUrlFunction = options.tileUrlFunction ? options.tileUrlFunction.bind(this) : nullTileUrlFunction;

      /**
       * @protected
       * @type {!Array<string>|null}
       */
      this.urls = null;

      if (options.urls) {
        this.setUrls(options.urls);
      } else if (options.url) {
        this.setUrl(options.url);
      }

      /**
       * @private
       * @type {!Object<string, boolean>}
       */
      this.tileLoadingKeys_ = {};

    }

    /**
     * Return the tile load function of the source.
     * @return {import("../Tile.js").LoadFunction} TileLoadFunction
     * @api
     */
    getTileLoadFunction() {
      return this.tileLoadFunction;
    }

    /**
     * Return the tile URL function of the source.
     * @return {import("../Tile.js").UrlFunction} TileUrlFunction
     * @api
     */
    getTileUrlFunction() {
      return this.tileUrlFunction;
    }

    /**
     * Return the URLs used for this source.
     * When a tileUrlFunction is used instead of url or urls,
     * null will be returned.
     * @return {!Array<string>|null} URLs.
     * @api
     */
    getUrls() {
      return this.urls;
    }

    /**
     * Handle tile change events.
     * @param {import("../events/Event.js").default} event Event.
     * @protected
     */
    handleTileChange(event) {
      const tile = /** @type {import("../Tile.js").default} */ (event.target);
      const uid = getUid(tile);
      const tileState = tile.getState();
      let type;
      if (tileState == TileState.LOADING) {
        this.tileLoadingKeys_[uid] = true;
        type = TileEventType.TILELOADSTART;
      } else if (uid in this.tileLoadingKeys_) {
        delete this.tileLoadingKeys_[uid];
        type = tileState == TileState.ERROR ? TileEventType.TILELOADERROR :
          (tileState == TileState.LOADED || tileState == TileState.ABORT) ?
            TileEventType.TILELOADEND : undefined;
      }
      if (type != undefined) {
        this.dispatchEvent(new TileSourceEvent(type, tile));
      }
    }

    /**
     * Set the tile load function of the source.
     * @param {import("../Tile.js").LoadFunction} tileLoadFunction Tile load function.
     * @api
     */
    setTileLoadFunction(tileLoadFunction) {
      this.tileCache.clear();
      this.tileLoadFunction = tileLoadFunction;
      this.changed();
    }

    /**
     * Set the tile URL function of the source.
     * @param {import("../Tile.js").UrlFunction} tileUrlFunction Tile URL function.
     * @param {string=} key Optional new tile key for the source.
     * @api
     */
    setTileUrlFunction(tileUrlFunction, key) {
      this.tileUrlFunction = tileUrlFunction;
      this.tileCache.pruneExceptNewestZ();
      if (typeof key !== 'undefined') {
        this.setKey(key);
      } else {
        this.changed();
      }
    }

    /**
     * Set the URL to use for requests.
     * @param {string} url URL.
     * @api
     */
    setUrl(url) {
      const urls = this.urls = expandUrl(url);
      this.setUrls(urls);
    }

    /**
     * Set the URLs to use for requests.
     * @param {Array<string>} urls URLs.
     * @api
     */
    setUrls(urls) {
      this.urls = urls;
      const key = urls.join('\n');
      if (this.generateTileUrlFunction_) {
        this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);
      } else {
        this.setKey(key);
      }
    }

    /**
     * @inheritDoc
     */
    useTile(z, x, y) {
      const tileCoordKey = getKeyZXY(z, x, y);
      if (this.tileCache.containsKey(tileCoordKey)) {
        this.tileCache.get(tileCoordKey);
      }
    }
  }

  /**
   * @module ol/source/TileImage
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will increase if too small.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {boolean} [opaque=true] Whether the layer is opaque.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {import("./State.js").default} [state] Source state.
   * @property {typeof import("../ImageTile.js").default} [tileClass] Class used to instantiate image tiles.
   * Default is {@link module:ol/ImageTile~ImageTile}.
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile
   * service advertizes 256px by 256px tiles but actually sends 512px
   * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
   * should be set to `2`.
   * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.
   * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
   * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be
   * used instead of defining each one separately in the `urls` option.
   * @property {Array<string>} [urls] An array of URL templates.
   * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to
   * request out-of-bounds tiles from the server. When set to `false`, only one
   * world will be rendered. When set to `true`, tiles will be requested for one
   * world only, but they will be wrapped horizontally to render multiple worlds.
   * @property {number} [transition] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   * @property {string} [key] Optional tile key for proper cache fetching
   */


  /**
   * @classdesc
   * Base class for sources providing images divided into a tile grid.
   *
   * @fires import("./Tile.js").TileSourceEvent
   * @api
   */
  class TileImage extends UrlTile {
    /**
     * @param {!Options} options Image tile options.
     */
    constructor(options) {

      super({
        attributions: options.attributions,
        cacheSize: options.cacheSize,
        opaque: options.opaque,
        projection: options.projection,
        state: options.state,
        tileGrid: options.tileGrid,
        tileLoadFunction: options.tileLoadFunction ?
          options.tileLoadFunction : defaultTileLoadFunction,
        tilePixelRatio: options.tilePixelRatio,
        tileUrlFunction: options.tileUrlFunction,
        url: options.url,
        urls: options.urls,
        wrapX: options.wrapX,
        transition: options.transition,
        key: options.key,
        attributionsCollapsible: options.attributionsCollapsible
      });

      /**
       * @protected
       * @type {?string}
       */
      this.crossOrigin =
          options.crossOrigin !== undefined ? options.crossOrigin : null;

      /**
       * @protected
       * @type {typeof ImageTile}
       */
      this.tileClass = options.tileClass !== undefined ?
        options.tileClass : ImageTile;

      /**
       * @protected
       * @type {!Object<string, TileCache>}
       */
      this.tileCacheForProjection = {};

      /**
       * @protected
       * @type {!Object<string, import("../tilegrid/TileGrid.js").default>}
       */
      this.tileGridForProjection = {};

      /**
       * @private
       * @type {number|undefined}
       */
      this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;

      /**
       * @private
       * @type {boolean}
       */
      this.renderReprojectionEdges_ = false;
    }

    /**
     * @inheritDoc
     */
    canExpireCache() {
      if (this.tileCache.canExpireCache()) {
        return true;
      } else {
        for (const key in this.tileCacheForProjection) {
          if (this.tileCacheForProjection[key].canExpireCache()) {
            return true;
          }
        }
      }
      return false;
    }

    /**
     * @inheritDoc
     */
    expireCache(projection, usedTiles) {
      const usedTileCache = this.getTileCacheForProjection(projection);

      this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});
      for (const id in this.tileCacheForProjection) {
        const tileCache = this.tileCacheForProjection[id];
        tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});
      }
    }

    /**
     * @inheritDoc
     */
    getGutterForProjection(projection) {
      if (
          this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {
        return 0;
      } else {
        return this.getGutter();
      }
    }

    /**
     * @return {number} Gutter.
     */
    getGutter() {
      return 0;
    }

    /**
     * @inheritDoc
     */
    getOpaque(projection) {
      if (
          this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {
        return false;
      } else {
        return super.getOpaque(projection);
      }
    }

    /**
     * @inheritDoc
     */
    getTileGridForProjection(projection) {
      const thisProj = this.getProjection();
      if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {
        return this.tileGrid;
      } else {
        const projKey = getUid(projection);
        if (!(projKey in this.tileGridForProjection)) {
          this.tileGridForProjection[projKey] = getForProjection(projection);
        }
        return (
          /** @type {!import("../tilegrid/TileGrid.js").default} */ (this.tileGridForProjection[projKey])
        );
      }
    }

    /**
     * @inheritDoc
     */
    getTileCacheForProjection(projection) {
      const thisProj = this.getProjection(); if (!thisProj || equivalent(thisProj, projection)) {
        return this.tileCache;
      } else {
        const projKey = getUid(projection);
        if (!(projKey in this.tileCacheForProjection)) {
          this.tileCacheForProjection[projKey] = new TileCache(this.tileCache.highWaterMark);
        }
        return this.tileCacheForProjection[projKey];
      }
    }

    /**
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {string} key The key set on the tile.
     * @return {!import("../Tile.js").default} Tile.
     * @private
     */
    createTile_(z, x, y, pixelRatio, projection, key) {
      const tileCoord = [z, x, y];
      const urlTileCoord = this.getTileCoordForTileUrlFunction(
        tileCoord, projection);
      const tileUrl = urlTileCoord ?
        this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;
      const tile = new this.tileClass(
        tileCoord,
        tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,
        tileUrl !== undefined ? tileUrl : '',
        this.crossOrigin,
        this.tileLoadFunction,
        this.tileOptions);
      tile.key = key;
      listen(tile, EventType.CHANGE,
        this.handleTileChange, this);
      return tile;
    }

    /**
     * @inheritDoc
     */
    getTile(z, x, y, pixelRatio, projection) {
      const sourceProjection = /** @type {!import("../proj/Projection.js").default} */ (this.getProjection());
      if (
          !sourceProjection || !projection || equivalent(sourceProjection, projection)) {
        return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);
      } else {
        const cache = this.getTileCacheForProjection(projection);
        const tileCoord = [z, x, y];
        let tile;
        const tileCoordKey = getKey$1(tileCoord);
        if (cache.containsKey(tileCoordKey)) {
          tile = /** @type {!import("../Tile.js").default} */ (cache.get(tileCoordKey));
        }
        const key = this.getKey();
        if (tile && tile.key == key) {
          return tile;
        } else {
          const sourceTileGrid = this.getTileGridForProjection(sourceProjection);
          const targetTileGrid = this.getTileGridForProjection(projection);
          const wrappedTileCoord =
              this.getTileCoordForTileUrlFunction(tileCoord, projection);
          const newTile = new ReprojTile(
            sourceProjection, sourceTileGrid,
            projection, targetTileGrid,
            tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio),
            this.getGutter(),
            function(z, x, y, pixelRatio) {
              return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);
            }.bind(this), this.reprojectionErrorThreshold_,
            this.renderReprojectionEdges_);
          newTile.key = key;

          if (tile) {
            newTile.interimTile = tile;
            newTile.refreshInterimChain();
            cache.replace(tileCoordKey, newTile);
          } else {
            cache.set(tileCoordKey, newTile);
          }
          return newTile;
        }
      }
    }

    /**
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {number} pixelRatio Pixel ratio.
     * @param {!import("../proj/Projection.js").default} projection Projection.
     * @return {!import("../Tile.js").default} Tile.
     * @protected
     */
    getTileInternal(z, x, y, pixelRatio, projection) {
      let tile = null;
      const tileCoordKey = getKeyZXY(z, x, y);
      const key = this.getKey();
      if (!this.tileCache.containsKey(tileCoordKey)) {
        tile = this.createTile_(z, x, y, pixelRatio, projection, key);
        this.tileCache.set(tileCoordKey, tile);
      } else {
        tile = this.tileCache.get(tileCoordKey);
        if (tile.key != key) {
          // The source's params changed. If the tile has an interim tile and if we
          // can use it then we use it. Otherwise we create a new tile.  In both
          // cases we attempt to assign an interim tile to the new tile.
          const interimTile = tile;
          tile = this.createTile_(z, x, y, pixelRatio, projection, key);

          //make the new tile the head of the list,
          if (interimTile.getState() == TileState.IDLE) {
            //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it
            tile.interimTile = interimTile.interimTile;
          } else {
            tile.interimTile = interimTile;
          }
          tile.refreshInterimChain();
          this.tileCache.replace(tileCoordKey, tile);
        }
      }
      return tile;
    }

    /**
     * Sets whether to render reprojection edges or not (usually for debugging).
     * @param {boolean} render Render the edges.
     * @api
     */
    setRenderReprojectionEdges(render) {
      if (
          this.renderReprojectionEdges_ == render) {
        return;
      }
      this.renderReprojectionEdges_ = render;
      for (const id in this.tileCacheForProjection) {
        this.tileCacheForProjection[id].clear();
      }
      this.changed();
    }

    /**
     * Sets the tile grid to use when reprojecting the tiles to the given
     * projection instead of the default tile grid for the projection.
     *
     * This can be useful when the default tile grid cannot be created
     * (e.g. projection has no extent defined) or
     * for optimization reasons (custom tile size, resolutions, ...).
     *
     * @param {import("../proj.js").ProjectionLike} projection Projection.
     * @param {import("../tilegrid/TileGrid.js").default} tilegrid Tile grid to use for the projection.
     * @api
     */
    setTileGridForProjection(projection, tilegrid) {
      {
        const proj = get$2(projection);
        if (proj) {
          const projKey = getUid(proj);
          if (!(projKey in this.tileGridForProjection)) {
            this.tileGridForProjection[projKey] = tilegrid;
          }
        }
      }
    }
  }


  /**
   * @param {ImageTile} imageTile Image tile.
   * @param {string} src Source.
   */
  function defaultTileLoadFunction(imageTile, src) {
    /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src = src;
  }

  /**
   * @module ol/source/BingMaps
   */


  /**
   * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coord.
   * @return {string} Quad key.
   */
  function quadKey(tileCoord) {
    const z = tileCoord[0];
    const digits = new Array(z);
    let mask = 1 << (z - 1);
    let i, charCode;
    for (i = 0; i < z; ++i) {
      // 48 is charCode for 0 - '0'.charCodeAt(0)
      charCode = 48;
      if (tileCoord[1] & mask) {
        charCode += 1;
      }
      if (tileCoord[2] & mask) {
        charCode += 2;
      }
      digits[i] = String.fromCharCode(charCode);
      mask >>= 1;
    }
    return digits.join('');
  }


  /**
   * The attribution containing a link to the Microsoft® Bing™ Maps Platform APIs’
   * Terms Of Use.
   * @const
   * @type {string}
   */
  const TOS_ATTRIBUTION = '<a class="ol-attribution-bing-tos" ' +
        'href="https://www.microsoft.com/maps/product/terms.html">' +
        'Terms of Use</a>';


  /**
   * @typedef {Object} Options
   * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will increase if too small.
   * @property {boolean} [hidpi=false] If `true` hidpi tiles will be requested.
   * @property {string} [culture='en-us'] Culture code.
   * @property {string} key Bing Maps API key. Get yours at http://www.bingmapsportal.com/.
   * @property {string} imagerySet Type of imagery.
   * @property {number} [maxZoom=21] Max zoom. Default is what's advertized by the BingMaps service.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   * @property {number} [transition] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   */


  /**
   * @typedef {Object} BingMapsImageryMetadataResponse
   * @property {number} statusCode The response status code
   * @property {string} statusDescription The response status description
   * @property {string} authenticationResultCode The authentication result code
   * @property {Array<ResourceSet>} resourceSets The array of resource sets
   */


  /**
   * @typedef {Object} ResourceSet
   * @property {Array<Resource>} resources
   */


  /**
   * @typedef {Object} Resource
   * @property {number} imageHeight The image height
   * @property {number} imageWidth The image width
   * @property {number} zoomMin The minimum zoom level
   * @property {number} zoomMax The maximum zoom level
   * @property {string} imageUrl The image URL
   * @property {Array<string>} imageUrlSubdomains The image URL subdomains for rotation
   * @property {Array<ImageryProvider>} [imageryProviders] The array of ImageryProviders
   */


  /**
   * @typedef {Object} ImageryProvider
   * @property {Array<CoverageArea>} coverageAreas The coverage areas
   * @property {string} [attribution] The attribution
   */


  /**
   * @typedef {Object} CoverageArea
   * @property {number} zoomMin The minimum zoom
   * @property {number} zoomMax The maximum zoom
   * @property {Array<number>} bbox The coverage bounding box
   */


  /**
   * @classdesc
   * Layer source for Bing Maps tile data.
   * @api
   */
  class BingMaps extends TileImage {
    /**
     * @param {Options} options Bing Maps options.
     */
    constructor(options) {

      const hidpi = options.hidpi !== undefined ? options.hidpi : false;

      super({
        cacheSize: options.cacheSize,
        crossOrigin: 'anonymous',
        opaque: true,
        projection: get$2('EPSG:3857'),
        reprojectionErrorThreshold: options.reprojectionErrorThreshold,
        state: SourceState.LOADING,
        tileLoadFunction: options.tileLoadFunction,
        tilePixelRatio: hidpi ? 2 : 1,
        wrapX: options.wrapX !== undefined ? options.wrapX : true,
        transition: options.transition
      });

      /**
       * @private
       * @type {boolean}
       */
      this.hidpi_ = hidpi;


      /**
       * @private
       * @type {string}
       */
      this.culture_ = options.culture !== undefined ? options.culture : 'en-us';

      /**
       * @private
       * @type {number}
       */
      this.maxZoom_ = options.maxZoom !== undefined ? options.maxZoom : -1;

      /**
       * @private
       * @type {string}
       */
      this.apiKey_ = options.key;

      /**
       * @private
       * @type {string}
       */
      this.imagerySet_ = options.imagerySet;

      const url = 'https://dev.virtualearth.net/REST/v1/Imagery/Metadata/' +
          this.imagerySet_ +
          '?uriScheme=https&include=ImageryProviders&key=' + this.apiKey_ +
          '&c=' + this.culture_;

      jsonp(url, this.handleImageryMetadataResponse.bind(this), undefined,
        'jsonp');

    }

    /**
     * Get the api key used for this source.
     *
     * @return {string} The api key.
     * @api
     */
    getApiKey() {
      return this.apiKey_;
    }

    /**
     * Get the imagery set associated with this source.
     *
     * @return {string} The imagery set.
     * @api
     */
    getImagerySet() {
      return this.imagerySet_;
    }

    /**
     * @param {BingMapsImageryMetadataResponse} response Response.
     */
    handleImageryMetadataResponse(response) {
      if (response.statusCode != 200 ||
          response.statusDescription != 'OK' ||
          response.authenticationResultCode != 'ValidCredentials' ||
          response.resourceSets.length != 1 ||
          response.resourceSets[0].resources.length != 1) {
        this.setState(SourceState.ERROR);
        return;
      }

      const resource = response.resourceSets[0].resources[0];
      const maxZoom = this.maxZoom_ == -1 ? resource.zoomMax : this.maxZoom_;

      const sourceProjection = this.getProjection();
      const extent = extentFromProjection(sourceProjection);
      const scale = this.hidpi_ ? 2 : 1;
      const tileSize = resource.imageWidth == resource.imageHeight ?
        resource.imageWidth / scale :
        [resource.imageWidth / scale, resource.imageHeight / scale];

      const tileGrid = createXYZ({
        extent: extent,
        minZoom: resource.zoomMin,
        maxZoom: maxZoom,
        tileSize: tileSize
      });
      this.tileGrid = tileGrid;

      const culture = this.culture_;
      const hidpi = this.hidpi_;
      this.tileUrlFunction = createFromTileUrlFunctions(
        resource.imageUrlSubdomains.map(function(subdomain) {
          /** @type {import('../tilecoord.js').TileCoord} */
          const quadKeyTileCoord = [0, 0, 0];
          const imageUrl = resource.imageUrl
            .replace('{subdomain}', subdomain)
            .replace('{culture}', culture);
          return (
            /**
             * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
             * @param {number} pixelRatio Pixel ratio.
             * @param {import("../proj/Projection.js").default} projection Projection.
             * @return {string|undefined} Tile URL.
             */
            function(tileCoord, pixelRatio, projection) {
              if (!tileCoord) {
                return undefined;
              } else {
                createOrUpdate$1(tileCoord[0], tileCoord[1], tileCoord[2], quadKeyTileCoord);
                let url = imageUrl;
                if (hidpi) {
                  url += '&dpi=d1&device=mobile';
                }
                return url.replace('{quadkey}', quadKey(quadKeyTileCoord));
              }
            }
          );
        }));

      if (resource.imageryProviders) {
        const transform = getTransformFromProjections(
          get$2('EPSG:4326'), this.getProjection());

        this.setAttributions(function(frameState) {
          const attributions = [];
          const viewState = frameState.viewState;
          const tileGrid = this.getTileGrid();
          const tileCoord = tileGrid.getTileCoordForCoordAndResolution(viewState.center, viewState.resolution);
          const zoom = tileCoord[0];
          resource.imageryProviders.map(function(imageryProvider) {
            let intersecting = false;
            const coverageAreas = imageryProvider.coverageAreas;
            for (let i = 0, ii = coverageAreas.length; i < ii; ++i) {
              const coverageArea = coverageAreas[i];
              if (zoom >= coverageArea.zoomMin && zoom <= coverageArea.zoomMax) {
                const bbox = coverageArea.bbox;
                const epsg4326Extent = [bbox[1], bbox[0], bbox[3], bbox[2]];
                const extent = applyTransform(epsg4326Extent, transform);
                if (intersects(extent, frameState.extent)) {
                  intersecting = true;
                  break;
                }
              }
            }
            if (intersecting) {
              attributions.push(imageryProvider.attribution);
            }
          });

          attributions.push(TOS_ATTRIBUTION);
          return attributions;
        }.bind(this));
      }

      this.setState(SourceState.READY);
    }
  }

  /**
   * @module ol/source/XYZ
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will increase if too small.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {boolean} [opaque=true] Whether the layer is opaque.
   * @property {import("../proj.js").ProjectionLike} [projection='EPSG:3857'] Projection.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {number} [maxZoom=18] Optional max zoom level.
   * @property {number} [minZoom=0] Optional min zoom level.
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.
   * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px
   * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
   * should be set to `2`.
   * @property {number|import("../size.js").Size} [tileSize=[256, 256]] The tile size used by the tile service.
   * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Optional function to get
   * tile URL given a tile coordinate and the projection.
   * Required if url or urls are not provided.
   * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`,
   * and `{z}` placeholders. A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`,
   * may be used instead of defining each one separately in the `urls` option.
   * @property {Array<string>} [urls] An array of URL templates.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   * @property {number} [transition] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   */


  /**
   * @classdesc
   * Layer source for tile data with URLs in a set XYZ format that are
   * defined in a URL template. By default, this follows the widely-used
   * Google grid where `x` 0 and `y` 0 are in the top left. Grids like
   * TMS where `x` 0 and `y` 0 are in the bottom left can be used by
   * using the `{-y}` placeholder in the URL template, so long as the
   * source does not have a custom tile grid. In this case,
   * {@link module:ol/source/TileImage} can be used with a `tileUrlFunction`
   * such as:
   *
   *  tileUrlFunction: function(coordinate) {
   *    return 'http://mapserver.com/' + coordinate[0] + '/' +
   *        coordinate[1] + '/' + coordinate[2] + '.png';
   *    }
   *
   * @api
   */
  class XYZ extends TileImage {
    /**
     * @param {Options=} opt_options XYZ options.
     */
    constructor(opt_options) {
      const options = opt_options || {};
      const projection = options.projection !== undefined ?
        options.projection : 'EPSG:3857';

      const tileGrid = options.tileGrid !== undefined ? options.tileGrid :
        createXYZ({
          extent: extentFromProjection(projection),
          maxZoom: options.maxZoom,
          minZoom: options.minZoom,
          tileSize: options.tileSize
        });

      super({
        attributions: options.attributions,
        cacheSize: options.cacheSize,
        crossOrigin: options.crossOrigin,
        opaque: options.opaque,
        projection: projection,
        reprojectionErrorThreshold: options.reprojectionErrorThreshold,
        tileGrid: tileGrid,
        tileLoadFunction: options.tileLoadFunction,
        tilePixelRatio: options.tilePixelRatio,
        tileUrlFunction: options.tileUrlFunction,
        url: options.url,
        urls: options.urls,
        wrapX: options.wrapX !== undefined ? options.wrapX : true,
        transition: options.transition,
        attributionsCollapsible: options.attributionsCollapsible
      });

    }

  }

  /**
   * @module ol/source/CartoDB
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will increase if too small.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {import("../proj.js").ProjectionLike} [projection='EPSG:3857'] Projection.
   * @property {number} [maxZoom=18] Max zoom.
   * @property {number} [minZoom] Minimum zoom.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   * @property {Object} [config] If using anonymous maps, the CartoDB config to use. See
   * http://docs.cartodb.com/cartodb-platform/maps-api/anonymous-maps/
   * for more detail.
   * If using named maps, a key-value lookup with the template parameters.
   * See http://docs.cartodb.com/cartodb-platform/maps-api/named-maps/
   * for more detail.
   * @property {string} [map] If using named maps, this will be the name of the template to load.
   * See http://docs.cartodb.com/cartodb-platform/maps-api/named-maps/
   * for more detail.
   * @property {string} account If using named maps, this will be the name of the template to load.
   */


  /**
   * @typedef {Object} CartoDBLayerInfo
   * @property {string} layergroupid The layer group ID
   * @property {{https: string}} cdn_url The CDN URL
   */

  /**
   * @classdesc
   * Layer source for the CartoDB Maps API.
   * @api
   */
  class CartoDB extends XYZ {
    /**
     * @param {Options} options CartoDB options.
     */
    constructor(options) {
      super({
        attributions: options.attributions,
        cacheSize: options.cacheSize,
        crossOrigin: options.crossOrigin,
        maxZoom: options.maxZoom !== undefined ? options.maxZoom : 18,
        minZoom: options.minZoom,
        projection: options.projection,
        wrapX: options.wrapX
      });

      /**
       * @type {string}
       * @private
       */
      this.account_ = options.account;

      /**
       * @type {string}
       * @private
       */
      this.mapId_ = options.map || '';

      /**
       * @type {!Object}
       * @private
       */
      this.config_ = options.config || {};

      /**
       * @type {!Object<string, CartoDBLayerInfo>}
       * @private
       */
      this.templateCache_ = {};

      this.initializeMap_();
    }

    /**
     * Returns the current config.
     * @return {!Object} The current configuration.
     * @api
     */
    getConfig() {
      return this.config_;
    }

    /**
     * Updates the carto db config.
     * @param {Object} config a key-value lookup. Values will replace current values
     *     in the config.
     * @api
     */
    updateConfig(config) {
      assign(this.config_, config);
      this.initializeMap_();
    }

    /**
     * Sets the CartoDB config
     * @param {Object} config In the case of anonymous maps, a CartoDB configuration
     *     object.
     * If using named maps, a key-value lookup with the template parameters.
     * @api
     */
    setConfig(config) {
      this.config_ = config || {};
      this.initializeMap_();
    }

    /**
     * Issue a request to initialize the CartoDB map.
     * @private
     */
    initializeMap_() {
      const paramHash = JSON.stringify(this.config_);
      if (this.templateCache_[paramHash]) {
        this.applyTemplate_(this.templateCache_[paramHash]);
        return;
      }
      let mapUrl = 'https://' + this.account_ + '.carto.com/api/v1/map';

      if (this.mapId_) {
        mapUrl += '/named/' + this.mapId_;
      }

      const client = new XMLHttpRequest();
      client.addEventListener('load', this.handleInitResponse_.bind(this, paramHash));
      client.addEventListener('error', this.handleInitError_.bind(this));
      client.open('POST', mapUrl);
      client.setRequestHeader('Content-type', 'application/json');
      client.send(JSON.stringify(this.config_));
    }

    /**
     * Handle map initialization response.
     * @param {string} paramHash a hash representing the parameter set that was used
     *     for the request
     * @param {Event} event Event.
     * @private
     */
    handleInitResponse_(paramHash, event) {
      const client = /** @type {XMLHttpRequest} */ (event.target);
      // status will be 0 for file:// urls
      if (!client.status || client.status >= 200 && client.status < 300) {
        let response;
        try {
          response = /** @type {CartoDBLayerInfo} */(JSON.parse(client.responseText));
        } catch (err) {
          this.setState(SourceState.ERROR);
          return;
        }
        this.applyTemplate_(response);
        this.templateCache_[paramHash] = response;
        this.setState(SourceState.READY);
      } else {
        this.setState(SourceState.ERROR);
      }
    }

    /**
     * @private
     * @param {Event} event Event.
     */
    handleInitError_(event) {
      this.setState(SourceState.ERROR);
    }

    /**
     * Apply the new tile urls returned by carto db
     * @param {CartoDBLayerInfo} data Result of carto db call.
     * @private
     */
    applyTemplate_(data) {
      const tilesUrl = 'https://' + data.cdn_url.https + '/' + this.account_ +
          '/api/v1/map/' + data.layergroupid + '/{z}/{x}/{y}.png';
      this.setUrl(tilesUrl);
    }
  }

  /**
   * @module ol/source/Cluster
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {number} [distance=20] Minimum distance in pixels between clusters.
   * @property {function(Feature):Point} [geometryFunction]
   * Function that takes an {@link module:ol/Feature} as argument and returns an
   * {@link module:ol/geom/Point} as cluster calculation point for the feature. When a
   * feature should not be considered for clustering, the function should return
   * `null`. The default, which works when the underyling source contains point
   * features only, is
   * ```js
   * function(feature) {
   *   return feature.getGeometry();
   * }
   * ```
   * See {@link module:ol/geom/Polygon~Polygon#getInteriorPoint} for a way to get a cluster
   * calculation point for polygons.
   * @property {VectorSource} source Source.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   */


  /**
   * @classdesc
   * Layer source to cluster vector data. Works out of the box with point
   * geometries. For other geometry types, or if not all geometries should be
   * considered for clustering, a custom `geometryFunction` can be defined.
   * @api
   */
  class Cluster extends VectorSource {
    /**
     * @param {Options} options Cluster options.
     */
    constructor(options) {
      super({
        attributions: options.attributions,
        wrapX: options.wrapX
      });

      /**
       * @type {number|undefined}
       * @protected
       */
      this.resolution = undefined;

      /**
       * @type {number}
       * @protected
       */
      this.distance = options.distance !== undefined ? options.distance : 20;

      /**
       * @type {Array<Feature>}
       * @protected
       */
      this.features = [];

      /**
       * @param {Feature} feature Feature.
       * @return {Point} Cluster calculation point.
       * @protected
       */
      this.geometryFunction = options.geometryFunction || function(feature) {
        const geometry = feature.getGeometry();
        assert(geometry.getType() == GeometryType.POINT,
          10); // The default `geometryFunction` can only handle `Point` geometries
        return geometry;
      };

      /**
       * @type {VectorSource}
       * @protected
       */
      this.source = options.source;

      listen(this.source, EventType.CHANGE, this.refresh, this);
    }

    /**
     * Get the distance in pixels between clusters.
     * @return {number} Distance.
     * @api
     */
    getDistance() {
      return this.distance;
    }

    /**
     * Get a reference to the wrapped source.
     * @return {VectorSource} Source.
     * @api
     */
    getSource() {
      return this.source;
    }

    /**
     * @inheritDoc
     */
    loadFeatures(extent, resolution, projection) {
      this.source.loadFeatures(extent, resolution, projection);
      if (resolution !== this.resolution) {
        this.clear();
        this.resolution = resolution;
        this.cluster();
        this.addFeatures(this.features);
      }
    }

    /**
     * Set the distance in pixels between clusters.
     * @param {number} distance The distance in pixels.
     * @api
     */
    setDistance(distance) {
      this.distance = distance;
      this.refresh();
    }

    /**
     * handle the source changing
     * @override
     */
    refresh() {
      this.clear();
      this.cluster();
      this.addFeatures(this.features);
    }

    /**
     * @protected
     */
    cluster() {
      if (this.resolution === undefined) {
        return;
      }
      this.features.length = 0;
      const extent = createEmpty();
      const mapDistance = this.distance * this.resolution;
      const features = this.source.getFeatures();

      /**
       * @type {!Object<string, boolean>}
       */
      const clustered = {};

      for (let i = 0, ii = features.length; i < ii; i++) {
        const feature = features[i];
        if (!(getUid(feature) in clustered)) {
          const geometry = this.geometryFunction(feature);
          if (geometry) {
            const coordinates = geometry.getCoordinates();
            createOrUpdateFromCoordinate(coordinates, extent);
            buffer(extent, mapDistance, extent);

            let neighbors = this.source.getFeaturesInExtent(extent);
            neighbors = neighbors.filter(function(neighbor) {
              const uid = getUid(neighbor);
              if (!(uid in clustered)) {
                clustered[uid] = true;
                return true;
              } else {
                return false;
              }
            });
            this.features.push(this.createCluster(neighbors));
          }
        }
      }
    }

    /**
     * @param {Array<Feature>} features Features
     * @return {Feature} The cluster feature.
     * @protected
     */
    createCluster(features) {
      const centroid = [0, 0];
      for (let i = features.length - 1; i >= 0; --i) {
        const geometry = this.geometryFunction(features[i]);
        if (geometry) {
          add$2(centroid, geometry.getCoordinates());
        } else {
          features.splice(i, 1);
        }
      }
      scale$2(centroid, 1 / features.length);

      const cluster = new Feature(new Point(centroid));
      cluster.set('features', features);
      return cluster;
    }
  }

  /**
   * @module ol/source/Zoomify
   */


  /**
   * @enum {string}
   */
  const TierSizeCalculation = {
    DEFAULT: 'default',
    TRUNCATED: 'truncated'
  };


  class CustomTile extends ImageTile {

    /**
     * @param {number} tilePixelRatio Tile pixel ratio to display the tile
     * @param {import("../tilegrid/TileGrid.js").default} tileGrid TileGrid that the tile belongs to.
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {TileState} state State.
     * @param {string} src Image source URI.
     * @param {?string} crossOrigin Cross origin.
     * @param {import("../Tile.js").LoadFunction} tileLoadFunction Tile load function.
     * @param {import("../Tile.js").Options=} opt_options Tile options.
     */
    constructor(tilePixelRatio, tileGrid, tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) {
      super(tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options);

      /**
       * @private
       * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}
       */
      this.zoomifyImage_ = null;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.tileSize_ = toSize(tileGrid.getTileSize(tileCoord[0])).map(
        function(x) {
          return x * tilePixelRatio;
        }
      );
    }

    /**
     * @inheritDoc
     */
    getImage() {
      if (this.zoomifyImage_) {
        return this.zoomifyImage_;
      }
      const image = super.getImage();
      if (this.state == TileState.LOADED) {
        const tileSize = this.tileSize_;
        if (image.width == tileSize[0] && image.height == tileSize[1]) {
          this.zoomifyImage_ = image;
          return image;
        } else {
          const context = createCanvasContext2D(tileSize[0], tileSize[1]);
          context.drawImage(image, 0, 0);
          this.zoomifyImage_ = context.canvas;
          return context.canvas;
        }
      } else {
        return image;
      }
    }

  }


  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will increase if too small.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value  you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection.
   * @property {number} [tilePixelRatio] The pixel ratio used by the tile service. For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px by 512px images (for retina/hidpi devices) then `tilePixelRatio` should be set to `2`
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {string} [url] URL template or base URL of the Zoomify service.
   * A base URL is the fixed part
   * of the URL, excluding the tile group, z, x, and y folder structure, e.g.
   * `http://my.zoomify.info/IMAGE.TIF/`. A URL template must include
   * `{TileGroup}`, `{x}`, `{y}`, and `{z}` placeholders, e.g.
   * `http://my.zoomify.info/IMAGE.TIF/{TileGroup}/{z}-{x}-{y}.jpg`.
   * Internet Imaging Protocol (IIP) with JTL extension can be also used with
   * `{tileIndex}` and `{z}` placeholders, e.g.
   * `http://my.zoomify.info?FIF=IMAGE.TIF&JTL={z},{tileIndex}`.
   * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be
   * used instead of defining each one separately in the `urls` option.
   * @property {string} [tierSizeCalculation] Tier size calculation method: `default` or `truncated`.
   * @property {import("../size.js").Size} [size] Size of the image.
   * @property {import("../extent.js").Extent} [extent] Extent for the TileGrid that is created.
   * Default sets the TileGrid in the
   * fourth quadrant, meaning extent is `[0, -height, width, 0]`. To change the
   * extent to the first quadrant (the default for OpenLayers 2) set the extent
   * as `[0, 0, width, height]`.
   * @property {number} [transition] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   * @property {number} [tileSize=256] Tile size. Same tile size is used for all zoom levels.
   * @property {number} [zDirection] Indicate which resolution should be used
   * by a renderer if the views resolution does not match any resolution of the tile source.
   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
   * will be used. If -1, the nearest higher resolution will be used.
   */


  /**
   * @classdesc
   * Layer source for tile data in Zoomify format (both Zoomify and Internet
   * Imaging Protocol are supported).
   * @api
   */
  class Zoomify extends TileImage {

    /**
     * @param {Options=} opt_options Options.
     */
    constructor(opt_options) {

      const options = opt_options || {};

      const size = options.size;
      const tierSizeCalculation = options.tierSizeCalculation !== undefined ?
        options.tierSizeCalculation :
        TierSizeCalculation.DEFAULT;

      const imageWidth = size[0];
      const imageHeight = size[1];
      const extent = options.extent || [0, -size[1], size[0], 0];
      const tierSizeInTiles = [];
      const tileSize = options.tileSize || DEFAULT_TILE_SIZE;
      const tilePixelRatio = options.tilePixelRatio || 1;
      let tileSizeForTierSizeCalculation = tileSize;

      switch (tierSizeCalculation) {
        case TierSizeCalculation.DEFAULT:
          while (imageWidth > tileSizeForTierSizeCalculation || imageHeight > tileSizeForTierSizeCalculation) {
            tierSizeInTiles.push([
              Math.ceil(imageWidth / tileSizeForTierSizeCalculation),
              Math.ceil(imageHeight / tileSizeForTierSizeCalculation)
            ]);
            tileSizeForTierSizeCalculation += tileSizeForTierSizeCalculation;
          }
          break;
        case TierSizeCalculation.TRUNCATED:
          let width = imageWidth;
          let height = imageHeight;
          while (width > tileSizeForTierSizeCalculation || height > tileSizeForTierSizeCalculation) {
            tierSizeInTiles.push([
              Math.ceil(width / tileSizeForTierSizeCalculation),
              Math.ceil(height / tileSizeForTierSizeCalculation)
            ]);
            width >>= 1;
            height >>= 1;
          }
          break;
        default:
          assert(false, 53); // Unknown `tierSizeCalculation` configured
          break;
      }

      tierSizeInTiles.push([1, 1]);
      tierSizeInTiles.reverse();

      const resolutions = [1];
      const tileCountUpToTier = [0];
      for (let i = 1, ii = tierSizeInTiles.length; i < ii; i++) {
        resolutions.push(1 << i);
        tileCountUpToTier.push(
          tierSizeInTiles[i - 1][0] * tierSizeInTiles[i - 1][1] +
            tileCountUpToTier[i - 1]
        );
      }
      resolutions.reverse();

      const tileGrid = new TileGrid({
        tileSize: tileSize,
        extent: extent,
        origin: getTopLeft(extent),
        resolutions: resolutions
      });

      let url = options.url;
      if (url && url.indexOf('{TileGroup}') == -1 && url.indexOf('{tileIndex}') == -1) {
        url += '{TileGroup}/{z}-{x}-{y}.jpg';
      }
      const urls = expandUrl(url);

      /**
       * @param {string} template Template.
       * @return {import("../Tile.js").UrlFunction} Tile URL function.
       */
      function createFromTemplate(template) {

        return (
          /**
           * @param {import("../tilecoord.js").TileCoord} tileCoord Tile Coordinate.
           * @param {number} pixelRatio Pixel ratio.
           * @param {import("../proj/Projection.js").default} projection Projection.
           * @return {string|undefined} Tile URL.
           */
          function(tileCoord, pixelRatio, projection) {
            if (!tileCoord) {
              return undefined;
            } else {
              const tileCoordZ = tileCoord[0];
              const tileCoordX = tileCoord[1];
              const tileCoordY = tileCoord[2];
              const tileIndex =
                  tileCoordX +
                  tileCoordY * tierSizeInTiles[tileCoordZ][0];
              const tileSize = tileGrid.getTileSize(tileCoordZ);
              const tileWidth = Array.isArray(tileSize) ? tileSize[0] : tileSize;
              const tileGroup = ((tileIndex + tileCountUpToTier[tileCoordZ]) / tileWidth) | 0;
              const localContext = {
                'z': tileCoordZ,
                'x': tileCoordX,
                'y': tileCoordY,
                'tileIndex': tileIndex,
                'TileGroup': 'TileGroup' + tileGroup
              };
              return template.replace(/\{(\w+?)\}/g, function(m, p) {
                return localContext[p];
              });
            }
          }
        );
      }

      const tileUrlFunction = createFromTileUrlFunctions(urls.map(createFromTemplate));

      const ZoomifyTileClass = CustomTile.bind(null, tilePixelRatio, tileGrid);

      super({
        attributions: options.attributions,
        cacheSize: options.cacheSize,
        crossOrigin: options.crossOrigin,
        projection: options.projection,
        tilePixelRatio: tilePixelRatio,
        reprojectionErrorThreshold: options.reprojectionErrorThreshold,
        tileClass: ZoomifyTileClass,
        tileGrid: tileGrid,
        tileUrlFunction: tileUrlFunction,
        transition: options.transition
      });

      /**
       * @inheritDoc
       */
      this.zDirection = options.zDirection;

    }

  }

  /**
   * @module ol/source/IIIF
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize]
   * @property {null|string} [crossOrigin]
   * @property {import("../extent.js").Extent} [extent=[0, -height, width, 0]]
   * @property {string} [format='jpg'] Requested image format.
   * @property {import("../proj.js").ProjectionLike} [projection]
   * @property {string} [quality] Requested IIIF image quality. Default is 'native'
   * for version 1, 'default' for versions 2 and 3.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {Array<number>} [resolutions] Supported resolutions as given in IIIF 'scaleFactors'
   * @property {import("../size.js").Size} size Size of the image [width, height].
   * @property {import("../size.js").Size[]} [sizes] Supported scaled image sizes.
   * Content of the IIIF info.json 'sizes' property, but as array of Size objects.
   * @property {import("./State.js").default} [state] Source state.
   * @property {Array<string>} [supports=[]] Supported IIIF region and size calculation
   * features.
   * @property {number} [tilePixelRatio]
   * @property {number|import("../size.js").Size} [tileSize] Tile size.
   * Same tile size is used for all zoom levels. If tile size is a number,
   * a square tile is assumed. If the IIIF image service supports arbitrary
   * tiling (sizeByH, sizeByW, sizeByWh or sizeByPct as well as regionByPx or regionByPct
   * are supported), the default tilesize is 256.
   * @property {number} [transition]
   * @property {string} [url] Base URL of the IIIF Image service.
   * This should be the same as the IIIF Image ID.
   * @property {Versions} [version=Versions.VERSION2] Service's IIIF Image API version.
   * @property {number} [zDirection] Indicate which resolution should be used
   * by a renderer if the views resolution does not match any resolution of the tile source.
   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
   * will be used. If -1, the nearest higher resolution will be used.
   */

  function formatPercentage(percentage) {
    return percentage.toLocaleString('en', {maximumFractionDigits: 10});
  }

  /**
   * @classdesc
   * Layer source for IIIF Image API services.
   * @api
   */
  class IIIF extends TileImage {

    /**
     * @param {Options} opt_options Tile source options. Use {@link import("../format/IIIFInfo.js").IIIFInfo}
     * to parse Image API service information responses into constructor options.
     * @api
     */
    constructor(opt_options) {

      /**
       * @type {Partial<Options>}
       */
      const options = opt_options || {};

      let baseUrl = options.url || '';
      baseUrl = baseUrl + (baseUrl.lastIndexOf('/') === baseUrl.length - 1 || baseUrl === '' ? '' : '/');
      const version = options.version || Versions.VERSION2;
      const sizes = options.sizes || [];
      const size = options.size;
      assert(size != undefined && Array.isArray(size) && size.length == 2 &&
        !isNaN(size[0]) && size[0] > 0 && !isNaN(size[1]) && size[1] > 0, 60);
      const width = size[0];
      const height = size[1];
      const tileSize = options.tileSize;
      const tilePixelRatio = options.tilePixelRatio || 1;
      const format = options.format || 'jpg';
      const quality = options.quality || (options.version == Versions.VERSION1 ? 'native' : 'default');
      let resolutions = options.resolutions || [];
      const supports = options.supports || [];
      const extent = options.extent || [0, -height, width, 0];

      const supportsListedSizes = sizes != undefined && Array.isArray(sizes) && sizes.length > 0;
      const supportsListedTiles = tileSize != undefined && (typeof tileSize === 'number' && Number.isInteger(tileSize) && tileSize > 0 || Array.isArray(tileSize) && tileSize.length > 0);
      const supportsArbitraryTiling = supports != undefined && Array.isArray(supports) &&
        (supports.includes('regionByPx') || supports.includes('regionByPct')) &&
        (supports.includes('sizeByWh') || supports.includes('sizeByH') ||
        supports.includes('sizeByW') || supports.includes('sizeByPct'));

      let tileWidth,
          tileHeight,
          maxZoom;

      resolutions.sort(function(a, b) {
        return b - a;
      });

      if (supportsListedTiles || supportsArbitraryTiling) {
        if (tileSize != undefined) {
          if (typeof tileSize === 'number' && Number.isInteger(tileSize) && tileSize > 0) {
            tileWidth = tileSize;
            tileHeight = tileSize;
          } else if (Array.isArray(tileSize) && tileSize.length > 0) {
            if (tileSize.length == 1 || tileSize[1] == undefined && Number.isInteger(tileSize[0])) {
              tileWidth = tileSize[0];
              tileHeight = tileSize[0];
            }
            if (tileSize.length == 2) {
              if (Number.isInteger(tileSize[0]) && Number.isInteger(tileSize[1])) {
                tileWidth = tileSize[0];
                tileHeight = tileSize[1];
              } else if (tileSize[0] == undefined && Number.isInteger(tileSize[1])) {
                tileWidth = tileSize[1];
                tileHeight = tileSize[1];
              }
            }
          }
        }
        if (tileWidth === undefined || tileHeight === undefined) {
          tileWidth = DEFAULT_TILE_SIZE;
          tileHeight = DEFAULT_TILE_SIZE;
        }
        if (resolutions.length == 0) {
          maxZoom = Math.max(
            Math.ceil(Math.log(width / tileWidth) / Math.LN2),
            Math.ceil(Math.log(height / tileHeight) / Math.LN2)
          );
          for (let i = maxZoom; i >= 0; i--) {
            resolutions.push(Math.pow(2, i));
          }
        } else {
          const maxScaleFactor = Math.max(...resolutions);
          // TODO maxScaleFactor might not be a power to 2
          maxZoom = Math.round(Math.log(maxScaleFactor) / Math.LN2);
        }
      } else {
        // No tile support.
        tileWidth = width;
        tileHeight = height;
        resolutions = [];
        if (supportsListedSizes) {
          /*
           * 'sizes' provided. Use full region in different resolutions. Every
           * resolution has only one tile.
           */
          sizes.sort(function(a, b) {
            return a[0] - b[0];
          });
          maxZoom = -1;
          const ignoredSizesIndex = [];
          for (let i = 0; i < sizes.length; i++) {
            const resolution = width / sizes[i][0];
            if (resolutions.length > 0 && resolutions[resolutions.length - 1] == resolution) {
              ignoredSizesIndex.push(i);
              continue;
            }
            resolutions.push(resolution);
            maxZoom++;
          }
          if (ignoredSizesIndex.length > 0) {
            for (let i = 0; i < ignoredSizesIndex.length; i++) {
              sizes.splice(ignoredSizesIndex[i] - i, 1);
            }
          }
        } else {
          // No useful image information at all. Try pseudo tile with full image.
          resolutions.push(1);
          sizes.push([width, height]);
          maxZoom = 0;
        }
      }

      const tileGrid = new TileGrid({
        tileSize: [tileWidth, tileHeight],
        extent: extent,
        origin: getTopLeft(extent),
        resolutions: resolutions
      });

      const tileUrlFunction = function(tileCoord, pixelRatio, projection) {
        let regionParam,
            sizeParam;
        const zoom = tileCoord[0];
        if (zoom > maxZoom) {
          return;
        }
        const tileX = tileCoord[1],
            tileY = tileCoord[2],
            scale = resolutions[zoom];
        if (tileX === undefined || tileY === undefined || scale === undefined ||
        tileX < 0 || Math.ceil(width / scale / tileWidth) <= tileX ||
        tileY < 0 || Math.ceil(height / scale / tileHeight) <= tileY) {
          return;
        }
        if (supportsArbitraryTiling || supportsListedTiles) {
          const regionX = tileX * tileWidth * scale,
              regionY = tileY * tileHeight * scale;
          let regionW = tileWidth * scale,
              regionH = tileHeight * scale,
              sizeW = tileWidth,
              sizeH = tileHeight;
          if (regionX + regionW > width) {
            regionW = width - regionX;
          }
          if (regionY + regionH > height) {
            regionH = height - regionY;
          }
          if (regionX + tileWidth * scale > width) {
            sizeW = Math.floor((width - regionX + scale - 1) / scale);
          }
          if (regionY + tileHeight * scale > height) {
            sizeH = Math.floor((height - regionY + scale - 1) / scale);
          }
          if (regionX == 0 && regionW == width && regionY == 0 && regionH == height) {
            // canonical full image region parameter is 'full', not 'x,y,w,h'
            regionParam = 'full';
          } else if (!supportsArbitraryTiling || supports.includes('regionByPx')) {
            regionParam = regionX + ',' + regionY + ',' + regionW + ',' + regionH;
          } else if (supports.includes('regionByPct')) {
            const pctX = formatPercentage(regionX / width * 100),
                pctY = formatPercentage(regionY / height * 100),
                pctW = formatPercentage(regionW / width * 100),
                pctH = formatPercentage(regionH / height * 100);
            regionParam = 'pct:' + pctX + ',' + pctY + ',' + pctW + ',' + pctH;
          }
          if (version == Versions.VERSION3 && (!supportsArbitraryTiling || supports.includes('sizeByWh'))) {
            sizeParam = sizeW + ',' + sizeH;
          } else if (!supportsArbitraryTiling || supports.includes('sizeByW')) {
            sizeParam = sizeW + ',';
          } else if (supports.includes('sizeByH')) {
            sizeParam = ',' + sizeH;
          } else if (supports.includes('sizeByWh')) {
            sizeParam = sizeW + ',' + sizeH;
          } else if (supports.includes('sizeByPct')) {
            sizeParam = 'pct:' + formatPercentage(100 / scale);
          }
        } else {
          regionParam = 'full';
          if (supportsListedSizes) {
            const regionWidth = sizes[zoom][0],
                regionHeight = sizes[zoom][1];
            if (version == Versions.VERSION3) {
              if (regionWidth == width && regionHeight == height) {
                sizeParam = 'max';
              } else {
                sizeParam = regionWidth + ',' + regionHeight;
              }
            } else {
              if (regionWidth == width) {
                sizeParam = 'full';
              } else {
                sizeParam = regionWidth + ',';
              }
            }
          } else {
            sizeParam = version == Versions.VERSION3 ? 'max' : 'full';
          }
        }
        return baseUrl + regionParam + '/' + sizeParam + '/0/' + quality + '.' + format;
      };

      const IiifTileClass = CustomTile.bind(null, tilePixelRatio, tileGrid);

      super({
        attributions: options.attributions,
        attributionsCollapsible: options.attributionsCollapsible,
        cacheSize: options.cacheSize,
        crossOrigin: options.crossOrigin,
        projection: options.projection,
        reprojectionErrorThreshold: options.reprojectionErrorThreshold,
        state: options.state,
        tileClass: IiifTileClass,
        tileGrid: tileGrid,
        tilePixelRatio: options.tilePixelRatio,
        tileUrlFunction: tileUrlFunction,
        transition: options.transition
      });

      /**
       * @inheritDoc
       */
      this.zDirection = options.zDirection;

    }

  }

  /**
   * @module ol/reproj/Image
   */


  /**
   * @typedef {function(import("../extent.js").Extent, number, number) : import("../ImageBase.js").default} FunctionType
   */


  /**
   * @classdesc
   * Class encapsulating single reprojected image.
   * See {@link module:ol/source/Image~ImageSource}.
   */
  class ReprojImage extends ImageBase {
    /**
     * @param {import("../proj/Projection.js").default} sourceProj Source projection (of the data).
     * @param {import("../proj/Projection.js").default} targetProj Target projection.
     * @param {import("../extent.js").Extent} targetExtent Target extent.
     * @param {number} targetResolution Target resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {FunctionType} getImageFunction
     *     Function returning source images (extent, resolution, pixelRatio).
     */
    constructor(sourceProj, targetProj, targetExtent, targetResolution, pixelRatio, getImageFunction) {
      const maxSourceExtent = sourceProj.getExtent();
      const maxTargetExtent = targetProj.getExtent();

      const limitedTargetExtent = maxTargetExtent ?
        getIntersection(targetExtent, maxTargetExtent) : targetExtent;

      const targetCenter = getCenter(limitedTargetExtent);
      const sourceResolution = calculateSourceResolution(
        sourceProj, targetProj, targetCenter, targetResolution);

      const errorThresholdInPixels = ERROR_THRESHOLD;

      const triangulation = new Triangulation(
        sourceProj, targetProj, limitedTargetExtent, maxSourceExtent,
        sourceResolution * errorThresholdInPixels);

      const sourceExtent = triangulation.calculateSourceExtent();
      const sourceImage = getImageFunction(sourceExtent, sourceResolution, pixelRatio);
      let state = ImageState.LOADED;
      if (sourceImage) {
        state = ImageState.IDLE;
      }
      const sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;

      super(targetExtent, targetResolution, sourcePixelRatio, state);

      /**
       * @private
       * @type {import("../proj/Projection.js").default}
       */
      this.targetProj_ = targetProj;

      /**
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.maxSourceExtent_ = maxSourceExtent;

      /**
       * @private
       * @type {!import("./Triangulation.js").default}
       */
      this.triangulation_ = triangulation;

      /**
       * @private
       * @type {number}
       */
      this.targetResolution_ = targetResolution;

      /**
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.targetExtent_ = targetExtent;

      /**
       * @private
       * @type {import("../ImageBase.js").default}
       */
      this.sourceImage_ = sourceImage;

      /**
       * @private
       * @type {number}
       */
      this.sourcePixelRatio_ = sourcePixelRatio;

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.canvas_ = null;

      /**
       * @private
       * @type {?import("../events.js").EventsKey}
       */
      this.sourceListenerKey_ = null;
    }

    /**
     * @inheritDoc
     */
    disposeInternal() {
      if (this.state == ImageState.LOADING) {
        this.unlistenSource_();
      }
      super.disposeInternal();
    }

    /**
     * @inheritDoc
     */
    getImage() {
      return this.canvas_;
    }

    /**
     * @return {import("../proj/Projection.js").default} Projection.
     */
    getProjection() {
      return this.targetProj_;
    }

    /**
     * @private
     */
    reproject_() {
      const sourceState = this.sourceImage_.getState();
      if (sourceState == ImageState.LOADED) {
        const width = getWidth(this.targetExtent_) / this.targetResolution_;
        const height = getHeight(this.targetExtent_) / this.targetResolution_;

        this.canvas_ = render$7(width, height, this.sourcePixelRatio_,
          this.sourceImage_.getResolution(), this.maxSourceExtent_,
          this.targetResolution_, this.targetExtent_, this.triangulation_, [{
            extent: this.sourceImage_.getExtent(),
            image: this.sourceImage_.getImage()
          }], 0);
      }
      this.state = sourceState;
      this.changed();
    }

    /**
     * @inheritDoc
     */
    load() {
      if (this.state == ImageState.IDLE) {
        this.state = ImageState.LOADING;
        this.changed();

        const sourceState = this.sourceImage_.getState();
        if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {
          this.reproject_();
        } else {
          this.sourceListenerKey_ = listen(this.sourceImage_,
            EventType.CHANGE, function(e) {
              const sourceState = this.sourceImage_.getState();
              if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {
                this.unlistenSource_();
                this.reproject_();
              }
            }, this);
          this.sourceImage_.load();
        }
      }
    }

    /**
     * @private
     */
    unlistenSource_() {
      unlistenByKey(/** @type {!import("../events.js").EventsKey} */ (this.sourceListenerKey_));
      this.sourceListenerKey_ = null;
    }
  }

  /**
   * @module ol/source/Image
   */


  /**
   * @enum {string}
   */
  const ImageSourceEventType = {

    /**
     * Triggered when an image starts loading.
     * @event module:ol/source/Image.ImageSourceEvent#imageloadstart
     * @api
     */
    IMAGELOADSTART: 'imageloadstart',

    /**
     * Triggered when an image finishes loading.
     * @event module:ol/source/Image.ImageSourceEvent#imageloadend
     * @api
     */
    IMAGELOADEND: 'imageloadend',

    /**
     * Triggered if image loading results in an error.
     * @event module:ol/source/Image.ImageSourceEvent#imageloaderror
     * @api
     */
    IMAGELOADERROR: 'imageloaderror'

  };


  /**
   * @classdesc
   * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this
   * type.
   */
  class ImageSourceEvent extends Event {
    /**
     * @param {string} type Type.
     * @param {import("../Image.js").default} image The image.
     */
    constructor(type, image) {

      super(type);

      /**
       * The image related to the event.
       * @type {import("../Image.js").default}
       * @api
       */
      this.image = image;

    }

  }


  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions]
   * @property {import("../proj.js").ProjectionLike} [projection]
   * @property {Array<number>} [resolutions]
   * @property {import("./State.js").default} [state]
   */


  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for sources providing a single image.
   * @abstract
   * @fires module:ol/source/Image.ImageSourceEvent
   * @api
   */
  class ImageSource extends Source {
    /**
     * @param {Options} options Single image source options.
     */
    constructor(options) {
      super({
        attributions: options.attributions,
        projection: options.projection,
        state: options.state
      });

      /**
       * @private
       * @type {Array<number>}
       */
      this.resolutions_ = options.resolutions !== undefined ?
        options.resolutions : null;


      /**
       * @private
       * @type {import("../reproj/Image.js").default}
       */
      this.reprojectedImage_ = null;


      /**
       * @private
       * @type {number}
       */
      this.reprojectedRevision_ = 0;
    }

    /**
     * @return {Array<number>} Resolutions.
     * @override
     */
    getResolutions() {
      return this.resolutions_;
    }

    /**
     * @protected
     * @param {number} resolution Resolution.
     * @return {number} Resolution.
     */
    findNearestResolution(resolution) {
      if (this.resolutions_) {
        const idx = linearFindNearest(this.resolutions_, resolution, 0);
        resolution = this.resolutions_[idx];
      }
      return resolution;
    }

    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {import("../ImageBase.js").default} Single image.
     */
    getImage(extent, resolution, pixelRatio, projection) {
      const sourceProjection = this.getProjection();
      if (
          !sourceProjection ||
          !projection ||
          equivalent(sourceProjection, projection)) {
        if (sourceProjection) {
          projection = sourceProjection;
        }
        return this.getImageInternal(extent, resolution, pixelRatio, projection);
      } else {
        if (this.reprojectedImage_) {
          if (this.reprojectedRevision_ == this.getRevision() &&
              equivalent(
                this.reprojectedImage_.getProjection(), projection) &&
              this.reprojectedImage_.getResolution() == resolution &&
              equals(this.reprojectedImage_.getExtent(), extent)) {
            return this.reprojectedImage_;
          }
          this.reprojectedImage_.dispose();
          this.reprojectedImage_ = null;
        }

        this.reprojectedImage_ = new ReprojImage(
          sourceProjection, projection, extent, resolution, pixelRatio,
          function(extent, resolution, pixelRatio) {
            return this.getImageInternal(extent, resolution,
              pixelRatio, sourceProjection);
          }.bind(this));
        this.reprojectedRevision_ = this.getRevision();

        return this.reprojectedImage_;
      }
    }

    /**
     * @abstract
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {import("../ImageBase.js").default} Single image.
     * @protected
     */
    getImageInternal(extent, resolution, pixelRatio, projection) {
      return abstract();
    }

    /**
     * Handle image change events.
     * @param {import("../events/Event.js").default} event Event.
     * @protected
     */
    handleImageChange(event) {
      const image = /** @type {import("../Image.js").default} */ (event.target);
      switch (image.getState()) {
        case ImageState.LOADING:
          this.loading = true;
          this.dispatchEvent(
            new ImageSourceEvent(ImageSourceEventType.IMAGELOADSTART,
              image));
          break;
        case ImageState.LOADED:
          this.loading = false;
          this.dispatchEvent(
            new ImageSourceEvent(ImageSourceEventType.IMAGELOADEND,
              image));
          break;
        case ImageState.ERROR:
          this.loading = false;
          this.dispatchEvent(
            new ImageSourceEvent(ImageSourceEventType.IMAGELOADERROR,
              image));
          break;
          // pass
      }
    }
  }


  /**
   * Default image load function for image sources that use import("../Image.js").Image image
   * instances.
   * @param {import("../Image.js").default} image Image.
   * @param {string} src Source.
   */
  function defaultImageLoadFunction(image, src) {
    /** @type {HTMLImageElement|HTMLVideoElement} */ (image.getImage()).src = src;
  }

  /**
   * @module ol/uri
   */


  /**
   * Appends query parameters to a URI.
   *
   * @param {string} uri The original URI, which may already have query data.
   * @param {!Object} params An object where keys are URI-encoded parameter keys,
   *     and the values are arbitrary types or arrays.
   * @return {string} The new URI.
   */
  function appendParams(uri, params) {
    const keyParams = [];
    // Skip any null or undefined parameter values
    Object.keys(params).forEach(function(k) {
      if (params[k] !== null && params[k] !== undefined) {
        keyParams.push(k + '=' + encodeURIComponent(params[k]));
      }
    });
    const qs = keyParams.join('&');
    // remove any trailing ? or &
    uri = uri.replace(/[?&]$/, '');
    // append ? or & depending on whether uri has existing parameters
    uri = uri.indexOf('?') === -1 ? uri + '?' : uri + '&';
    return uri + qs;
  }

  /**
   * @module ol/source/ImageArcGISRest
   */


  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from
   * the remote server.
   * @property {import("../Image.js").LoadFunction} [imageLoadFunction] Optional function to load an image given
   * a URL.
   * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service
   * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is
   * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`, and `IMAGESR`
   * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See
   * {@link http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#/Export_Map/02r3000000v7000000/}
   * for further reference.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,
   * `2` means twice the size of the map viewport, and so on.
   * @property {Array<number>} [resolutions] Resolutions. If specified, requests will be made for
   * these resolutions only.
   * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The url
   * should include /MapServer or /ImageServer.
   */


  /**
   * @classdesc
   * Source for data from ArcGIS Rest services providing single, untiled images.
   * Useful when underlying map service has labels.
   *
   * If underlying map service is not using labels,
   * take advantage of ol image caching and use
   * {@link module:ol/source/TileArcGISRest} data source.
   *
   * @fires module:ol/source/Image.ImageSourceEvent
   * @api
   */
  class ImageArcGISRest extends ImageSource {
    /**
     * @param {Options=} opt_options Image ArcGIS Rest Options.
     */
    constructor(opt_options) {

      const options = opt_options ? opt_options : {};

      super({
        attributions: options.attributions,
        projection: options.projection,
        resolutions: options.resolutions
      });

      /**
       * @private
       * @type {?string}
       */
      this.crossOrigin_ =
          options.crossOrigin !== undefined ? options.crossOrigin : null;

      /**
       * @private
       * @type {boolean}
       */
      this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;

      /**
       * @private
       * @type {string|undefined}
       */
      this.url_ = options.url;

      /**
       * @private
       * @type {import("../Image.js").LoadFunction}
       */
      this.imageLoadFunction_ = options.imageLoadFunction !== undefined ?
        options.imageLoadFunction : defaultImageLoadFunction;


      /**
       * @private
       * @type {!Object}
       */
      this.params_ = options.params || {};

      /**
       * @private
       * @type {import("../Image.js").default}
       */
      this.image_ = null;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.imageSize_ = [0, 0];


      /**
       * @private
       * @type {number}
       */
      this.renderedRevision_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;

    }

    /**
     * Get the user-provided params, i.e. those passed to the constructor through
     * the "params" option, and possibly updated using the updateParams method.
     * @return {Object} Params.
     * @api
     */
    getParams() {
      return this.params_;
    }

    /**
     * @inheritDoc
     */
    getImageInternal(extent, resolution, pixelRatio, projection) {

      if (this.url_ === undefined) {
        return null;
      }

      resolution = this.findNearestResolution(resolution);
      pixelRatio = this.hidpi_ ? pixelRatio : 1;

      const image = this.image_;
      if (image &&
          this.renderedRevision_ == this.getRevision() &&
          image.getResolution() == resolution &&
          image.getPixelRatio() == pixelRatio &&
          containsExtent(image.getExtent(), extent)) {
        return image;
      }

      const params = {
        'F': 'image',
        'FORMAT': 'PNG32',
        'TRANSPARENT': true
      };
      assign(params, this.params_);

      extent = extent.slice();
      const centerX = (extent[0] + extent[2]) / 2;
      const centerY = (extent[1] + extent[3]) / 2;
      if (this.ratio_ != 1) {
        const halfWidth = this.ratio_ * getWidth(extent) / 2;
        const halfHeight = this.ratio_ * getHeight(extent) / 2;
        extent[0] = centerX - halfWidth;
        extent[1] = centerY - halfHeight;
        extent[2] = centerX + halfWidth;
        extent[3] = centerY + halfHeight;
      }

      const imageResolution = resolution / pixelRatio;

      // Compute an integer width and height.
      const width = Math.ceil(getWidth(extent) / imageResolution);
      const height = Math.ceil(getHeight(extent) / imageResolution);

      // Modify the extent to match the integer width and height.
      extent[0] = centerX - imageResolution * width / 2;
      extent[2] = centerX + imageResolution * width / 2;
      extent[1] = centerY - imageResolution * height / 2;
      extent[3] = centerY + imageResolution * height / 2;

      this.imageSize_[0] = width;
      this.imageSize_[1] = height;

      const url = this.getRequestUrl_(extent, this.imageSize_, pixelRatio,
        projection, params);

      this.image_ = new ImageWrapper(extent, resolution, pixelRatio,
        url, this.crossOrigin_, this.imageLoadFunction_);

      this.renderedRevision_ = this.getRevision();

      listen(this.image_, EventType.CHANGE,
        this.handleImageChange, this);

      return this.image_;

    }

    /**
     * Return the image load function of the source.
     * @return {import("../Image.js").LoadFunction} The image load function.
     * @api
     */
    getImageLoadFunction() {
      return this.imageLoadFunction_;
    }

    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {import("../size.js").Size} size Size.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {Object} params Params.
     * @return {string} Request URL.
     * @private
     */
    getRequestUrl_(extent, size, pixelRatio, projection, params) {
      // ArcGIS Server only wants the numeric portion of the projection ID.
      const srid = projection.getCode().split(':').pop();

      params['SIZE'] = size[0] + ',' + size[1];
      params['BBOX'] = extent.join(',');
      params['BBOXSR'] = srid;
      params['IMAGESR'] = srid;
      params['DPI'] = Math.round(90 * pixelRatio);

      const url = this.url_;

      const modifiedUrl = url
        .replace(/MapServer\/?$/, 'MapServer/export')
        .replace(/ImageServer\/?$/, 'ImageServer/exportImage');
      if (modifiedUrl == url) {
        assert(false, 50); // `options.featureTypes` should be an Array
      }
      return appendParams(modifiedUrl, params);
    }

    /**
     * Return the URL used for this ArcGIS source.
     * @return {string|undefined} URL.
     * @api
     */
    getUrl() {
      return this.url_;
    }

    /**
     * Set the image load function of the source.
     * @param {import("../Image.js").LoadFunction} imageLoadFunction Image load function.
     * @api
     */
    setImageLoadFunction(imageLoadFunction) {
      this.image_ = null;
      this.imageLoadFunction_ = imageLoadFunction;
      this.changed();
    }

    /**
     * Set the URL to use for requests.
     * @param {string|undefined} url URL.
     * @api
     */
    setUrl(url) {
      if (url != this.url_) {
        this.url_ = url;
        this.image_ = null;
        this.changed();
      }
    }

    /**
     * Update the user-provided params.
     * @param {Object} params Params.
     * @api
     */
    updateParams(params) {
      assign(this.params_, params);
      this.image_ = null;
      this.changed();
    }
  }

  /**
   * @module ol/source/ImageCanvas
   */


  /**
   * A function returning the canvas element (`{HTMLCanvasElement}`)
   * used by the source as an image. The arguments passed to the function are:
   * {@link module:ol/extent~Extent} the image extent, `{number}` the image resolution,
   * `{number}` the device pixel ratio, {@link module:ol/size~Size} the image size, and
   * {@link module:ol/proj/Projection} the image projection. The canvas returned by
   * this function is cached by the source. The this keyword inside the function
   * references the {@link module:ol/source/ImageCanvas}.
   *
   * @typedef {function(this:import("../ImageCanvas.js").default, import("../extent.js").Extent, number,
   *     number, import("../size.js").Size, import("../proj/Projection.js").default): HTMLCanvasElement} FunctionType
   */


  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {FunctionType} [canvasFunction] Canvas function.
   * The function returning the canvas element used by the source
   * as an image. The arguments passed to the function are: `{import("../extent.js").Extent}` the
   * image extent, `{number}` the image resolution, `{number}` the device pixel
   * ratio, `{import("../size.js").Size}` the image size, and `{import("../proj/Projection.js").Projection}` the image
   * projection. The canvas returned by this function is cached by the source. If
   * the value returned by the function is later changed then
   * `changed` should be called on the source for the source to
   * invalidate the current cached image. See: {@link module:ol/Observable~Observable#changed}
   * @property {import("../proj.js").ProjectionLike} projection Projection.
   * @property {number} [ratio=1.5] Ratio. 1 means canvases are the size of the map viewport, 2 means twice the
   * width and height of the map viewport, and so on. Must be `1` or higher.
   * @property {Array<number>} [resolutions] Resolutions.
   * If specified, new canvases will be created for these resolutions
   * @property {import("./State.js").default} [state] Source state.
   */


  /**
   * @classdesc
   * Base class for image sources where a canvas element is the image.
   * @api
   */
  class ImageCanvasSource extends ImageSource {
    /**
     * @param {Options=} opt_options ImageCanvas options.
     */
    constructor(opt_options) {

      const options = opt_options ? opt_options : {};

      super({
        attributions: options.attributions,
        projection: options.projection,
        resolutions: options.resolutions,
        state: options.state
      });

      /**
      * @private
      * @type {FunctionType}
      */
      this.canvasFunction_ = options.canvasFunction;

      /**
      * @private
      * @type {import("../ImageCanvas.js").default}
      */
      this.canvas_ = null;

      /**
      * @private
      * @type {number}
      */
      this.renderedRevision_ = 0;

      /**
      * @private
      * @type {number}
      */
      this.ratio_ = options.ratio !== undefined ?
        options.ratio : 1.5;

    }

    /**
    * @inheritDoc
    */
    getImageInternal(extent, resolution, pixelRatio, projection) {
      resolution = this.findNearestResolution(resolution);

      let canvas = this.canvas_;
      if (canvas &&
         this.renderedRevision_ == this.getRevision() &&
         canvas.getResolution() == resolution &&
         canvas.getPixelRatio() == pixelRatio &&
         containsExtent(canvas.getExtent(), extent)) {
        return canvas;
      }

      extent = extent.slice();
      scaleFromCenter(extent, this.ratio_);
      const width = getWidth(extent) / resolution;
      const height = getHeight(extent) / resolution;
      const size = [width * pixelRatio, height * pixelRatio];

      const canvasElement = this.canvasFunction_.call(
        this, extent, resolution, pixelRatio, size, projection);
      if (canvasElement) {
        canvas = new ImageCanvas(extent, resolution, pixelRatio, canvasElement);
      }
      this.canvas_ = canvas;
      this.renderedRevision_ = this.getRevision();

      return canvas;
    }
  }

  /**
   * @module ol/source/ImageMapGuide
   */

  /**
   * @typedef {Object} Options
   * @property {string} [url] The mapagent url.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {number} [displayDpi=96] The display resolution.
   * @property {number} [metersPerUnit=1] The meters-per-unit value.
   * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting
   * the image from the remote server.
   * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.
   * @property {import("../proj.js").ProjectionLike} projection Projection.
   * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means
   * twice the width and height of the map viewport, and so on. Must be `1` or higher.
   * @property {Array<number>} [resolutions] Resolutions.
   * If specified, requests will be made for these resolutions only.
   * @property {import("../Image.js").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.
   * @property {Object} [params] Additional parameters.
   */


  /**
   * @classdesc
   * Source for images from Mapguide servers
   *
   * @fires module:ol/source/Image.ImageSourceEvent
   * @api
   */
  class ImageMapGuide extends ImageSource {
    /**
     * @param {Options} options ImageMapGuide options.
     */
    constructor(options) {

      super({
        projection: options.projection,
        resolutions: options.resolutions
      });

      /**
       * @private
       * @type {?string}
       */
      this.crossOrigin_ =
          options.crossOrigin !== undefined ? options.crossOrigin : null;

      /**
       * @private
       * @type {number}
       */
      this.displayDpi_ = options.displayDpi !== undefined ?
        options.displayDpi : 96;

      /**
       * @private
       * @type {!Object}
       */
      this.params_ = options.params || {};

      /**
       * @private
       * @type {string|undefined}
       */
      this.url_ = options.url;

      /**
       * @private
       * @type {import("../Image.js").LoadFunction}
       */
      this.imageLoadFunction_ = options.imageLoadFunction !== undefined ?
        options.imageLoadFunction : defaultImageLoadFunction;

      /**
       * @private
       * @type {boolean}
       */
      this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;

      /**
       * @private
       * @type {number}
       */
      this.metersPerUnit_ = options.metersPerUnit !== undefined ?
        options.metersPerUnit : 1;

      /**
       * @private
       * @type {number}
       */
      this.ratio_ = options.ratio !== undefined ? options.ratio : 1;

      /**
       * @private
       * @type {boolean}
       */
      this.useOverlay_ = options.useOverlay !== undefined ?
        options.useOverlay : false;

      /**
       * @private
       * @type {import("../Image.js").default}
       */
      this.image_ = null;

      /**
       * @private
       * @type {number}
       */
      this.renderedRevision_ = 0;

    }

    /**
     * Get the user-provided params, i.e. those passed to the constructor through
     * the "params" option, and possibly updated using the updateParams method.
     * @return {Object} Params.
     * @api
     */
    getParams() {
      return this.params_;
    }

    /**
     * @inheritDoc
     */
    getImageInternal(extent, resolution, pixelRatio, projection) {
      resolution = this.findNearestResolution(resolution);
      pixelRatio = this.hidpi_ ? pixelRatio : 1;

      let image = this.image_;
      if (image &&
          this.renderedRevision_ == this.getRevision() &&
          image.getResolution() == resolution &&
          image.getPixelRatio() == pixelRatio &&
          containsExtent(image.getExtent(), extent)) {
        return image;
      }

      if (this.ratio_ != 1) {
        extent = extent.slice();
        scaleFromCenter(extent, this.ratio_);
      }
      const width = getWidth(extent) / resolution;
      const height = getHeight(extent) / resolution;
      const size = [width * pixelRatio, height * pixelRatio];

      if (this.url_ !== undefined) {
        const imageUrl = this.getUrl(this.url_, this.params_, extent, size,
          projection);
        image = new ImageWrapper(extent, resolution, pixelRatio,
          imageUrl, this.crossOrigin_,
          this.imageLoadFunction_);
        listen(image, EventType.CHANGE,
          this.handleImageChange, this);
      } else {
        image = null;
      }
      this.image_ = image;
      this.renderedRevision_ = this.getRevision();

      return image;
    }

    /**
     * Return the image load function of the source.
     * @return {import("../Image.js").LoadFunction} The image load function.
     * @api
     */
    getImageLoadFunction() {
      return this.imageLoadFunction_;
    }

    /**
     * Update the user-provided params.
     * @param {Object} params Params.
     * @api
     */
    updateParams(params) {
      assign(this.params_, params);
      this.changed();
    }

    /**
     * @param {string} baseUrl The mapagent url.
     * @param {Object<string, string|number>} params Request parameters.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {import("../size.js").Size} size Size.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {string} The mapagent map image request URL.
     */
    getUrl(baseUrl, params, extent, size, projection) {
      const scale = getScale(extent, size,
        this.metersPerUnit_, this.displayDpi_);
      const center = getCenter(extent);
      const baseParams = {
        'OPERATION': this.useOverlay_ ? 'GETDYNAMICMAPOVERLAYIMAGE' : 'GETMAPIMAGE',
        'VERSION': '2.0.0',
        'LOCALE': 'en',
        'CLIENTAGENT': 'ol/source/ImageMapGuide source',
        'CLIP': '1',
        'SETDISPLAYDPI': this.displayDpi_,
        'SETDISPLAYWIDTH': Math.round(size[0]),
        'SETDISPLAYHEIGHT': Math.round(size[1]),
        'SETVIEWSCALE': scale,
        'SETVIEWCENTERX': center[0],
        'SETVIEWCENTERY': center[1]
      };
      assign(baseParams, params);
      return appendParams(baseUrl, baseParams);
    }

    /**
     * Set the image load function of the MapGuide source.
     * @param {import("../Image.js").LoadFunction} imageLoadFunction Image load function.
     * @api
     */
    setImageLoadFunction(imageLoadFunction) {
      this.image_ = null;
      this.imageLoadFunction_ = imageLoadFunction;
      this.changed();
    }
  }


  /**
   * @param {import("../extent.js").Extent} extent The map extents.
   * @param {import("../size.js").Size} size The viewport size.
   * @param {number} metersPerUnit The meters-per-unit value.
   * @param {number} dpi The display resolution.
   * @return {number} The computed map scale.
   */
  function getScale(extent, size, metersPerUnit, dpi) {
    const mcsW = getWidth(extent);
    const mcsH = getHeight(extent);
    const devW = size[0];
    const devH = size[1];
    const mpp = 0.0254 / dpi;
    if (devH * mcsW > devW * mcsH) {
      return mcsW * metersPerUnit / (devW * mpp); // width limited
    } else {
      return mcsH * metersPerUnit / (devH * mpp); // height limited
    }
  }

  /**
   * @module ol/source/ImageStatic
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {import("../extent.js").Extent} [imageExtent] Extent of the image in map coordinates.
   * This is the [left, bottom, right, top] map coordinates of your image.
   * @property {import("../Image.js").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.
   * @property {import("../proj.js").ProjectionLike} projection Projection.
   * @property {import("../size.js").Size} [imageSize] Size of the image in pixels. Usually the image size is auto-detected, so this
   * only needs to be set if auto-detection fails for some reason.
   * @property {string} url Image URL.
   */


  /**
   * @classdesc
   * A layer source for displaying a single, static image.
   * @api
   */
  class Static extends ImageSource {
    /**
     * @param {Options} options ImageStatic options.
     */
    constructor(options) {
      const crossOrigin = options.crossOrigin !== undefined ?
        options.crossOrigin : null;

      const /** @type {import("../Image.js").LoadFunction} */ imageLoadFunction =
          options.imageLoadFunction !== undefined ?
            options.imageLoadFunction : defaultImageLoadFunction;

      super({
        attributions: options.attributions,
        projection: get$2(options.projection)
      });

      /**
       * @private
       * @type {string}
       */
      this.url_ = options.url;

      /**
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.imageExtent_ = options.imageExtent;

      /**
       * @private
       * @type {import("../Image.js").default}
       */
      this.image_ = new ImageWrapper(this.imageExtent_, undefined, 1, this.url_, crossOrigin, imageLoadFunction);

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.imageSize_ = options.imageSize ? options.imageSize : null;

      listen(this.image_, EventType.CHANGE,
        this.handleImageChange, this);

    }

    /**
     * Returns the image extent
     * @return {import("../extent.js").Extent} image extent.
     * @api
     */
    getImageExtent() {
      return this.imageExtent_;
    }

    /**
     * @inheritDoc
     */
    getImageInternal(extent, resolution, pixelRatio, projection) {
      if (intersects(extent, this.image_.getExtent())) {
        return this.image_;
      }
      return null;
    }

    /**
     * Return the URL used for this image source.
     * @return {string} URL.
     * @api
     */
    getUrl() {
      return this.url_;
    }

    /**
     * @inheritDoc
     */
    handleImageChange(evt) {
      if (this.image_.getState() == ImageState.LOADED) {
        const imageExtent = this.image_.getExtent();
        const image = this.image_.getImage();
        let imageWidth, imageHeight;
        if (this.imageSize_) {
          imageWidth = this.imageSize_[0];
          imageHeight = this.imageSize_[1];
        } else {
          imageWidth = image.width;
          imageHeight = image.height;
        }
        const resolution = getHeight(imageExtent) / imageHeight;
        const targetWidth = Math.ceil(getWidth(imageExtent) / resolution);
        if (targetWidth != imageWidth) {
          const context = createCanvasContext2D(targetWidth, imageHeight);
          const canvas = context.canvas;
          context.drawImage(image, 0, 0, imageWidth, imageHeight,
            0, 0, canvas.width, canvas.height);
          this.image_.setImage(canvas);
        }
      }
      super.handleImageChange(evt);
    }
  }

  /**
   * @module ol/source/common
   */

  /**
   * Default WMS version.
   * @type {string}
   */
  const DEFAULT_WMS_VERSION = '1.3.0';

  /**
   * @module ol/source/WMSServerType
   */

  /**
   * Available server types: `'carmentaserver'`, `'geoserver'`, `'mapserver'`,
   *     `'qgis'`. These are servers that have vendor parameters beyond the WMS
   *     specification that OpenLayers can make use of.
   * @enum {string}
   */
  var WMSServerType = {
    CARMENTA_SERVER: 'carmentaserver',
    GEOSERVER: 'geoserver',
    MAPSERVER: 'mapserver',
    QGIS: 'qgis'
  };

  /**
   * @module ol/source/ImageWMS
   */


  /**
   * @const
   * @type {import("../size.js").Size}
   */
  const GETFEATUREINFO_IMAGE_SIZE = [101, 101];


  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting
   * the image from the remote server.
   * @property {import("./WMSServerType.js").default|string} [serverType] The type of
   * the remote WMS server: `mapserver`, `geoserver` or `qgis`. Only needed if `hidpi` is `true`.
   * @property {import("../Image.js").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.
   * @property {Object<string,*>} params WMS request parameters.
   * At least a `LAYERS` param is required. `STYLES` is
   * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`
   * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means
   * twice the width and height of the map viewport, and so on. Must be `1` or
   * higher.
   * @property {Array<number>} [resolutions] Resolutions.
   * If specified, requests will be made for these resolutions only.
   * @property {string} url WMS service URL.
   */


  /**
   * @classdesc
   * Source for WMS servers providing single, untiled images.
   *
   * @fires module:ol/source/Image.ImageSourceEvent
   * @api
   */
  class ImageWMS extends ImageSource {
    /**
     * @param {Options=} [opt_options] ImageWMS options.
     */
    constructor(opt_options) {

      const options = opt_options ? opt_options : {};

      super({
        attributions: options.attributions,
        projection: options.projection,
        resolutions: options.resolutions
      });

      /**
       * @private
       * @type {?string}
       */
      this.crossOrigin_ =
          options.crossOrigin !== undefined ? options.crossOrigin : null;

      /**
       * @private
       * @type {string|undefined}
       */
      this.url_ = options.url;

      /**
       * @private
       * @type {import("../Image.js").LoadFunction}
       */
      this.imageLoadFunction_ = options.imageLoadFunction !== undefined ?
        options.imageLoadFunction : defaultImageLoadFunction;

      /**
       * @private
       * @type {!Object}
       */
      this.params_ = options.params || {};

      /**
       * @private
       * @type {boolean}
       */
      this.v13_ = true;
      this.updateV13_();

      /**
       * @private
       * @type {import("./WMSServerType.js").default|undefined}
       */
      this.serverType_ = /** @type {import("./WMSServerType.js").default|undefined} */ (options.serverType);

      /**
       * @private
       * @type {boolean}
       */
      this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;

      /**
       * @private
       * @type {import("../Image.js").default}
       */
      this.image_ = null;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.imageSize_ = [0, 0];

      /**
       * @private
       * @type {number}
       */
      this.renderedRevision_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;

    }

    /**
     * Return the GetFeatureInfo URL for the passed coordinate, resolution, and
     * projection. Return `undefined` if the GetFeatureInfo URL cannot be
     * constructed.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {number} resolution Resolution.
     * @param {import("../proj.js").ProjectionLike} projection Projection.
     * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should
     *     be provided. If `QUERY_LAYERS` is not provided then the layers specified
     *     in the `LAYERS` parameter will be used. `VERSION` should not be
     *     specified here.
     * @return {string|undefined} GetFeatureInfo URL.
     * @api
     */
    getGetFeatureInfoUrl(coordinate, resolution, projection, params) {
      if (this.url_ === undefined) {
        return undefined;
      }
      const projectionObj = get$2(projection);
      const sourceProjectionObj = this.getProjection();

      if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {
        resolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, resolution);
        coordinate = transform(coordinate, projectionObj, sourceProjectionObj);
      }

      const extent = getForViewAndSize(coordinate, resolution, 0,
        GETFEATUREINFO_IMAGE_SIZE);

      const baseParams = {
        'SERVICE': 'WMS',
        'VERSION': DEFAULT_WMS_VERSION,
        'REQUEST': 'GetFeatureInfo',
        'FORMAT': 'image/png',
        'TRANSPARENT': true,
        'QUERY_LAYERS': this.params_['LAYERS']
      };
      assign(baseParams, this.params_, params);

      const x = Math.floor((coordinate[0] - extent[0]) / resolution);
      const y = Math.floor((extent[3] - coordinate[1]) / resolution);
      baseParams[this.v13_ ? 'I' : 'X'] = x;
      baseParams[this.v13_ ? 'J' : 'Y'] = y;

      return this.getRequestUrl_(
        extent, GETFEATUREINFO_IMAGE_SIZE,
        1, sourceProjectionObj || projectionObj, baseParams);
    }

    /**
     * Get the user-provided params, i.e. those passed to the constructor through
     * the "params" option, and possibly updated using the updateParams method.
     * @return {Object} Params.
     * @api
     */
    getParams() {
      return this.params_;
    }

    /**
     * @inheritDoc
     */
    getImageInternal(extent, resolution, pixelRatio, projection) {

      if (this.url_ === undefined) {
        return null;
      }

      resolution = this.findNearestResolution(resolution);

      if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {
        pixelRatio = 1;
      }

      const imageResolution = resolution / pixelRatio;

      const center = getCenter(extent);
      const viewWidth = Math.ceil(getWidth(extent) / imageResolution);
      const viewHeight = Math.ceil(getHeight(extent) / imageResolution);
      const viewExtent = getForViewAndSize(center, imageResolution, 0,
        [viewWidth, viewHeight]);
      const requestWidth = Math.ceil(this.ratio_ * getWidth(extent) / imageResolution);
      const requestHeight = Math.ceil(this.ratio_ * getHeight(extent) / imageResolution);
      const requestExtent = getForViewAndSize(center, imageResolution, 0,
        [requestWidth, requestHeight]);

      const image = this.image_;
      if (image &&
          this.renderedRevision_ == this.getRevision() &&
          image.getResolution() == resolution &&
          image.getPixelRatio() == pixelRatio &&
          containsExtent(image.getExtent(), viewExtent)) {
        return image;
      }

      const params = {
        'SERVICE': 'WMS',
        'VERSION': DEFAULT_WMS_VERSION,
        'REQUEST': 'GetMap',
        'FORMAT': 'image/png',
        'TRANSPARENT': true
      };
      assign(params, this.params_);

      this.imageSize_[0] = Math.round(getWidth(requestExtent) / imageResolution);
      this.imageSize_[1] = Math.round(getHeight(requestExtent) / imageResolution);

      const url = this.getRequestUrl_(requestExtent, this.imageSize_, pixelRatio,
        projection, params);

      this.image_ = new ImageWrapper(requestExtent, resolution, pixelRatio,
        url, this.crossOrigin_, this.imageLoadFunction_);

      this.renderedRevision_ = this.getRevision();

      listen(this.image_, EventType.CHANGE,
        this.handleImageChange, this);

      return this.image_;

    }

    /**
     * Return the image load function of the source.
     * @return {import("../Image.js").LoadFunction} The image load function.
     * @api
     */
    getImageLoadFunction() {
      return this.imageLoadFunction_;
    }

    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {import("../size.js").Size} size Size.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {Object} params Params.
     * @return {string} Request URL.
     * @private
     */
    getRequestUrl_(extent, size, pixelRatio, projection, params) {

      assert(this.url_ !== undefined, 9); // `url` must be configured or set using `#setUrl()`

      params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();

      if (!('STYLES' in this.params_)) {
        params['STYLES'] = '';
      }

      if (pixelRatio != 1) {
        switch (this.serverType_) {
          case WMSServerType.GEOSERVER:
            const dpi = (90 * pixelRatio + 0.5) | 0;
            if ('FORMAT_OPTIONS' in params) {
              params['FORMAT_OPTIONS'] += ';dpi:' + dpi;
            } else {
              params['FORMAT_OPTIONS'] = 'dpi:' + dpi;
            }
            break;
          case WMSServerType.MAPSERVER:
            params['MAP_RESOLUTION'] = 90 * pixelRatio;
            break;
          case WMSServerType.CARMENTA_SERVER:
          case WMSServerType.QGIS:
            params['DPI'] = 90 * pixelRatio;
            break;
          default:
            assert(false, 8); // Unknown `serverType` configured
            break;
        }
      }

      params['WIDTH'] = size[0];
      params['HEIGHT'] = size[1];

      const axisOrientation = projection.getAxisOrientation();
      let bbox;
      if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {
        bbox = [extent[1], extent[0], extent[3], extent[2]];
      } else {
        bbox = extent;
      }
      params['BBOX'] = bbox.join(',');

      return appendParams(/** @type {string} */ (this.url_), params);
    }

    /**
     * Return the URL used for this WMS source.
     * @return {string|undefined} URL.
     * @api
     */
    getUrl() {
      return this.url_;
    }

    /**
     * Set the image load function of the source.
     * @param {import("../Image.js").LoadFunction} imageLoadFunction Image load function.
     * @api
     */
    setImageLoadFunction(imageLoadFunction) {
      this.image_ = null;
      this.imageLoadFunction_ = imageLoadFunction;
      this.changed();
    }

    /**
     * Set the URL to use for requests.
     * @param {string|undefined} url URL.
     * @api
     */
    setUrl(url) {
      if (url != this.url_) {
        this.url_ = url;
        this.image_ = null;
        this.changed();
      }
    }

    /**
     * Update the user-provided params.
     * @param {Object} params Params.
     * @api
     */
    updateParams(params) {
      assign(this.params_, params);
      this.updateV13_();
      this.image_ = null;
      this.changed();
    }

    /**
     * @private
     */
    updateV13_() {
      const version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;
      this.v13_ = compareVersions(version, '1.3') >= 0;
    }
  }

  /**
   * @module ol/source/OSM
   */


  /**
   * The attribution containing a link to the OpenStreetMap Copyright and License
   * page.
   * @const
   * @type {string}
   * @api
   */
  const ATTRIBUTION = '&#169; ' +
        '<a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> ' +
        'contributors.';


  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will increase if too small.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {number} [maxZoom=19] Max zoom.
   * @property {boolean} [opaque=true] Whether the layer is opaque.
   * @property {number} [reprojectionErrorThreshold=1.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {string} [url='https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png'] URL template.
   * Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   */


  /**
   * @classdesc
   * Layer source for the OpenStreetMap tile server.
   * @api
   */
  class OSM extends XYZ {
    /**
     * @param {Options=} [opt_options] Open Street Map options.
     */
    constructor(opt_options) {

      const options = opt_options || {};

      let attributions;
      if (options.attributions !== undefined) {
        attributions = options.attributions;
      } else {
        attributions = [ATTRIBUTION];
      }

      const crossOrigin = options.crossOrigin !== undefined ?
        options.crossOrigin : 'anonymous';

      const url = options.url !== undefined ?
        options.url : 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png';

      super({
        attributions: attributions,
        cacheSize: options.cacheSize,
        crossOrigin: crossOrigin,
        opaque: options.opaque !== undefined ? options.opaque : true,
        maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,
        reprojectionErrorThreshold: options.reprojectionErrorThreshold,
        tileLoadFunction: options.tileLoadFunction,
        url: url,
        wrapX: options.wrapX,
        attributionsCollapsible: false
      });

    }

  }

  var hasImageData = true;
  try {
    new ImageData(10, 10);
  } catch (_) {
    hasImageData = false;
  }

  var context = document.createElement('canvas').getContext('2d');

  function newImageData(data, width, height) {
    if (hasImageData) {
      return new ImageData(data, width, height);
    } else {
      var imageData = context.createImageData(width, height);
      imageData.data.set(data);
      return imageData;
    }
  }

  var newImageData_1 = newImageData;

  var util = {
  	newImageData: newImageData_1
  };

  var util$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': util,
    __moduleExports: util,
    newImageData: newImageData_1
  });

  var require$$0 = ( util$1 && util ) || util$1;

  var newImageData$1 = require$$0.newImageData;

  /**
   * Create a function for running operations.  This function is serialized for
   * use in a worker.
   * @param {function(Array, Object):*} operation The operation.
   * @return {function(Object):ArrayBuffer} A function that takes an object with
   * buffers, meta, imageOps, width, and height properties and returns an array
   * buffer.
   */
  function createMinion(operation) {
    var workerHasImageData = true;
    try {
      new ImageData(10, 10);
    } catch (_) {
      workerHasImageData = false;
    }

    function newWorkerImageData(data, width, height) {
      if (workerHasImageData) {
        return new ImageData(data, width, height);
      } else {
        return {data: data, width: width, height: height};
      }
    }

    return function(data) {
      // bracket notation for minification support
      var buffers = data['buffers'];
      var meta = data['meta'];
      var imageOps = data['imageOps'];
      var width = data['width'];
      var height = data['height'];

      var numBuffers = buffers.length;
      var numBytes = buffers[0].byteLength;
      var output, b;

      if (imageOps) {
        var images = new Array(numBuffers);
        for (b = 0; b < numBuffers; ++b) {
          images[b] = newWorkerImageData(
              new Uint8ClampedArray(buffers[b]), width, height);
        }
        output = operation(images, meta).data;
      } else {
        output = new Uint8ClampedArray(numBytes);
        var arrays = new Array(numBuffers);
        var pixels = new Array(numBuffers);
        for (b = 0; b < numBuffers; ++b) {
          arrays[b] = new Uint8ClampedArray(buffers[b]);
          pixels[b] = [0, 0, 0, 0];
        }
        for (var i = 0; i < numBytes; i += 4) {
          for (var j = 0; j < numBuffers; ++j) {
            var array = arrays[j];
            pixels[j][0] = array[i];
            pixels[j][1] = array[i + 1];
            pixels[j][2] = array[i + 2];
            pixels[j][3] = array[i + 3];
          }
          var pixel = operation(pixels, meta);
          output[i] = pixel[0];
          output[i + 1] = pixel[1];
          output[i + 2] = pixel[2];
          output[i + 3] = pixel[3];
        }
      }
      return output.buffer;
    };
  }

  /**
   * Create a worker for running operations.
   * @param {Object} config Configuration.
   * @param {function(MessageEvent)} onMessage Called with a message event.
   * @return {Worker} The worker.
   */
  function createWorker(config, onMessage) {
    var lib = Object.keys(config.lib || {}).map(function(name) {
      return 'var ' + name + ' = ' + config.lib[name].toString() + ';';
    });

    var lines = lib.concat([
      'var __minion__ = (' + createMinion.toString() + ')(', config.operation.toString(), ');',
      'self.addEventListener("message", function(event) {',
      '  var buffer = __minion__(event.data);',
      '  self.postMessage({buffer: buffer, meta: event.data.meta}, [buffer]);',
      '});'
    ]);

    var blob = new Blob(lines, {type: 'text/javascript'});
    var source = URL.createObjectURL(blob);
    var worker = new Worker(source);
    worker.addEventListener('message', onMessage);
    return worker;
  }

  /**
   * Create a faux worker for running operations.
   * @param {Object} config Configuration.
   * @param {function(MessageEvent)} onMessage Called with a message event.
   * @return {Object} The faux worker.
   */
  function createFauxWorker(config, onMessage) {
    var minion = createMinion(config.operation);
    return {
      postMessage: function(data) {
        setTimeout(function() {
          onMessage({'data': {'buffer': minion(data), 'meta': data['meta']}});
        }, 0);
      }
    };
  }

  /**
   * A processor runs pixel or image operations in workers.
   * @param {Object} config Configuration.
   */
  function Processor(config) {
    this._imageOps = !!config.imageOps;
    var threads;
    if (config.threads === 0) {
      threads = 0;
    } else if (this._imageOps) {
      threads = 1;
    } else {
      threads = config.threads || 1;
    }
    var workers = [];
    if (threads) {
      for (var i = 0; i < threads; ++i) {
        workers[i] = createWorker(config, this._onWorkerMessage.bind(this, i));
      }
    } else {
      workers[0] = createFauxWorker(config, this._onWorkerMessage.bind(this, 0));
    }
    this._workers = workers;
    this._queue = [];
    this._maxQueueLength = config.queue || Infinity;
    this._running = 0;
    this._dataLookup = {};
    this._job = null;
  }

  /**
   * Run operation on input data.
   * @param {Array.<Array|ImageData>} inputs Array of pixels or image data
   *     (depending on the operation type).
   * @param {Object} meta A user data object.  This is passed to all operations
   *     and must be serializable.
   * @param {function(Error, ImageData, Object)} callback Called when work
   *     completes.  The first argument is any error.  The second is the ImageData
   *     generated by operations.  The third is the user data object.
   */
  Processor.prototype.process = function(inputs, meta, callback) {
    this._enqueue({
      inputs: inputs,
      meta: meta,
      callback: callback
    });
    this._dispatch();
  };

  /**
   * Stop responding to any completed work and destroy the processor.
   */
  Processor.prototype.destroy = function() {
    for (var key in this) {
      this[key] = null;
    }
    this._destroyed = true;
  };

  /**
   * Add a job to the queue.
   * @param {Object} job The job.
   */
  Processor.prototype._enqueue = function(job) {
    this._queue.push(job);
    while (this._queue.length > this._maxQueueLength) {
      this._queue.shift().callback(null, null);
    }
  };

  /**
   * Dispatch a job.
   */
  Processor.prototype._dispatch = function() {
    if (this._running === 0 && this._queue.length > 0) {
      var job = this._job = this._queue.shift();
      var width = job.inputs[0].width;
      var height = job.inputs[0].height;
      var buffers = job.inputs.map(function(input) {
        return input.data.buffer;
      });
      var threads = this._workers.length;
      this._running = threads;
      if (threads === 1) {
        this._workers[0].postMessage({
          'buffers': buffers,
          'meta': job.meta,
          'imageOps': this._imageOps,
          'width': width,
          'height': height
        }, buffers);
      } else {
        var length = job.inputs[0].data.length;
        var segmentLength = 4 * Math.ceil(length / 4 / threads);
        for (var i = 0; i < threads; ++i) {
          var offset = i * segmentLength;
          var slices = [];
          for (var j = 0, jj = buffers.length; j < jj; ++j) {
            slices.push(buffers[i].slice(offset, offset + segmentLength));
          }
          this._workers[i].postMessage({
            'buffers': slices,
            'meta': job.meta,
            'imageOps': this._imageOps,
            'width': width,
            'height': height
          }, slices);
        }
      }
    }
  };

  /**
   * Handle messages from the worker.
   * @param {number} index The worker index.
   * @param {MessageEvent} event The message event.
   */
  Processor.prototype._onWorkerMessage = function(index, event) {
    if (this._destroyed) {
      return;
    }
    this._dataLookup[index] = event.data;
    --this._running;
    if (this._running === 0) {
      this._resolveJob();
    }
  };

  /**
   * Resolve a job.  If there are no more worker threads, the processor callback
   * will be called.
   */
  Processor.prototype._resolveJob = function() {
    var job = this._job;
    var threads = this._workers.length;
    var data, meta;
    if (threads === 1) {
      data = new Uint8ClampedArray(this._dataLookup[0]['buffer']);
      meta = this._dataLookup[0]['meta'];
    } else {
      var length = job.inputs[0].data.length;
      data = new Uint8ClampedArray(length);
      meta = new Array(length);
      var segmentLength = 4 * Math.ceil(length / 4 / threads);
      for (var i = 0; i < threads; ++i) {
        var buffer = this._dataLookup[i]['buffer'];
        var offset = i * segmentLength;
        data.set(new Uint8ClampedArray(buffer), offset);
        meta[i] = this._dataLookup[i]['meta'];
      }
    }
    this._job = null;
    this._dataLookup = {};
    job.callback(null,
        newImageData$1(data, job.inputs[0].width, job.inputs[0].height), meta);
    this._dispatch();
  };

  var processor = Processor;

  var processor$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': processor,
    __moduleExports: processor
  });

  var Processor$1 = ( processor$1 && processor ) || processor$1;

  var Processor_1 = Processor$1;

  /**
   * @module ol/source/Raster
   */


  /**
   * A function that takes an array of input data, performs some operation, and
   * returns an array of output data.
   * For `pixel` type operations, the function will be called with an array of
   * pixels, where each pixel is an array of four numbers (`[r, g, b, a]`) in the
   * range of 0 - 255. It should return a single pixel array.
   * For `'image'` type operations, functions will be called with an array of
   * {@link ImageData https://developer.mozilla.org/en-US/docs/Web/API/ImageData}
   * and should return a single {@link ImageData
   * https://developer.mozilla.org/en-US/docs/Web/API/ImageData}.  The operations
   * are called with a second "data" argument, which can be used for storage.  The
   * data object is accessible from raster events, where it can be initialized in
   * "beforeoperations" and accessed again in "afteroperations".
   *
   * @typedef {function((Array<Array<number>>|Array<ImageData>), Object):
   *     (Array<number>|ImageData)} Operation
   */


  /**
   * @enum {string}
   */
  const RasterEventType = {
    /**
     * Triggered before operations are run.
     * @event module:ol/source/Raster.RasterSourceEvent#beforeoperations
     * @api
     */
    BEFOREOPERATIONS: 'beforeoperations',

    /**
     * Triggered after operations are run.
     * @event module:ol/source/Raster.RasterSourceEvent#afteroperations
     * @api
     */
    AFTEROPERATIONS: 'afteroperations'
  };


  /**
   * Raster operation type. Supported values are `'pixel'` and `'image'`.
   * @enum {string}
   */
  const RasterOperationType = {
    PIXEL: 'pixel',
    IMAGE: 'image'
  };


  /**
   * @classdesc
   * Events emitted by {@link module:ol/source/Raster} instances are instances of this
   * type.
   */
  class RasterSourceEvent extends Event {
    /**
     * @param {string} type Type.
     * @param {import("../PluggableMap.js").FrameState} frameState The frame state.
     * @param {Object} data An object made available to operations.
     */
    constructor(type, frameState, data) {
      super(type);

      /**
       * The raster extent.
       * @type {import("../extent.js").Extent}
       * @api
       */
      this.extent = frameState.extent;

      /**
       * The pixel resolution (map units per pixel).
       * @type {number}
       * @api
       */
      this.resolution = frameState.viewState.resolution / frameState.pixelRatio;

      /**
       * An object made available to all operations.  This can be used by operations
       * as a storage object (e.g. for calculating statistics).
       * @type {Object}
       * @api
       */
      this.data = data;

    }

  }

  /**
   * @typedef {Object} Options
   * @property {Array<import("./Source.js").default|import("../layer/Layer.js").default>} sources Input
   * sources or layers.  For vector data, use an VectorImage layer.
   * @property {Operation} [operation] Raster operation.
   * The operation will be called with data from input sources
   * and the output will be assigned to the raster source.
   * @property {Object} [lib] Functions that will be made available to operations run in a worker.
   * @property {number} [threads] By default, operations will be run in a single worker thread.
   * To avoid using workers altogether, set `threads: 0`.  For pixel operations, operations can
   * be run in multiple worker threads.  Note that there is additional overhead in
   * transferring data to multiple workers, and that depending on the user's
   * system, it may not be possible to parallelize the work.
   * @property {RasterOperationType} [operationType='pixel'] Operation type.
   * Supported values are `'pixel'` and `'image'`.  By default,
   * `'pixel'` operations are assumed, and operations will be called with an
   * array of pixels from input sources.  If set to `'image'`, operations will
   * be called with an array of ImageData objects from input sources.
   */


  /**
   * @classdesc
   * A source that transforms data from any number of input sources using an
   * {@link module:ol/source/Raster~Operation} function to transform input pixel values into
   * output pixel values.
   *
   * @fires module:ol/source/Raster.RasterSourceEvent
   * @api
   */
  class RasterSource extends ImageSource {
    /**
     * @param {Options} options Options.
     */
    constructor(options) {
      super({
        projection: null
      });

      /**
       * @private
       * @type {*}
       */
      this.worker_ = null;

      /**
       * @private
       * @type {RasterOperationType}
       */
      this.operationType_ = options.operationType !== undefined ?
        options.operationType : RasterOperationType.PIXEL;

      /**
       * @private
       * @type {number}
       */
      this.threads_ = options.threads !== undefined ? options.threads : 1;

      /**
       * @private
       * @type {Array<import("../layer/Layer.js").default>}
       */
      this.layers_ = createLayers(options.sources);

      for (let i = 0, ii = this.layers_.length; i < ii; ++i) {
        listen(this.layers_[i], EventType.CHANGE, this.changed, this);
      }

      /**
       * @private
       * @type {import("../TileQueue.js").default}
       */
      this.tileQueue_ = new TileQueue(function() {
        return 1;
      }, this.changed.bind(this));

      /**
       * The most recently requested frame state.
       * @type {import("../PluggableMap.js").FrameState}
       * @private
       */
      this.requestedFrameState_;

      /**
       * The most recently rendered image canvas.
       * @type {import("../ImageCanvas.js").default}
       * @private
       */
      this.renderedImageCanvas_ = null;

      /**
       * The most recently rendered revision.
       * @type {number}
       */
      this.renderedRevision_;

      /**
       * @private
       * @type {import("../PluggableMap.js").FrameState}
       */
      this.frameState_ = {
        animate: false,
        coordinateToPixelTransform: create(),
        extent: null,
        focus: null,
        index: 0,
        layerIndex: 0,
        layerStatesArray: getLayerStatesArray(this.layers_),
        pixelRatio: 1,
        pixelToCoordinateTransform: create(),
        postRenderFunctions: [],
        size: [0, 0],
        skippedFeatureUids: {},
        tileQueue: this.tileQueue_,
        time: Date.now(),
        usedTiles: {},
        viewState: /** @type {import("../View.js").State} */ ({
          rotation: 0
        }),
        viewHints: [],
        wantedTiles: {},
        declutterItems: []
      };

      this.setAttributions(function(frameState) {
        const attributions = [];
        for (let index = 0, iMax = options.sources.length; index < iMax; ++index) {
          const sourceOrLayer = options.sources[index];
          const source = sourceOrLayer instanceof Source ? sourceOrLayer : sourceOrLayer.getSource();
          const attributionGetter = source.getAttributions();
          if (typeof attributionGetter === 'function') {
            const sourceAttribution = attributionGetter(frameState);
            attributions.push.apply(attributions, sourceAttribution);
          }
        }
        return attributions.length !== 0 ? attributions : null;
      });

      if (options.operation !== undefined) {
        this.setOperation(options.operation, options.lib);
      }

    }

    /**
     * Set the operation.
     * @param {Operation} operation New operation.
     * @param {Object=} opt_lib Functions that will be available to operations run
     *     in a worker.
     * @api
     */
    setOperation(operation, opt_lib) {
      this.worker_ = new Processor_1({
        operation: operation,
        imageOps: this.operationType_ === RasterOperationType.IMAGE,
        queue: 1,
        lib: opt_lib,
        threads: this.threads_
      });
      this.changed();
    }

    /**
     * Update the stored frame state.
     * @param {import("../extent.js").Extent} extent The view extent (in map units).
     * @param {number} resolution The view resolution.
     * @param {import("../proj/Projection.js").default} projection The view projection.
     * @return {import("../PluggableMap.js").FrameState} The updated frame state.
     * @private
     */
    updateFrameState_(extent, resolution, projection) {

      const frameState = /** @type {import("../PluggableMap.js").FrameState} */ (assign({}, this.frameState_));

      frameState.viewState = /** @type {import("../View.js").State} */ (assign({}, frameState.viewState));

      const center = getCenter(extent);

      frameState.extent = extent.slice();
      frameState.focus = center;
      frameState.size[0] = Math.round(getWidth(extent) / resolution);
      frameState.size[1] = Math.round(getHeight(extent) / resolution);
      frameState.time = Infinity;

      const viewState = frameState.viewState;
      viewState.center = center;
      viewState.projection = projection;
      viewState.resolution = resolution;
      return frameState;
    }

    /**
     * Determine if all sources are ready.
     * @return {boolean} All sources are ready.
     * @private
     */
    allSourcesReady_() {
      let ready = true;
      let source;
      for (let i = 0, ii = this.layers_.length; i < ii; ++i) {
        source = this.layers_[i].getSource();
        if (source.getState() !== SourceState.READY) {
          ready = false;
          break;
        }
      }
      return ready;
    }

    /**
     * @inheritDoc
     */
    getImage(extent, resolution, pixelRatio, projection) {
      if (!this.allSourcesReady_()) {
        return null;
      }

      const frameState = this.updateFrameState_(extent, resolution, projection);
      this.requestedFrameState_ = frameState;

      // check if we can't reuse the existing ol/ImageCanvas
      if (this.renderedImageCanvas_) {
        const renderedResolution = this.renderedImageCanvas_.getResolution();
        const renderedExtent = this.renderedImageCanvas_.getExtent();
        if (resolution !== renderedResolution || !equals(extent, renderedExtent)) {
          this.renderedImageCanvas_ = null;
        }
      }

      if (!this.renderedImageCanvas_ || this.getRevision() !== this.renderedRevision_) {
        this.processSources_();
      }

      frameState.tileQueue.loadMoreTiles(16, 16);

      if (frameState.animate) {
        requestAnimationFrame(this.changed.bind(this));
      }

      return this.renderedImageCanvas_;
    }

    /**
     * Start processing source data.
     * @private
     */
    processSources_() {
      const frameState = this.requestedFrameState_;
      const len = this.layers_.length;
      const imageDatas = new Array(len);
      for (let i = 0; i < len; ++i) {
        frameState.layerIndex = i;
        const imageData = getImageData(this.layers_[i], frameState);
        if (imageData) {
          imageDatas[i] = imageData;
        } else {
          return;
        }
      }

      const data = {};
      this.dispatchEvent(new RasterSourceEvent(RasterEventType.BEFOREOPERATIONS, frameState, data));
      this.worker_.process(imageDatas, data, this.onWorkerComplete_.bind(this, frameState));
    }

    /**
     * Called when pixel processing is complete.
     * @param {import("../PluggableMap.js").FrameState} frameState The frame state.
     * @param {Error} err Any error during processing.
     * @param {ImageData} output The output image data.
     * @param {Object} data The user data.
     * @private
     */
    onWorkerComplete_(frameState, err, output, data) {
      if (err || !output) {
        return;
      }

      // do nothing if extent or resolution changed
      const extent = frameState.extent;
      const resolution = frameState.viewState.resolution;
      if (resolution !== this.requestedFrameState_.viewState.resolution ||
          !equals(extent, this.requestedFrameState_.extent)) {
        return;
      }

      let context;
      if (this.renderedImageCanvas_) {
        context = this.renderedImageCanvas_.getImage().getContext('2d');
      } else {
        const width = Math.round(getWidth(extent) / resolution);
        const height = Math.round(getHeight(extent) / resolution);
        context = createCanvasContext2D(width, height);
        this.renderedImageCanvas_ = new ImageCanvas(extent, resolution, 1, context.canvas);
      }
      context.putImageData(output, 0, 0);

      this.changed();
      this.renderedRevision_ = this.getRevision();

      this.dispatchEvent(new RasterSourceEvent(RasterEventType.AFTEROPERATIONS, frameState, data));
    }

    /**
     * @override
     */
    getImageInternal() {
      return null; // not implemented
    }
  }


  /**
   * A reusable canvas context.
   * @type {CanvasRenderingContext2D}
   * @private
   */
  let sharedContext = null;


  /**
   * Get image data from a layer.
   * @param {import("../layer/Layer.js").default} layer Layer to render.
   * @param {import("../PluggableMap.js").FrameState} frameState The frame state.
   * @return {ImageData} The image data.
   */
  function getImageData(layer, frameState) {
    const renderer = layer.getRenderer();
    if (!renderer) {
      throw new Error('Unsupported layer type: ' + layer);
    }

    if (!renderer.prepareFrame(frameState)) {
      return null;
    }
    const width = frameState.size[0];
    const height = frameState.size[1];
    const container = renderer.renderFrame(frameState, null);
    let element;
    if (container) {
      element = container.firstElementChild;
    }
    if (!(element instanceof HTMLCanvasElement)) {
      throw new Error('Unsupported rendered element: ' + element);
    }
    if (element.width === width && element.height === height) {
      const context = element.getContext('2d');
      return context.getImageData(0, 0, width, height);
    }

    if (!sharedContext) {
      sharedContext = createCanvasContext2D(width, height);
    } else {
      const canvas = sharedContext.canvas;
      if (canvas.width !== width || canvas.height !== height) {
        sharedContext = createCanvasContext2D(width, height);
      } else {
        sharedContext.clearRect(0, 0, width, height);
      }
    }
    sharedContext.drawImage(element, 0, 0, width, height);
    return sharedContext.getImageData(0, 0, width, height);
  }


  /**
   * Get a list of layer states from a list of layers.
   * @param {Array<import("../layer/Layer.js").default>} layers Layers.
   * @return {Array<import("../layer/Layer.js").State>} The layer states.
   */
  function getLayerStatesArray(layers) {
    return layers.map(function(layer) {
      return layer.getLayerState();
    });
  }


  /**
   * Create layers for all sources.
   * @param {Array<import("./Source.js").default|import("../layer/Layer.js").default>} sources The sources.
   * @return {Array<import("../layer/Layer.js").default>} Array of layers.
   */
  function createLayers(sources) {
    const len = sources.length;
    const layers = new Array(len);
    for (let i = 0; i < len; ++i) {
      layers[i] = createLayer(sources[i]);
    }
    return layers;
  }


  /**
   * Create a layer for the provided source.
   * @param {import("./Source.js").default|import("../layer/Layer.js").default} layerOrSource The layer or source.
   * @return {import("../layer/Layer.js").default} The layer.
   */
  function createLayer(layerOrSource) {
    // @type {import("../layer/Layer.js").default}
    let layer;
    if (layerOrSource instanceof Source) {
      if (layerOrSource instanceof TileSource) {
        layer = new TileLayer({source: layerOrSource});
      } else if (layerOrSource instanceof ImageSource) {
        layer = new ImageLayer({source: layerOrSource});
      }
    } else {
      layer = layerOrSource;
    }
    return layer;
  }

  /**
   * @module ol/source/Stamen
   */


  /**
   * @const
   * @type {Array<string>}
   */
  const ATTRIBUTIONS = [
    'Map tiles by <a href="https://stamen.com/">Stamen Design</a>, ' +
          'under <a href="https://creativecommons.org/licenses/by/3.0/">CC BY' +
          ' 3.0</a>.',
    ATTRIBUTION
  ];


  /**
   * @type {Object<string, {extension: string, opaque: boolean}>}
   */
  const LayerConfig = {
    'terrain': {
      extension: 'jpg',
      opaque: true
    },
    'terrain-background': {
      extension: 'jpg',
      opaque: true
    },
    'terrain-labels': {
      extension: 'png',
      opaque: false
    },
    'terrain-lines': {
      extension: 'png',
      opaque: false
    },
    'toner-background': {
      extension: 'png',
      opaque: true
    },
    'toner': {
      extension: 'png',
      opaque: true
    },
    'toner-hybrid': {
      extension: 'png',
      opaque: false
    },
    'toner-labels': {
      extension: 'png',
      opaque: false
    },
    'toner-lines': {
      extension: 'png',
      opaque: false
    },
    'toner-lite': {
      extension: 'png',
      opaque: true
    },
    'watercolor': {
      extension: 'jpg',
      opaque: true
    }
  };


  /**
   * @type {Object<string, {minZoom: number, maxZoom: number}>}
   */
  const ProviderConfig = {
    'terrain': {
      minZoom: 0,
      maxZoom: 18
    },
    'toner': {
      minZoom: 0,
      maxZoom: 20
    },
    'watercolor': {
      minZoom: 0,
      maxZoom: 18
    }
  };


  /**
   * @typedef {Object} Options
   * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will increase if too small.
   * @property {string} layer Layer name.
   * @property {number} [minZoom] Minimum zoom.
   * @property {number} [maxZoom] Maximum zoom.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction]
   * Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {number} [transition] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   */


  /**
   * @classdesc
   * Layer source for the Stamen tile server.
   * @api
   */
  class Stamen extends XYZ {
    /**
     * @param {Options} options Stamen options.
     */
    constructor(options) {
      const i = options.layer.indexOf('-');
      const provider = i == -1 ? options.layer : options.layer.slice(0, i);
      const providerConfig = ProviderConfig[provider];

      const layerConfig = LayerConfig[options.layer];

      const url = options.url !== undefined ? options.url :
        'https://stamen-tiles-{a-d}.a.ssl.fastly.net/' + options.layer +
          '/{z}/{x}/{y}.' + layerConfig.extension;

      super({
        attributions: ATTRIBUTIONS,
        cacheSize: options.cacheSize,
        crossOrigin: 'anonymous',
        maxZoom: options.maxZoom != undefined ? options.maxZoom : providerConfig.maxZoom,
        minZoom: options.minZoom != undefined ? options.minZoom : providerConfig.minZoom,
        opaque: layerConfig.opaque,
        reprojectionErrorThreshold: options.reprojectionErrorThreshold,
        tileLoadFunction: options.tileLoadFunction,
        transition: options.transition,
        url: url,
        wrapX: options.wrapX
      });

    }

  }

  /**
   * @module ol/source/TileArcGISRest
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will increase if too small.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service defaults will be
   * used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is `IMAGE` by
   * default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`,
   * and `IMAGESR` will be set dynamically. Set `LAYERS` to
   * override the default service layer visibility. See
   * http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#/Export_Map/02r3000000v7000000/
   * for further reference.
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid. Base this on the resolutions,
   * tilesize and extent supported by the server.
   * If this is not defined, a default grid will be used: if there is a projection
   * extent, the grid will be based on that; if not, a grid based on a global
   * extent with origin at 0,0 will be used.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL.
   * The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The
   * url should include /MapServer or /ImageServer.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   * @property {number} [transition] Duration of the opacity transition for rendering.  To disable the opacity
   * transition, pass `transition: 0`.
   * @property {Array<string>} [urls] ArcGIS Rest service urls. Use this instead of `url` when the ArcGIS
   * Service supports multiple urls for export requests.
   */


  /**
   * @classdesc
   * Layer source for tile data from ArcGIS Rest services. Map and Image
   * Services are supported.
   *
   * For cached ArcGIS services, better performance is available using the
   * {@link module:ol/source/XYZ~XYZ} data source.
   * @api
   */
  class TileArcGISRest extends TileImage {
    /**
     * @param {Options=} opt_options Tile ArcGIS Rest options.
     */
    constructor(opt_options) {

      const options = opt_options ? opt_options : {};

      super({
        attributions: options.attributions,
        cacheSize: options.cacheSize,
        crossOrigin: options.crossOrigin,
        projection: options.projection,
        reprojectionErrorThreshold: options.reprojectionErrorThreshold,
        tileGrid: options.tileGrid,
        tileLoadFunction: options.tileLoadFunction,
        tileUrlFunction: tileUrlFunction,
        url: options.url,
        urls: options.urls,
        wrapX: options.wrapX !== undefined ? options.wrapX : true,
        transition: options.transition
      });

      /**
       * @private
       * @type {!Object}
       */
      this.params_ = options.params || {};

      /**
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.tmpExtent_ = createEmpty();

      this.setKey(this.getKeyForParams_());
    }

    /**
     * @private
     * @return {string} The key for the current params.
     */
    getKeyForParams_() {
      let i = 0;
      const res = [];
      for (const key in this.params_) {
        res[i++] = key + '-' + this.params_[key];
      }
      return res.join('/');
    }

    /**
     * Get the user-provided params, i.e. those passed to the constructor through
     * the "params" option, and possibly updated using the updateParams method.
     * @return {Object} Params.
     * @api
     */
    getParams() {
      return this.params_;
    }

    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("../size.js").Size} tileSize Tile size.
     * @param {import("../extent.js").Extent} tileExtent Tile extent.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {Object} params Params.
     * @return {string|undefined} Request URL.
     * @private
     */
    getRequestUrl_(tileCoord, tileSize, tileExtent, pixelRatio, projection, params) {

      const urls = this.urls;
      if (!urls) {
        return undefined;
      }

      // ArcGIS Server only wants the numeric portion of the projection ID.
      const srid = projection.getCode().split(':').pop();

      params['SIZE'] = tileSize[0] + ',' + tileSize[1];
      params['BBOX'] = tileExtent.join(',');
      params['BBOXSR'] = srid;
      params['IMAGESR'] = srid;
      params['DPI'] = Math.round(
        params['DPI'] ? params['DPI'] * pixelRatio : 90 * pixelRatio
      );

      let url;
      if (urls.length == 1) {
        url = urls[0];
      } else {
        const index = modulo(hash(tileCoord), urls.length);
        url = urls[index];
      }

      const modifiedUrl = url
        .replace(/MapServer\/?$/, 'MapServer/export')
        .replace(/ImageServer\/?$/, 'ImageServer/exportImage');
      return appendParams(modifiedUrl, params);
    }

    /**
     * @inheritDoc
     */
    getTilePixelRatio(pixelRatio) {
      return /** @type {number} */ (pixelRatio);
    }

    /**
     * Update the user-provided params.
     * @param {Object} params Params.
     * @api
     */
    updateParams(params) {
      assign(this.params_, params);
      this.setKey(this.getKeyForParams_());
    }
  }

  /**
   * @param {import("../tilecoord.js").TileCoord} tileCoord The tile coordinate
   * @param {number} pixelRatio The pixel ratio
   * @param {import("../proj/Projection.js").default} projection The projection
   * @return {string|undefined} The tile URL
   * @this {TileArcGISRest}
   */
  function tileUrlFunction(tileCoord, pixelRatio, projection) {

    let tileGrid = this.getTileGrid();
    if (!tileGrid) {
      tileGrid = this.getTileGridForProjection(projection);
    }

    if (tileGrid.getResolutions().length <= tileCoord[0]) {
      return undefined;
    }

    const tileExtent = tileGrid.getTileCoordExtent(
      tileCoord, this.tmpExtent_);
    let tileSize = toSize(
      tileGrid.getTileSize(tileCoord[0]), this.tmpSize);

    if (pixelRatio != 1) {
      tileSize = scale$3(tileSize, pixelRatio, this.tmpSize);
    }

    // Apply default params and override with user specified values.
    const baseParams = {
      'F': 'image',
      'FORMAT': 'PNG32',
      'TRANSPARENT': true
    };
    assign(baseParams, this.params_);

    return this.getRequestUrl_(tileCoord, tileSize, tileExtent,
      pixelRatio, projection, baseParams);
  }

  /**
   * @module ol/source/TileDebug
   */


  class LabeledTile extends Tile {
    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("../size.js").Size} tileSize Tile size.
     * @param {string} text Text.
     */
    constructor(tileCoord, tileSize, text) {

      super(tileCoord, TileState.LOADED);

      /**
      * @private
      * @type {import("../size.js").Size}
      */
      this.tileSize_ = tileSize;

      /**
      * @private
      * @type {string}
      */
      this.text_ = text;

      /**
      * @private
      * @type {HTMLCanvasElement}
      */
      this.canvas_ = null;

    }

    /**
    * Get the image element for this tile.
    * @return {HTMLCanvasElement} Image.
    */
    getImage() {
      if (this.canvas_) {
        return this.canvas_;
      } else {
        const tileSize = this.tileSize_;
        const context = createCanvasContext2D(tileSize[0], tileSize[1]);

        context.strokeStyle = 'grey';
        context.strokeRect(0.5, 0.5, tileSize[0] + 0.5, tileSize[1] + 0.5);

        context.fillStyle = 'grey';
        context.strokeStyle = 'white';
        context.textAlign = 'center';
        context.textBaseline = 'middle';
        context.font = '24px sans-serif';
        context.lineWidth = 4;
        context.strokeText(this.text_, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);
        context.fillText(this.text_, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);

        this.canvas_ = context.canvas;
        return context.canvas;
      }
    }

    /**
    * @override
    */
    load() {}
  }


  /**
   * @typedef {Object} Options
   * @property {import("../proj.js").ProjectionLike} [projection='EPSG:3857'] Optional projection.
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   */


  /**
   * @classdesc
   * A pseudo tile source, which does not fetch tiles from a server, but renders
   * a grid outline for the tile grid/projection along with the coordinates for
   * each tile. See examples/canvas-tiles for an example.
   *
   * Uses Canvas context2d, so requires Canvas support.
   * @api
   */
  class TileDebug extends XYZ {
    /**
     * @param {Options=} opt_options Debug tile options.
     */
    constructor(opt_options) {
      /**
       * @type {Options}
       */
      const options = opt_options || {};

      super({
        opaque: false,
        projection: options.projection,
        tileGrid: options.tileGrid,
        wrapX: options.wrapX !== undefined ? options.wrapX : true
      });

    }

    /**
    * @inheritDoc
    */
    getTile(z, x, y) {
      const tileCoordKey = getKeyZXY(z, x, y);
      if (this.tileCache.containsKey(tileCoordKey)) {
        return /** @type {!LabeledTile} */ (this.tileCache.get(tileCoordKey));
      } else {
        const tileSize = toSize(this.tileGrid.getTileSize(z));
        const tileCoord = [z, x, y];
        const textTileCoord = this.getTileCoordForTileUrlFunction(tileCoord);
        let text;
        if (textTileCoord) {
          text = 'z:' + textTileCoord[0] + ' x:' + textTileCoord[1] + ' y:' + textTileCoord[2];
        } else {
          text = 'none';
        }
        const tile = new LabeledTile(tileCoord, tileSize, text);
        this.tileCache.set(tileCoordKey, tile);
        return tile;
      }
    }
  }

  /**
   * @module ol/source/TileJSON
   */


  /**
   * @typedef {Object} Config
   * @property {string} [name] The name.
   * @property {string} [description] The description.
   * @property {string} [version] The version.
   * @property {string} [attribution] The attribution.
   * @property {string} [template] The template.
   * @property {string} [legend] The legend.
   * @property {string} [scheme] The scheme.
   * @property {Array<string>} tiles The tile URL templates.
   * @property {Array<string>} [grids] Optional grids.
   * @property {number} [minzoom] Minimum zoom level.
   * @property {number} [maxzoom] Maximum zoom level.
   * @property {Array<number>} [bounds] Optional bounds.
   * @property {Array<number>} [center] Optional center.
   */


  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will increase if too small.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.
   * Useful when the server does not support CORS..
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {Config} [tileJSON] TileJSON configuration for this source.
   * If not provided, `url` must be configured.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {number|import("../size.js").Size} [tileSize=[256, 256]] The tile size used by the tile service.
   * Note: `tileSize` and other non-standard TileJSON properties are currently ignored.
   * @property {string} [url] URL to the TileJSON file. If not provided, `tileJSON` must be configured.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   * @property {number} [transition] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   */


  /**
   * @classdesc
   * Layer source for tile data in TileJSON format.
   * @api
   */
  class TileJSON extends TileImage {
    /**
     * @param {Options} options TileJSON options.
     */
    constructor(options) {
      super({
        attributions: options.attributions,
        cacheSize: options.cacheSize,
        crossOrigin: options.crossOrigin,
        projection: get$2('EPSG:3857'),
        reprojectionErrorThreshold: options.reprojectionErrorThreshold,
        state: SourceState.LOADING,
        tileLoadFunction: options.tileLoadFunction,
        wrapX: options.wrapX !== undefined ? options.wrapX : true,
        transition: options.transition
      });

      /**
       * @type {Config}
       * @private
       */
      this.tileJSON_ = null;

      /**
       * @type {number|import("../size.js").Size}
       * @private
       */
      this.tileSize_ = options.tileSize;


      if (options.url) {
        if (options.jsonp) {
          jsonp(options.url, this.handleTileJSONResponse.bind(this),
            this.handleTileJSONError.bind(this));
        } else {
          const client = new XMLHttpRequest();
          client.addEventListener('load', this.onXHRLoad_.bind(this));
          client.addEventListener('error', this.onXHRError_.bind(this));
          client.open('GET', options.url);
          client.send();
        }
      } else if (options.tileJSON) {
        this.handleTileJSONResponse(options.tileJSON);
      } else {
        assert(false, 51); // Either `url` or `tileJSON` options must be provided
      }

    }

    /**
     * @private
     * @param {Event} event The load event.
     */
    onXHRLoad_(event) {
      const client = /** @type {XMLHttpRequest} */ (event.target);
      // status will be 0 for file:// urls
      if (!client.status || client.status >= 200 && client.status < 300) {
        let response;
        try {
          response = /** @type {TileJSON} */(JSON.parse(client.responseText));
        } catch (err) {
          this.handleTileJSONError();
          return;
        }
        this.handleTileJSONResponse(response);
      } else {
        this.handleTileJSONError();
      }
    }

    /**
     * @private
     * @param {Event} event The error event.
     */
    onXHRError_(event) {
      this.handleTileJSONError();
    }

    /**
     * @return {Config} The tilejson object.
     * @api
     */
    getTileJSON() {
      return this.tileJSON_;
    }

    /**
     * @protected
     * @param {Config} tileJSON Tile JSON.
     */
    handleTileJSONResponse(tileJSON) {

      const epsg4326Projection = get$2('EPSG:4326');

      const sourceProjection = this.getProjection();
      let extent;
      if (tileJSON['bounds'] !== undefined) {
        const transform = getTransformFromProjections(
          epsg4326Projection, sourceProjection);
        extent = applyTransform(tileJSON['bounds'], transform);
      }

      const minZoom = tileJSON['minzoom'] || 0;
      const maxZoom = tileJSON['maxzoom'] || 22;
      const tileGrid = createXYZ({
        extent: extentFromProjection(sourceProjection),
        maxZoom: maxZoom,
        minZoom: minZoom,
        tileSize: this.tileSize_
      });
      this.tileGrid = tileGrid;

      this.tileUrlFunction = createFromTemplates(tileJSON['tiles'], tileGrid);

      if (tileJSON['attribution'] !== undefined && !this.getAttributions()) {
        const attributionExtent = extent !== undefined ?
          extent : epsg4326Projection.getExtent();

        this.setAttributions(function(frameState) {
          if (intersects(attributionExtent, frameState.extent)) {
            return [tileJSON['attribution']];
          }
          return null;
        });

      }
      this.tileJSON_ = tileJSON;
      this.setState(SourceState.READY);

    }

    /**
     * @protected
     */
    handleTileJSONError() {
      this.setState(SourceState.ERROR);
    }
  }

  /**
   * @module ol/source/TileWMS
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will increase if too small.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {Object<string,*>} params WMS request parameters.
   * At least a `LAYERS` param is required. `STYLES` is
   * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`
   * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.
   * @property {number} [gutter=0]
   * The size in pixels of the gutter around image tiles to ignore. By setting
   * this property to a non-zero value, images will be requested that are wider
   * and taller than the tile size by a value of `2 x gutter`.
   * Using a non-zero value allows artifacts of rendering at tile edges to be
   * ignored. If you control the WMS service it is recommended to address
   * "artifacts at tile edges" issues by properly configuring the WMS service. For
   * example, MapServer has a `tile_map_edge_buffer` configuration parameter for
   * this. See http://mapserver.org/output/tile_mode.html.
   * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting
   * the image from the remote server.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {typeof import("../ImageTile.js").default} [tileClass] Class used to instantiate image tiles.
   * Default is {@link module:ol/ImageTile~ImageTile}.
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid. Base this on the resolutions,
   * tilesize and extent supported by the server.
   * If this is not defined, a default grid will be used: if there is a projection
   * extent, the grid will be based on that; if not, a grid based on a global
   * extent with origin at 0,0 will be used..
   * @property {import("./WMSServerType.js").default|string} [serverType]
   * The type of the remote WMS server. Currently only used when `hidpi` is
   * `true`.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {string} [url] WMS service URL.
   * @property {Array<string>} [urls] WMS service urls.
   * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   * When set to `false`, only one world
   * will be rendered. When `true`, tiles will be requested for one world only,
   * but they will be wrapped horizontally to render multiple worlds.
   * @property {number} [transition] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   */


  /**
   * @classdesc
   * Layer source for tile data from WMS servers.
   * @api
   */
  class TileWMS extends TileImage {
    /**
     * @param {Options=} [opt_options] Tile WMS options.
     */
    constructor(opt_options) {

      const options = opt_options ? opt_options : {};

      const params = options.params || {};

      const transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;

      super({
        attributions: options.attributions,
        cacheSize: options.cacheSize,
        crossOrigin: options.crossOrigin,
        opaque: !transparent,
        projection: options.projection,
        reprojectionErrorThreshold: options.reprojectionErrorThreshold,
        tileClass: options.tileClass,
        tileGrid: options.tileGrid,
        tileLoadFunction: options.tileLoadFunction,
        tileUrlFunction: tileUrlFunction$1,
        url: options.url,
        urls: options.urls,
        wrapX: options.wrapX !== undefined ? options.wrapX : true,
        transition: options.transition
      });

      /**
       * @private
       * @type {number}
       */
      this.gutter_ = options.gutter !== undefined ? options.gutter : 0;

      /**
       * @private
       * @type {!Object}
       */
      this.params_ = params;

      /**
       * @private
       * @type {boolean}
       */
      this.v13_ = true;

      /**
       * @private
       * @type {import("./WMSServerType.js").default|undefined}
       */
      this.serverType_ = /** @type {import("./WMSServerType.js").default|undefined} */ (options.serverType);

      /**
       * @private
       * @type {boolean}
       */
      this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;

      /**
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.tmpExtent_ = createEmpty();

      this.updateV13_();
      this.setKey(this.getKeyForParams_());

    }

    /**
     * Return the GetFeatureInfo URL for the passed coordinate, resolution, and
     * projection. Return `undefined` if the GetFeatureInfo URL cannot be
     * constructed.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {number} resolution Resolution.
     * @param {import("../proj.js").ProjectionLike} projection Projection.
     * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should
     *     be provided. If `QUERY_LAYERS` is not provided then the layers specified
     *     in the `LAYERS` parameter will be used. `VERSION` should not be
     *     specified here.
     * @return {string|undefined} GetFeatureInfo URL.
     * @api
     */
    getGetFeatureInfoUrl(coordinate, resolution, projection, params) {
      const projectionObj = get$2(projection);
      const sourceProjectionObj = this.getProjection();

      let tileGrid = this.getTileGrid();
      if (!tileGrid) {
        tileGrid = this.getTileGridForProjection(projectionObj);
      }

      const tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, resolution);

      if (tileGrid.getResolutions().length <= tileCoord[0]) {
        return undefined;
      }

      let tileResolution = tileGrid.getResolution(tileCoord[0]);
      let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);
      let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);


      const gutter = this.gutter_;
      if (gutter !== 0) {
        tileSize = buffer$1(tileSize, gutter, this.tmpSize);
        tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);
      }

      if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {
        tileResolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, tileResolution);
        tileExtent = transformExtent(tileExtent, projectionObj, sourceProjectionObj);
        coordinate = transform(coordinate, projectionObj, sourceProjectionObj);
      }

      const baseParams = {
        'SERVICE': 'WMS',
        'VERSION': DEFAULT_WMS_VERSION,
        'REQUEST': 'GetFeatureInfo',
        'FORMAT': 'image/png',
        'TRANSPARENT': true,
        'QUERY_LAYERS': this.params_['LAYERS']
      };
      assign(baseParams, this.params_, params);

      const x = Math.floor((coordinate[0] - tileExtent[0]) / tileResolution);
      const y = Math.floor((tileExtent[3] - coordinate[1]) / tileResolution);

      baseParams[this.v13_ ? 'I' : 'X'] = x;
      baseParams[this.v13_ ? 'J' : 'Y'] = y;

      return this.getRequestUrl_(tileCoord, tileSize, tileExtent,
        1, sourceProjectionObj || projectionObj, baseParams);
    }

    /**
     * @inheritDoc
     */
    getGutter() {
      return this.gutter_;
    }

    /**
     * Get the user-provided params, i.e. those passed to the constructor through
     * the "params" option, and possibly updated using the updateParams method.
     * @return {Object} Params.
     * @api
     */
    getParams() {
      return this.params_;
    }

    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("../size.js").Size} tileSize Tile size.
     * @param {import("../extent.js").Extent} tileExtent Tile extent.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {Object} params Params.
     * @return {string|undefined} Request URL.
     * @private
     */
    getRequestUrl_(tileCoord, tileSize, tileExtent, pixelRatio, projection, params) {

      const urls = this.urls;
      if (!urls) {
        return undefined;
      }

      params['WIDTH'] = tileSize[0];
      params['HEIGHT'] = tileSize[1];

      params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();

      if (!('STYLES' in this.params_)) {
        params['STYLES'] = '';
      }

      if (pixelRatio != 1) {
        switch (this.serverType_) {
          case WMSServerType.GEOSERVER:
            const dpi = (90 * pixelRatio + 0.5) | 0;
            if ('FORMAT_OPTIONS' in params) {
              params['FORMAT_OPTIONS'] += ';dpi:' + dpi;
            } else {
              params['FORMAT_OPTIONS'] = 'dpi:' + dpi;
            }
            break;
          case WMSServerType.MAPSERVER:
            params['MAP_RESOLUTION'] = 90 * pixelRatio;
            break;
          case WMSServerType.CARMENTA_SERVER:
          case WMSServerType.QGIS:
            params['DPI'] = 90 * pixelRatio;
            break;
          default:
            assert(false, 52); // Unknown `serverType` configured
            break;
        }
      }

      const axisOrientation = projection.getAxisOrientation();
      const bbox = tileExtent;
      if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {
        let tmp;
        tmp = tileExtent[0];
        bbox[0] = tileExtent[1];
        bbox[1] = tmp;
        tmp = tileExtent[2];
        bbox[2] = tileExtent[3];
        bbox[3] = tmp;
      }
      params['BBOX'] = bbox.join(',');

      let url;
      if (urls.length == 1) {
        url = urls[0];
      } else {
        const index = modulo(hash(tileCoord), urls.length);
        url = urls[index];
      }
      return appendParams(url, params);
    }

    /**
     * @inheritDoc
     */
    getTilePixelRatio(pixelRatio) {
      return (!this.hidpi_ || this.serverType_ === undefined) ? 1 :
      /** @type {number} */ (pixelRatio);
    }

    /**
     * @private
     * @return {string} The key for the current params.
     */
    getKeyForParams_() {
      let i = 0;
      const res = [];
      for (const key in this.params_) {
        res[i++] = key + '-' + this.params_[key];
      }
      return res.join('/');
    }

    /**
     * Update the user-provided params.
     * @param {Object} params Params.
     * @api
     */
    updateParams(params) {
      assign(this.params_, params);
      this.updateV13_();
      this.setKey(this.getKeyForParams_());
    }

    /**
     * @private
     */
    updateV13_() {
      const version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;
      this.v13_ = compareVersions(version, '1.3') >= 0;
    }
  }

  /**
   * @param {import("../tilecoord.js").TileCoord} tileCoord The tile coordinate
   * @param {number} pixelRatio The pixel ratio
   * @param {import("../proj/Projection.js").default} projection The projection
   * @return {string|undefined} The tile URL
   * @this {TileWMS}
   */
  function tileUrlFunction$1(tileCoord, pixelRatio, projection) {

    let tileGrid = this.getTileGrid();
    if (!tileGrid) {
      tileGrid = this.getTileGridForProjection(projection);
    }

    if (tileGrid.getResolutions().length <= tileCoord[0]) {
      return undefined;
    }

    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {
      pixelRatio = 1;
    }

    const tileResolution = tileGrid.getResolution(tileCoord[0]);
    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);
    let tileSize = toSize(
      tileGrid.getTileSize(tileCoord[0]), this.tmpSize);

    const gutter = this.gutter_;
    if (gutter !== 0) {
      tileSize = buffer$1(tileSize, gutter, this.tmpSize);
      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);
    }

    if (pixelRatio != 1) {
      tileSize = scale$3(tileSize, pixelRatio, this.tmpSize);
    }

    const baseParams = {
      'SERVICE': 'WMS',
      'VERSION': DEFAULT_WMS_VERSION,
      'REQUEST': 'GetMap',
      'FORMAT': 'image/png',
      'TRANSPARENT': true
    };
    assign(baseParams, this.params_);

    return this.getRequestUrl_(tileCoord, tileSize, tileExtent,
      pixelRatio, projection, baseParams);
  }

  /**
   * @module ol/source/UTFGrid
   */

  /**
   * @typedef {Object} UTFGridJSON
   * @property {Array<string>} grid The grid.
   * @property {Array<string>} keys The keys.
   * @property {Object<string, Object>} [data] Optional data.
   */


  class CustomTile$1 extends Tile {

    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {TileState} state State.
     * @param {string} src Image source URI.
     * @param {import("../extent.js").Extent} extent Extent of the tile.
     * @param {boolean} preemptive Load the tile when visible (before it's needed).
     * @param {boolean} jsonp Load the tile as a script.
     */
    constructor(tileCoord, state, src, extent, preemptive, jsonp) {

      super(tileCoord, state);

      /**
       * @private
       * @type {string}
       */
      this.src_ = src;

      /**
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.extent_ = extent;

      /**
       * @private
       * @type {boolean}
       */
      this.preemptive_ = preemptive;

      /**
       * @private
       * @type {Array<string>}
       */
      this.grid_ = null;

      /**
       * @private
       * @type {Array<string>}
       */
      this.keys_ = null;

      /**
       * @private
       * @type {Object<string, Object>|undefined}
       */
      this.data_ = null;


      /**
       * @private
       * @type {boolean}
       */
      this.jsonp_ = jsonp;

    }

    /**
     * Get the image element for this tile.
     * @return {HTMLImageElement} Image.
     */
    getImage() {
      return null;
    }


    /**
     * Synchronously returns data at given coordinate (if available).
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @return {*} The data.
     */
    getData(coordinate) {
      if (!this.grid_ || !this.keys_) {
        return null;
      }
      const xRelative = (coordinate[0] - this.extent_[0]) /
          (this.extent_[2] - this.extent_[0]);
      const yRelative = (coordinate[1] - this.extent_[1]) /
          (this.extent_[3] - this.extent_[1]);

      const row = this.grid_[Math.floor((1 - yRelative) * this.grid_.length)];

      if (typeof row !== 'string') {
        return null;
      }

      let code = row.charCodeAt(Math.floor(xRelative * row.length));
      if (code >= 93) {
        code--;
      }
      if (code >= 35) {
        code--;
      }
      code -= 32;

      let data = null;
      if (code in this.keys_) {
        const id = this.keys_[code];
        if (this.data_ && id in this.data_) {
          data = this.data_[id];
        } else {
          data = id;
        }
      }
      return data;
    }


    /**
     * Calls the callback (synchronously by default) with the available data
     * for given coordinate (or `null` if not yet loaded).
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {function(*): void} callback Callback.
     * @param {boolean=} opt_request If `true` the callback is always async.
     *                               The tile data is requested if not yet loaded.
     */
    forDataAtCoordinate(coordinate, callback, opt_request) {
      if (this.state == TileState.IDLE && opt_request === true) {
        listenOnce(this, EventType.CHANGE, function(e) {
          callback(this.getData(coordinate));
        }, this);
        this.loadInternal_();
      } else {
        if (opt_request === true) {
          setTimeout(function() {
            callback(this.getData(coordinate));
          }.bind(this), 0);
        } else {
          callback(this.getData(coordinate));
        }
      }
    }


    /**
     * @inheritDoc
     */
    getKey() {
      return this.src_;
    }


    /**
     * @private
     */
    handleError_() {
      this.state = TileState.ERROR;
      this.changed();
    }


    /**
     * @param {!UTFGridJSON} json UTFGrid data.
     * @private
     */
    handleLoad_(json) {
      this.grid_ = json['grid'];
      this.keys_ = json['keys'];
      this.data_ = json['data'];

      this.state = TileState.EMPTY;
      this.changed();
    }


    /**
     * @private
     */
    loadInternal_() {
      if (this.state == TileState.IDLE) {
        this.state = TileState.LOADING;
        if (this.jsonp_) {
          jsonp(this.src_, this.handleLoad_.bind(this),
            this.handleError_.bind(this));
        } else {
          const client = new XMLHttpRequest();
          client.addEventListener('load', this.onXHRLoad_.bind(this));
          client.addEventListener('error', this.onXHRError_.bind(this));
          client.open('GET', this.src_);
          client.send();
        }
      }
    }


    /**
     * @private
     * @param {Event} event The load event.
     */
    onXHRLoad_(event) {
      const client = /** @type {XMLHttpRequest} */ (event.target);
      // status will be 0 for file:// urls
      if (!client.status || client.status >= 200 && client.status < 300) {
        let response;
        try {
          response = /** @type {!UTFGridJSON} */(JSON.parse(client.responseText));
        } catch (err) {
          this.handleError_();
          return;
        }
        this.handleLoad_(response);
      } else {
        this.handleError_();
      }
    }


    /**
     * @private
     * @param {Event} event The error event.
     */
    onXHRError_(event) {
      this.handleError_();
    }


    /**
     * @override
     */
    load() {
      if (this.preemptive_) {
        this.loadInternal_();
      }
    }
  }


  /**
   * @typedef {Object} Options
   * @property {boolean} [preemptive=true]
   * If `true` the UTFGrid source loads the tiles based on their "visibility".
   * This improves the speed of response, but increases traffic.
   * Note that if set to `false`, you need to pass `true` as `opt_request`
   * to the `forDataAtCoordinateAndResolution` method otherwise no data
   * will ever be loaded.
   * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.
   * Useful when the server does not support CORS..
   * @property {import("./TileJSON.js").Config} [tileJSON] TileJSON configuration for this source.
   * If not provided, `url` must be configured.
   * @property {string} [url] TileJSON endpoint that provides the configuration for this source.
   * Request will be made through JSONP. If not provided, `tileJSON` must be configured.
   */


  /**
   * @classdesc
   * Layer source for UTFGrid interaction data loaded from TileJSON format.
   * @api
   */
  class UTFGrid extends TileSource {
    /**
     * @param {Options} options Source options.
     */
    constructor(options) {
      super({
        projection: get$2('EPSG:3857'),
        state: SourceState.LOADING
      });

      /**
       * @private
       * @type {boolean}
       */
      this.preemptive_ = options.preemptive !== undefined ?
        options.preemptive : true;

      /**
       * @private
       * @type {!import("../Tile.js").UrlFunction}
       */
      this.tileUrlFunction_ = nullTileUrlFunction;

      /**
       * @private
       * @type {string|undefined}
       */
      this.template_ = undefined;

      /**
       * @private
       * @type {boolean}
       */
      this.jsonp_ = options.jsonp || false;

      if (options.url) {
        if (this.jsonp_) {
          jsonp(options.url, this.handleTileJSONResponse.bind(this),
            this.handleTileJSONError.bind(this));
        } else {
          const client = new XMLHttpRequest();
          client.addEventListener('load', this.onXHRLoad_.bind(this));
          client.addEventListener('error', this.onXHRError_.bind(this));
          client.open('GET', options.url);
          client.send();
        }
      } else if (options.tileJSON) {
        this.handleTileJSONResponse(options.tileJSON);
      } else {
        assert(false, 51); // Either `url` or `tileJSON` options must be provided
      }

    }


    /**
     * @private
     * @param {Event} event The load event.
     */
    onXHRLoad_(event) {
      const client = /** @type {XMLHttpRequest} */ (event.target);
      // status will be 0 for file:// urls
      if (!client.status || client.status >= 200 && client.status < 300) {
        let response;
        try {
          response = /** @type {import("./TileJSON.js").Config} */(JSON.parse(client.responseText));
        } catch (err) {
          this.handleTileJSONError();
          return;
        }
        this.handleTileJSONResponse(response);
      } else {
        this.handleTileJSONError();
      }
    }


    /**
     * @private
     * @param {Event} event The error event.
     */
    onXHRError_(event) {
      this.handleTileJSONError();
    }


    /**
     * Return the template from TileJSON.
     * @return {string|undefined} The template from TileJSON.
     * @api
     */
    getTemplate() {
      return this.template_;
    }


    /**
     * Calls the callback (synchronously by default) with the available data
     * for given coordinate and resolution (or `null` if not yet loaded or
     * in case of an error).
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {number} resolution Resolution.
     * @param {function(*): void} callback Callback.
     * @param {boolean=} opt_request If `true` the callback is always async.
     *                               The tile data is requested if not yet loaded.
     * @api
     */
    forDataAtCoordinateAndResolution(
      coordinate, resolution, callback, opt_request) {
      if (this.tileGrid) {
        const tileCoord = this.tileGrid.getTileCoordForCoordAndResolution(
          coordinate, resolution);
        const tile = /** @type {!CustomTile} */(this.getTile(
          tileCoord[0], tileCoord[1], tileCoord[2], 1, this.getProjection()));
        tile.forDataAtCoordinate(coordinate, callback, opt_request);
      } else {
        if (opt_request === true) {
          setTimeout(function() {
            callback(null);
          }, 0);
        } else {
          callback(null);
        }
      }
    }


    /**
     * @protected
     */
    handleTileJSONError() {
      this.setState(SourceState.ERROR);
    }


    /**
     * TODO: very similar to ol/source/TileJSON#handleTileJSONResponse
     * @protected
     * @param {import("./TileJSON.js").Config} tileJSON Tile JSON.
     */
    handleTileJSONResponse(tileJSON) {

      const epsg4326Projection = get$2('EPSG:4326');

      const sourceProjection = this.getProjection();
      let extent;
      if (tileJSON['bounds'] !== undefined) {
        const transform = getTransformFromProjections(
          epsg4326Projection, sourceProjection);
        extent = applyTransform(tileJSON['bounds'], transform);
      }

      const minZoom = tileJSON['minzoom'] || 0;
      const maxZoom = tileJSON['maxzoom'] || 22;
      const tileGrid = createXYZ({
        extent: extentFromProjection(sourceProjection),
        maxZoom: maxZoom,
        minZoom: minZoom
      });
      this.tileGrid = tileGrid;

      this.template_ = tileJSON['template'];

      const grids = tileJSON['grids'];
      if (!grids) {
        this.setState(SourceState.ERROR);
        return;
      }

      this.tileUrlFunction_ = createFromTemplates(grids, tileGrid);

      if (tileJSON['attribution'] !== undefined) {
        const attributionExtent = extent !== undefined ?
          extent : epsg4326Projection.getExtent();

        this.setAttributions(function(frameState) {
          if (intersects(attributionExtent, frameState.extent)) {
            return [tileJSON['attribution']];
          }
          return null;
        });
      }

      this.setState(SourceState.READY);

    }


    /**
     * @inheritDoc
     */
    getTile(z, x, y, pixelRatio, projection) {
      const tileCoordKey = getKeyZXY(z, x, y);
      if (this.tileCache.containsKey(tileCoordKey)) {
        return (
          /** @type {!import("../Tile.js").default} */ (this.tileCache.get(tileCoordKey))
        );
      } else {
        const tileCoord = [z, x, y];
        const urlTileCoord =
            this.getTileCoordForTileUrlFunction(tileCoord, projection);
        const tileUrl = this.tileUrlFunction_(urlTileCoord, pixelRatio, projection);
        const tile = new CustomTile$1(
          tileCoord,
          tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,
          tileUrl !== undefined ? tileUrl : '',
          this.tileGrid.getTileCoordExtent(tileCoord),
          this.preemptive_,
          this.jsonp_);
        this.tileCache.set(tileCoordKey, tile);
        return tile;
      }
    }


    /**
     * @inheritDoc
     */
    useTile(z, x, y) {
      const tileCoordKey = getKeyZXY(z, x, y);
      if (this.tileCache.containsKey(tileCoordKey)) {
        this.tileCache.get(tileCoordKey);
      }
    }
  }

  /**
   * @module ol/source/VectorTile
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize=128] Cache size.
   * @property {import("../extent.js").Extent} [extent]
   * @property {import("../format/Feature.js").default} [format] Feature format for tiles. Used and required by the default.
   * @property {boolean} [overlaps=true] This source may have overlapping geometries. Setting this
   * to `false` (e.g. for sources with polygons that represent administrative
   * boundaries or TopoJSON sources) allows the renderer to optimise fill and
   * stroke operations.
   * @property {import("../proj.js").ProjectionLike} [projection='EPSG:3857'] Projection of the tile grid.
   * @property {import("./State.js").default} [state] Source state.
   * @property {typeof import("../VectorTile.js").default} [tileClass] Class used to instantiate image tiles.
   * Default is {@link module:ol/VectorTile}.
   * @property {number} [maxZoom=22] Optional max zoom level.
   * @property {number} [minZoom] Optional min zoom level.
   * @property {number|import("../size.js").Size} [tileSize=512] Optional tile size.
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction]
   * Optional function to load a tile given a URL. Could look like this for pbf tiles:
   * ```js
   * function(tile, url) {
   *   tile.setLoader(function(extent, resolution, projection) {
   *     fetch(url).then(function(response) {
   *       response.arrayBuffer().then(function(data) {
   *         const format = tile.getFormat() // ol/format/MVT configured as source format
   *         const features = format.readFeatures(data, {
   *           extent: extent,
   *           featureProjection: projection
   *         });
   *         tile.setFeatures(features);
   *       });
   *     });
   *   });
   * }
   * ```
   * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.
   * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
   * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be
   * used instead of defining each one separately in the `urls` option.
   * @property {number} [transition] A duration for tile opacity
   * transitions in milliseconds. A duration of 0 disables the opacity transition.
   * @property {Array<string>} [urls] An array of URL templates.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   * When set to `false`, only one world
   * will be rendered. When set to `true`, tiles will be wrapped horizontally to
   * render multiple worlds.
   */


  /**
   * @classdesc
   * Class for layer sources providing vector data divided into a tile grid, to be
   * used with {@link module:ol/layer/VectorTile~VectorTile}. Although this source receives tiles
   * with vector features from the server, it is not meant for feature editing.
   * Features are optimized for rendering, their geometries are clipped at or near
   * tile boundaries and simplified for a view resolution. See
   * {@link module:ol/source/Vector} for vector sources that are suitable for feature
   * editing.
   *
   * @fires import("./Tile.js").TileSourceEvent
   * @api
   */
  class VectorTile$1 extends UrlTile {
    /**
     * @param {!Options} options Vector tile options.
     */
    constructor(options) {
      const projection = options.projection || 'EPSG:3857';

      const extent = options.extent || extentFromProjection(projection);

      const tileGrid = options.tileGrid || createXYZ({
        extent: extent,
        maxZoom: options.maxZoom || 22,
        minZoom: options.minZoom,
        tileSize: options.tileSize || 512
      });

      super({
        attributions: options.attributions,
        attributionsCollapsible: options.attributionsCollapsible,
        cacheSize: options.cacheSize,
        opaque: false,
        projection: projection,
        state: options.state,
        tileGrid: tileGrid,
        tileLoadFunction: options.tileLoadFunction ? options.tileLoadFunction : defaultLoadFunction,
        tileUrlFunction: options.tileUrlFunction,
        url: options.url,
        urls: options.urls,
        wrapX: options.wrapX === undefined ? true : options.wrapX,
        transition: options.transition
      });

      /**
       * @private
       * @type {import("../format/Feature.js").default}
       */
      this.format_ = options.format ? options.format : null;

      /**
       * @type {Object<string, import("./VectorTile").default>}
       */
      this.loadingTiles_ = {};

      /**
       * @private
       * @type {Object<string, import("../VectorTile.js").default>}
       */
      this.sourceTiles_ = {};

      /**
       * @private
       * @type {Object<string, Array<import("../VectorTile.js").default>>}
       */
      this.sourceTilesByTileKey_ = {};

      /**
       * @private
       * @type {boolean}
       */
      this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;

      /**
       * @protected
       * @type {typeof import("../VectorTile.js").default}
       */
      this.tileClass = options.tileClass ? options.tileClass : VectorTile;

      /**
       * @private
       * @type {Object<string, import("../tilegrid/TileGrid.js").default>}
       */
      this.tileGrids_ = {};

    }

    /**
     * @return {boolean} The source can have overlapping geometries.
     */
    getOverlaps() {
      return this.overlaps_;
    }

    /**
     * clear {@link module:ol/TileCache~TileCache} and delete all source tiles
     * @api
     */
    clear() {
      this.tileCache.clear();
      this.sourceTiles_ = {};
      this.sourceTilesByTileKey_ = {};
    }

    /**
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection").default} projection Projection.
     * @param {VectorRenderTile} tile Vector image tile.
     * @return {Array<import("../VectorTile").default>} Tile keys.
     */
    getSourceTiles(pixelRatio, projection, tile) {
      const sourceTiles = [];
      const urlTileCoord = tile.wrappedTileCoord;
      if (urlTileCoord) {
        const tileGrid = this.getTileGridForProjection(projection);
        const extent = tileGrid.getTileCoordExtent(urlTileCoord);
        const z = urlTileCoord[0];
        const resolution = tileGrid.getResolution(z);
        // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space
        buffer(extent, -1 / resolution, extent);
        const sourceTileGrid = this.tileGrid;
        const sourceExtent = sourceTileGrid.getExtent();
        if (sourceExtent) {
          getIntersection(extent, sourceExtent, extent);
        }
        const sourceZ = sourceTileGrid.getZForResolution(resolution, 1);
        const minZoom = sourceTileGrid.getMinZoom();

        let loadedZ = sourceZ + 1;
        let covered, empty;
        do {
          --loadedZ;
          covered = true;
          empty = true;
          sourceTileGrid.forEachTileCoord(extent, loadedZ, function(sourceTileCoord) {
            const tileKey = getKey$1(sourceTileCoord);
            let sourceTile;
            if (tileKey in this.sourceTiles_) {
              sourceTile = this.sourceTiles_[tileKey];
              const state = sourceTile.getState();
              if (state === TileState.LOADED || state === TileState.ERROR || state === TileState.EMPTY) {
                empty = empty && state === TileState.EMPTY;
                sourceTiles.push(sourceTile);
                return;
              }
            } else if (loadedZ === sourceZ) {
              const tileUrl = this.tileUrlFunction(sourceTileCoord, pixelRatio, projection);
              if (tileUrl !== undefined) {
                sourceTile = new this.tileClass(sourceTileCoord, TileState.IDLE, tileUrl,
                  this.format_, this.tileLoadFunction);
                sourceTile.extent = sourceTileGrid.getTileCoordExtent(sourceTileCoord);
                sourceTile.projection = projection;
                sourceTile.resolution = sourceTileGrid.getResolution(sourceTileCoord[0]);
                this.sourceTiles_[tileKey] = sourceTile;
                empty = false;
                listen(sourceTile, EventType.CHANGE, this.handleTileChange, this);
                sourceTile.load();
              }
            } else {
              empty = false;
            }
            covered = false;
            if (!sourceTile) {
              return;
            }
            if (sourceTile.getState() !== TileState.EMPTY && tile.getState() === TileState.IDLE) {
              tile.loadingSourceTiles++;
              const key = listen(sourceTile, EventType.CHANGE, function() {
                const state = sourceTile.getState();
                const sourceTileKey = getKey$1(sourceTile.tileCoord);
                if (state === TileState.LOADED || state === TileState.ERROR) {
                  if (state === TileState.LOADED) {
                    unlistenByKey(key);
                    tile.loadingSourceTiles--;
                    delete tile.errorSourceTileKeys[sourceTileKey];
                  } else if (state === TileState.ERROR) {
                    tile.errorSourceTileKeys[sourceTileKey] = true;
                  }
                  if (tile.loadingSourceTiles - Object.keys(tile.errorSourceTileKeys).length === 0) {
                    tile.hifi = true;
                    tile.sourceZ = sourceZ;
                    tile.setState(isEmpty(tile.errorSourceTileKeys) ? TileState.LOADED : TileState.ERROR);
                  }
                }
              });
            }
          }.bind(this));
          if (!covered) {
            sourceTiles.length = 0;
          }
        } while (!covered && loadedZ > minZoom);
        if (!empty && tile.getState() === TileState.IDLE) {
          tile.setState(TileState.LOADING);
        }
        if (covered || empty) {
          tile.hifi = sourceZ === loadedZ;
          tile.sourceZ = loadedZ;
          const previousSourceTiles = this.sourceTilesByTileKey_[getKey$1(tile.tileCoord)];
          if (tile.getState() < TileState.LOADED) {
            tile.setState(empty ? TileState.EMPTY : TileState.LOADED);
          } else if (!previousSourceTiles || !equals$1(sourceTiles, previousSourceTiles)) {
            this.removeSourceTiles(tile);
            this.addSourceTiles(tile, sourceTiles);
          }
        }
      }
      return sourceTiles;
    }

    /**
     * @param {VectorRenderTile} tile Tile.
     * @param {Array<import("../VectorTile").default>} sourceTiles Source tiles.
     */
    addSourceTiles(tile, sourceTiles) {
      this.sourceTilesByTileKey_[getKey$1(tile.tileCoord)] = sourceTiles;
      for (let i = 0, ii = sourceTiles.length; i < ii; ++i) {
        sourceTiles[i].consumers++;
      }
    }

    /**
     * @param {VectorRenderTile} tile Tile.
     */
    removeSourceTiles(tile) {
      const tileKey = getKey$1(tile.tileCoord);
      if (tileKey in this.sourceTilesByTileKey_) {
        const sourceTiles = this.sourceTilesByTileKey_[tileKey];
        for (let i = 0, ii = sourceTiles.length; i < ii; ++i) {
          const sourceTile = sourceTiles[i];
          sourceTile.consumers--;
          if (sourceTile.consumers === 0) {
            sourceTile.dispose();
            delete this.sourceTiles_[getKey$1(sourceTile.tileCoord)];
          }
        }
      }
      delete this.sourceTilesByTileKey_[tileKey];
    }

    /**
     * @inheritDoc
     */
    getTile(z, x, y, pixelRatio, projection) {
      const tileCoordKey = getKeyZXY(z, x, y);
      const key = this.getKey();
      let tile;
      if (this.tileCache.containsKey(tileCoordKey)) {
        tile = /** @type {!import("../Tile.js").default} */ (this.tileCache.get(tileCoordKey));
        if (tile.key === key) {
          return tile;
        }
      }
      const tileCoord = [z, x, y];
      const urlTileCoord = this.getTileCoordForTileUrlFunction(
        tileCoord, projection);
      const newTile = new VectorRenderTile(
        tileCoord,
        urlTileCoord !== null ? TileState.IDLE : TileState.EMPTY,
        urlTileCoord,
        this.tileGrid,
        this.getSourceTiles.bind(this, pixelRatio, projection),
        this.removeSourceTiles.bind(this));

      newTile.key = key;
      if (tile) {
        newTile.interimTile = tile;
        newTile.refreshInterimChain();
        this.tileCache.replace(tileCoordKey, newTile);
      } else {
        this.tileCache.set(tileCoordKey, newTile);
      }
      return newTile;
    }

    /**
     * @inheritDoc
     */
    getTileGridForProjection(projection) {
      const code = projection.getCode();
      let tileGrid = this.tileGrids_[code];
      if (!tileGrid) {
        // A tile grid that matches the tile size of the source tile grid is more
        // likely to have 1:1 relationships between source tiles and rendered tiles.
        const sourceTileGrid = this.tileGrid;
        tileGrid = this.tileGrids_[code] = createForProjection(projection, undefined,
          sourceTileGrid ? sourceTileGrid.getTileSize(sourceTileGrid.getMinZoom()) : undefined);
      }
      return tileGrid;
    }

    /**
     * @inheritDoc
     */
    getTilePixelRatio(pixelRatio) {
      return pixelRatio;
    }

    /**
     * @inheritDoc
     */
    getTilePixelSize(z, pixelRatio, projection) {
      const tileGrid = this.getTileGridForProjection(projection);
      const tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);
      return [Math.round(tileSize[0] * pixelRatio), Math.round(tileSize[1] * pixelRatio)];
    }
  }


  /**
   * Sets the loader for a tile.
   * @param {import("../VectorTile.js").default} tile Vector tile.
   * @param {string} url URL.
   */
  function defaultLoadFunction(tile, url) {
    const loader = loadFeaturesXhr(url, tile.getFormat(), tile.onLoad.bind(tile), tile.onError.bind(tile));
    tile.setLoader(loader);
  }

  /**
   * @module ol/source/WMTSRequestEncoding
   */

  /**
   * Request encoding. One of 'KVP', 'REST'.
   * @enum {string}
   */
  var WMTSRequestEncoding = {
    KVP: 'KVP', // see spec §8
    REST: 'REST' // see spec §10
  };

  /**
   * @module ol/source/WMTS
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will increase if too small.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {import("../tilegrid/WMTS.js").default} tileGrid Tile grid.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {import("./WMTSRequestEncoding.js").default|string} [requestEncoding='KVP'] Request encoding.
   * @property {string} layer Layer name as advertised in the WMTS capabilities.
   * @property {string} style Style name as advertised in the WMTS capabilities.
   * @property {typeof import("../ImageTile.js").default} [tileClass]  Class used to instantiate image tiles. Default is {@link module:ol/ImageTile~ImageTile}.
   * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.
   * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px
   * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
   * should be set to `2`.
   * @property {string} [format='image/jpeg'] Image format. Only used when `requestEncoding` is `'KVP'`.
   * @property {string} [version='1.0.0'] WMTS version.
   * @property {string} matrixSet Matrix set.
   * @property {!Object} [dimensions] Additional "dimensions" for tile requests.
   * This is an object with properties named like the advertised WMTS dimensions.
   * @property {string} [url]  A URL for the service.
   * For the RESTful request encoding, this is a URL
   * template.  For KVP encoding, it is normal URL. A `{?-?}` template pattern,
   * for example `subdomain{a-f}.domain.com`, may be used instead of defining
   * each one separately in the `urls` option.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {Array<string>} [urls] An array of URLs.
   * Requests will be distributed among the URLs in this array.
   * @property {boolean} [wrapX=false] Whether to wrap the world horizontally.
   * @property {number} [transition] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   */


  /**
   * @classdesc
   * Layer source for tile data from WMTS servers.
   * @api
   */
  class WMTS extends TileImage {
    /**
     * @param {Options} options WMTS options.
     */
    constructor(options) {

      // TODO: add support for TileMatrixLimits

      const requestEncoding = options.requestEncoding !== undefined ?
        /** @type {import("./WMTSRequestEncoding.js").default} */ (options.requestEncoding) :
        WMTSRequestEncoding.KVP;

      // FIXME: should we create a default tileGrid?
      // we could issue a getCapabilities xhr to retrieve missing configuration
      const tileGrid = options.tileGrid;

      let urls = options.urls;
      if (urls === undefined && options.url !== undefined) {
        urls = expandUrl(options.url);
      }

      super({
        attributions: options.attributions,
        cacheSize: options.cacheSize,
        crossOrigin: options.crossOrigin,
        projection: options.projection,
        reprojectionErrorThreshold: options.reprojectionErrorThreshold,
        tileClass: options.tileClass,
        tileGrid: tileGrid,
        tileLoadFunction: options.tileLoadFunction,
        tilePixelRatio: options.tilePixelRatio,
        tileUrlFunction: nullTileUrlFunction,
        urls: urls,
        wrapX: options.wrapX !== undefined ? options.wrapX : false,
        transition: options.transition
      });

      /**
       * @private
       * @type {string}
       */
      this.version_ = options.version !== undefined ? options.version : '1.0.0';

      /**
       * @private
       * @type {string}
       */
      this.format_ = options.format !== undefined ? options.format : 'image/jpeg';

      /**
       * @private
       * @type {!Object}
       */
      this.dimensions_ = options.dimensions !== undefined ? options.dimensions : {};

      /**
       * @private
       * @type {string}
       */
      this.layer_ = options.layer;

      /**
       * @private
       * @type {string}
       */
      this.matrixSet_ = options.matrixSet;

      /**
       * @private
       * @type {string}
       */
      this.style_ = options.style;

      // FIXME: should we guess this requestEncoding from options.url(s)
      //        structure? that would mean KVP only if a template is not provided.

      /**
       * @private
       * @type {import("./WMTSRequestEncoding.js").default}
       */
      this.requestEncoding_ = requestEncoding;

      this.setKey(this.getKeyForDimensions_());

      if (urls && urls.length > 0) {
        this.tileUrlFunction = createFromTileUrlFunctions(urls.map(createFromWMTSTemplate.bind(this)));
      }

    }

    /**
     * Set the URLs to use for requests.
     * URLs may contain OCG conform URL Template Variables: {TileMatrix}, {TileRow}, {TileCol}.
     * @override
     */
    setUrls(urls) {
      this.urls = urls;
      const key = urls.join('\n');
      this.setTileUrlFunction(createFromTileUrlFunctions(urls.map(createFromWMTSTemplate.bind(this))), key);
    }

    /**
     * Get the dimensions, i.e. those passed to the constructor through the
     * "dimensions" option, and possibly updated using the updateDimensions
     * method.
     * @return {!Object} Dimensions.
     * @api
     */
    getDimensions() {
      return this.dimensions_;
    }


    /**
     * Return the image format of the WMTS source.
     * @return {string} Format.
     * @api
     */
    getFormat() {
      return this.format_;
    }


    /**
     * Return the layer of the WMTS source.
     * @return {string} Layer.
     * @api
     */
    getLayer() {
      return this.layer_;
    }


    /**
     * Return the matrix set of the WMTS source.
     * @return {string} MatrixSet.
     * @api
     */
    getMatrixSet() {
      return this.matrixSet_;
    }


    /**
     * Return the request encoding, either "KVP" or "REST".
     * @return {import("./WMTSRequestEncoding.js").default} Request encoding.
     * @api
     */
    getRequestEncoding() {
      return this.requestEncoding_;
    }


    /**
     * Return the style of the WMTS source.
     * @return {string} Style.
     * @api
     */
    getStyle() {
      return this.style_;
    }


    /**
     * Return the version of the WMTS source.
     * @return {string} Version.
     * @api
     */
    getVersion() {
      return this.version_;
    }


    /**
     * @private
     * @return {string} The key for the current dimensions.
     */
    getKeyForDimensions_() {
      let i = 0;
      const res = [];
      for (const key in this.dimensions_) {
        res[i++] = key + '-' + this.dimensions_[key];
      }
      return res.join('/');
    }


    /**
     * Update the dimensions.
     * @param {Object} dimensions Dimensions.
     * @api
     */
    updateDimensions(dimensions) {
      assign(this.dimensions_, dimensions);
      this.setKey(this.getKeyForDimensions_());
    }

  }

  /**
   * @param {string} template Template.
   * @return {import("../Tile.js").UrlFunction} Tile URL function.
   * @this {WMTS}
   */
  function createFromWMTSTemplate(template) {
    const requestEncoding = this.requestEncoding_;

    // context property names are lower case to allow for a case insensitive
    // replacement as some services use different naming conventions
    const context = {
      'layer': this.layer_,
      'style': this.style_,
      'tilematrixset': this.matrixSet_
    };

    if (requestEncoding == WMTSRequestEncoding.KVP) {
      assign(context, {
        'Service': 'WMTS',
        'Request': 'GetTile',
        'Version': this.version_,
        'Format': this.format_
      });
    }

    // TODO: we may want to create our own appendParams function so that params
    // order conforms to wmts spec guidance, and so that we can avoid to escape
    // special template params

    template = (requestEncoding == WMTSRequestEncoding.KVP) ?
      appendParams(template, context) :
      template.replace(/\{(\w+?)\}/g, function(m, p) {
        return (p.toLowerCase() in context) ? context[p.toLowerCase()] : m;
      });

    const tileGrid = /** @type {import("../tilegrid/WMTS.js").default} */ (
      this.tileGrid);
    const dimensions = this.dimensions_;

    return (
      /**
       * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
       * @param {number} pixelRatio Pixel ratio.
       * @param {import("../proj/Projection.js").default} projection Projection.
       * @return {string|undefined} Tile URL.
       */
      function(tileCoord, pixelRatio, projection) {
        if (!tileCoord) {
          return undefined;
        } else {
          const localContext = {
            'TileMatrix': tileGrid.getMatrixId(tileCoord[0]),
            'TileCol': tileCoord[1],
            'TileRow': tileCoord[2]
          };
          assign(localContext, dimensions);
          let url = template;
          if (requestEncoding == WMTSRequestEncoding.KVP) {
            url = appendParams(url, localContext);
          } else {
            url = url.replace(/\{(\w+?)\}/g, function(m, p) {
              return localContext[p];
            });
          }
          return url;
        }
      }
    );
  }

  /**
   * @module ol/source
   */

  var source = /*#__PURE__*/Object.freeze({
    __proto__: null,
    BingMaps: BingMaps,
    CartoDB: CartoDB,
    Cluster: Cluster,
    IIIF: IIIF,
    Image: ImageSource,
    ImageArcGISRest: ImageArcGISRest,
    ImageCanvas: ImageCanvasSource,
    ImageMapGuide: ImageMapGuide,
    ImageStatic: Static,
    ImageWMS: ImageWMS,
    OSM: OSM,
    Raster: RasterSource,
    Source: Source,
    Stamen: Stamen,
    Tile: TileSource,
    TileArcGISRest: TileArcGISRest,
    TileDebug: TileDebug,
    TileImage: TileImage,
    TileJSON: TileJSON,
    TileWMS: TileWMS,
    UrlTile: UrlTile,
    UTFGrid: UTFGrid,
    Vector: VectorSource,
    VectorTile: VectorTile$1,
    WMTS: WMTS,
    XYZ: XYZ,
    Zoomify: Zoomify
  });

  /**
   * @module ol/style
   */

  var style = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Circle: CircleStyle,
    Fill: Fill,
    Icon: Icon,
    IconImage: IconImage,
    Image: ImageStyle,
    RegularShape: RegularShape,
    Stroke: Stroke,
    Style: Style$1,
    Text: Text
  });



  var OL = /*#__PURE__*/Object.freeze({
    __proto__: null,
    control: control,
    events: events,
    extent: extent,
    format: format,
    geom: geom,
    interaction: interaction,
    layer: layer,
    proj: proj,
    render: render$3,
    reproj: reproj,
    source: source,
    style: style,
    tilegrid: tilegrid,
    webgl: webgl,
    AssertionError: AssertionError,
    Collection: Collection,
    Disposable: Disposable,
    Feature: Feature,
    Geolocation: Geolocation,
    Graticule: Graticule,
    Image: ImageWrapper,
    ImageBase: ImageBase,
    ImageCanvas: ImageCanvas,
    ImageTile: ImageTile,
    Kinetic: Kinetic,
    Map: Map,
    MapBrowserEvent: MapBrowserEvent,
    MapBrowserEventHandler: MapBrowserEventHandler,
    MapBrowserPointerEvent: MapBrowserPointerEvent,
    MapEvent: MapEvent,
    Object: BaseObject,
    Observable: Observable,
    Overlay: Overlay,
    PluggableMap: PluggableMap,
    Tile: Tile,
    TileCache: TileCache,
    TileQueue: TileQueue,
    TileRange: TileRange,
    VectorRenderTile: VectorRenderTile,
    VectorTile: VectorTile,
    View: View,
    getUid: getUid,
    VERSION: VERSION
  });

  /**
   * @enum
   */
  const PlotTypes = {
  	MARKER: 'marker',
  	POLYLINE: 'polyline',
  	POLYGON: 'polygon',
  	CIRCLE:'circle',
  	ELLIPSE:'ellipse',
  	RECTANGLE:'rectangle',
  	ARC:'arc',
  	ATTACK_ARROW:'attack_arrow',
  	CLOSED_CURVE:"closed_curve",
  	CURVE:'curve',
  	DOUBLE_ARROW:'double_arrow',
  	FINE_ARROW:'fine_arrow',
  	ASSAULT_DIRECTION:'assault_direction',
  	FREEHAND_LINE:'freehand_line',
  	FREEHAND_POLYGON:'freehand_polygon',
  	GATHERING_PLACE:'gathering_place',
  	LUNE:'lune',
  	SECTOR: 'sector',
  	SQUAD_COMBAT: 'squad_combat',
  	STRAIGHT_ARROW:'straight_arrow',
  	TAILED_ATTACK_ARROW:'tailed_attack_arrow',
  	TAILED_SQUAD_COMBAT:'tailed_squad_combat'
  };

  class Plot {
      /**
      * @classdesc 所有图元的基类,用来实现绘制图元。
      * @constructs
      * @author daiyujie
      * @param {ol.Coordinate} points 图元的点集
      */
      constructor(points) {
          this.setPoints(points);
          this.geo_type ='RootTest'; 
      }
      /**
  	 * 是否为图元
  	 */
      isPlot() {
          return true;
      }
      /**
  	 * 设置点集
       * @param {ol.Coordinate} points 图元的点集
  	 */
      setPoints(value) {
          this.points = value ? value : [];
          if (this.points.length >= 1)
              this.generate();
      }
      /**
  	 * 获取当前图元的点集
       * @return {ol.Coordinate}  图元的点集
  	 */
      getPoints() {
          return this.points.slice(0);
      }
      /**
  	 * 获取当前图元的点集数量
       * @return {Number}  图元的点集的数量
  	 */
      getPointCount() {
          return this.points.length;
      }
      /**
  	 * 更新某个索引的点
       * @param {ol.Coordinate} point 点
       * @param {index} index 位置
  	 */
      updatePoint(point, index) {
          if (index >= 0 && index < this.points.length) {
              this.points[index] = point;
              this.generate();
          }
      }
      /**
       * 更新最后一个点
       * @param {ol.Coordinate} point 
       */
      updateLastPoint(point) {
          this.updatePoint(point, this.points.length - 1);
      }
      /**
      * @override
      * 图元绘制逻辑.各个图元用来覆盖
      */
      generate() {
          //--TODO
      }
      /**
      * @override
      * 图元结束绘制回调
      */
      finishDrawing() {
          //--TODO
      }
  }

  //--fix dyj 多继承。目前还有缺陷
  function mix(...mixins) {
      class Mix {
          constructor(...ags) {
              for (let mixin of mixins) {
                  copyProperties(this, new mixin(ags)); // 拷贝实例属性
              }
          }
      }

      for (let mixin of mixins) {
          copyProperties(Mix, mixin); // 拷贝静态属性
          copyProperties(Mix.prototype, mixin.prototype,true); // 拷贝原型属性
      }

      return Mix;
  }

  function copyProperties(target, source,deep) {
      for (var key of Reflect.ownKeys(source)) {
          if (key !== 'constructor'
              && key !== 'prototype'
              && key !== 'name'
              && key !== 'length'//--fix ie不支持拷贝函数对象的length属性
          ) {
              let desc = Object.getOwnPropertyDescriptor(source, key);
              Object.defineProperty(target, key, desc);
          }
      }
      if (deep && source.__proto__ && target.__proto__) {
          target.__proto__ = source.__proto__;

          // for (let key2 of Reflect.ownKeys(source.__proto__)) {
          //     let desc = Object.getOwnPropertyDescriptor(source.__proto__, key2);
          //     Object.defineProperty(target.__proto__, key2, desc);
          //     copyProperties(target.__proto__,source.__proto__);
          // }
      }
  }

  class Marker extends mix(Plot,Point) {

      constructor(points) {
          super(points);
          this.type = PlotTypes.MARKER;
          this.fixPointCount = 1;
          this.setPoints(points);
      }
      generate() {
          var pnt = this.points[0];
          this.setCoordinates(pnt);
      }
  }

  //--fix dyj 目前mix函数只支持简单对象的拷贝，Plot必须放在复杂对象前面
  class Polyline$1 extends mix(Plot, LineString) {

      constructor(points) {
          super(points);
          this.type = PlotTypes.POLYLINE;
          this.geo_type ='LineString'; 
          this.setPoints(points);
      }
      generate() {
          var count = this.getPointCount();
          if (count < 2) {
              return;
          }
          this.setCoordinates(this.points);
      }


  }

  class Polygon$1 extends mix(Plot,Polygon) {

      constructor(points) {
          super(points);
          this.type = PlotTypes.POLYGON;
          this.setPoints(points);
      }
      generate() {
          var count = this.getPointCount();
          if (count < 2) {
              return;
          }
          this.setCoordinates([this.points]);
      }
      

  }

  var Constants = {
  	TWO_PI: Math.PI * 2,
  	HALF_PI: Math.PI / 2,
  	FITTING_COUNT: 100,
  	ZERO_TOLERANCE: 0.0001,
  	//--plotedit
  	HELPER_HIDDEN_DIV: 'p-helper-hidden-div',
  	HELPER_CONTROL_POINT_DIV: 'p-helper-control-point-div',
  	SE_DISABLED:'se_disabled'
  };

  function distance$1(pnt1, pnt2) {
      return Math.sqrt(Math.pow((pnt1[0] - pnt2[0]), 2) + Math.pow((pnt1[1] - pnt2[1]), 2));
  }function wholeDistance(points) {
      var n_distance = 0;
      for (var i = 0; i < points.length - 1; i++)
      n_distance += distance$1(points[i], points[i + 1]);
      return n_distance;
  }
  function getBaseLength(points) {
      return Math.pow(wholeDistance(points), 0.99);
      //return wholeDistance(points);
  }
  function mid(pnt1, pnt2) {
      return [(pnt1[0] + pnt2[0]) / 2, (pnt1[1] + pnt2[1]) / 2];
  }
  function getCircleCenterOfThreePoints(pnt1, pnt2, pnt3) {
      var pntA = [(pnt1[0] + pnt2[0]) / 2, (pnt1[1] + pnt2[1]) / 2];
      var pntB = [pntA[0] - pnt1[1] + pnt2[1], pntA[1] + pnt1[0] - pnt2[0]];
      var pntC = [(pnt1[0] + pnt3[0]) / 2, (pnt1[1] + pnt3[1]) / 2];
      var pntD = [pntC[0] - pnt1[1] + pnt3[1], pntC[1] + pnt1[0] - pnt3[0]];
      return getIntersectPoint(pntA, pntB, pntC, pntD);
  }
  function getIntersectPoint(pntA, pntB, pntC, pntD) {
      if (pntA[1] == pntB[1]) {
          var f = (pntD[0] - pntC[0]) / (pntD[1] - pntC[1]);
          var x = f * (pntA[1] - pntC[1]) + pntC[0];
          var y = pntA[1];
          return [x, y];
      }
      if (pntC[1] == pntD[1]) {
          var e = (pntB[0] - pntA[0]) / (pntB[1] - pntA[1]);
          x = e * (pntC[1] - pntA[1]) + pntA[0];
          y = pntC[1];
          return [x, y];
      }
      e = (pntB[0] - pntA[0]) / (pntB[1] - pntA[1]);
      f = (pntD[0] - pntC[0]) / (pntD[1] - pntC[1]);
      y = (e * pntA[1] - pntA[0] - f * pntC[1] + pntC[0]) / (e - f);
      x = e * y - e * pntA[1] + pntA[0];
      return [x, y];
  }
  function getAzimuth(startPnt, endPnt) {
      var azimuth;
      var angle = Math.asin(Math.abs(endPnt[1] - startPnt[1]) / distance$1(startPnt, endPnt));
      if (endPnt[1] >= startPnt[1] && endPnt[0] >= startPnt[0])
          azimuth = angle + Math.PI;
      else if (endPnt[1] >= startPnt[1] && endPnt[0] < startPnt[0])
          azimuth = Constants.TWO_PI - angle;
      else if (endPnt[1] < startPnt[1] && endPnt[0] < startPnt[0])
          azimuth = angle;
      else if (endPnt[1] < startPnt[1] && endPnt[0] >= startPnt[0])
          azimuth = Math.PI - angle;
      return azimuth;
  }
  function getAngleOfThreePoints(pntA, pntB, pntC) {
      var angle = getAzimuth(pntB, pntA) - getAzimuth(pntB, pntC);
      return (angle < 0 ? angle + Constants.TWO_PI : angle);
  }
  function isClockWise(pnt1, pnt2, pnt3) {
      return ((pnt3[1] - pnt1[1]) * (pnt2[0] - pnt1[0]) > (pnt2[1] - pnt1[1]) * (pnt3[0] - pnt1[0]));
  }
  function getCubicValue(t, startPnt, cPnt1, cPnt2, endPnt) {
      t = Math.max(Math.min(t, 1), 0);
      var tp = 1 - t;
      var t2 = t * t;
      var t3 = t2 * t;
      var tp2 = tp * tp;
      var tp3 = tp2 * tp;
      var x = (tp3 * startPnt[0]) + (3 * tp2 * t * cPnt1[0]) + (3 * tp * t2 * cPnt2[0]) + (t3 * endPnt[0]);
      var y = (tp3 * startPnt[1]) + (3 * tp2 * t * cPnt1[1]) + (3 * tp * t2 * cPnt2[1]) + (t3 * endPnt[1]);
      return [x, y];
  }
  function getThirdPoint(startPnt, endPnt, angle, distance, clockWise) {
      var azimuth = getAzimuth(startPnt, endPnt);
      var alpha = clockWise ? azimuth + angle : azimuth - angle;
      var dx = distance * Math.cos(alpha);
      var dy = distance * Math.sin(alpha);
      return [endPnt[0] + dx, endPnt[1] + dy];
  }
  function getArcPoints(center, radius, startAngle, endAngle) {
      var x, y, pnts = [];
      var angleDiff = endAngle - startAngle;
      angleDiff = angleDiff < 0 ? angleDiff + Constants.TWO_PI : angleDiff;
      for (var i = 0; i <= Constants.FITTING_COUNT; i++) {
          var angle = startAngle + angleDiff * i / Constants.FITTING_COUNT;
          x = center[0] + radius * Math.cos(angle);
          y = center[1] + radius * Math.sin(angle);
          pnts.push([x, y]);
      }
      return pnts;
  }
  function getBisectorNormals(t, pnt1, pnt2, pnt3) {
      var normal = getNormal(pnt1, pnt2, pnt3);
      var dist = Math.sqrt(normal[0] * normal[0] + normal[1] * normal[1]);
      var uX = normal[0] / dist;
      var uY = normal[1] / dist;
      var d1 = distance$1(pnt1, pnt2);
      var d2 = distance$1(pnt2, pnt3);
      if (dist > Constants.ZERO_TOLERANCE) {
          if (isClockWise(pnt1, pnt2, pnt3)) {
              var dt = t * d1;
              var x = pnt2[0] - dt * uY;
              var y = pnt2[1] + dt * uX;
              var bisectorNormalRight = [x, y];
              dt = t * d2;
              x = pnt2[0] + dt * uY;
              y = pnt2[1] - dt * uX;
              var bisectorNormalLeft = [x, y];
          }
          else {
              dt = t * d1;
              x = pnt2[0] + dt * uY;
              y = pnt2[1] - dt * uX;
              bisectorNormalRight = [x, y];
              dt = t * d2;
              x = pnt2[0] - dt * uY;
              y = pnt2[1] + dt * uX;
              bisectorNormalLeft = [x, y];
          }
      }
      else {
          x = pnt2[0] + t * (pnt1[0] - pnt2[0]);
          y = pnt2[1] + t * (pnt1[1] - pnt2[1]);
          bisectorNormalRight = [x, y];
          x = pnt2[0] + t * (pnt3[0] - pnt2[0]);
          y = pnt2[1] + t * (pnt3[1] - pnt2[1]);
          bisectorNormalLeft = [x, y];
      }
      return [bisectorNormalRight, bisectorNormalLeft];
  }
  function getNormal(pnt1, pnt2, pnt3) {
      var dX1 = pnt1[0] - pnt2[0];
      var dY1 = pnt1[1] - pnt2[1];
      var d1 = Math.sqrt(dX1 * dX1 + dY1 * dY1);
      dX1 /= d1;
      dY1 /= d1;

      var dX2 = pnt3[0] - pnt2[0];
      var dY2 = pnt3[1] - pnt2[1];
      var d2 = Math.sqrt(dX2 * dX2 + dY2 * dY2);
      dX2 /= d2;
      dY2 /= d2;

      var uX = dX1 + dX2;
      var uY = dY1 + dY2;
      return [uX, uY];
  }
  function getCurvePoints(t, controlPoints) {
      var leftControl = getLeftMostControlPoint(controlPoints);
      var normals = [leftControl];
      for (var i = 0; i < controlPoints.length - 2; i++) {
          var pnt1 = controlPoints[i];
          var pnt2 = controlPoints[i + 1];
          var pnt3 = controlPoints[i + 2];
          var normalPoints = getBisectorNormals(t, pnt1, pnt2, pnt3);
          normals = normals.concat(normalPoints);
      }
      var rightControl = getRightMostControlPoint(controlPoints);
      normals.push(rightControl);
      var points = [];
      for (i = 0; i < controlPoints.length - 1; i++) {
          pnt1 = controlPoints[i];
          pnt2 = controlPoints[i + 1];
          points.push(pnt1);
          for (var t = 0; t < Constants.FITTING_COUNT; t++) {
              var pnt = getCubicValue(t / Constants.FITTING_COUNT, pnt1, normals[i * 2], normals[i * 2 + 1], pnt2);
              points.push(pnt);
          }
          points.push(pnt2);
      }
      return points;
  }
  function getLeftMostControlPoint(controlPoints) {
      var pnt1 = controlPoints[0];
      var pnt2 = controlPoints[1];
      var pnt3 = controlPoints[2];
      var pnts = getBisectorNormals(0, pnt1, pnt2, pnt3);
      var normalRight = pnts[0];
      var normal = getNormal(pnt1, pnt2, pnt3);
      var dist = Math.sqrt(normal[0] * normal[0] + normal[1] * normal[1]);
      if (dist > Constants.ZERO_TOLERANCE) {
          var arr_mid = mid(pnt1, pnt2);
          var pX = pnt1[0] - arr_mid[0];
          var pY = pnt1[1] - arr_mid[1];

          var d1 = distance$1(pnt1, pnt2);
          // normal at midpoint
          var n = 2.0 / d1;
          var nX = -n * pY;
          var nY = n * pX;

          // upper triangle of symmetric transform matrix
          var a11 = nX * nX - nY * nY;
          var a12 = 2 * nX * nY;
          var a22 = nY * nY - nX * nX;

          var dX = normalRight[0] - arr_mid[0];
          var dY = normalRight[1] - arr_mid[1];

          // coordinates of reflected vector
          var controlX = arr_mid[0] + a11 * dX + a12 * dY;
          var controlY = arr_mid[1] + a12 * dX + a22 * dY;
      }
      else {
          controlX = pnt1[0] + t * (pnt2[0] - pnt1[0]);
          controlY = pnt1[1] + t * (pnt2[1] - pnt1[1]);
      }
      return [controlX, controlY];
  }
  function getRightMostControlPoint(controlPoints) {
      var count = controlPoints.length;
      var pnt1 = controlPoints[count - 3];
      var pnt2 = controlPoints[count - 2];
      var pnt3 = controlPoints[count - 1];
      var pnts = getBisectorNormals(0, pnt1, pnt2, pnt3);
      var normalLeft = pnts[1];
      var normal = getNormal(pnt1, pnt2, pnt3);
      var dist = Math.sqrt(normal[0] * normal[0] + normal[1] * normal[1]);
      if (dist > Constants.ZERO_TOLERANCE) {
          var arr_mid = mid(pnt2, pnt3);
          var pX = pnt3[0] - arr_mid[0];
          var pY = pnt3[1] - arr_mid[1];

          var d1 = distance$1(pnt2, pnt3);
          // normal at midpoint
          var n = 2.0 / d1;
          var nX = -n * pY;
          var nY = n * pX;

          // upper triangle of symmetric transform matrix
          var a11 = nX * nX - nY * nY;
          var a12 = 2 * nX * nY;
          var a22 = nY * nY - nX * nX;

          var dX = normalLeft[0] - arr_mid[0];
          var dY = normalLeft[1] - arr_mid[1];

          // coordinates of reflected vector
          var controlX = arr_mid[0] + a11 * dX + a12 * dY;
          var controlY = arr_mid[1] + a12 * dX + a22 * dY;
      }
      else {
          controlX = pnt3[0] + t * (pnt2[0] - pnt3[0]);
          controlY = pnt3[1] + t * (pnt2[1] - pnt3[1]);
      }
      return [controlX, controlY];
  }
  function getBezierPoints(points) {
      if (points.length <= 2)
          return points;

      var bezierPoints = [];
      var n = points.length - 1;
      for (var t = 0; t <= 1; t += 0.01) {
          var x = 0;
          var y = 0;
          for (var index = 0; index <= n; index++) {
              var factor = getBinomialFactor(n, index);
              var a = Math.pow(t, index);
              var b = Math.pow((1 - t), (n - index));
              x += factor * a * b * points[index][0];
              y += factor * a * b * points[index][1];
          }
          bezierPoints.push([x, y]);
      }
      bezierPoints.push(points[n]);
      return bezierPoints;
  }
  function getBinomialFactor(n, index) {
      return getFactorial(n) / (getFactorial(index) * getFactorial(n - index));
  }function getFactorial(n) {
      if (n <= 1)
          return 1;
      if (n == 2)
          return 2;
      if (n == 3)
          return 6;
      if (n == 4)
          return 24;
      if (n == 5)
          return 120;
      var result = 1;
      for (var i = 1; i <= n; i++)
          result *= i;
      return result;
  }
  function getQBSplinePoints(points) {
      if (points.length <= 2)
          return points;

      var n = 2;

      var bSplinePoints = [];
      var m = points.length - n - 1;
      bSplinePoints.push(points[0]);
      for (var i = 0; i <= m; i++) {
          for (var t = 0; t <= 1; t += 0.05) {
              var x  = 0;
              var y  = 0;
              for (var k = 0; k <= n; k++) {
                  var factor = getQuadricBSplineFactor(k, t);
                  x += factor * points[i + k][0];
                  y += factor * points[i + k][1];
              }
              bSplinePoints.push([x, y]);
          }
      }
      bSplinePoints.push(points[points.length - 1]);
      return bSplinePoints;
  }
  function getQuadricBSplineFactor(k, t) {
      if (k == 0)
          return Math.pow(t - 1, 2) / 2;
      if (k == 1)
          return (-2 * Math.pow(t, 2) + 2 * t + 1) / 2;
      if (k == 2)
          return Math.pow(t, 2) / 2;
      return 0;
  }

  class Circle$1 extends mix(Plot,Polygon){

      constructor(points) {
          super(points);
          this.type = PlotTypes.CIRCLE;
          this.fixPointCount = 2;
          this.setPoints(points);
      }
      generate() {
          var count = this.getPointCount();
          if (count < 2) {
              return;
          }
          var center = this.points[0];
          var radius = distance$1(center, this.points[1]);
          this.setCoordinates([this.generatePoints(center, radius)]);
      }
      generatePoints(center, radius) {
          var x, y, angle, points = [];
          for (var i = 0; i <= Constants.FITTING_COUNT; i++) {
              angle = Math.PI * 2 * i / Constants.FITTING_COUNT;
              x = center[0] + radius * Math.cos(angle);
              y = center[1] + radius * Math.sin(angle);
              points.push([x, y]);
          }
          return points;
      };


      

  }

  class Ellipse extends mix(Plot, Polygon) {

      constructor(points) {
          super(points);
          this.type = PlotTypes.ELLIPSE;
          this.fixPointCount = 2;
          this.setPoints(points);
      }
      generate() {
          var count = this.getPointCount();
          if (count < 2) {
              return;
          }
          var pnt1 = this.points[0];
          var pnt2 = this.points[1];
          var center = mid(pnt1, pnt2);
          var majorRadius = Math.abs((pnt1[0] - pnt2[0]) / 2);
          var minorRadius = Math.abs((pnt1[1] - pnt2[1]) / 2);
          this.setCoordinates([this.generatePoints(center, majorRadius, minorRadius)]);
      }
      generatePoints(center, majorRadius, minorRadius) {
          var x, y, angle, points = [];
          for (var i = 0; i <= Constants.FITTING_COUNT; i++) {
              angle = Math.PI * 2 * i / Constants.FITTING_COUNT;
              x = center[0] + majorRadius * Math.cos(angle);
              y = center[1] + minorRadius * Math.sin(angle);
              points.push([x, y]);
          }
          return points;
      }

  }

  class Rectangle extends mix(Plot, Polygon) {

      constructor(points) {
          super(points);
          this.type = PlotTypes.RECTANGLE;
          this.fixPointCount = 2;
          this.setPoints(points);
      }
      generate() {
          var count = this.getPointCount();
          if (count < 2) {
              return;
          } else {
              var pnt1 = this.points[0];
              var pnt2 = this.points[1];
              var xmin = Math.min(pnt1[0], pnt2[0]);
              var xmax = Math.max(pnt1[0], pnt2[0]);
              var ymin = Math.min(pnt1[1], pnt2[1]);
              var ymax = Math.max(pnt1[1], pnt2[1]);
              var tl = [xmin, ymax];
              var tr = [xmax, ymax];
              var br = [xmax, ymin];
              var bl = [xmin, ymin];
              this.setCoordinates([[tl, tr, br, bl]]);
          }
      }


  }

  class AttackArrow extends mix(Plot, Polygon) {

      constructor(points) {
          super(points);
          this.type = PlotTypes.ATTACK_ARROW;
          this.headHeightFactor = 0.18;
          this.headWidthFactor = 0.3;
          this.neckHeightFactor = 0.85;
          this.neckWidthFactor = 0.15;
          this.headTailFactor = 0.8;
          this.setPoints(points);
      }
      generate() {
          if (this.getPointCount() < 2) {
              return;
          }
          if (this.getPointCount() == 2) {
              this.setCoordinates([this.points]);
              return;
          }
          var pnts = this.getPoints();
          // 计算箭尾
          var tailLeft = pnts[0];
          var tailRight = pnts[1];
          if (isClockWise(pnts[0], pnts[1], pnts[2])) {
              tailLeft = pnts[1];
              tailRight = pnts[0];
          }
          var midTail = mid(tailLeft, tailRight);
          var bonePnts = [midTail].concat(pnts.slice(2));
          // 计算箭头
          var headPnts = this.getArrowHeadPoints(bonePnts, tailLeft, tailRight);
          var neckLeft = headPnts[0];
          var neckRight = headPnts[4];
          var tailWidthFactor = distance$1(tailLeft, tailRight) / getBaseLength(bonePnts);
          // 计算箭身
          var bodyPnts = this.getArrowBodyPoints(bonePnts, neckLeft, neckRight, tailWidthFactor);
          // 整合
          var count = bodyPnts.length;
          var leftPnts = [tailLeft].concat(bodyPnts.slice(0, count / 2));
          leftPnts.push(neckLeft);
          var rightPnts = [tailRight].concat(bodyPnts.slice(count / 2, count));
          rightPnts.push(neckRight);

          leftPnts = getQBSplinePoints(leftPnts);
          rightPnts = getQBSplinePoints(rightPnts);

          this.setCoordinates([leftPnts.concat(headPnts, rightPnts.reverse())]);
      }
      getArrowHeadPoints(points, tailLeft, tailRight) {
          var len = getBaseLength(points);
          var headHeight = len * this.headHeightFactor;
          var headPnt = points[points.length - 1];
          len = distance$1(headPnt, points[points.length - 2]);
          var tailWidth = distance$1(tailLeft, tailRight);
          if (headHeight > tailWidth * this.headTailFactor) {
              headHeight = tailWidth * this.headTailFactor;
          }
          var headWidth = headHeight * this.headWidthFactor;
          var neckWidth = headHeight * this.neckWidthFactor;
          headHeight = headHeight > len ? len : headHeight;
          var neckHeight = headHeight * this.neckHeightFactor;
          var headEndPnt = getThirdPoint(points[points.length - 2], headPnt, 0, headHeight, true);
          var neckEndPnt = getThirdPoint(points[points.length - 2], headPnt, 0, neckHeight, true);
          var headLeft = getThirdPoint(headPnt, headEndPnt, Constants.HALF_PI, headWidth, false);
          var headRight = getThirdPoint(headPnt, headEndPnt, Constants.HALF_PI, headWidth, true);
          var neckLeft = getThirdPoint(headPnt, neckEndPnt, Constants.HALF_PI, neckWidth, false);
          var neckRight = getThirdPoint(headPnt, neckEndPnt, Constants.HALF_PI, neckWidth, true);
          return [neckLeft, headLeft, headPnt, headRight, neckRight];
      }
      getArrowBodyPoints(points, neckLeft, neckRight, tailWidthFactor) {
          var allLen = wholeDistance(points);
          var len = getBaseLength(points);
          var tailWidth = len * tailWidthFactor;
          var neckWidth = distance$1(neckLeft, neckRight);
          var widthDif = (tailWidth - neckWidth) / 2;
          var tempLen = 0, leftBodyPnts = [], rightBodyPnts = [];
          for (var i = 1; i < points.length - 1; i++) {
              var angle = getAngleOfThreePoints(points[i - 1], points[i], points[i + 1]) / 2;
              tempLen += distance$1(points[i - 1], points[i]);
              var w = (tailWidth / 2 - tempLen / allLen * widthDif) / Math.sin(angle);
              var left = getThirdPoint(points[i - 1], points[i], Math.PI - angle, w, true);
              var right = getThirdPoint(points[i - 1], points[i], angle, w, false);
              leftBodyPnts.push(left);
              rightBodyPnts.push(right);
          }
          return leftBodyPnts.concat(rightBodyPnts);
      }


  }

  class ClosedCurve extends mix(Plot, Polygon) {

      constructor(points) {
          super(points);
          this.type = PlotTypes.CLOSED_CURVE;
          this.t = 0.3;
          this.setPoints(points);
      }
      generate() {
          var count = this.getPointCount();
          if (count < 2) {
              return;
          }
          if (count == 2) {
              this.setCoordinates([this.points]);
          }
          else {
              var pnts = this.getPoints();
              pnts.push(pnts[0], pnts[1]);
              var normals = [];
              for (var i = 0; i < pnts.length - 2; i++) {
                  var normalPoints = getBisectorNormals(this.t, pnts[i], pnts[i + 1], pnts[i + 2]);
                  normals = normals.concat(normalPoints);
              }
              var count = normals.length;
              normals = [normals[count - 1]].concat(normals.slice(0, count - 1));

              var pList = [];
              for (i = 0; i < pnts.length - 2; i++) {
                  var pnt1 = pnts[i];
                  var pnt2 = pnts[i + 1];
                  pList.push(pnt1);
                  for (var t = 0; t <= Constants.FITTING_COUNT; t++) {
                      var pnt = getCubicValue(t / Constants.FITTING_COUNT, pnt1, normals[i * 2], normals[i * 2 + 1], pnt2);
                      pList.push(pnt);
                  }
                  pList.push(pnt2);
              }
              this.setCoordinates([pList]);
          }
      }


  }

  class Curve extends mix(Plot, LineString) {

      constructor(points) {
          super(points);
          this.type = PlotTypes.CURVE;
          this.t = 0.3;
          this.setPoints(points);
      }
      generate() {
          var count = this.getPointCount();
          if (count < 2) {
              return;
          }
          if (count == 2) {
              this.setCoordinates(this.points);
          } else {
              this.setCoordinates(getCurvePoints(this.t, this.points));
          }


      }
  }

  class DoubleArrow extends mix(Plot, Polygon) {

      constructor(points) {
          super(points);
          this.type = PlotTypes.DOUBLE_ARROW;
          this.headHeightFactor = 0.25;
          this.headWidthFactor = 0.3;
          this.neckHeightFactor = 0.85;
          this.neckWidthFactor = 0.15;
          this.connPoint = null;
          this.tempPoint4 = null;
          this.fixPointCount = 4;
          this.setPoints(points);
      }
      generate() {
          var count = this.getPointCount();
          if (count < 2) {
              return;
          }
          if (count == 2) {
              this.setCoordinates([this.points]);
              return;
          }
          var pnt1 = this.points[0];
          var pnt2 = this.points[1];
          var pnt3 = this.points[2];
          var count = this.getPointCount();
          if (count == 3)
              this.tempPoint4 = this.getTempPoint4(pnt1, pnt2, pnt3);
          else
              this.tempPoint4 = this.points[3];
          if (count == 3 || count == 4)
              this.connPoint = mid(pnt1, pnt2);
          else
              this.connPoint = this.points[4];
          var leftArrowPnts, rightArrowPnts;
          if (isClockWise(pnt1, pnt2, pnt3)) {
              leftArrowPnts = this.getArrowPoints(pnt1, this.connPoint, this.tempPoint4, false);
              rightArrowPnts = this.getArrowPoints(this.connPoint, pnt2, pnt3, true);
          } else {
              leftArrowPnts = this.getArrowPoints(pnt2, this.connPoint, pnt3, false);
              rightArrowPnts = this.getArrowPoints(this.connPoint, pnt1, this.tempPoint4, true);
          }
          var m = leftArrowPnts.length;
          var t = (m - 5) / 2;

          var llBodyPnts = leftArrowPnts.slice(0, t);
          var lArrowPnts = leftArrowPnts.slice(t, t + 5);
          var lrBodyPnts = leftArrowPnts.slice(t + 5, m);

          var rlBodyPnts = rightArrowPnts.slice(0, t);
          var rArrowPnts = rightArrowPnts.slice(t, t + 5);
          var rrBodyPnts = rightArrowPnts.slice(t + 5, m);

          rlBodyPnts = getBezierPoints(rlBodyPnts);
          var bodyPnts = getBezierPoints(rrBodyPnts.concat(llBodyPnts.slice(1)));
          lrBodyPnts = getBezierPoints(lrBodyPnts);

          var pnts = rlBodyPnts.concat(rArrowPnts, bodyPnts, lArrowPnts, lrBodyPnts);
          this.setCoordinates([pnts]);
      }
      getArrowPoints(pnt1, pnt2, pnt3, clockWise) {
          var midPnt = mid(pnt1, pnt2);
          var len = distance$1(midPnt, pnt3);
          var midPnt1 = getThirdPoint(pnt3, midPnt, 0, len * 0.3, true);
          var midPnt2 = getThirdPoint(pnt3, midPnt, 0, len * 0.5, true);
          //var midPnt3=PlotUtils.getThirdPoint(pnt3, midPnt, 0, len * 0.7, true);
          midPnt1 = getThirdPoint(midPnt, midPnt1, Constants.HALF_PI, len / 5, clockWise);
          midPnt2 = getThirdPoint(midPnt, midPnt2, Constants.HALF_PI, len / 4, clockWise);
          //midPnt3=PlotUtils.getThirdPoint(midPnt, midPnt3, Constants.HALF_PI, len / 5, clockWise);

          var points = [midPnt, midPnt1, midPnt2, pnt3];
          // 计算箭头部分
          var arrowPnts = this.getArrowHeadPoints(points, this.headHeightFactor, this.headWidthFactor, this.neckHeightFactor, this.neckWidthFactor);
          var neckLeftPoint = arrowPnts[0];
          var neckRightPoint = arrowPnts[4];
          // 计算箭身部分
          var tailWidthFactor = distance$1(pnt1, pnt2) / getBaseLength(points) / 2;
          var bodyPnts = this.getArrowBodyPoints(points, neckLeftPoint, neckRightPoint, tailWidthFactor);
          var n = bodyPnts.length;
          var lPoints = bodyPnts.slice(0, n / 2);
          var rPoints = bodyPnts.slice(n / 2, n);
          lPoints.push(neckLeftPoint);
          rPoints.push(neckRightPoint);
          lPoints = lPoints.reverse();
          lPoints.push(pnt2);
          rPoints = rPoints.reverse();
          rPoints.push(pnt1);
          return lPoints.reverse().concat(arrowPnts, rPoints);
      };

      finishDrawing() {
          if (this.getPointCount() == 3 && this.tempPoint4 != null)
              this.points.push(this.tempPoint4);
          if (this.connPoint != null)
              this.points.push(this.connPoint);
      };
      getArrowHeadPoints(points, tailLeft, tailRight) {
          var len = getBaseLength(points);
          var headHeight = len * this.headHeightFactor;
          var headPnt = points[points.length - 1];
          var tailWidth = distance$1(tailLeft, tailRight);
          var headWidth = headHeight * this.headWidthFactor;
          var neckWidth = headHeight * this.neckWidthFactor;
          var neckHeight = headHeight * this.neckHeightFactor;
          var headEndPnt = getThirdPoint(points[points.length - 2], headPnt, 0, headHeight, true);
          var neckEndPnt = getThirdPoint(points[points.length - 2], headPnt, 0, neckHeight, true);
          var headLeft = getThirdPoint(headPnt, headEndPnt, Constants.HALF_PI, headWidth, false);
          var headRight = getThirdPoint(headPnt, headEndPnt, Constants.HALF_PI, headWidth, true);
          var neckLeft = getThirdPoint(headPnt, neckEndPnt, Constants.HALF_PI, neckWidth, false);
          var neckRight = getThirdPoint(headPnt, neckEndPnt, Constants.HALF_PI, neckWidth, true);
          return [neckLeft, headLeft, headPnt, headRight, neckRight];
      };

      getArrowBodyPoints(points, neckLeft, neckRight, tailWidthFactor) {
          var allLen = wholeDistance(points);
          var len = getBaseLength(points);
          var tailWidth = len * tailWidthFactor;
          var neckWidth = distance$1(neckLeft, neckRight);
          var widthDif = (tailWidth - neckWidth) / 2;
          var tempLen = 0, leftBodyPnts = [], rightBodyPnts = [];
          for (var i = 1; i < points.length - 1; i++) {
              var angle = getAngleOfThreePoints(points[i - 1], points[i], points[i + 1]) / 2;
              tempLen += distance$1(points[i - 1], points[i]);
              var w = (tailWidth / 2 - tempLen / allLen * widthDif) / Math.sin(angle);
              var left = getThirdPoint(points[i - 1], points[i], Math.PI - angle, w, true);
              var right = getThirdPoint(points[i - 1], points[i], angle, w, false);
              leftBodyPnts.push(left);
              rightBodyPnts.push(right);
          }
          return leftBodyPnts.concat(rightBodyPnts);
      };
   
      getTempPoint4(linePnt1, linePnt2, point) {
          var midPnt = mid(linePnt1, linePnt2);
          var len = distance$1(midPnt, point);
          var angle = getAngleOfThreePoints(linePnt1, midPnt, point);
          var symPnt, distance1, distance2, mid$1;
          if (angle < Constants.HALF_PI) {
              distance1 = len * Math.sin(angle);
              distance2 = len * Math.cos(angle);
              mid$1 = getThirdPoint(linePnt1, midPnt, Constants.HALF_PI, distance1, false);
              symPnt = getThirdPoint(midPnt, mid$1, Constants.HALF_PI, distance2, true);
          }
          else if (angle >= Constants.HALF_PI && angle < Math.PI) {
              distance1 = len * Math.sin(Math.PI - angle);
              distance2 = len * Math.cos(Math.PI - angle);
              mid$1 = getThirdPoint(linePnt1, midPnt, Constants.HALF_PI, distance1, false);
              symPnt = getThirdPoint(midPnt, mid$1, Constants.HALF_PI, distance2, false);
          }
          else if (angle >= Math.PI && angle < Math.PI * 1.5) {
              distance1 = len * Math.sin(angle - Math.PI);
              distance2 = len * Math.cos(angle - Math.PI);
              mid$1 = getThirdPoint(linePnt1, midPnt, Constants.HALF_PI, distance1, true);
              symPnt = getThirdPoint(midPnt, mid$1, Constants.HALF_PI, distance2, true);
          }
          else {
              distance1 = len * Math.sin(Math.PI * 2 - angle);
              distance2 = len * Math.cos(Math.PI * 2 - angle);
              mid$1 = getThirdPoint(linePnt1, midPnt, Constants.HALF_PI, distance1, true);
              symPnt = getThirdPoint(midPnt, mid$1, Constants.HALF_PI, distance2, false);
          }
          return symPnt;
      };

  }








  // 计算对称点

  class FineArrow extends mix(Plot, Polygon) {

      constructor(points) {
          super(points);
          this.type = PlotTypes.FINE_ARROW;
          this.tailWidthFactor = 0.15;
          this.neckWidthFactor = 0.2;
          this.headWidthFactor = 0.25;
          this.headAngle = Math.PI / 8.5;
          this.neckAngle = Math.PI / 13;
          this.fixPointCount = 2;
          this.setPoints(points);
      }
      generate() {
          var count = this.getPointCount();
          if (count < 2) {
              return;
          }
          var pnts = this.getPoints();
          var pnt1 = pnts[0];
          var pnt2 = pnts[1];
          var len = getBaseLength(pnts);
          var tailWidth = len * this.tailWidthFactor;
          var neckWidth = len * this.neckWidthFactor;
          var headWidth = len * this.headWidthFactor;
          var tailLeft = getThirdPoint(pnt2, pnt1, Constants.HALF_PI, tailWidth, true);
          var tailRight = getThirdPoint(pnt2, pnt1, Constants.HALF_PI, tailWidth, false);
          var headLeft = getThirdPoint(pnt1, pnt2, this.headAngle, headWidth, false);
          var headRight = getThirdPoint(pnt1, pnt2, this.headAngle, headWidth, true);
          var neckLeft = getThirdPoint(pnt1, pnt2, this.neckAngle, neckWidth, false);
          var neckRight = getThirdPoint(pnt1, pnt2, this.neckAngle, neckWidth, true);
          var pList = [tailLeft, neckLeft, headLeft, pnt2, headRight, neckRight, tailRight];
          this.setCoordinates([pList]);
      }
  }

  class AssaultDirection extends FineArrow {

      constructor(points) {
          super(points);
          this.type = PlotTypes.ASSAULT_DIRECTION;
          this.tailWidthFactor = 0.2;
          this.neckWidthFactor = 0.25;
          this.headWidthFactor = 0.3;
          this.headAngle = Math.PI / 4;
          this.neckAngle = Math.PI * 0.17741;
          this.setPoints(points);
      }
  }

  class FreehandLine extends mix(Plot, LineString) {

      constructor(points) {
          super(points);
          this.type = PlotTypes.FREEHAND_LINE;
          this.freehand = true;
          this.setPoints(points);
      }
      generate() {
          var count = this.getPointCount();
          if (count < 2) {
              return;
          }
          this.setCoordinates(this.points);
      }
  }

  class FreehandPolygon extends mix(Plot,Polygon) {

      constructor(points) {
          super(points);
          this.type = PlotTypes.FREEHAND_POLYGON;
          this.freehand = true;
          this.setPoints(points);
      }
      generate() {
          var count = this.getPointCount();
          if(count < 2) {
              return;
          }
          this.setCoordinates([this.points]);
      }
      

  }

  class GatheringPlace extends mix(Plot, Polygon) {

      constructor(points) {
          super(points);
          this.type = PlotTypes.GATHERING_PLACE;
          this.t = 0.4;
          this.fixPointCount = 3;
          this.setPoints(points);
      }
      generate() {
          var pnts = this.getPoints();
          if (pnts.length < 2) {
              return;
          }
          if (this.getPointCount() == 2) {
              var mid$1 = mid(pnts[0], pnts[1]);
              var d = distance$1(pnts[0], mid$1) / 0.9;
              var pnt = getThirdPoint(pnts[0], mid$1, Constants.HALF_PI, d, true);
              pnts = [pnts[0], pnt, pnts[1]];
          }
          var mid$1 = mid(pnts[0], pnts[2]);
          pnts.push(mid$1, pnts[0], pnts[1]);

          var normals = [];
          for (var i = 0; i < pnts.length - 2; i++) {
              var pnt1 = pnts[i];
              var pnt2 = pnts[i + 1];
              var pnt3 = pnts[i + 2];
              var normalPoints = getBisectorNormals(this.t, pnt1, pnt2, pnt3);
              normals = normals.concat(normalPoints);
          }
          var count = normals.length;
          normals = [normals[count - 1]].concat(normals.slice(0, count - 1));
          var pList = [];
          for (i = 0; i < pnts.length - 2; i++) {
              pnt1 = pnts[i];
              pnt2 = pnts[i + 1];
              pList.push(pnt1);
              for (var t = 0; t <= Constants.FITTING_COUNT; t++) {
                  var pnt = getCubicValue(t / Constants.FITTING_COUNT, pnt1, normals[i * 2], normals[i * 2 + 1], pnt2);
                  pList.push(pnt);
              }
              pList.push(pnt2);
          }
          this.setCoordinates([pList]);
      }


  }

  class Lune extends mix(Plot, Polygon) {

      constructor(points) {
          super(points);
          this.type = PlotTypes.LUNE;
          this.fixPointCount = 3;
          this.setPoints(points);
      }
      generate() {
          if (this.getPointCount() < 2) {
              return;
          }
          var pnts = this.getPoints();
          if (this.getPointCount() == 2) {
              var mid$1 = mid(pnts[0], pnts[1]);
              var d = distance$1(pnts[0], mid$1);
              var pnt = getThirdPoint(pnts[0], mid$1, Constants.HALF_PI, d);
              pnts.push(pnt);
          }
          var pnt1 = pnts[0];
          var pnt2 = pnts[1];
          var pnt3 = pnts[2];
          var center = getCircleCenterOfThreePoints(pnt1, pnt2, pnt3);
          var radius = distance$1(pnt1, center);

          var angle1 = getAzimuth(pnt1, center);
          var angle2 = getAzimuth(pnt2, center);
          if (isClockWise(pnt1, pnt2, pnt3)) {
              var startAngle = angle2;
              var endAngle = angle1;
          }
          else {
              startAngle = angle1;
              endAngle = angle2;
          }
          var pnts = getArcPoints(center, radius, startAngle, endAngle);
          pnts.push(pnts[0]);
          this.setCoordinates([pnts]);


      }
  }

  // import Constants from '../constants'
  class Sector extends mix(Plot, Polygon) {

      constructor(points) {
          super(points);
          this.type = PlotTypes.SECTOR;
          this.fixPointCount = 3;
          this.setPoints(points);
      }
      generate() {
          if (this.getPointCount() < 2)
              return;
          if (this.getPointCount() == 2)
              this.setCoordinates([this.points]);
          else {
              var pnts = this.getPoints();
              var center = pnts[0];
              var pnt2 = pnts[1];
              var pnt3 = pnts[2];
              var radius = distance$1(pnt2, center);
              var startAngle = getAzimuth(pnt2, center);
              var endAngle = getAzimuth(pnt3, center);
              var pList = getArcPoints(center, radius, startAngle, endAngle);
              pList.push(center, pList[0]);
              this.setCoordinates([pList]);
          }

      }
  }

  class SquadCombat extends AttackArrow {

      constructor(points) {
          super(points);
          this.type = PlotTypes.SQUAD_COMBAT;
          this.headHeightFactor = 0.18;
          this.headWidthFactor = 0.3;
          this.neckHeightFactor = 0.85;
          this.neckWidthFactor = 0.15;
          this.tailWidthFactor = 0.1;
          this.setPoints(points);
      }
      generate() {
          var count = this.getPointCount();
          if (count < 2) {
              return;
          }
          var pnts = this.getPoints();
          var tailPnts = this.getTailPoints(pnts);
          var headPnts = this.getArrowHeadPoints(pnts, tailPnts[0], tailPnts[1]);
          var neckLeft = headPnts[0];
          var neckRight = headPnts[4];
          var bodyPnts = this.getArrowBodyPoints(pnts, neckLeft, neckRight, this.tailWidthFactor);
          var count = bodyPnts.length;
          var leftPnts = [tailPnts[0]].concat(bodyPnts.slice(0, count / 2));
          leftPnts.push(neckLeft);
          var rightPnts = [tailPnts[1]].concat(bodyPnts.slice(count / 2, count));
          rightPnts.push(neckRight);

          leftPnts = getQBSplinePoints(leftPnts);
          rightPnts = getQBSplinePoints(rightPnts);

          this.setCoordinates([leftPnts.concat(headPnts, rightPnts.reverse())]);
      }

      getTailPoints(points) {
          var allLen = getBaseLength(points);
          var tailWidth = allLen * this.tailWidthFactor;
          var tailLeft = getThirdPoint(points[1], points[0], Constants.HALF_PI, tailWidth, false);
          var tailRight = getThirdPoint(points[1], points[0], Constants.HALF_PI, tailWidth, true);
          return [tailLeft, tailRight];
      };
  }

  //--fix dyj 目前mix函数只支持简单对象的拷贝，Plot必须放在复杂对象前面
  class StraightArrow extends mix(Plot, LineString) {

      constructor(points) {
          super(points);
          this.type = PlotTypes.STRAIGHT_ARROW;
          this.fixPointCount = 2;
          this.maxArrowLength = 3000000;
          this.arrowLengthScale = 5;
          this.setPoints(points);
      }
      generate() {
          if (this.getPointCount() < 2) {
              return;
          }
          var pnts = this.getPoints();
          var pnt1 = pnts[0];
          var pnt2 = pnts[1];
          var distance = distance$1(pnt1, pnt2);
          var len = distance / this.arrowLengthScale;
          len = len > this.maxArrowLength ? this.maxArrowLength : len;
          var leftPnt = getThirdPoint(pnt1, pnt2, Math.PI / 6, len, false);
          var rightPnt = getThirdPoint(pnt1, pnt2, Math.PI / 6, len, true);
          this.setCoordinates([pnt1, pnt2, leftPnt, pnt2, rightPnt]);
      }


  }

  class TailedAttackArrow extends AttackArrow {

      constructor(points) {
          super(points);
          this.type = PlotTypes.TAILED_ATTACK_ARROW;
          this.headHeightFactor = 0.18;
          this.headWidthFactor = 0.3;
          this.neckHeightFactor = 0.85;
          this.neckWidthFactor = 0.15;
          this.tailWidthFactor = 0.1;
          this.headTailFactor = 0.8;
          this.swallowTailFactor = 1;
          this.swallowTailPnt = null;
          this.setPoints(points);
      }
      generate() {
          var count = this.getPointCount();
          if (count < 2) {
              return;
          }
          if (this.getPointCount() == 2) {
              this.setCoordinates([this.points]);
              return;
          }
          var pnts = this.getPoints();
          var tailLeft = pnts[0];
          var tailRight = pnts[1];
          if (isClockWise(pnts[0], pnts[1], pnts[2])) {
              tailLeft = pnts[1];
              tailRight = pnts[0];
          }
          var midTail = mid(tailLeft, tailRight);
          var bonePnts = [midTail].concat(pnts.slice(2));
          var headPnts = this.getArrowHeadPoints(bonePnts, tailLeft, tailRight);
          var neckLeft = headPnts[0];
          var neckRight = headPnts[4];
          var tailWidth = distance$1(tailLeft, tailRight);
          var allLen = getBaseLength(bonePnts);
          var len = allLen * this.tailWidthFactor * this.swallowTailFactor;
          this.swallowTailPnt = getThirdPoint(bonePnts[1], bonePnts[0], 0, len, true);
          var factor = tailWidth / allLen;
          var bodyPnts = this.getArrowBodyPoints(bonePnts, neckLeft, neckRight, factor);
          var count = bodyPnts.length;
          var leftPnts = [tailLeft].concat(bodyPnts.slice(0, count / 2));
          leftPnts.push(neckLeft);
          var rightPnts = [tailRight].concat(bodyPnts.slice(count / 2, count));
          rightPnts.push(neckRight);

          leftPnts = getQBSplinePoints(leftPnts);
          rightPnts = getQBSplinePoints(rightPnts);

          this.setCoordinates([leftPnts.concat(headPnts, rightPnts.reverse(), [this.swallowTailPnt, leftPnts[0]])]);
      }


  }

  class TailedSquadCombat extends AttackArrow {

      constructor(points) {
          super(points);
          this.type = PlotTypes.TAILED_SQUAD_COMBAT;
          this.headHeightFactor = 0.18;
          this.headWidthFactor = 0.3;
          this.neckHeightFactor = 0.85;
          this.neckWidthFactor = 0.15;
          this.tailWidthFactor = 0.1;
          this.swallowTailFactor = 1;
          this.swallowTailPnt = null;
          this.setPoints(points);
      }
      generate() {
          var count = this.getPointCount();
          if (count < 2) {
              return;
          }
          var pnts = this.getPoints();
          var tailPnts = this.getTailPoints(pnts);
          var headPnts = this.getArrowHeadPoints(pnts, tailPnts[0], tailPnts[2]);
          var neckLeft = headPnts[0];
          var neckRight = headPnts[4];
          var bodyPnts = this.getArrowBodyPoints(pnts, neckLeft, neckRight, this.tailWidthFactor);
          var count = bodyPnts.length;
          var leftPnts = [tailPnts[0]].concat(bodyPnts.slice(0, count / 2));
          leftPnts.push(neckLeft);
          var rightPnts = [tailPnts[2]].concat(bodyPnts.slice(count / 2, count));
          rightPnts.push(neckRight);

          leftPnts = getQBSplinePoints(leftPnts);
          rightPnts = getQBSplinePoints(rightPnts);

          this.setCoordinates([leftPnts.concat(headPnts, rightPnts.reverse(), [tailPnts[1], leftPnts[0]])]);
      }

      getTailPoints(points) {
          var allLen = getBaseLength(points);
          var tailWidth = allLen * this.tailWidthFactor;
          var tailLeft = getThirdPoint(points[1], points[0], Constants.HALF_PI, tailWidth, false);
          var tailRight = getThirdPoint(points[1], points[0], Constants.HALF_PI, tailWidth, true);
          var len = tailWidth * this.swallowTailFactor;
          var swallowTailPnt = getThirdPoint(points[1], points[0], 0, len, true);
          return [tailLeft, swallowTailPnt, tailRight];
      };


  }

  //--fix dyj 目前mix函数只支持简单对象的拷贝，Plot必须放在复杂对象前面
  class Arc extends mix(Plot, LineString) {

      constructor(points) {
          super(points);
          this.type = PlotTypes.ARC;
          this.fixPointCount = 3;
          this.setPoints(points);
      }
      generate() {
          var count = this.getPointCount();
          if (count < 2) {
              return;
          }
          if (count == 2) {
              this.setCoordinates(this.points);
          } else {
              var pnt1 = this.points[0];
              var pnt2 = this.points[1];
              var pnt3 = this.points[2];
              var center = getCircleCenterOfThreePoints(pnt1, pnt2, pnt3);
              var radius = distance$1(pnt1, center);

              var angle1 = getAzimuth(pnt1, center);
              var angle2 = getAzimuth(pnt2, center);
              if (isClockWise(pnt1, pnt2, pnt3)) {
                  var startAngle = angle2;
                  var endAngle = angle1;
              }
              else {
                  startAngle = angle1;
                  endAngle = angle2;
              }
              this.setCoordinates(getArcPoints(center, radius, startAngle, endAngle));
          }
      }

  }

  /**
  	 * @classdesc 创建图元的基类
  	 * @author daiyujie
   */
  class PlotFactory {
  	/**
  	 * @static
  	 * @param {PlotTypes} type 
  	 * @param {ol.Coordinate} points 
  	 */
  	static createPlot(type, points) {
  		switch (type) {
  			case PlotTypes.MARKER:
  				return new Marker(points);
  			case PlotTypes.POLYLINE:
  				return new Polyline$1(points);
  			case PlotTypes.POLYGON:
  				return new Polygon$1(points);
  			case PlotTypes.CIRCLE:
  				return new Circle$1(points);
  			case PlotTypes.ELLIPSE:
  				return new Ellipse(points);
  			case PlotTypes.RECTANGLE:
  				return new Rectangle(points);
  			case PlotTypes.ARC:
  				return new Arc(points);
  			case PlotTypes.ATTACK_ARROW:
  				return new AttackArrow(points);
  			case PlotTypes.CLOSED_CURVE:
  				return new ClosedCurve(points);
  			case PlotTypes.CURVE:
  				return new Curve(points);
  			case PlotTypes.DOUBLE_ARROW:
  				return new DoubleArrow(points);
  			case PlotTypes.FINE_ARROW:
  				return new FineArrow(points);
  			case PlotTypes.ASSAULT_DIRECTION:
  				return new AssaultDirection(points);
  			case PlotTypes.FREEHAND_LINE:
  				return new FreehandLine(points);
  			case PlotTypes.FREEHAND_POLYGON:
  				return new FreehandPolygon(points);
  			case PlotTypes.GATHERING_PLACE:
  				return new GatheringPlace(points);
  			case PlotTypes.LUNE:
  				return new Lune(points);
  			case PlotTypes.SECTOR:
  				return new Sector(points);
  			case PlotTypes.SQUAD_COMBAT:
  				return new SquadCombat(points);
  			case PlotTypes.STRAIGHT_ARROW:
  				return new StraightArrow(points);
  			case PlotTypes.TAILED_ATTACK_ARROW:
  				return new TailedAttackArrow(points);
  			case PlotTypes.TAILED_SQUAD_COMBAT:
  				return new TailedSquadCombat(points);

  		}
  		return null;
  	}

  }

  class FeatureEvent extends Event {

  	/**
     * @classdesc 传递Feature的Event
     * 用来传递feature
     * @constructs
     * @extends {ol.Event}
     * @author daiyujie
     * @param {String} type 事件类型
     * @param {ol.Feature} feature 图元
     */
  	constructor(type, feature) {
  		super(type);
  		this.feature = feature;
  	}
  }
  /**
   * 当图元被激活时触发
   * @static
   */
  FeatureEvent.ACTIVATE = 'activate_feature';
  /**
   * 当图元被取消激活时触发
   * @static
   */
  FeatureEvent.DEACTIVATE = 'deactivate_feature';
  /**
   * 当绘制结束时触发
   * @static
   */
  FeatureEvent.DRAW_END = 'draw_end';
  /**
   * 绘制开始时触发
   * @static
   */
  FeatureEvent.DRAW_START = 'draw_start';

  class DrawEvent$1 extends Event {

  	/**
     * @classdesc 传递Feature的Event
     * 用来传递feature
     * @constructs
     * @extends {ol.Event}
     * @author daiyujie
     * @param {String} type 事件类型
     * @param {ol.Feature} feature 图元
     */
  	constructor(type, drawstate) {
  		super(type);
  		this.drawstate = drawstate;
  	}
  }
  /**
   * 添加控制点时触发
   * @static
   */
  DrawEvent$1.ADD_CONTROL_POINT = 'add_control_point';
  /**
   * 绘制过程中的鼠标移动事件
   * @static
   */
  DrawEvent$1.ADDING_MOUSE_MOVE = 'adding_mouse_move';

  /*eslint-disable*/
  function guid(isShort) {
      const s = (isShort ? 'yxxxxxxyxx' : 'xxxxxxxx-xxxx-yxxx-yxxx-xxxxxxxxxxxx').replace(/[xy]/g, (c) => {
          const r = Math.random() * 16 | 0;
          const v = c === 'x' ? r : (r & 0x3 | 0x8);
          return v.toString(16);
      });
      return s.toLowerCase();
  }

  let _stampId = 0;

  function stamp(obj) {
      var key = '_p_id_';
      obj[key] = obj[key] || _stampId++;
      return obj[key];
  }function combineOpts(dest) {
  	var i, j, len, src;
  	for (j = 1, len = arguments.length; j < len; j++) {
  		src = arguments[j];
  		for (i in src) {
  			dest[i] = src[i];
  		}
  	}
  	return dest;
  }
  //--�򵥶���Ŀ�������֧��function ��
  function deepcopy(object) {
  	return JSON.parse(JSON.stringify(object));
  }
  //--fix dyj Ϊ�˰��¼���ʱ�򣬲�֧�ִ���scope.
  function connectEvent(target, event_name, fn, scope) {

  	if (!target.on || typeof target.on != 'function')
  		return;

  	if (!fn || !event_name)
  		return;

  	const $fn = (e) => {
  		fn.call(scope || null, e);
  	};

  	target.on(event_name, $fn);

  	return $fn;
  }
  //--fix dyj Ϊ�˱������¼���ʱ��fn���ݿյ��½���������͵��¼���װ
  function disconnectEvent(target, event_name, fn) {
  	if (!target.un || typeof target.un != 'function')
  		return;

  	if (!fn || !event_name)
  		return;

  	target.un(event_name, fn);
  }

  class PlotDraw extends Observable {

  	/**
  	 * @classdesc 图元进行编辑的绘制的基类。
  	 * @author daiyujie
  	 * @extends {ol.Observable}
  	 * @constructs
  	 * @param {ol.Map} map 地图对象
  	 */
  	constructor(map) {
  		super();
  		this.points = null;
  		this.plot = null;
  		this.feature = null;
  		this.plotType = null;
  		this.mapViewport = null;
  		this.dblClickZoomInteraction = null;
  		var stroke = new Stroke({ color: '#FF0000', width: 2 });
  		var fill = new Fill({ color: 'rgba(0,255,0,0.4)' });
  		this.style = new Style$1({ fill: fill, stroke: stroke });
  		this.featureSource = new VectorSource();
  		this.drawOverlay = new VectorLayer({
  			source: this.featureSource,
  			// zIndex:999
  		});
  		this.drawOverlay.setStyle(this.style);
  		this.setMap(map);
  	}
  	/**
  	 * @ignore
  	 */
  	setMap(map) {
  		this.map = map;
  		this.mapViewport = this.map.getViewport();
  	}
  	/**
  	 * 激活绘制工具
  	 * @param {PlotTypes} type 要绘制的图元类型 
  	 */
  	activate(type) {
  		this.deactivate();
  		this.deactivateMapTools();

  		this._ls_mapfirstclick = connectEvent(this.map, "click", this.mapFirstClickHandler, this);
  		this.plotType = type;
  		this.drawOverlay.setMap(this.map);
  		// .addLayer();
  	}
  	/**
  	 * 取消激活绘制工具
  	 */
  	deactivate() {
  		this.disconnectEventHandlers();
  		this.map.removeLayer(this.drawOverlay);
  		this.featureSource.clear();
  		this.points = [];
  		this.plot = null;
  		this.feature = null;
  		this.plotType = null;
  		this.activateMapTools();
  	}
  	/**
  	 * 工具是否在绘制
  	 * @return {Boolean} 是否在绘制
  	 */
  	isDrawing() {
  		return this.plotType != null;
  	}
  	/**
  	 * @ignore
  	 */
  	mapFirstClickHandler(e) {
  		this.points.push(e.coordinate);
  		this.plot = PlotFactory.createPlot(this.plotType, this.points);
  		// this.plot = new LineString([[114.811935424807831,37.092847824096935],[120.811935424807831,45.092847824096935]])
  		this.feature = new Feature(this.plot);
  		this.featureSource.addFeature(this.feature);
  		disconnectEvent(this.map,"click", this._ls_mapfirstclick);
  		this._ls_mapfirstclick = null;
  		this.dispatchEvent(new DrawEvent$1(DrawEvent$1.ADD_CONTROL_POINT,{
  			freehand:this.plot.freehand,
  			current:this.plot.getPointCount(),
  			total:this.plot.fixPointCount,
  			position:e.coordinate
  		}));
  		//
  		if (this.plot.fixPointCount == this.plot.getPointCount()) {
  			this.mapDoubleClickHandler(e);
  			return;
  		}
  		//
  		this._ls_mapNextClick = connectEvent(this.map, 'click', this.mapNextClickHandler, this);
  		// this._ls_mapNextClick = this.map.on("click", (e) => {
  		// 	this.mapNextClickHandler(e)
  		// }).listener;
  		if (!this.plot.freehand) {
  			this._ls_dbclick = connectEvent(this.map, 'dblclick', this.mapDoubleClickHandler, this);
  		}
  		this._ls_pointmove = connectEvent(this.map, 'pointermove', this.mapMouseMoveHandler, this);

  		// goog.events.listen(this.mapViewport, P.Event.EventType.MOUSEMOVE,
  		// 	this.mapMouseMoveHandler, false, this);
  	}
  	/**
  	 * @ignore
  	 */
  	mapMouseMoveHandler(e) {
  		var coordinate = e.coordinate;
  		if (distance$1(coordinate, this.points[this.points.length - 1]) < Constants.ZERO_TOLERANCE)
  			return;
  		if (!this.plot.freehand) {
  			var pnts = this.points.concat([coordinate]);
  			this.plot.setPoints(pnts);
  		} else {
  			this.points.push(coordinate);
  			this.plot.setPoints(this.points);
  		}
  		this.dispatchEvent(new DrawEvent$1(DrawEvent$1.ADDING_MOUSE_MOVE,{
  			freehand:this.plot.freehand,
  			current:this.plot.getPointCount(),
  			total:this.plot.fixPointCount,
  			position:e.coordinate
  		}));
  	}
  	/**
  	 * @ignore
  	 */
  	mapNextClickHandler(e) {
  		if (!this.plot.freehand) {
  			if (distance$1(e.coordinate, this.points[this.points.length - 1]) < Constants.ZERO_TOLERANCE)
  				return;
  		}
  		this.points.push(e.coordinate);
  		this.plot.setPoints(this.points);
  		this.dispatchEvent(new DrawEvent$1(DrawEvent$1.ADD_CONTROL_POINT,{
  			freehand:this.plot.freehand,
  			current:this.plot.getPointCount(),
  			total:this.plot.fixPointCount,
  			position:e.coordinate
  		}));
  		if (this.plot.fixPointCount == this.plot.getPointCount()) {
  			this.mapDoubleClickHandler(e);
  			return;
  		}
  		if (this.plot && this.plot.freehand) {
  			this.mapDoubleClickHandler(e);
  		}
  	}
  	/**
  	 * @ignore
  	 */
  	mapDoubleClickHandler(e) {
  		this.disconnectEventHandlers();
  		this.plot.finishDrawing();
  		e.preventDefault();
  		this.drawEnd();
  	}
  	/**
  	 * @ignore
  	 */
  	disconnectEventHandlers() {
  		disconnectEvent(this.map, "click", this._ls_mapfirstclick);
  		disconnectEvent(this.map, "click", this._ls_mapNextClick);
  		disconnectEvent(this.map, 'pointermove', this._ls_pointmove);
  		disconnectEvent(this.map, "dblclick", this._ls_dbclick);

  		this._ls_mapfirstclick = null;
  		this._ls_mapNextClick = null;
  		this._ls_pointmove = null;
  		this._ls_dbclick = null;
  	}
  	/**
  	 * @ignore
  	 */
  	drawEnd(feature) {
  		this.featureSource.removeFeature(this.feature);
  		this.activateMapTools();
  		this.disconnectEventHandlers();
  		this.map.removeOverlay(this.drawOverlay);
  		this.points = [];
  		this.plot = null;
  		this.plotType = null;
  		this.dispatchEvent(new FeatureEvent(FeatureEvent.DRAW_END, this.feature));
  		this.feature = null;
  	}
  	/**
  	 * @ignore
  	 */
  	deactivateMapTools() {
  		var interactions = this.map.getInteractions();
  		var length = interactions.getLength();
  		for (var i = 0; i < length; i++) {
  			var item = interactions.item(i);
  			if (item instanceof DoubleClickZoom) {
  				this.dblClickZoomInteraction = item;
  				interactions.remove(item);
  				break;
  			}
  		}
  	}
  	/**
  	 * @ignore
  	 */
  	activateMapTools() {
  		if (this.dblClickZoomInteraction != null) {
  			this.map.getInteractions().push(this.dblClickZoomInteraction);
  			this.dblClickZoomInteraction = null;
  		}
  	}

  }

  function create$3(tagName, className, parent, id) {
      var element = document.createElement(tagName);
      element.className = className || '';
      if (id) {
          element.id = id;
      }
      if (parent) {
          parent.appendChild(element);
      }
      return element;
  }
  function createHidden(tagName, parent, id) {
      var element = document.createElement(tagName);
      element.style.display = 'none';
      if (id) {
          element.id = id;
      }
      if (parent) {
          parent.appendChild(element);
      }
      return element;
  }
  function remove$1(element, parent) {
      if (parent && element) {
          parent.removeChild(element);
      }
  }
  function get$4(id) {
      return document.getElementById(id);
  }
  function getDomEventKey(type, fn, context) {
      return '_p_dom_event_' + type + '_' + stamp(fn) + (context ? '_' + stamp(context) : '');
  }
  function addListener(element, type, fn, context) {
      var self = this,
          eventKey = getDomEventKey(type, fn, context),
          handler = element[eventKey];

      if (handler) {
          return self;
      }

      handler = function (e) {
          return fn.call(context || element, e);
      };

      if ('addEventListener' in element) {
          element.addEventListener(type, handler, false);
      } else if ('attachEvent' in element) {
          element.attachEvent('on' + type, handler);
      }

      element[eventKey] = handler;
      return self;
  }
  function removeListener(element, type, fn, context) {
      var self = this,
          eventKey = getDomEventKey(type, fn, context),
          handler = element[eventKey];

      if (!handler) {
          return self;
      }

      if ('removeEventListener' in element) {
          element.removeEventListener(type, handler, false);
      } else if ('detachEvent' in element) {
          element.detachEvent('on' + type, handler);
      }

      element[eventKey] = null;

      return self;
  }

  class PlotEdit extends Observable {

  	/**
  	 * @classdesc 图元进行编辑的基类。用来创建控制点，绑定控制点事件，对feature的数据进行处理
  	 * @author daiyujie
  	 * @extends {ol.Observable}
  	 * @constructs
  	 * @param {ol.Map} map 地图对象
  	 */
  	constructor(map) {
  		if (!map) {
  			return;
  		}
  		super();
  		this.activePlot = null;
  		this.startPoint = null;
  		this.ghostControlPoints = null;
  		this.controlPoints = null;
  		this.map = map;
  		this.mapViewport = this.map.getViewport();
  		this.mouseOver = false;
  		this.elementTable = {};
  		this.activeControlPointId = null;
  		this.mapDragPan = null;

  		//--listener
  		this._ls_pointermove = null;
  		this._ls_pointdrag = null;
  		this._ls_pointerdown = null;
  		this._ls_pointup = null;
  		//--这个比较特殊。绑定在map.mapBrowserEventHandler_上
  		this._is_controlpoint_pointermove = null;

  	}
  	initHelperDom() {
  		if (!this.map || !this.activePlot) {
  			return;
  		}
  		var parent = this.getMapParentElement();
  		if (!parent) {
  			return;
  		}
  		var hiddenDiv = createHidden('div', parent, Constants.HELPER_HIDDEN_DIV);

  		var cPnts = this.getControlPoints();
  		for (var i = 0; i < cPnts.length; i++) {
  			var id = Constants.HELPER_CONTROL_POINT_DIV + '-' + i;
  			create$3('div', Constants.HELPER_CONTROL_POINT_DIV, hiddenDiv, id);
  			this.elementTable[id] = i;
  		}
  	};

  	getMapParentElement() {
  		var mapElement = this.map.getTargetElement();
  		if (!mapElement) {
  			return;
  		}
  		return mapElement.parentNode;
  	};

  	destroyHelperDom() {
  		//
  		if (this.controlPoints) {
  			for (var i = 0; i < this.controlPoints.length; i++) {
  				this.map.removeOverlay(this.controlPoints[i]);
  				var element = get$4(Constants.HELPER_CONTROL_POINT_DIV + '-' + i);
  				if (element) {
  					removeListener(element, 'mousedown', this.controlPointMouseDownHandler, this);
  					// DomUtils.removeListener(element, 'mousemove', this.controlPointMouseMoveHandler2, this);
  				}
  			}
  			this.controlPoints = null;
  		}
  		//
  		var parent = this.getMapParentElement();
  		var hiddenDiv = get$4(Constants.HELPER_HIDDEN_DIV);
  		if (hiddenDiv && parent) {
  			remove$1(hiddenDiv, parent);
  		}
  	};

  	initControlPoints() {
  		if (!this.map) {
  			return;
  		}
  		this.controlPoints = [];
  		var cPnts = this.getControlPoints();
  		for (var i = 0; i < cPnts.length; i++) {
  			var id = Constants.HELPER_CONTROL_POINT_DIV + '-' + i;
  			var element = get$4(id);
  			var pnt = new Overlay({
  				id: id,
  				position: cPnts[i],
  				positioning: 'center-center',
  				element: element,
  			});
  			this.controlPoints.push(pnt);
  			this.map.addOverlay(pnt);
  			addListener(element, 'mousedown', this.controlPointMouseDownHandler, this);
  			//--mobile
  			addListener(element, 'touchstart', this.controlPointMouseDownHandler, this);
  		}
  		//--fixdyj 赋值
  		this._is_controlpoint_pointermove = (e) => {
  			this.controlPointMouseMoveHandler(e);
  		};
  		//--fix dyj 在地图上无论怎么绑都无法触发。
  		//--因为被map屏蔽了
  		this.map.mapBrowserEventHandler_.addEventListener('pointermove', this._is_controlpoint_pointermove);

  	};

  	controlPointMouseDownHandler(e) {
  		//--fix dyj屏蔽移动端上下滑动事件
  		e.preventDefault();
  		var id = e.target.id;
  		this.activeControlPointId = id;
  		addListener(e.target, 'mouseup', this.controlPointMouseUpHandler, this);
  		addListener(e.target, 'touchend', this.controlPointMouseUpHandler, this);
  	};

  	controlPointMouseMoveHandler(e) {
  		var coordinate = e.coordinate;
  		if (this.activeControlPointId) {
  			var plot = this.activePlot.getGeometry();
  			var index = this.elementTable[this.activeControlPointId];
  			plot.updatePoint(coordinate, index);
  			var overlay = this.map.getOverlayById(this.activeControlPointId);
  			overlay.setPosition(coordinate);
  		}
  	};

  	controlPointMouseUpHandler(e) {
  		this.activeControlPointId = null;
  		removeListener(e.target, 'mouseup', this.controlPointMouseUpHandler, this);
  		removeListener(e.target, 'touchend', this.controlPointMouseUpHandler, this);
  	};

  	activate(plot) {

  		if (!plot || !(plot instanceof Feature) || plot == this.activePlot) {
  			return;
  		}

  		var geom = plot.getGeometry();
  		if (!geom.isPlot || !geom.isPlot()) {
  			return;
  		}

  		this.deactivate();

  		this.activePlot = plot;
  		//--fix dyj 开始既绑定feature的拖动事件
  		this._ls_pointermove = connectEvent(this.map,"pointermove", this.plotMouseOverOutHandler,this);
  		//--fix dyj 开始既绑定feature的拖动事件
  		this._ls_pointerdown = connectEvent(this.map,'pointerdown',this.plotMouseDownHandler,this);

  		this.initHelperDom();
  		//
  		this.initControlPoints();
  		//--FIX dyj 这一贞无法拿到控制点元素的offsetWidth 和 offsetHeight。
  		//--overLay刷新逻辑对于center-center布局有问题；
  		//--故强制刷新一帧
  		this.map.render();


  		this.dispatchEvent(new FeatureEvent(FeatureEvent.ACTIVATE, this.activePlot));
  	};

  	getControlPoints() {
  		if (!this.activePlot) {
  			return [];
  		}
  		var geom = this.activePlot.getGeometry();
  		return geom.getPoints();
  	};
  	/**
  	 * @ignore
  	 * pc端移动到feature上改变指针样式
  	 */
  	plotMouseOverOutHandler(e) {
  		var feature = this.map.forEachFeatureAtPixel(e.pixel, function (feature, layer) {
  			return feature;
  		});
  		if (feature && feature == this.activePlot) {
  			if (!this.mouseOver) {
  				this.mouseOver = true;
  				this.map.getViewport().style.cursor = 'move';
  			}
  		} else {
  			if (this.mouseOver) {
  				this.mouseOver = false;
  				this.map.getViewport().style.cursor = 'default';
  			}
  		}
  	};

  	plotMouseDownHandler(e) {
  		var feature = this.map.forEachFeatureAtPixel(e.pixel, function (feature, layer) {
  			return feature;
  		});

  		if (!feature || feature != this.activePlot)
  			return;
  		//--fix dyj 屏蔽浏览器上下滑动事件
  		e.preventDefault();

  		this.ghostControlPoints = this.getControlPoints();
  		this.startPoint = e.coordinate;
  		this.disableMapDragPan();
  		this._ls_pointup = connectEvent(this.map,'pointerup', this.plotMouseUpHandler,this);
  		this._ls_pointdrag = connectEvent(this.map,'pointerdrag', this.plotMouseMoveHandler,this);
  	};

  	plotMouseMoveHandler(e) {
  		e.stopPropagation();
  		e.preventDefault();
  		var point = e.coordinate;
  		var dx = point[0] - this.startPoint[0];
  		var dy = point[1] - this.startPoint[1];
  		var newPoints = [];
  		for (var i = 0; i < this.ghostControlPoints.length; i++) {
  			var p = this.ghostControlPoints[i];
  			var coordinate = [p[0] + dx, p[1] + dy];
  			newPoints.push(coordinate);
  			var id = Constants.HELPER_CONTROL_POINT_DIV + '-' + i;
  			var overlay = this.map.getOverlayById(id);
  			overlay.setPosition(coordinate);
  			overlay.setPositioning('center-center');
  		}
  		var plot = this.activePlot.getGeometry();
  		plot.setPoints(newPoints);
  	};

  	plotMouseUpHandler(e) {
  		this.enableMapDragPan();
  		disconnectEvent(this.map,'pointerup', this._ls_pointup);
  		disconnectEvent(this.map,'pointerdrag', this._ls_pointdrag);

  		this._ls_pointup = null;
  		this._ls_pointdrag = null;
  	};

  	disconnectEventHandlers() {
  		disconnectEvent(this.map,'pointermove', this._ls_pointermove);
  		disconnectEvent(this.map,'pointerdown', this._ls_pointerdown);
  		disconnectEvent(this.map,'pointerup', this._ls_pointup);
  		disconnectEvent(this.map,'pointerdrag', this._ls_pointdrag);
  		this._ls_pointermove = null;
  		this._ls_pointerdown = null;
  		this._ls_pointup = null;
  		this._ls_pointdrag = null;
  		//--fix dyj;这个事件解绑比较特殊,必须判定。不然会移除所有的监听器。干坏map
  		if(this._is_controlpoint_pointermove)
  		{
  		this.map.mapBrowserEventHandler_.removeEventListener('pointermove', this._is_controlpoint_pointermove);
  			this._is_controlpoint_pointermove = null;
  		}
  	};

  	deactivate() {
  		let temp_plot = null;
  		if (this.activePlot) {
  			temp_plot = this.activePlot;
  		}
  		this.activePlot = null;
  		this.mouseOver = false;
  		this.destroyHelperDom();
  		this.disconnectEventHandlers();
  		this.elementTable = {};
  		this.activeControlPointId = null;
  		this.startPoint = null;

  		if (temp_plot)
  			this.dispatchEvent(new FeatureEvent(FeatureEvent.DEACTIVATE, temp_plot));
  	};

  	disableMapDragPan() {
  		var interactions = this.map.getInteractions();
  		var length = interactions.getLength();
  		for (var i = 0; i < length; i++) {
  			var item = interactions.item(i);
  			if (item instanceof DragPan) {
  				this.mapDragPan = item;
  				item.setActive(false);
  				break;
  			}
  		}
  	};

  	enableMapDragPan() {
  		if (this.mapDragPan != null) {
  			this.mapDragPan.setActive(true);
  			this.mapDragPan = null;
  		}
  	};
  }

  class FeatureOperatorEvent extends Event {
  	/**
  	* @classdesc 传递FeatureOperator的Event
  	* 用来传递feature
  	* @constructs
      * @extends {ol.Event}
  	* @author daiyujie
  	* @param {String} type 事件类型
  	* @param {FeatureOperator} feature 图元操作类
  	*/
  	constructor(type, feature_operator) {
  		super(type);
  		this.feature_operator = feature_operator;
  	}
  }
  /**
   * 图元被激活时触发
   * @static
   */
  FeatureOperatorEvent.ACTIVATE = 'activate_feature';
  /**
   * 图元被取消激活时触发
   * @static
   */
  FeatureOperatorEvent.DEACTIVATE = 'deactivate_feature';

  class FTStyle {
      /**
       * @classdesc 样式基类对象
       * @author daiyujie
       * @constructs
       */
      constructor() {
          this._style = {};
          this.isDestoryed = false;
      }
      /**
       * 将json类型的样式，转换为ol.style
       * @return {ol.Style}
       */
      parse() {
          return new Style();
      }
      /**
       * 序列化样式
       * @return {JSON}
       */
      serialize() {
          return deepcopy(this._style);
      }
      /**
       * 设置样式
       * @param {JSON} json_style 
       */
      setStyle(json_style) {
          this._style = json_style;
      }
      /**
       * 销毁对象
       */
      destory() {
          this._style = {};
          this.isDestoryed = true;
      }

  }

  class MarkerStyle extends FTStyle {

      /**
      * @class MarkerStyle
      * @classdesc 点类样式
      * @extends {FTStyle}
      * @author daiyujie
      * @constructs
      */
      constructor() {
          super();
          this._style = {
              image: {
                  //--ol.Image 的全部属性
                  icon: {
                      src: './assets/marker-begin.png',
                      offset: [0, 0],
                      opacity: 1,
                      scale: 1,
                      anchor: [0.5, 0.5],
                      offset: [0, 0],
                      scale: 1
                  }
              }

          };
      }
      parse() {
          let image = null;

          if (this._style.image) {
              if (this._style.image.icon) {
                  image = new Icon(this._style.image.icon);
              }
          }

          return new Style$1({
              image: image
          });
      }
    

  }

  class PolyLineStyle extends FTStyle {

      /**
       * @classdesc 折线类样式
       * @author daiyujie
       * @extends {FTStyle}
       * @constructs
       */
      constructor() {
          super();
          this._style = {
              //--ol.style.Stroke所有选项
              stroke: {
                  color: '#FF0000',
                  width: 3,
                  lineDash: [10, 10, 10]
              }
          };
      }
      parse() {
          let stroke = null;
          if (this._style.stroke) {
              stroke = new Stroke(this._style.stroke);
          }
          return new Style$1({
              stroke: stroke
          });
      }
  }

  class PolygonStyle extends FTStyle {
      /**
      * @classdesc 多边形类样式
      * @author daiyujie
      * @extends {FTStyle}
      * @constructs
      */
      constructor() {
          super();
          this._style = {
              fill: { color: 'rgba(0,255,0,0.4)' },
              stroke: {
                  color: '#FF0000',
                  width: 2
              }
          };
      }
      parse() {
          let fill, stroke = null;
          if (this._style.fill) {
              fill = new Fill(this._style.fill);
          }
          if (this._style.stroke) {
              stroke = new Stroke(this._style.stroke);
          }
          return new Style$1({
              fill: fill,
              stroke: stroke
          });
      }


  }

  /**
       * @classdesc 样式工厂。根据图元类型生成样式对象
       * @author daiyujie
   */
  class StyleFactory {
      /**
       * @param {PlotTypes} type 类型
       * @static
       */
      static createFTStyle(type) {
      
          switch (type) {
              case PlotTypes.MARKER:
                  return new MarkerStyle();
              case PlotTypes.POLYLINE:
                  return new PolyLineStyle();
              case PlotTypes.POLYGON:
                  return new PolygonStyle();
          }

          return new PolygonStyle();
      }
  }

  class FeatureOperator{
      /**
      * @classdesc 标绘图元操作类
      * 提供对标绘图元的封装操作.所有的地图点击事件的回调函数中均有该对象，可以通过该对象实现图元的基本操作
      * @constructs
      * @author daiyujie
      * @param {ol.Feature} feature 图元
      * @param {ol.layer.SourceLayer} layer 放置的layer
      * @param {number} zindex 当前图元的zindex
      */
      constructor(feature, layer, zindex) {
          /**
           * 名称
           * @type {String}
           */
          this.name = "未命名";
          /**
           * feature对象
           * @type {ol.Feature}
           */
          this.feature = feature;
          /**
          * 图层对象
          * @type {ol.layer.SourceLayer}
          */
          this.layer = layer;
          /**
          * 是否被销毁
          * @type {Boolean}
          */
          this.isDestoryed = false;
          /**
          * 唯一区分值
          * @type {String}
          */
          this.guid = guid(true);
          /**
           * 属性列表
           * @type {Object}
           */
          this.attrs = {};
          //--初始化样式
          this._initStyle(zindex);
          //--添加到图层
          this._addToLayer();
      }
      /**
       * @ignore
       * 初始化样式
       */
      _initStyle(zindex) {
          const ft_style = StyleFactory.createFTStyle(this.getType());
          const style = ft_style.parse();
          style.setZIndex(zindex);
          this.feature.setStyle(style);
          this.ft_style = ft_style;
      }
      /**
       * @ignore
       */
      _addToLayer() {
          this.layer.getSource().addFeature(this.feature);
      }
      /**
       * 设置图元样式。不同图元提供不同的属性设置。可以通过getStyle获取图元默认样式
       * @param {JSON} json_style
       */
      setStyle(json_style) {
          if (!json_style)
              return;
          const zIndex = this.getZIndex();
          this.ft_style.setStyle(json_style);
          const style = this.ft_style.parse();
          style.setZIndex(zIndex);
          this.feature.setStyle(style);
      }
      /**
      * 获取图元当前样式
      * @return {JSON} json_style
      */
      getStyle() {
          return this.ft_style.serialize();
      }
      /**
      * 获取图元当前ZIndex
      * @return {Number} zindex
      */
      getZIndex() {
          return this.feature.getStyle().getZIndex();
      }
      /**
      * 获取图元类型。点，线，面等。
      * @return {String} 类型
      */
      getType() {
          return this.feature.values_.geometry.type;
      }
      /**
      * 设置图元的名称
      * @param {String} str_name 名称
      */
      setName(str_name) {
          this.name = str_name;
      }
      /**
      * 设置图元的名称
      * @return {String}  名称
      */
      getName() {
          return this.name
      }
      /**
      * 设置图元不可被点击
      * @return {String}  名称
      */
      disable() {
          this.feature.set(Constants.SE_DISABLED, true);
      }
      /**
      * 设置图元可以被点击
      * @return {String}  名称
      */
      enable() {
          this.feature.set(Constants.SE_DISABLED, false);
      }
      /**
      * 获取图元自定义属性
      * @param {String} key 
      * @return {Object} value
      */
      getAttribute(key) {
          return this.attrs[key];
      }
      /**
       * 设置图元属性。相同的属性键值会被覆盖
     * @param {String} key 
     * @param {Object} value
     */
      setAttribute(key, value) {
          this.attrs[key] = value;
      }
      /**
       * 删除图元属性
       * @param {String} key 
       * @return {Boolean} 是否操作成功 
       */
      removeAttribute(key) {
          if (this.attrs[key]) {
              delete this.attrs[key];
              return true;
          }
          return false;
      }
      /**
     * 迭代自定义属性
     * @param {Function} fn  回调函数
     * @param {Object} scope 回调函数this值 可选
     */
      iteratorAttribute(fn, scope) {
          for (let sKey in this.attrs) {
              if (fn && typeof fn == 'function')
                  fn.call(scope, sKey);
          }
      }
      /**
      * 更新对象的控制点
      */
      setCoordinates(coordinates) {
          const plot = this.feature.values_.geometry;
          if (plot)
              plot.setPoints(coordinates);
      }
      /**
     * 销毁对象
     */
      destory() {
          this.isDestoryed = true;
          this.feature = null;
          this.layer = null;
          this.attrs = {};
          this.ft_style.destory();

      }
      /**
       * 序列化
       */
      serialize() {
          const plot = this.feature.values_.geometry;
          if (!plot)
              return {}

          return {
              config: {
                  cresda_flag: true,
                  z_index: this.getZIndex(),
                  disabled:!!this.feature.get(Constants.SE_DISABLED)
              },
              name: this.getName(),
              ext_attr: this.attrs,
              plotting_type: plot.type,
              geo_type: plot.geo_type,
              geo_data: {
                  coordinates: plot.getPoints(),
                  type: plot.geo_type
              },

              style: this.getStyle()
          }
      }
  }

  function swap(arr, index1, index2) {

      if (index1 >= arr.length || index2 >= arr.length)
          return null;

      arr[index1] = arr.splice(index2, 1, arr[index1])[0];
      return arr;
  }
  function moveUp(arr, $index) {
      if ($index == arr.length - 1) {
          return;
      }
      swap(arr, $index, $index + 1);
  }

  function moveDown(arr, $index) {
      if ($index == 0) {
          return;
      }
      swap(arr, $index, $index - 1);
  }
  function moveToTop(arr, $index) {
      if ($index == arr.length - 1) {
          return;
      }
      swap(arr, $index, arr.length - 1);
  }
  function moveToBottom(arr, $index) {
      if ($index == 0) {
          return;
      }
      swap(arr, $index, 0);
  }

  class PlottingLayer extends Observable {

  	/**
  	 * @classdesc 标绘主图层封装。后续可以有多个对象。目前就中心而言应该就一个对象
  	 * 与SEIE标绘服务进行对接，加载标绘服务，编辑标绘图元，保存标绘属性。是暴露出的唯一一个类。
  	 * @author daiyujie
  	 * @extends {ol.Observable}
  	 * @constructs
  	 * @param {ol.Map} map 地图对象
  	 * @param {Object} opts 初始化选项
  	 * @example <caption>加载标绘，绘制标绘，保存标绘</caption>
  	* //创建TrackingLay的工作可以由SEOL完成。逻辑也可在SEOL中封装
  	* const plottingLayer = new PlottingLayer(map);
  	* //--从服务器加载标绘
  	* plottingLayer.loadFromService('1735');
  	* //--绘制标绘
  	* plottingLayer.addFeature('polygon');
  	* //--监听绘制事件，从中取到FeatureOperator对象。进行一些操作
  	* plottingLayer.on('activate_feature', function (e) {
  		*     window.fo = e.feature_operator;
  		*     //--TODO
  		* })
  		* plottingLayer.on('deactivate_feature', function (e) {
  		*     window.fo = null;
  		*     //--TODO
  		* })
  	* //--设置选中图元样式
  	* fo.setStyle({"fill":{"color":"rgba(0,255,0,0.4)"},"stroke":{"color":"#FF0000","width":2}})
  	* //--设置属性
  	* fo.setAttribute('hellow','i am free');
  	* //--其余操作参考FeatureOperator类
  	*
  	* //--设置层级等关联操作通过PlottingLayer对象完成
  	* //--上移图元
  	* plottingLayer.moveDown(fo);
  	* //--其余操作参照api
  	* //--保存所有图元至服务器
  	* plottingLayer.saveToService('1735');
  	 */
  	constructor(map, opts) {
  		super();
  		/**
           * map对象
           * @type {ol.Map}
           */
  		this.map = map;

  		/**
           * 默认配置
  		 * @ignore
           * @type {Object}
           */
  		this.defaults = {

  		};
  		/**
           * 合并配置
  		 * @ignore
           * @type {Object}
           */
  		this.opts = {};
  		/**
           * 当前图层的所有图元操作对象
           * @type {Array<FeatureOperator>}
           */
  		this.feature_operators = [];
  		/**
           * 主显示图层
           * @type {ol.layer.SourceLayer}
           */
  		this.showLayer = null;
  		/**
           * 编辑工具类对象
           * @type {PlotEdit}
           */
  		this.plotEdit = null;
  		/**
           * 绘制工具类对象
           * @type {PlotDraw}
           */
  		this.plotDraw = null;

  		/**
           * 绘制提示图层
           * @type {ol.Overlay}
           */
  		this.help_overlay = null;
  		/**
           * 绘制提示图层元素。用以设置提示内容
           * @type {Element}
           */
  		this.help_overlay_ele = null;

  		/**
           * map绑定的事件钩子
  		 * @ignore
           * @type {Function}
           */
  		this._ls_mapclick = null;
  		//--合并地图选项
  		combineOpts(this.opts, this.defaults, opts);
  		//--创建layer
  		this.showLayer = this._createShowLayer();
  		//--创建编辑对象
  		this.plotEdit = new PlotEdit(map);
  		//--创建绘制对象
  		this.plotDraw = new PlotDraw(map);
  		//--绑定地图事件
  		this._bindListener();
  	}
  	/**
  	 * @ignore
  	 * 绑定地图事件
  	 */
  	_bindListener() {
  		this.plotDraw.on(FeatureEvent.DRAW_END, (e) => {
  			this._onDrawEnd(e);
  		});
  		//--试用移动端手势点击
  		this.plotDraw.on(DrawEvent$1.ADD_CONTROL_POINT, (e) => {
  			if (!this.help_overlay) {
  				this._createHelpOverlay();
  			}
  			this._setHelpOverlayState(e.drawstate);
  		});
  		//--试用pc端
  		this.plotDraw.on(DrawEvent$1.ADDING_MOUSE_MOVE, (e) => {
  			if (!this.help_overlay) {
  				this._createHelpOverlay();
  			}
  			this._setHelpOverlayState(e.drawstate);
  		});
  		this.plotEdit.on(FeatureEvent.ACTIVATE, (e) => {
  			this.dispatchEvent(new FeatureOperatorEvent(FeatureOperatorEvent.ACTIVATE, this._getFeatureOperator(e.feature, this.showLayer)));
  		});
  		this.plotEdit.on(FeatureEvent.DEACTIVATE, (e) => {
  			this.dispatchEvent(new FeatureOperatorEvent(FeatureOperatorEvent.DEACTIVATE, this._getFeatureOperator(e.feature, this.showLayer)));
  		});
  		this._ls_mapclick = this.map.on('click', (e) => {
  			if (!this.plotDraw || this.plotDraw.isDrawing()) {
  				return;
  			}
  			const feature = this.map.forEachFeatureAtPixel(e.pixel, (feature, layer) => {
  				return feature;
  			});


  			if (feature && !feature.get(Constants.SE_DISABLED)) {
  				// 开始编辑
  				this.plotEdit.activate(feature);

  			} else {
  				// 结束编辑
  				this.plotEdit.deactivate();
  			}
  		}).listener;
  	}
  	/**
  	 * @ignore
  	 * 移除地图绑定事件
  	 */
  	_unbindListener() {
  		this.plotDraw.un([DrawEvent$1.ADD_CONTROL_POINT, DrawEvent$1.ADDING_MOUSE_MOVE, FeatureEvent.DRAW_END]);
  		this.plotEdit.un([FeatureEvent.ACTIVATE, FeatureEvent.DEACTIVATE]);
  		if (this._ls_mapclick) {
  			this.map.un('click', this._ls_mapclick);
  			this._ls_mapclick = null;
  		}

  	}
  	/**
  	 * @ignore
  	 * 创建绘制提示图层
  	 */
  	_createHelpOverlay() {
  		if (this.help_overlay_ele) {
  			this.help_overlay_ele.parentNode.removeChild(this.help_overlay_ele);
  		}
  		this.help_overlay_ele = document.createElement('div');
  		this.help_overlay_ele.className = 'tooltip hidden se-tooltip';
  		this.help_overlay = new Overlay({
  			element: this.help_overlay_ele,
  			offset: [15, 0],
  			positioning: 'center-left'
  		});
  		this.map.addOverlay(this.help_overlay);
  	}
  	/**
  	 * @ignore
  	 * 移除绘制提示图层
  	 */
  	_removeHelpOverlay() {
  		if (this.help_overlay_ele) {
  			this.help_overlay_ele.parentNode.removeChild(this.help_overlay_ele);
  			this.help_overlay_ele = null;
  		}

  		if (this.help_overlay) {
  			this.map.removeOverlay(this.help_overlay);
  			this.help_overlay = null;
  		}
  	}
  	/**
  	 * @ignore
  	 * 创建layer
  	 */
  	_createShowLayer() {

  		const showlayer = new VectorLayer({
  			source: new VectorSource()
  		});
  		//showlayer.setStyle(drawStyle);
  		showlayer.setMap(this.map);
  		return showlayer
  	}
  	/**
  	 * @ignore
  	 */
  	_onDrawEnd(event) {
  		const feature = event.feature;

  		this._removeHelpOverlay();

  		this._addFeature(feature);
  		// 开始编辑
  		this.plotEdit.activate(feature);
  	}
  	_setHelpOverlayState(drawstate) {
  		if (!this.help_overlay_ele)
  			return;
  		const freehandmsg = '当前随意绘制。单击结束';
  		const msg1 = !drawstate.total ? '当前图元控制点无限制，' : `图元共${drawstate.total}个控制点，`;
  		const msg2 = `当前是第${drawstate.current}个,`;
  		const msg3 = !drawstate.total ? '双击结束绘制' : '点击继续绘制。';
  		this.help_overlay_ele.innerHTML = drawstate.freehand ? freehandmsg : msg1 + msg2 + msg3;
  		this.help_overlay.setPosition(drawstate.position);
  	}
  	/**
  	 * @ignore
  	 * 添加图元
  	 */
  	_addFeature(feature, zindex) {
  		const fo = this._getFeatureOperator(feature, this.showLayer, zindex || this.feature_operators.length + 1);
  		this.feature_operators.push(fo);
  		return fo;
  	}
  	/**
  	 * @ignore
  	 * 按照zindex排序图元操作对象数组
  	 */
  	_sortByZindex() {
  		this.feature_operators.sort((a, b) => {
  			return a.feature.getStyle().zIndex - b.feature.getStyle().zIndex;
  		});
  	}
  	/**
  	 * @ignore
  	 * 获取某个人图元操作对象位置
  	 */
  	_getFeatureOperatorIndex(feature_operator) {
  		for (let i = 0; i < this.feature_operators.length; i++) {
  			if (feature_operator.guid == this.feature_operators[i].guid) {
  				return i;
  			}
  		}
  	}
  	/**
  	 * @ignore
  	 * 重新计算图元index
  	 */
  	_resetZIndex() {
  		this.feature_operators.map((f, i) => {
  			const style = f.feature.getStyle().clone();
  			style.setZIndex(i + 1);
  			f.feature.setStyle(style);
  		});
  	}
  	/**
  	 * @ignore
  	 * 获取已有图元操作对象或者新建一个
  	 */
  	_getFeatureOperator(feature, vectorlayer, zindex) {

  		for (let i = 0; i < this.feature_operators.length; i++) {
  			const fo = this.feature_operators[i];
  			if (fo.feature == feature)
  				return fo;
  		}
  		return new FeatureOperator(feature, vectorlayer, zindex);
  	}
  	/**
  	 * @param {Number} service_id 需要加载的标绘服务id
  	 * @param {Function} callback 加载成功的回调
  	 * @param {Function} error 加载失败的回调
  	 * 从服务器加载一个标绘服务 
  	 */
  	loadFromService(service_id, callback, error) {

  		if (!service_id) {
  			error();
  			return;
  		}
  		//--清除所有图元
  		// this.clearFeatures();

  		// Ajax.getPlottingService(service_id, null, (res_service) => {
  		// 	const query_params = {
  		// 		service_id: service_id,
  		// 		projection: res_service.projection
  		// 	}
  		// 	Ajax.queryPlottingData(query_params, (res) => {
  		// 		if (!res.item_list || !res.item_list.length)
  		// 			return;
  		// 		res.item_list.map((item) => {
  		// 			if (!item.config.cresda_flag) {
  		// 				console.error('不支持非中心sdk标绘（openlayer）之外的标绘图元。')
  		// 				return undefined;
  		// 			}
  		// 			const plot = PlotFactory.createPlot(item.plotting_type, item.geo_data.coordinates);
  		// 			const feature = new Feature(plot);
  		// 			const fo = this._addFeature(feature, item.config.z_index);
  		// 			fo.attrs = deepcopy(item.ext_attr);
  		// 			fo.setStyle(item.style);
  		// 		})
  		// 		if (callback && typeof callback == 'function')
  		// 			callback();
  		// 	}, error)
  		// }, (e) => {
  		// 	console.error('加载标绘服务失败！')
  		// 	error();
  		// })
  	}
  	/**
  	 * @param {Number} service_id 需要保存的标绘服务id
  	 * @param {Function} callback 保存成功的回调
  	 * @param {Function} error 保存失败的回调
  	 * 保存标绘服务到服务器
  	 */
  	saveToService(service_id, callback, error) {
  		if (!service_id) {
  			error();
  			return;
  		}
  		// Ajax.clearPlottingServiceData(service_id, () => {
  		// 	const promises = [];
  		// 	this.feature_operators.map((fo) => {
  		// 		const d = fo.serialize();
  		// 		d.service_id = service_id;
  		// 		promises.push(new Promise((resove, reject) => {
  		// 			Ajax.createPlottingData(d, (r) => {
  		// 				resove();
  		// 			}, () => {
  		// 				reject('保存图元' + fo.getName() + '失败！')
  		// 			})
  		// 		}))

  		// 	})
  		// 	Promise.all(promises).then(() => {
  		// 		if (callback && typeof callback == 'function')
  		// 			callback(service_id);
  		// 	}).catch(e => {
  		// 		if (error && typeof error == 'function')
  		// 			error(e);
  		// 	})
  		// })
  	}
  	/**
  	 * @param {Number} type 类型
  	 * 添加一个标绘绘制图元
  	 */
  	addFeature(type) {
  		this.plotDraw.activate(type);
  	}
  	/**
  	 * @param {FeatureOperator} feature_operator 对象
  	 * 移除一个图元操作对象
  	 */
  	removeFeature(feature_operator) {
  		this.showLayer.getSource().removeFeature(feature_operator.feature);
  		this.plotEdit.deactivate();
  		const curIndex = this._getFeatureOperatorIndex(feature_operator);
  		feature_operator.destory();
  		this.feature_operators.splice(curIndex, 1);
  		this._sortByZindex();
  		this._resetZIndex();
  	}
  	/**
       * 清空图元
       */
  	clearFeatures(callback) {
  		this.plotEdit.deactivate();
  		this.feature_operators.map((fo) => {
  			this.showLayer.getSource().removeFeature(fo.feature);
  			fo.destory();
  		}, this);

  		this.feature_operators.splice(0, this.feature_operators.length);
  		return this;
  	}

  	/**
  	 * @param {FeatureOperator} feature_operator 对象
  	 * 上移一个图元
  	 */
  	moveUp(feature_operator) {
  		this._sortByZindex();
  		const curIndex = this._getFeatureOperatorIndex(feature_operator);
  		moveUp(this.feature_operators, curIndex);
  		this._resetZIndex();
  	}
  	/**
  	 * @param {FeatureOperator} feature_operator 对象
  	 * 下移一个图元
  	 */
  	moveDown(feature_operator) {
  		this._sortByZindex();
  		const curIndex = this._getFeatureOperatorIndex(feature_operator);
  		moveDown(this.feature_operators, curIndex);
  		this._resetZIndex();
  	}
  	/**
  	 * @param {FeatureOperator} feature_operator 对象
  	 * 置顶一个图元
  	 */
  	setToTop(feature_operator) {
  		this._sortByZindex();
  		const curIndex = this._getFeatureOperatorIndex(feature_operator);
  		moveToTop(this.feature_operators, curIndex);
  		this._resetZIndex();
  	}
  	/**
  	 * @param {FeatureOperator} feature_operator 对象
  	 * 置底一个图元
  	 */
  	setToBottom(feature_operator) {
  		this._sortByZindex();
  		const curIndex = this._getFeatureOperatorIndex(feature_operator);
  		moveToBottom(this.feature_operators, curIndex);
  		this._resetZIndex();
  	}
  	destory() {
  		//--清空图元
  		this.clearFeatures();
  		//--移除map
  		this.showLayer.setMap(null);
  		this.showLayer = null;
  		//--解绑事件
  		this._unbindListener();
  		//--移除编辑工具对象
  		this.plotEdit.deactivate();
  		this.plotEdit = null;
  		//--移除绘制工具对象
  		this.plotDraw.deactivate();
  		this.plotEdit = null;
  		//--移除帮助overlay
  		this.map.removeOverlay(this.help_overlay);
  		this.help_overlay = null;
  		this.help_overlay_ele = null;
  		this.map = null;
  	}
  }

  class TrackingLayer extends PlottingLayer {

  	/**
  	 * @classdesc 用来做轨迹图层的图层类。包含对轨迹的一些列操作。目前一个图层只能支持一条轨迹。后续可以提供拓展
  	 * @author daiyujie
  	 * @constructs
  	 * @extends {PlottingLayer}
  	 * @param {ol.Map} map 地图对象
  	 * @param {Object} opts 初始化选项
  	* @example <caption>创建轨迹图层，进行轨迹记录</caption>
  	* //创建TrackingLay的工作可以由SEOL完成。逻辑也可在SEOL中封装
  	* const trackingLayer = new TrackingLayer(map);
  	* //加载轨迹标绘
  	* trackingLayer.loadFromService('1735');
  	* //加载完之后，可以在这个图层进行标绘操作。也可以不进行，随业务逻辑控制
  	* trackingLayer.addFeature('polygon')
  	* //切换轨迹标绘
  	* trackingLayer.loadFromService('1738');
  	* //绘制一个轨迹（新建对象之后，不要调用loadFromService,直接调用绘制逻辑）
  	* //--开始轨迹
  	* trackingLayer.beginTrack(30,120);
  	* //--更新轨迹
  	* trackingLayer.updateTrack(31,121);
  	* //--结束轨迹
  	* trackingLayer.endTrack();
  	* //--保存到服务器
  	* trackingLayer.saveToService('1735');
  	* //--销毁对象
  	* trackingLayer.destory();
  	*/
  	constructor(map, opts) {
  		super(map, opts);
  		this.isTracking = false;
  		this.track_coordinates = [];
  	}
  	/**
  	 * 创建标注点
  	 * @ignore
  	 * @param {Number} lat 
  	 * @param {Number} lng 
  	 * @param {Boolean} isBegin 是否是开始标注
  	 */
  	_createMarkers(lat, lng, isBegin) {
  		const plot = PlotFactory.createPlot(PlotTypes.MARKER, [[lng, lat]]);
  		const feature = new Feature(plot);
  		feature.set(Constants.SE_DISABLED, true, true);
  		const fo = this._addFeature(feature, 1);
  		fo.attrs = {};
  		fo.setStyle({
  			"image": {
  				"icon": {
  					"src": isBegin ? "./images/marker-begin.png" : './images/marker-current.png',
  					"anchor": [0.5, 1],
  				}
  			}
  		});
  		return fo;
  	}
  	/**
  	 * 创建标绘线
  	 * @ignore
  	 * @param {Array<Array<Number>>} coordinates 
  	 */
  	_createLine(coordinates) {
  		const plot = PlotFactory.createPlot(PlotTypes.POLYLINE, coordinates);
  		const feature = new Feature(plot);
  		feature.set(Constants.SE_DISABLED, true, true);
  		const fo = this._addFeature(feature, 1);
  		fo.attrs = {};
  		return fo;
  	}
  	/**
  	 * 开始轨迹记录
  	 * @param {Number} lat 
  	 * @param {Number} lng 
  	 */
  	beginTrack(lat, lng) {
  		if (this.isTracking)
  			return;
  		this.isTracking = true;
  		this.fo_begin_points = this._createMarkers(lat, lng, true);
  		this.track_coordinates.push([lng, lat]);
  	}
  	/**
  	 * 更新记录点
  	 * @param {Number} lat 
  	 * @param {Number} lng 
  	 */
  	updateTrack(lat, lng) {
  		this.track_coordinates.push([lng, lat]);
  		if (this.track_coordinates.length < 2)
  			return;

  		if (!this.fo_end_points)
  			this.fo_end_points = this._createMarkers(lat, lng);
  		this.fo_end_points.setCoordinates([[lng, lat]]);

  		if (!this.fo_polyline) {
  			this.fo_polyline = this._createLine(this.track_coordinates);
  		}
  		this.fo_polyline.setCoordinates(this.track_coordinates);
  	}
  	/**
  	 * 结束轨迹记录
  	 * @param {Number} lat 
  	 * @param {Number} lng 
  	 */
  	endTrack() {
  		this.isTracking = false;
  	}
  	/**
  	 * 设置轨迹图层的属性
  	 * @param {String} key 
  	 * @param {Object} value 
  	 */
  	setAttribute(key, value) {
  		if (!this.fo_polyline)
  			return
  		this.fo_polyline.setAttribute(key, value);
  		return true;
  	}
  	/**
  	 * 获取轨迹属性
  	 * @param {String} key 
  	 */
  	getAttribute(key) {
  		if (!this.fo_polyline)
  			return null;
  		return this.fo_polyline.getAttribute(key)
  	}
  	/**
  	 * @override
  	 */
  	destory() {
  		super.destory();
  		this.isTracking = false;
  		this.track_coordinates = [];
  	}
  }

  var index = {
  	PlottingLayer,
  	TrackingLayer,
  	PlotTypes,
  	FeatureOperatorEvent,
  	OL
  };

  return index;

}());
